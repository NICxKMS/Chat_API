// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.4
// source: models.proto

package proto

import (
	"context"
	"fmt"
	"google.golang.org/grpc"
)

// Basic Protocol Buffer generated structs for our service
// In a real implementation, this would be generated from the .proto file using protoc

// Model represents a single LLM model
type Model struct {
	Id              string            `json:"id,omitempty"`
	Name            string            `json:"name,omitempty"`
	ContextSize     int32             `json:"context_size,omitempty"`
	MaxTokens       int32             `json:"max_tokens,omitempty"`
	Provider        string            `json:"provider,omitempty"`
	DisplayName     string            `json:"display_name,omitempty"`
	Description     string            `json:"description,omitempty"`
	CostPerToken    float64           `json:"cost_per_token,omitempty"`
	Capabilities    []string          `json:"capabilities,omitempty"`
	Family          string            `json:"family,omitempty"`
	Type            string            `json:"type,omitempty"`
	Series          string            `json:"series,omitempty"`
	Variant         string            `json:"variant,omitempty"`
	IsDefault       bool              `json:"is_default,omitempty"`
	IsMultimodal    bool              `json:"is_multimodal,omitempty"`
	IsExperimental  bool              `json:"is_experimental,omitempty"`
	Version         string            `json:"version,omitempty"`
	Metadata        map[string]string `json:"metadata,omitempty"`
}

// LoadedModelList represents a list of models to be classified
type LoadedModelList struct {
	Models          []*Model `json:"models,omitempty"`
	DefaultProvider string   `json:"default_provider,omitempty"`
	DefaultModel    string   `json:"default_model,omitempty"`
}

// ClassificationProperty represents a property by which models can be classified
type ClassificationProperty struct {
	Name           string   `json:"name,omitempty"`
	DisplayName    string   `json:"display_name,omitempty"`
	Description    string   `json:"description,omitempty"`
	PossibleValues []string `json:"possible_values,omitempty"`
}

// ClassifiedModelGroup represents a group of models classified by a property
type ClassifiedModelGroup struct {
	PropertyName  string   `json:"property_name,omitempty"`
	PropertyValue string   `json:"property_value,omitempty"`
	Models        []*Model `json:"models,omitempty"`
}

// ClassificationCriteria defines how models should be classified
type ClassificationCriteria struct {
	Properties         []string `json:"properties,omitempty"`
	IncludeExperimental bool     `json:"include_experimental,omitempty"`
	IncludeDeprecated  bool     `json:"include_deprecated,omitempty"`
	MinContextSize     int32    `json:"min_context_size,omitempty"`
}

// ClassifiedModelResponse represents the response from the classification server
type ClassifiedModelResponse struct {
	ClassifiedGroups    []*ClassifiedModelGroup    `json:"classified_groups,omitempty"`
	AvailableProperties []*ClassificationProperty `json:"available_properties,omitempty"`
	ErrorMessage        string                     `json:"error_message,omitempty"`
}

// ModelClassificationServiceServer is the server API for ModelClassificationService service.
type ModelClassificationServiceServer interface {
	// Sends a list of models to be classified
	ClassifyModels(context.Context, *LoadedModelList) (*ClassifiedModelResponse, error)
	// Classifies models with specific criteria
	ClassifyModelsWithCriteria(context.Context, *ClassificationCriteria) (*ClassifiedModelResponse, error)
}

// UnimplementedModelClassificationServiceServer can be embedded to have forward compatible implementations.
type UnimplementedModelClassificationServiceServer struct {
}

func (*UnimplementedModelClassificationServiceServer) ClassifyModels(ctx context.Context, req *LoadedModelList) (*ClassifiedModelResponse, error) {
	return nil, fmt.Errorf("method ClassifyModels not implemented")
}

func (*UnimplementedModelClassificationServiceServer) ClassifyModelsWithCriteria(ctx context.Context, req *ClassificationCriteria) (*ClassifiedModelResponse, error) {
	return nil, fmt.Errorf("method ClassifyModelsWithCriteria not implemented")
}

// RegisterModelClassificationServiceServer registers the ModelClassificationServiceServer implementation with the gRPC server
func RegisterModelClassificationServiceServer(s *grpc.Server, srv ModelClassificationServiceServer) {
	s.RegisterService(&_ModelClassificationService_serviceDesc, srv)
}

// _ModelClassificationService_serviceDesc is the gRPC service descriptor for ModelClassificationService.
var _ModelClassificationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "modelservice.ModelClassificationService",
	HandlerType: (*ModelClassificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClassifyModels",
			Handler:    _ModelClassificationService_ClassifyModels_Handler,
		},
		{
			MethodName: "ClassifyModelsWithCriteria",
			Handler:    _ModelClassificationService_ClassifyModelsWithCriteria_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "models.proto",
}

// _ModelClassificationService_ClassifyModels_Handler handles the ClassifyModels method
func _ModelClassificationService_ClassifyModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadedModelList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelClassificationServiceServer).ClassifyModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modelservice.ModelClassificationService/ClassifyModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelClassificationServiceServer).ClassifyModels(ctx, req.(*LoadedModelList))
	}
	return interceptor(ctx, in, info, handler)
}

// _ModelClassificationService_ClassifyModelsWithCriteria_Handler handles the ClassifyModelsWithCriteria method
func _ModelClassificationService_ClassifyModelsWithCriteria_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassificationCriteria)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelClassificationServiceServer).ClassifyModelsWithCriteria(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modelservice.ModelClassificationService/ClassifyModelsWithCriteria",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelClassificationServiceServer).ClassifyModelsWithCriteria(ctx, req.(*ClassificationCriteria))
	}
	return interceptor(ctx, in, info, handler)
} 