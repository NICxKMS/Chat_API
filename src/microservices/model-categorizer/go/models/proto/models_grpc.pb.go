// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: models/proto/models.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ModelClassificationService_ClassifyModels_FullMethodName             = "/modelservice.ModelClassificationService/ClassifyModels"
	ModelClassificationService_ClassifyModelsWithCriteria_FullMethodName = "/modelservice.ModelClassificationService/ClassifyModelsWithCriteria"
)

// ModelClassificationServiceClient is the client API for ModelClassificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The ModelClassificationService definition
type ModelClassificationServiceClient interface {
	// Classify a list of models
	ClassifyModels(ctx context.Context, in *LoadedModelList, opts ...grpc.CallOption) (*ClassifiedModelResponse, error)
	// Classify models with criteria
	// Use hierarchical=true in ClassificationCriteria to get hierarchical grouping
	ClassifyModelsWithCriteria(ctx context.Context, in *ClassificationCriteria, opts ...grpc.CallOption) (*ClassifiedModelResponse, error)
}

type modelClassificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModelClassificationServiceClient(cc grpc.ClientConnInterface) ModelClassificationServiceClient {
	return &modelClassificationServiceClient{cc}
}

func (c *modelClassificationServiceClient) ClassifyModels(ctx context.Context, in *LoadedModelList, opts ...grpc.CallOption) (*ClassifiedModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClassifiedModelResponse)
	err := c.cc.Invoke(ctx, ModelClassificationService_ClassifyModels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelClassificationServiceClient) ClassifyModelsWithCriteria(ctx context.Context, in *ClassificationCriteria, opts ...grpc.CallOption) (*ClassifiedModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClassifiedModelResponse)
	err := c.cc.Invoke(ctx, ModelClassificationService_ClassifyModelsWithCriteria_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModelClassificationServiceServer is the server API for ModelClassificationService service.
// All implementations must embed UnimplementedModelClassificationServiceServer
// for forward compatibility.
//
// The ModelClassificationService definition
type ModelClassificationServiceServer interface {
	// Classify a list of models
	ClassifyModels(context.Context, *LoadedModelList) (*ClassifiedModelResponse, error)
	// Classify models with criteria
	// Use hierarchical=true in ClassificationCriteria to get hierarchical grouping
	ClassifyModelsWithCriteria(context.Context, *ClassificationCriteria) (*ClassifiedModelResponse, error)
	mustEmbedUnimplementedModelClassificationServiceServer()
}

// UnimplementedModelClassificationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedModelClassificationServiceServer struct{}

func (UnimplementedModelClassificationServiceServer) ClassifyModels(context.Context, *LoadedModelList) (*ClassifiedModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassifyModels not implemented")
}
func (UnimplementedModelClassificationServiceServer) ClassifyModelsWithCriteria(context.Context, *ClassificationCriteria) (*ClassifiedModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassifyModelsWithCriteria not implemented")
}
func (UnimplementedModelClassificationServiceServer) mustEmbedUnimplementedModelClassificationServiceServer() {
}
func (UnimplementedModelClassificationServiceServer) testEmbeddedByValue() {}

// UnsafeModelClassificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelClassificationServiceServer will
// result in compilation errors.
type UnsafeModelClassificationServiceServer interface {
	mustEmbedUnimplementedModelClassificationServiceServer()
}

func RegisterModelClassificationServiceServer(s grpc.ServiceRegistrar, srv ModelClassificationServiceServer) {
	// If the following call pancis, it indicates UnimplementedModelClassificationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ModelClassificationService_ServiceDesc, srv)
}

func _ModelClassificationService_ClassifyModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadedModelList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelClassificationServiceServer).ClassifyModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelClassificationService_ClassifyModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelClassificationServiceServer).ClassifyModels(ctx, req.(*LoadedModelList))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelClassificationService_ClassifyModelsWithCriteria_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassificationCriteria)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelClassificationServiceServer).ClassifyModelsWithCriteria(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelClassificationService_ClassifyModelsWithCriteria_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelClassificationServiceServer).ClassifyModelsWithCriteria(ctx, req.(*ClassificationCriteria))
	}
	return interceptor(ctx, in, info, handler)
}

// ModelClassificationService_ServiceDesc is the grpc.ServiceDesc for ModelClassificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModelClassificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "modelservice.ModelClassificationService",
	HandlerType: (*ModelClassificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClassifyModels",
			Handler:    _ModelClassificationService_ClassifyModels_Handler,
		},
		{
			MethodName: "ClassifyModelsWithCriteria",
			Handler:    _ModelClassificationService_ClassifyModelsWithCriteria_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "models/proto/models.proto",
}
