{"version":3,"file":"static/js/vendors-node_modules_vfile_lib_index_js.39771dd749.chunk.v1_9_5.js","mappings":";yIAOAA,EAAOC,QAAU,SAAmBC,GAClC,OAAc,MAAPA,GAAkC,MAAnBA,EAAIC,aACY,mBAA7BD,EAAIC,YAAYC,UAA2BF,EAAIC,YAAYC,SAASF,EAC/E,2ECEO,MAAMG,UAAqBC,MAmBhCH,WAAAA,CAAYI,EAAQC,EAAOC,GAEzB,MAAMC,EAAQ,CAAC,KAAM,MAErB,IAAIC,EAAW,CAEbC,MAAO,CAACC,KAAM,KAAMC,OAAQ,MAE5BC,IAAK,CAACF,KAAM,KAAMC,OAAQ,OAU5B,GAPAE,QAEqB,iBAAVR,IACTC,EAASD,EACTA,OAAQS,GAGY,iBAAXR,EAAqB,CAC9B,MAAMS,EAAQT,EAAOU,QAAQ,MAEd,IAAXD,EACFR,EAAM,GAAKD,GAEXC,EAAM,GAAKD,EAAOW,MAAM,EAAGF,GAC3BR,EAAM,GAAKD,EAAOW,MAAMF,EAAQ,GAEpC,CAEIV,IAEE,SAAUA,GAAS,aAAcA,EAC/BA,EAAMG,WAGRA,EAAWH,EAAMG,UAIZ,UAAWH,GAAS,QAASA,EAGpCG,EAAWH,GAGJ,SAAUA,GAAS,WAAYA,KAEtCG,EAASC,MAAQJ,IAWrBa,KAAKC,MAAOC,EAAAA,EAAAA,GAAkBf,IAAU,MAOxCa,KAAKG,QAA4B,iBAAXjB,EAAsBA,EAAOiB,QAAUjB,EAU7Dc,KAAKI,MAAQ,GAES,iBAAXlB,GAAuBA,EAAOkB,QACvCJ,KAAKI,MAAQlB,EAAOkB,OAUtBJ,KAAKd,OAASc,KAAKG,QAYnBH,KAAKK,MAOLL,KAAKR,KAAOF,EAASC,MAAMC,KAO3BQ,KAAKP,OAASH,EAASC,MAAME,OAO7BO,KAAKV,SAAWA,EAOhBU,KAAKM,OAASjB,EAAM,GAOpBW,KAAKO,OAASlB,EAAM,GAOpBW,KAAKQ,KAYLR,KAAKS,OAOLT,KAAKU,SAULV,KAAKW,IAOLX,KAAKY,IAEP,EAGF5B,EAAa6B,UAAUL,KAAO,GAC9BxB,EAAa6B,UAAUZ,KAAO,GAC9BjB,EAAa6B,UAAU3B,OAAS,GAChCF,EAAa6B,UAAUV,QAAU,GACjCnB,EAAa6B,UAAUT,MAAQ,GAC/BpB,EAAa6B,UAAUR,MAAQ,KAC/BrB,EAAa6B,UAAUpB,OAAS,KAChCT,EAAa6B,UAAUrB,KAAO,KAC9BR,EAAa6B,UAAUP,OAAS,KAChCtB,EAAa6B,UAAUN,OAAS,KAChCvB,EAAa6B,UAAUvB,SAAW,KC7K3B,MAAMwB,EAcb,SAAkBA,EAAMC,GACtB,QAAYnB,IAARmB,GAAoC,iBAARA,EAC9B,MAAM,IAAIC,UAAU,mCAGtBC,EAAWH,GACX,IAIII,EAJA3B,EAAQ,EACRG,GAAO,EACPG,EAAQiB,EAAKK,OAIjB,QAAYvB,IAARmB,GAAoC,IAAfA,EAAII,QAAgBJ,EAAII,OAASL,EAAKK,OAAQ,CACrE,KAAOtB,KACL,GAA+B,KAA3BiB,EAAKM,WAAWvB,IAGlB,GAAIqB,EAAc,CAChB3B,EAAQM,EAAQ,EAChB,KACF,OACSH,EAAM,IAGfwB,GAAe,EACfxB,EAAMG,EAAQ,GAIlB,OAAOH,EAAM,EAAI,GAAKoB,EAAKf,MAAMR,EAAOG,EAC1C,CAEA,GAAIqB,IAAQD,EACV,MAAO,GAGT,IAAIO,GAAoB,EACpBC,EAAWP,EAAII,OAAS,EAE5B,KAAOtB,KACL,GAA+B,KAA3BiB,EAAKM,WAAWvB,IAGlB,GAAIqB,EAAc,CAChB3B,EAAQM,EAAQ,EAChB,KACF,OAEIwB,EAAmB,IAGrBH,GAAe,EACfG,EAAmBxB,EAAQ,GAGzByB,GAAY,IAEVR,EAAKM,WAAWvB,KAAWkB,EAAIK,WAAWE,KACxCA,EAAW,IAGb5B,EAAMG,IAKRyB,GAAY,EACZ5B,EAAM2B,IAYd,OANI9B,IAAUG,EACZA,EAAM2B,EACG3B,EAAM,IACfA,EAAMoB,EAAKK,QAGNL,EAAKf,MAAMR,EAAOG,EAC3B,EA9FaoB,EAwGb,SAAiBA,GAGf,GAFAG,EAAWH,GAES,IAAhBA,EAAKK,OACP,MAAO,IAGT,IAGII,EAHA7B,GAAO,EACPG,EAAQiB,EAAKK,OAKjB,OAAStB,GACP,GAA+B,KAA3BiB,EAAKM,WAAWvB,IAClB,GAAI0B,EAAgB,CAClB7B,EAAMG,EACN,KACF,OACU0B,IAEVA,GAAiB,GAIrB,OAAO7B,EAAM,EACc,KAAvBoB,EAAKM,WAAW,GACd,IACA,IACM,IAAR1B,GAAoC,KAAvBoB,EAAKM,WAAW,GAC7B,KACAN,EAAKf,MAAM,EAAGL,EACpB,EAxIaoB,EAkJb,SAAiBA,GACfG,EAAWH,GAEX,IASIS,EATA1B,EAAQiB,EAAKK,OAEbzB,GAAO,EACP8B,EAAY,EACZC,GAAY,EAGZC,EAAc,EAIlB,KAAO7B,KAAS,CACd,MAAM8B,EAAOb,EAAKM,WAAWvB,GAE7B,GAAa,KAAT8B,EAWAjC,EAAM,IAGR6B,GAAiB,EACjB7B,EAAMG,EAAQ,GAGH,KAAT8B,EAEEF,EAAW,EACbA,EAAW5B,EACc,IAAhB6B,IACTA,EAAc,GAEPD,GAAY,IAGrBC,GAAe,QAzBf,GAAIH,EAAgB,CAClBC,EAAY3B,EAAQ,EACpB,KACF,CAwBJ,CAEA,OACE4B,EAAW,GACX/B,EAAM,GAEU,IAAhBgC,GAEiB,IAAhBA,GAAqBD,IAAa/B,EAAM,GAAK+B,IAAaD,EAAY,EAEhE,GAGFV,EAAKf,MAAM0B,EAAU/B,EAC9B,EA/MaoB,EAyNb,WACE,IAEIc,EAFA/B,GAAS,EAEH,QAAAgC,EAAAC,UAAAX,OAHKY,EAAQ,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAARF,EAAQE,GAAAH,UAAAG,GAKvB,OAASpC,EAAQkC,EAASZ,QACxBF,EAAWc,EAASlC,IAEhBkC,EAASlC,KACX+B,OACahC,IAAXgC,EAAuBG,EAASlC,GAAS+B,EAAS,IAAMG,EAASlC,IAIvE,YAAkBD,IAAXgC,EAAuB,IAahC,SAAmBd,GACjBG,EAAWH,GAEX,MAAMoB,EAAkC,KAAvBpB,EAAKM,WAAW,GAGjC,IAAIe,EAuBN,SAAyBrB,EAAMsB,GAC7B,IAMIT,EAEAU,EARAC,EAAS,GACTC,EAAoB,EACpBC,GAAa,EACbC,EAAO,EACP5C,GAAS,EAMb,OAASA,GAASiB,EAAKK,QAAQ,CAC7B,GAAItB,EAAQiB,EAAKK,OACfQ,EAAOb,EAAKM,WAAWvB,OAClB,IAAa,KAAT8B,EACT,MAEAA,EAAO,EACT,CAEA,GAAa,KAATA,EAAuB,CACzB,GAAIa,IAAc3C,EAAQ,GAAc,IAAT4C,QAExB,GAAID,IAAc3C,EAAQ,GAAc,IAAT4C,EAAY,CAChD,GACEH,EAAOnB,OAAS,GACM,IAAtBoB,GACyC,KAAzCD,EAAOlB,WAAWkB,EAAOnB,OAAS,IACO,KAAzCmB,EAAOlB,WAAWkB,EAAOnB,OAAS,GAElC,GAAImB,EAAOnB,OAAS,GAGlB,GAFAkB,EAAiBC,EAAOI,YAAY,KAEhCL,IAAmBC,EAAOnB,OAAS,EAAG,CACpCkB,EAAiB,GACnBC,EAAS,GACTC,EAAoB,IAEpBD,EAASA,EAAOvC,MAAM,EAAGsC,GACzBE,EAAoBD,EAAOnB,OAAS,EAAImB,EAAOI,YAAY,MAG7DF,EAAY3C,EACZ4C,EAAO,EACP,QACF,OACK,GAAIH,EAAOnB,OAAS,EAAG,CAC5BmB,EAAS,GACTC,EAAoB,EACpBC,EAAY3C,EACZ4C,EAAO,EACP,QACF,CAGEL,IACFE,EAASA,EAAOnB,OAAS,EAAImB,EAAS,MAAQ,KAC9CC,EAAoB,EAExB,MACMD,EAAOnB,OAAS,EAClBmB,GAAU,IAAMxB,EAAKf,MAAMyC,EAAY,EAAG3C,GAE1CyC,EAASxB,EAAKf,MAAMyC,EAAY,EAAG3C,GAGrC0C,EAAoB1C,EAAQ2C,EAAY,EAG1CA,EAAY3C,EACZ4C,EAAO,CACT,MAAoB,KAATd,GAAyBc,GAAQ,EAC1CA,IAEAA,GAAQ,CAEZ,CAEA,OAAOH,CACT,CAtGcK,CAAgB7B,GAAOoB,GAUnC,OARqB,IAAjBC,EAAMhB,QAAiBe,IACzBC,EAAQ,KAGNA,EAAMhB,OAAS,GAA0C,KAArCL,EAAKM,WAAWN,EAAKK,OAAS,KACpDgB,GAAS,KAGJD,EAAW,IAAMC,EAAQA,CAClC,CA9BsCS,CAAUhB,EAChD,EAxOad,EAA+C,IA0W5D,SAASG,EAAWH,GAClB,GAAoB,iBAATA,EACT,MAAM,IAAIE,UACR,mCAAqC6B,KAAKC,UAAUhC,GAG1D,CChaO,MAAMiC,EAEb,WACE,MAAO,GACT,ECoBO,SAASC,EAAMC,GACpB,OACoB,OAAlBA,GACyB,iBAAlBA,GAEPA,EAAcC,MAEdD,EAAc7D,MAElB,CC8DA,MAAM+D,EAAQ,CAAC,UAAW,OAAQ,WAAY,OAAQ,UAAW,WAE1D,MAAMC,EAuBXtE,WAAAA,CAAYqD,GAEV,IAAIkB,EAKFA,EAHGlB,EAEuB,iBAAVA,GAoYtB,SAAgBA,GACd,OAAOmB,EAAWnB,EACpB,CAtY4CoB,CAAOpB,GACnC,CAACA,SACFa,EAAMb,GACL,CAACrB,KAAMqB,GAEPA,EANA,CAAC,EAiBbnC,KAAKwD,KAAO,CAAC,EAObxD,KAAKyD,SAAW,GAShBzD,KAAK0D,QAAU,GAOf1D,KAAK2D,IAAMZ,IAQX/C,KAAKmC,MAYLnC,KAAK4D,OAUL5D,KAAKsC,OAULtC,KAAK6D,IAIL,IAkBIC,EAlBAjE,GAAS,EAEb,OAASA,EAAQsD,EAAMhC,QAAQ,CAC7B,MAAM2C,EAAOX,EAAMtD,GAKjBiE,KAAQT,QACUzD,IAAlByD,EAAQS,IACU,OAAlBT,EAAQS,KAGR9D,KAAK8D,GAAiB,YAATA,EAAqB,IAAIT,EAAQS,IAAST,EAAQS,GAEnE,CAMA,IAAKA,KAAQT,EAENF,EAAMY,SAASD,KAElB9D,KAAK8D,GAAQT,EAAQS,GAG3B,CAOA,QAAIhD,GACF,OAAOd,KAAK0D,QAAQ1D,KAAK0D,QAAQvC,OAAS,EAC5C,CAWA,QAAIL,CAAKA,GACHkC,EAAMlC,KACRA,EC1PC,SAAmBA,GACxB,GAAoB,iBAATA,EACTA,EAAO,IAAIkD,IAAIlD,QACV,IAAKkC,EAAMlC,GAAO,CAEvB,MAAMmD,EAAQ,IAAIjD,UAChB,+EACEF,EACA,KAGJ,MADAmD,EAAMtC,KAAO,uBACPsC,CACR,CAEA,GAAsB,UAAlBnD,EAAKoD,SAAsB,CAE7B,MAAMD,EAAQ,IAAIjD,UAAU,kCAE5B,MADAiD,EAAMtC,KAAO,yBACPsC,CACR,CAEA,OAWF,SAA6BtD,GAC3B,GAAqB,KAAjBA,EAAIwD,SAAiB,CAEvB,MAAMF,EAAQ,IAAIjD,UAChB,wDAGF,MADAiD,EAAMtC,KAAO,4BACPsC,CACR,CAEA,MAAMG,EAAWzD,EAAIyD,SACrB,IAAIvE,GAAS,EAEb,OAASA,EAAQuE,EAASjD,QACxB,GACiC,KAA/BiD,EAAShD,WAAWvB,IACe,KAAnCuE,EAAShD,WAAWvB,EAAQ,GAC5B,CACA,MAAMwE,EAAQD,EAAShD,WAAWvB,EAAQ,GAC1C,GAAc,KAAVwE,GAAoC,MAAVA,EAAyB,CAErD,MAAMJ,EAAQ,IAAIjD,UAChB,uDAGF,MADAiD,EAAMtC,KAAO,4BACPsC,CACR,CACF,CAGF,OAAOK,mBAAmBF,EAC5B,CA1CSG,CAAoBzD,EAC7B,CDoOa0D,CAAU1D,IAGnB2D,EAAe3D,EAAM,QAEjBd,KAAKc,OAASA,GAChBd,KAAK0D,QAAQgB,KAAK5D,EAEtB,CAKA,WAAI6D,GACF,MAA4B,iBAAd3E,KAAKc,KAAoBA,EAAad,KAAKc,WAAQlB,CACnE,CAOA,WAAI+E,CAAQA,GACV1D,EAAWjB,KAAK4E,SAAU,WAC1B5E,KAAKc,KAAOA,EAAU6D,GAAW,GAAI3E,KAAK4E,SAC5C,CAKA,YAAIA,GACF,MAA4B,iBAAd5E,KAAKc,KAAoBA,EAAcd,KAAKc,WAAQlB,CACpE,CASA,YAAIgF,CAASA,GACXH,EAAeG,EAAU,YACzBC,EAAWD,EAAU,YACrB5E,KAAKc,KAAOA,EAAUd,KAAK2E,SAAW,GAAIC,EAC5C,CAKA,WAAIE,GACF,MAA4B,iBAAd9E,KAAKc,KAAoBA,EAAad,KAAKc,WAAQlB,CACnE,CASA,WAAIkF,CAAQA,GAIV,GAHAD,EAAWC,EAAS,WACpB7D,EAAWjB,KAAK2E,QAAS,WAErBG,EAAS,CACX,GAA8B,KAA1BA,EAAQ1D,WAAW,GACrB,MAAM,IAAInC,MAAM,iCAGlB,GAAI6F,EAAQf,SAAS,IAAK,GACxB,MAAM,IAAI9E,MAAM,yCAEpB,CAEAe,KAAKc,KAAOA,EAAUd,KAAK2E,QAAS3E,KAAK+E,MAAQD,GAAW,IAC9D,CAKA,QAAIC,GACF,MAA4B,iBAAd/E,KAAKc,KACfA,EAAcd,KAAKc,KAAMd,KAAK8E,cAC9BlF,CACN,CASA,QAAImF,CAAKA,GACPN,EAAeM,EAAM,QACrBF,EAAWE,EAAM,QACjB/E,KAAKc,KAAOA,EAAUd,KAAK2E,SAAW,GAAII,GAAQ/E,KAAK8E,SAAW,IACpE,CAWAE,QAAAA,CAASC,GACP,OAAQjF,KAAKmC,OAAS,IAAI6C,SAASC,QAAYrF,EACjD,CAkBAO,OAAAA,CAAQjB,EAAQC,EAAOC,GACrB,MAAMe,EAAU,IAAInB,EAAaE,EAAQC,EAAOC,GAWhD,OATIY,KAAKc,OACPX,EAAQF,KAAOD,KAAKc,KAAO,IAAMX,EAAQF,KACzCE,EAAQK,KAAOR,KAAKc,MAGtBX,EAAQE,OAAQ,EAEhBL,KAAKyD,SAASiB,KAAKvE,GAEZA,CACT,CAkBA+E,IAAAA,CAAKhG,EAAQC,EAAOC,GAClB,MAAMe,EAAUH,KAAKG,QAAQjB,EAAQC,EAAOC,GAI5C,OAFAe,EAAQE,MAAQ,KAETF,CACT,CAsBAgF,IAAAA,CAAKjG,EAAQC,EAAOC,GAClB,MAAMe,EAAUH,KAAKG,QAAQjB,EAAQC,EAAOC,GAI5C,MAFAe,EAAQE,OAAQ,EAEVF,CACR,EAaF,SAAS0E,EAAWO,EAAMnF,GACxB,GAAImF,GAAQA,EAAKrB,SAASjD,GACxB,MAAM,IAAI7B,MACR,IAAMgB,EAAO,uCAAyCa,EAAW,IAGvE,CAYA,SAAS2D,EAAeW,EAAMnF,GAC5B,IAAKmF,EACH,MAAM,IAAInG,MAAM,IAAMgB,EAAO,oBAEjC,CAYA,SAASgB,EAAWH,EAAMb,GACxB,IAAKa,EACH,MAAM,IAAI7B,MAAM,YAAcgB,EAAO,kCAEzC","sources":["../node_modules/vfile/node_modules/is-buffer/index.js","../node_modules/vfile/node_modules/vfile-message/lib/index.js","../node_modules/vfile/lib/minpath.browser.js","../node_modules/vfile/lib/minproc.browser.js","../node_modules/vfile/lib/minurl.shared.js","../node_modules/vfile/lib/index.js","../node_modules/vfile/lib/minurl.browser.js"],"sourcesContent":["/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   *\n   *   > 👉 **Note**: you should use markdown.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // To do: next major: expose `undefined` everywhere instead of `null`.\n  constructor(reason, place, origin) {\n    /** @type {[string | null, string | null]} */\n    const parts = [null, null]\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {line: null, column: null},\n      // @ts-expect-error: \"\n      end: {line: null, column: null}\n    }\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = undefined\n    }\n\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          // To do: next major: deep clone.\n          // @ts-expect-error: looks like a position.\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-expect-error: looks like a position.\n        // To do: next major: deep clone.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // To do: next major: deep clone.\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`.\n    /**\n     * Serialized positional info of error.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(place) || '1:1'\n\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = typeof reason === 'object' ? reason.message : reason\n\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack = ''\n\n    if (typeof reason === 'object' && reason.stack) {\n      this.stack = reason.stack\n    }\n\n    /**\n     * Reason for message.\n     *\n     * > 👉 **Note**: you should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * State of problem.\n     *\n     * * `true` — marks associated file as no longer processable (error)\n     * * `false` — necessitates a (potential) change (warning)\n     * * `null | undefined` — for things that might not need changing (info)\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | null}\n     */\n    this.line = position.start.line\n\n    /**\n     * Starting column of error.\n     *\n     * @type {number | null}\n     */\n    this.column = position.start.column\n\n    /**\n     * Full unist position.\n     *\n     * @type {Position | null}\n     */\n    this.position = position\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | null}\n     */\n    this.source = parts[0]\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | null}\n     */\n    this.ruleId = parts[1]\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | null}\n     */\n    this.file\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | null}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | null}\n     */\n    this.expected\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | null}\n     */\n    this.url\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | null}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.charCodeAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.charCodeAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.charCodeAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * Check if `fileUrlOrPath` looks like a URL.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nexport function isUrl(fileUrlOrPath) {\n  return (\n    fileUrlOrPath !== null &&\n    typeof fileUrlOrPath === 'object' &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.href &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.origin\n  )\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {Record<string, unknown> & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'base64url' | 'latin1' | 'binary' | 'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *\n *   This is a copy of the types from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Options | URL | Value | VFile} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {Value | null | undefined} [value]\n *   Set `value`.\n * @property {string | null | undefined} [cwd]\n *   Set `cwd`.\n * @property {Array<string> | null | undefined} [history]\n *   Set `history`.\n * @property {URL | string | null | undefined} [path]\n *   Set `path`.\n * @property {string | null | undefined} [basename]\n *   Set `basename`.\n * @property {string | null | undefined} [stem]\n *   Set `stem`.\n * @property {string | null | undefined} [extname]\n *   Set `extname`.\n * @property {string | null | undefined} [dirname]\n *   Set `dirname`.\n * @property {Data | null | undefined} [data]\n *   Set `data`.\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template {ReporterSettings} Settings\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport bufferLike from 'is-buffer'\nimport {VFileMessage} from 'vfile-message'\nimport {path} from './minpath.js'\nimport {proc} from './minproc.js'\nimport {urlToPath, isUrl} from './minurl.js'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n *\n * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}\n */\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Buffer` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (typeof value === 'string' || buffer(value)) {\n      options = {value}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else {\n      options = value\n    }\n\n    /**\n     * Place to store custom information (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * List of filepaths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {string | URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Buffer`\n   *   (default: `'utf8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    return (this.value || '').toString(encoding || undefined)\n  }\n\n  /**\n   * Create a warning message associated with the file.\n   *\n   * Its `fatal` is set to `false` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin)\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Create an info message associated with the file.\n   *\n   * Its `fatal` is set to `null` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = null\n\n    return message\n  }\n\n  /**\n   * Create a fatal error associated with the file.\n   *\n   * Its `fatal` is set to `true` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Message.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {void}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is a buffer.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Buffer}\n *   Whether `value` is a Node.js buffer.\n */\nfunction buffer(value) {\n  return bufferLike(value)\n}\n","/// <reference lib=\"dom\" />\n\nimport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string | URL} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.charCodeAt(index) === 37 /* `%` */ &&\n      pathname.charCodeAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nexport {isUrl} from './minurl.shared.js'\n"],"names":["module","exports","obj","constructor","isBuffer","VFileMessage","Error","reason","place","origin","parts","position","start","line","column","end","super","undefined","index","indexOf","slice","this","name","stringifyPosition","message","stack","fatal","source","ruleId","file","actual","expected","url","note","prototype","path","ext","TypeError","assertPath","seenNonSlash","length","charCodeAt","firstNonSlashEnd","extIndex","unmatchedSlash","startPart","startDot","preDotState","code","joined","_len","arguments","segments","Array","_key","absolute","value","allowAboveRoot","lastSlashIndex","result","lastSegmentLength","lastSlash","dots","lastIndexOf","normalizeString","normalize","JSON","stringify","proc","isUrl","fileUrlOrPath","href","order","VFile","options","bufferLike","buffer","data","messages","history","cwd","stored","map","prop","includes","URL","error","protocol","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","urlToPath","assertNonEmpty","push","dirname","basename","assertPart","extname","stem","toString","encoding","info","fail","part"],"sourceRoot":""}