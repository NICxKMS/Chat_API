{"version":3,"file":"static/js/main-31743c5a.bf28344e2c.v1_8_8.js","mappings":"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","sources":["contexts/ThemeContext.js","contexts/PerformanceMetricsContext.js","contexts/SettingsContext.js","utils/performance.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js","contexts/ToastContext.js","contexts/StreamingEventsContext.js","hooks/useCacheToggle.js","utils/network.js","hooks/useLocalStorage.js","../webpack/runtime/startup prefetch"],"sourcesContent":["import { createContext, useContext, useState, useEffect, useCallback, useMemo } from 'react';\n\n// Create theme context\nconst ThemeContext = createContext();\n\n// Custom hook for using theme\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n\n// Theme provider component\nexport const ThemeProvider = ({ children }) => {\n  // Initialize theme from localStorage or default to 'dark'\n  const [theme, setTheme] = useState(() => {\n    const savedTheme = localStorage.getItem('theme');\n    return savedTheme || 'dark';\n  });\n\n  // Toggle between light and dark themes\n  const toggleTheme = useCallback(() => {\n    setTheme(prevTheme => {\n      const newTheme = prevTheme === 'dark' ? 'light' : 'dark';\n      localStorage.setItem('theme', newTheme);\n      return newTheme;\n    });\n  }, []);\n\n  // Apply theme class to body element\n  useEffect(() => {\n    document.body.classList.remove('light-mode', 'dark-mode');\n    document.body.classList.add(`${theme}-mode`);\n  }, [theme]);\n\n  // Context value - memoized to prevent unnecessary re-renders\n  const value = useMemo(() => ({\n    theme,\n    toggleTheme,\n    isDark: theme === 'dark'\n  }), [theme, toggleTheme]);\n\n  return (\n    <ThemeContext.Provider value={value}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}; ","import React, { createContext, useContext, useState, useCallback, useMemo, useEffect } from 'react';\nimport { useChatHistory } from './ChatHistoryContext';\n\n// Create performance metrics context\nconst PerformanceMetricsContext = createContext();\n\n// Hook to use performance metrics context\nexport const usePerformanceMetrics = () => {\n  const context = useContext(PerformanceMetricsContext);\n  if (context === undefined) {\n    throw new Error('usePerformanceMetrics must be used within a PerformanceMetricsProvider');\n  }\n  return context;\n};\n\n// Provider component for performance metrics\nexport const PerformanceMetricsProvider = ({ children }) => {\n  const { setChatHistory } = useChatHistory();\n  const [currentMessageMetrics, setCurrentMessageMetrics] = useState({\n    startTime: null,\n    endTime: null,\n    elapsedTime: null,\n    tokenCount: null,\n    tokensPerSecond: null,\n    isComplete: false,\n    timeToFirstToken: null,\n    promptTokens: null,\n    completionTokens: null,\n    totalTokens: null,\n    finishReason: null\n  });\n\n  const resetPerformanceMetrics = useCallback(() => {\n    setCurrentMessageMetrics({\n      startTime: null,\n      endTime: null,\n      elapsedTime: null,\n      tokenCount: null,\n      tokensPerSecond: null,\n      isComplete: false,\n      timeToFirstToken: null,\n      promptTokens: null,\n      completionTokens: null,\n      totalTokens: null,\n      finishReason: null\n    });\n  }, []);\n\n  const startPerformanceTimer = useCallback(() => {\n    setCurrentMessageMetrics(prev => ({\n      ...prev,\n      startTime: Date.now(),\n      isComplete: false\n    }));\n  }, []);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const updatePerformanceMetrics = useCallback((newTokenCount, isComplete = false, tokenInfo = null, finishReason = null) => {\n    setCurrentMessageMetrics(prev => {\n      const endTime = Date.now();\n      const elapsedTime = prev.startTime ? endTime - prev.startTime : 0;\n      const tokensPerSecond = newTokenCount && elapsedTime ?\n        Math.round((newTokenCount / (elapsedTime / 1000)) * 10) / 10 :\n        prev.tokensPerSecond;\n      const timeToFirstToken = prev.timeToFirstToken ||\n        (newTokenCount > 0 ? elapsedTime : null);\n\n      const newMetrics = {\n        startTime: prev.startTime,\n        endTime,\n        elapsedTime,\n        tokenCount: newTokenCount,\n        tokensPerSecond,\n        isComplete,\n        timeToFirstToken,\n        promptTokens: tokenInfo?.promptTokens || prev.promptTokens,\n        completionTokens: tokenInfo?.completionTokens || prev.completionTokens,\n        totalTokens: tokenInfo?.totalTokens || prev.totalTokens,\n        finishReason: finishReason || prev.finishReason\n      };\n\n      return newMetrics;\n    });\n  }, []);\n\n  // Sync performance metrics into chat history after a metrics update\n  useEffect(() => {\n    if (currentMessageMetrics.endTime != null) {\n      setChatHistory(prevHistory => {\n        const newHistory = [...prevHistory];\n        const lastMsg = newHistory[newHistory.length - 1];\n        if (lastMsg && lastMsg.role === 'assistant') {\n          lastMsg.metrics = { ...currentMessageMetrics };\n        }\n        return newHistory;\n      });\n    }\n  }, [currentMessageMetrics, setChatHistory]);\n\n  // Direct function to set token metrics for the last message - for debugging/testing\n  const setTokenMetricsForLastMessage = useCallback((metrics) => {\n    setChatHistory(prevHistory => {\n      const newHistory = [...prevHistory];\n      const lastMsg = newHistory[newHistory.length - 1];\n      if (lastMsg && lastMsg.role === 'assistant') {\n        lastMsg.metrics = {\n          ...(lastMsg.metrics || {}),\n          ...metrics,\n          isComplete: true\n        };\n      }\n      return newHistory;\n    });\n  }, [setChatHistory]);\n\n  const value = useMemo(() => ({\n    currentMessageMetrics,\n    resetPerformanceMetrics,\n    startPerformanceTimer,\n    updatePerformanceMetrics,\n    setTokenMetricsForLastMessage\n  }), [currentMessageMetrics, resetPerformanceMetrics, startPerformanceTimer, updatePerformanceMetrics, setTokenMetricsForLastMessage]);\n\n  return (\n    <PerformanceMetricsContext.Provider value={value}>\n      {children}\n    </PerformanceMetricsContext.Provider>\n  );\n}; ","import { createContext, useContext, useCallback, useMemo } from 'react';\nimport { useLocalStorage } from '../hooks/useLocalStorage';\n\n// Default settings values\nconst DEFAULT_SETTINGS = {\n  temperature: 0.7,\n  top_p: 1.0,\n  max_tokens: 8191,\n  frequency_penalty: 0,\n  presence_penalty: 0,\n  streaming: true,\n  systemPrompt: \"You are a knowledgeable, friendly, and supportive university-level assistant.\\n\\nFor every question or topic, provide a clear, engaging, and well-structured answer, styled like an expert mentor or senior student.\\n\\nStyle and Structure:\\n\\nBegin with a welcoming, positive intro (e.g., \\\"Alright! I'll break this down for you in detail section by section, with clear explanations and important points.\\\").\\nOrganize your response into numbered sections, each with a descriptive header and an emoji (e.g., # 📚 1. Core Concept).\\nIn each section, explain:\\nCore ideas and definitions\\nHow things work (step-by-step, or process overview)\\nAny relevant formulas, code, or examples\\nKey points, tips, or comparisons\\nUse subheadings, bullet points, tables, and diagrams (ASCII or LaTeX) for clarity when helpful.\\nAt the end, summarize with a \\\"Key Takeaways\\\" or \\\"Next Steps/Related Topics\\\" section, with quick revision notes, further reading, or suggestions for deeper exploration if relevant.\\nAlways offer to provide summary tables, code snippets, or quick revision notes if the user wants them.\\nTone: Friendly, supportive, and approachable—like a helpful peer or mentor. Formatting: Use bold, italics, emojis, markdown headers, and tables to maximize clarity.\\n\\nUse emojis befitting the context\\n\\nYour goal: Make complex ideas easy to understand, memorable, and actionable for the student—whether for study, projects, or curiosity.\",\n//  systemPrompt: \"You are ChatGPT, a helpful and knowledgeable AI assistant. Your primary role is to assist Nikhil, a university engineering student, by providing clear, concise, and technically accurate information. Adopt a friendly and approachable tone, akin to a knowledgeable peer or mentor. Enhance your responses with relevant emojis to convey tone and emotion, making interactions more engaging. Structure your answers logically, using bullet points or numbered lists where appropriate to enhance clarity. When applicable, incorporate interactive elements such as code snippets or diagrams to facilitate deeper understanding. Encourage curiosity by suggesting related topics or questions that Nikhil might explore further. Always tailor your assistance to support Nikhil's academic and personal growth in the field of engineering\"\n};\n\n// Create settings context\nconst SettingsContext = createContext();\n\n// Custom hook for using settings\nexport const useSettings = () => {\n  const context = useContext(SettingsContext);\n  if (context === undefined) {\n    throw new Error('useSettings must be used within a SettingsProvider');\n  }\n  return context;\n};\n\n// Settings provider component\nexport const SettingsProvider = ({ children }) => {\n  // Initialize settings state with defaults, persisted to localStorage\n  const [settings, setSettings] = useLocalStorage('appSettings', DEFAULT_SETTINGS);\n  \n  // Handle individual setting updates\n  const updateSetting = useCallback((key, value) => {\n    // Ensure the key is a valid setting we manage\n    if (key in DEFAULT_SETTINGS) {\n      setSettings(prev => ({\n        ...prev,\n        [key]: value\n      }));\n    }\n  }, [setSettings]);\n  \n  // Reset settings to defaults\n  const resetSettings = useCallback(() => {\n    setSettings(DEFAULT_SETTINGS);\n  }, [setSettings]);\n  \n  // Check if temperature should be restricted based on model name/series\n  const shouldRestrictTemperature = useCallback((model) => {\n    if (!model) return false;\n    \n    // More explicit flag checking for temperature restriction\n    // Check for specific model properties that indicate temperature restriction\n    return (\n      model.requiresFixedTemperature === true || \n      (model.properties && model.properties.includes('fixed_temperature')) ||\n      (model.id && model.id.toLowerCase().startsWith('o')) ||\n      (model.series && model.series.toLowerCase() === 'o-series')\n    );\n  }, []);\n  \n  // Get current settings with potential model-specific overrides\n  const getModelAdjustedSettings = useCallback((model) => {\n    if (shouldRestrictTemperature(model)) {\n      return {\n        ...settings,\n        temperature: 1.0\n      };\n    }\n    return settings;\n  }, [settings, shouldRestrictTemperature]);\n  \n  // Memoize context value to prevent unnecessary re-renders\n  const value = useMemo(() => ({\n    settings,\n    updateSetting,\n    resetSettings,\n    shouldRestrictTemperature,\n    getModelAdjustedSettings\n  }), [\n    settings,\n    updateSetting, \n    resetSettings, \n    shouldRestrictTemperature, \n    getModelAdjustedSettings\n  ]);\n  \n  return (\n    <SettingsContext.Provider value={value}>\n      {children}\n    </SettingsContext.Provider>\n  );\n}; ","/**\n * Performance monitoring utility\n * Tracks various performance metrics and provides methods for optimization\n */\n\n// Performance marks for tracking different stages of app initialization\nconst PERFORMANCE_MARKS = {\n  APP_START: 'app-start',\n  CONTEXT_INIT: 'context-init',\n  COMPONENT_LOAD: 'component-load',\n  IMPORTANT_COMPONENTS_LOADED: 'important-components-loaded',\n  FORMATTING_COMPONENTS_LOADED: 'formatting-components-loaded',\n  MODEL_SELECTOR_COMPONENTS_LOADED: 'model-selector-components-loaded',\n  FIRST_PAINT: 'first-paint',\n  FIRST_CONTENTFUL_PAINT: 'first-contentful-paint',\n  APP_INTERACTIVE: 'app-interactive',\n  APP_READY: 'app-ready'\n};\n\n// Performance measures for tracking durations\nconst PERFORMANCE_MEASURES = {\n  TOTAL_LOAD: 'total-load-time',\n  CONTEXT_INIT: 'context-init-time',\n  COMPONENT_LOAD: 'component-load-time',\n  TIME_TO_INTERACTIVE: 'time-to-interactive',\n  IMPORTANT_LOAD_TIME: 'important-load-time',\n  FORMATTING_LOAD_TIME: 'formatting-load-time',\n  MODEL_SELECTOR_LOAD_TIME: 'model-selector-load-time'\n};\n\nclass PerformanceMonitor {\n  constructor() {\n    this.marks = new Set();\n    this.measures = new Set();\n    \n    // Automatically track paint metrics if browser supports it\n    if (typeof window !== 'undefined' && 'performance' in window && 'PerformanceObserver' in window) {\n      this.trackPaintMetrics();\n    }\n  }\n\n  /**\n   * Track browser paint metrics (FP, FCP)\n   */\n  trackPaintMetrics() {\n    try {\n      // Create a performance observer to track paint events\n      const paintObserver = new PerformanceObserver((entries) => {\n        entries.getEntries().forEach(entry => {\n          const markName = entry.name === 'first-paint' \n            ? PERFORMANCE_MARKS.FIRST_PAINT \n            : PERFORMANCE_MARKS.FIRST_CONTENTFUL_PAINT;\n          \n          // Add our own performance mark based on the browser's timing\n          performance.mark(markName);\n          this.marks.add(markName);\n          \n          // Measure time from app start to this paint event\n          const measureName = entry.name === 'first-paint' \n            ? 'time-to-first-paint' \n            : 'time-to-first-contentful-paint';\n          \n          try {\n            performance.measure(measureName, PERFORMANCE_MARKS.APP_START, markName);\n            this.measures.add(measureName);\n          } catch (error) {\n            // Handle case where APP_START mark may not exist yet\n            console.warn(`Failed to measure ${measureName}:`, error);\n          }\n        });\n      });\n      \n      // Start observing paint events\n      paintObserver.observe({ entryTypes: ['paint'] });\n    } catch (error) {\n      console.warn('Failed to track paint metrics:', error);\n    }\n  }\n\n  /**\n   * Mark a specific point in time\n   * @param {string} markName - Name of the performance mark\n   */\n  mark(markName) {\n    if (performance && performance.mark) {\n      performance.mark(markName);\n      this.marks.add(markName);\n    }\n  }\n\n  /**\n   * Measure duration between two marks\n   * @param {string} measureName - Name of the performance measure\n   * @param {string} startMark - Name of the start mark\n   * @param {string} endMark - Name of the end mark\n   */\n  measure(measureName, startMark, endMark) {\n    if (performance && performance.measure) {\n      try {\n        performance.measure(measureName, startMark, endMark);\n        this.measures.add(measureName);\n      } catch (error) {\n        console.warn(`Failed to measure ${measureName}:`, error);\n      }\n    }\n  }\n\n  /**\n   * Get all performance measures\n   * @returns {Array} Array of performance measure entries\n   */\n  getMeasures() {\n    if (performance && performance.getEntriesByType) {\n      return performance.getEntriesByType('measure');\n    }\n    return [];\n  }\n\n  /**\n   * Clear all performance marks and measures\n   */\n  clear() {\n    if (performance) {\n      performance.clearMarks();\n      performance.clearMeasures();\n      this.marks.clear();\n      this.measures.clear();\n    }\n  }\n\n  /**\n   * Log performance metrics to console\n   */\n  logMetrics() {\n    const measures = this.getMeasures();\n    console.group('Performance Metrics');\n    measures.forEach(measure => {\n      console.log(`${measure.name}: ${measure.duration.toFixed(2)}ms`);\n    });\n    \n    // Log Web Vitals if available\n    if ('web-vitals' in window) {\n      console.log('Web Vitals will be reported separately');\n    }\n    \n    console.groupEnd();\n  }\n}\n\n// Export singleton instance\nexport const performanceMonitor = new PerformanceMonitor();\n\n// Export constants\nexport { PERFORMANCE_MARKS, PERFORMANCE_MEASURES }; ","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(/* webpackChunkName: \"web-vitals\" */ 'web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'service-worker' in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              console.log('New content is available and will be used when all tabs for this page are closed.');\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              console.log('Content is cached for offline use.');\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n} ","import './utils/polyfills';\nimport React, { Suspense } from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './styles/common/colors.css';\nimport './styles/common/tokens.css';\nimport './styles/theme.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport { ToastProvider } from './contexts/ToastContext';\nimport { LoadingProvider } from './contexts/LoadingContext';\nimport GlobalLoadingIndicator from './components/common/GlobalLoadingIndicator';\n\n// Set initial theme class on <body> so theme mappings (light-mode/dark-mode) take effect\nconst prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n// Apply body class for index.css mappings\ndocument.body.classList.add(prefersDark ? 'dark-mode' : 'light-mode');\n\n// Create root and render app with Suspense\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <ToastProvider>\n      <LoadingProvider>\n        <Suspense fallback={\n          <div style={{ \n            display: 'flex', \n            justifyContent: 'center', \n            alignItems: 'center', \n            height: '100vh' \n          }}>\n            Loading...\n          </div>\n        }>\n          <App />\n        </Suspense>\n        <GlobalLoadingIndicator />\n      </LoadingProvider>\n    </ToastProvider>\n  </React.StrictMode>\n);\n\n// Report web vitals for performance monitoring\nreportWebVitals(console.log);\n\n// Register service worker for PWA support\nserviceWorkerRegistration.register({\n  onUpdate: registration => {\n    // When new content is available, show a notification\n    const waitingServiceWorker = registration.waiting;\n    if (waitingServiceWorker) {\n      waitingServiceWorker.addEventListener(\"statechange\", event => {\n        if (event.target.state === \"activated\") {\n          window.location.reload();\n        }\n      });\n      waitingServiceWorker.postMessage({ type: \"SKIP_WAITING\" });\n    }\n  }\n}); ","import React, { createContext, useContext, useReducer, useCallback } from 'react';\nimport ToastContainer from '../components/common/ToastNotification';\n\n// Create context for toast notifications\nconst ToastContext = createContext();\n\n// Hook to use toast context\nexport const useToast = () => {\n  const context = useContext(ToastContext);\n  if (!context) {\n    throw new Error('useToast must be used within a ToastProvider');\n  }\n  return context;\n};\n\n// Action types\nconst ADD_TOAST = 'ADD_TOAST';\nconst REMOVE_TOAST = 'REMOVE_TOAST';\n\n// Reducer to manage toast list\nfunction toastReducer(state, action) {\n  switch (action.type) {\n    case ADD_TOAST:\n      return [...state, action.payload];\n    case REMOVE_TOAST:\n      return state.filter(toast => toast.id !== action.payload);\n    default:\n      return state;\n  }\n}\n\n// Provider component that holds toast state and renders toasts\nexport const ToastProvider = ({ children }) => {\n  const [toasts, dispatch] = useReducer(toastReducer, []);\n\n  // Function to show a toast\n  const showToast = useCallback(({ type, message, duration = 3000 }) => {\n    const id = Date.now().toString() + Math.random().toString(36).substr(2, 9);\n    dispatch({ type: ADD_TOAST, payload: { id, type, message, duration } });\n    // Auto-dismiss toast after duration\n    setTimeout(() => dispatch({ type: REMOVE_TOAST, payload: id }), duration);\n    return id;\n  }, []);\n\n  // Function to manually dismiss a toast\n  const dismissToast = useCallback(id => {\n    dispatch({ type: REMOVE_TOAST, payload: id });\n  }, []);\n\n  return (\n    <ToastContext.Provider value={{ showToast, dismissToast }}>\n      {children}\n      <ToastContainer toasts={toasts} dismissToast={dismissToast} />\n    </ToastContext.Provider>\n  );\n}; ","import React, { createContext, useContext, useRef, useCallback,  useMemo } from 'react';\nimport { useApi } from './ApiContext';\nimport { useModel } from './ModelContext';\nimport { useSettings } from './SettingsContext';\nimport { useAuth } from './AuthContext';\nimport { useChatHistory } from './ChatHistoryContext';\nimport { useChatStatus } from './ChatStatusContext';\nimport { usePerformanceMetrics } from './PerformanceMetricsContext';\nimport { fetchWithRetry } from '../utils/network';\nimport debounce from 'lodash.debounce';\n\n// Create a context for streaming events and logic\nconst StreamingEventsContext = createContext();\n\nexport const useStreamingEvents = () => {\n  const context = useContext(StreamingEventsContext);\n  if (context === undefined) {\n    throw new Error('useStreamingEvents must be used within a StreamingEventsProvider');\n  }\n  return context;\n};\n\nexport const StreamingEventsProvider = ({ children }) => {\n  const { apiUrl } = useApi();\n  const { selectedModel } = useModel();\n  const { getModelAdjustedSettings } = useSettings();\n  const { idToken } = useAuth();\n  const { chatHistoryRef, setChatHistory, addMessageToHistory, updateChatWithContent } = useChatHistory();\n  const { setIsWaitingForResponse, setError } = useChatStatus();\n  const { resetPerformanceMetrics, startPerformanceTimer, updatePerformanceMetrics } = usePerformanceMetrics();\n\n  // Refs for streaming\n  const streamingTextRef = useRef('');\n  const currentRequestIdRef = useRef(null);\n  const abortControllerRef = useRef(null);\n  const isStreamingRef = useRef(false);\n  const firstTokenReceivedRef = useRef(false);\n\n  // Debounced content updater\n  const debouncedUpdateChat = useMemo(\n    () => debounce((content) => updateChatWithContent(content), 20),\n    [updateChatWithContent]\n  );\n\n  // SSE parsing worker setup\n  const streamWorkerUrlRef = useRef(null);\n  const streamWorkerRef = useRef(null);\n  const getOrCreateStreamWorker = useCallback(() => {\n    if (!streamWorkerRef.current) {\n      if (!streamWorkerUrlRef.current) {\n        streamWorkerUrlRef.current = new URL('../workers/streamProcessor.js', import.meta.url);\n      }\n      streamWorkerRef.current = new Worker(streamWorkerUrlRef.current, { type: 'module' });\n    }\n    return streamWorkerRef.current;\n  }, []);\n\n  const parseStreamChunk = useCallback((chunk) => new Promise((resolve, reject) => {\n    const worker = getOrCreateStreamWorker();\n    worker.onmessage = (e) => resolve(e.data);\n    worker.onerror = reject;\n    worker.postMessage(chunk);\n  }), [getOrCreateStreamWorker]);\n\n  // Stream a message using fetch SSE\n  const streamMessageWithFetch = useCallback(async (message, editIndex = null) => {\n    // Generate and store a client-side requestId for this stream\n    const requestId = (typeof crypto !== 'undefined' && crypto.randomUUID)\n      ? crypto.randomUUID()\n      : Math.random().toString(36).substring(2) + Date.now().toString(36);\n    currentRequestIdRef.current = requestId;\n    const isEditing = editIndex !== null && Number.isInteger(editIndex) && editIndex >= 0;\n    if (!message || !selectedModel) {\n      setError('Please enter a message and select a model');\n      return null;\n    }\n    const modelId = `${selectedModel.provider}/${selectedModel.id}`;\n    if (!modelId) {\n      setError('Invalid model selection');\n      return null;\n    }\n    let userMessage;\n    if (isEditing) {\n      setChatHistory(prev => {\n        const truncated = prev.slice(0, editIndex);\n        const original = prev[editIndex];\n        // Preserve original id/timestamp, only update content\n        userMessage = { ...original, content: message };\n        return [...truncated, userMessage];\n      });\n    } else {\n      userMessage = addMessageToHistory('user', message);\n    }\n    resetPerformanceMetrics();\n    startPerformanceTimer();\n    firstTokenReceivedRef.current = false;\n    setIsWaitingForResponse(true);\n    setError(null);\n    streamingTextRef.current = '';\n    isStreamingRef.current = true;\n    addMessageToHistory('assistant', '');\n    let timeoutId = setTimeout(() => {\n      abortControllerRef.current?.abort('timeout');\n      setError('Connection timed out');\n      setIsWaitingForResponse(false);\n    }, 60000);\n    const abortController = new AbortController();\n    abortControllerRef.current = abortController;\n    try {\n      const adjusted = getModelAdjustedSettings(selectedModel);\n      const historyForApi = chatHistoryRef.current.map(({ metrics, ...m }) => m);\n      if (adjusted.systemPrompt && (!historyForApi.length || historyForApi[0].role !== 'system')) {\n        historyForApi.unshift({ role: 'system', content: adjusted.systemPrompt, timestamp: Date.now() - 1 });\n      }\n      historyForApi.push(userMessage);\n      const payload = {\n        requestId,\n        model: modelId,\n        messages: historyForApi,\n        temperature: adjusted.temperature,\n        max_tokens: adjusted.max_tokens,\n        top_p: adjusted.top_p,\n        frequency_penalty: adjusted.frequency_penalty,\n        presence_penalty: adjusted.presence_penalty\n      };\n      const headers = { 'Content-Type': 'application/json', 'Accept': 'text/event-stream', 'Cache-Control': 'no-cache' };\n      if (idToken) headers['Authorization'] = `Bearer ${idToken}`;\n      const response = await fetchWithRetry(new URL('/api/chat/stream', apiUrl).toString(), {\n        method: 'POST', headers, body: JSON.stringify(payload), signal: abortController.signal, cache: 'no-store'\n      });\n      if (!response.ok) throw new Error(`API error: ${response.status}`);\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder('utf-8');\n      let accumulatedContent = '';\n      while (true) {\n        const { done, value } = await reader.read();\n        clearTimeout(timeoutId);\n        timeoutId = setTimeout(() => {\n          abortControllerRef.current?.abort();\n          setError('Connection timed out');\n          setIsWaitingForResponse(false);\n        }, 60000);\n        if (done) {\n          // handle leftover buffer\n          break;\n        }\n        const chunk = decoder.decode(value, { stream: true });\n\n        console.log('Received stream chunk:', chunk);\n\n        try {\n          const msgs = await parseStreamChunk(chunk);\n          for (const msg of msgs) {\n            // Handle server-sent error payload\n            if (msg.rawChunk?.error || msg.finishReason === 'error') {\n              const errMsg = msg.rawChunk?.error?.message || 'Error occurred during generation';\n              console.error('Error in SSE payload:', errMsg);\n              setError(errMsg);\n              setChatHistory(prev => {\n                const newHistory = [...prev];\n                const lastMsg = newHistory[newHistory.length - 1];\n                if (lastMsg && lastMsg.role === 'assistant') {\n                  lastMsg.content += `\\n\\n**Error:** ${errMsg}`;\n                  if (lastMsg.metrics) {\n                    lastMsg.metrics.isComplete = true;\n                    lastMsg.metrics.error = true;\n                  }\n                }\n                return newHistory;\n              });\n              return null;\n            }\n            // Append any content from the chunk\n            if (msg.content) {\n              // Record time to first token once\n              if (!firstTokenReceivedRef.current) {\n                updatePerformanceMetrics(1);\n                firstTokenReceivedRef.current = true;\n              }\n              accumulatedContent += msg.content;\n              streamingTextRef.current = accumulatedContent;\n              debouncedUpdateChat(accumulatedContent);\n            }\n            // Always use server-reported completion tokens for metrics\n            const completionTokens = msg.usage?.completionTokens ?? 0;\n            updatePerformanceMetrics(completionTokens, msg.isDone, msg.usage, msg.finishReason);\n          }\n        } catch {}\n      }\n      debouncedUpdateChat.flush();\n      updateChatWithContent(streamingTextRef.current);\n      return streamingTextRef.current;\n    } catch (error) {\n      console.error('Error streaming message:', error);\n      setError(error.message);\n      // Show the server error content as the assistant's message\n      setChatHistory(prev => {\n        const newHistory = [...prev];\n        const lastMsg = newHistory[newHistory.length - 1];\n        if (lastMsg && lastMsg.role === 'assistant') {\n          lastMsg.content += `\\n\\n**Error:** ${error.message || 'Error occurred during generation'}`;\n          if (lastMsg.metrics) {\n            lastMsg.metrics.isComplete = true;\n            lastMsg.metrics.error = true;\n          }\n        }\n        return newHistory;\n      });\n      return null;\n    } finally {\n      clearTimeout(timeoutId);\n      isStreamingRef.current = false;\n      setIsWaitingForResponse(false);\n      // Do not auto-call stop endpoint here; only explicit stop should trigger it\n      currentRequestIdRef.current = null;\n    }\n  }, [\n    apiUrl, selectedModel, getModelAdjustedSettings, idToken,\n    chatHistoryRef, setChatHistory, addMessageToHistory, updateChatWithContent,\n    debouncedUpdateChat, setError, setIsWaitingForResponse,\n    resetPerformanceMetrics, startPerformanceTimer, updatePerformanceMetrics,\n    parseStreamChunk\n  ]);\n\n  const stopStreaming = useCallback(async () => {\n    if (abortControllerRef.current) abortControllerRef.current.abort('user_stopped');\n    const reqId = currentRequestIdRef.current;\n    if (reqId) {\n      const headers = { 'Content-Type': 'application/json' };\n      if (idToken) headers['Authorization'] = `Bearer ${idToken}`;\n      try {\n        await fetchWithRetry(new URL('/api/chat/stop', apiUrl).toString(), {\n          method: 'POST', headers, body: JSON.stringify({ requestId: reqId })\n        });\n      } catch {} finally {\n        currentRequestIdRef.current = null;\n        abortControllerRef.current = null;\n      }\n    }\n    isStreamingRef.current = false;\n    setIsWaitingForResponse(false);\n    return true;\n  }, [apiUrl, idToken, setIsWaitingForResponse]);\n\n  const value = useMemo(() => ({\n    streamMessageWithFetch,\n    stopStreaming,\n    parseStreamChunk,\n    streamingTextRef,\n    isStreaming: () => isStreamingRef.current\n  }), [streamMessageWithFetch, stopStreaming, parseStreamChunk]);\n\n  return (\n    <StreamingEventsContext.Provider value={value}>\n      {children}\n    </StreamingEventsContext.Provider>\n  );\n}; ","import { useEffect, useCallback } from 'react';\nimport { useLocalStorage } from './useLocalStorage';\n\n/**\n * Custom hook for controlling model caching\n * @returns {Object} Cache toggle state and methods\n */\nexport const useCacheToggle = () => {\n  // Store cache enabled setting in localStorage with default value of true\n  const [cacheEnabled, setCacheEnabled] = useLocalStorage('modelCacheEnabled', true);\n  \n  // Clear model cache\n  const clearModelCache = useCallback(() => {\n    try {\n      localStorage.removeItem('modelDropdownCache');\n      console.log('Model cache cleared');\n    } catch (error) {\n      console.error('Error clearing model cache:', error);\n    }\n  }, []);\n\n  // Toggle cache enabled state and clear cache if disabling\n  const toggleCache = useCallback((enabled) => {\n    const newValue = typeof enabled === 'boolean' ? enabled : !cacheEnabled;\n    \n    // If turning off caching, clear the existing cache\n    if (!newValue) {\n      clearModelCache();\n    }\n    \n    setCacheEnabled(newValue);\n    return newValue;\n  }, [cacheEnabled, setCacheEnabled, clearModelCache]);\n\n  // Forcibly refresh models by clearing cache\n  const refreshModels = useCallback(() => {\n    clearModelCache();\n    // Cache will be regenerated on next data fetch\n  }, [clearModelCache]);\n\n  // Patch the original isCacheValid function\n  useEffect(() => {\n    // Skip this effect during server-side rendering\n    if (typeof window === 'undefined') return;\n\n    // Store the original isCacheValid function\n    const originalFunc = window.isCacheValid;\n\n    // Define our patched function\n    window.isCacheValid = function patchedIsCacheValid(cache) {\n      // First check if caching is enabled at all\n      const enabled = localStorage.getItem('modelCacheEnabled');\n      if (enabled === 'false') return false;\n      \n      // If enabled, use original validation logic\n      if (typeof originalFunc === 'function') {\n        return originalFunc(cache);\n      }\n      \n      // Fallback implementation if original not available\n      return (\n        cache &&\n        cache.timestamp &&\n        Date.now() - cache.timestamp < 5 * 60 * 1000 &&\n        cache.allModels &&\n        cache.processedModels &&\n        cache.experimentalModels\n      );\n    };\n\n    // Cleanup function to restore original\n    return () => {\n      window.isCacheValid = originalFunc;\n    };\n  }, []);\n\n  // Return state and functions\n  return {\n    cacheEnabled,\n    toggleCache,\n    clearModelCache,\n    refreshModels\n  };\n}; ","export async function fetchWithRetry(input, init = {}, retries = 3, backoff = 500) {\n  let attempt = 0;\n  while (true) {\n    try {\n      const response = await fetch(input, init);\n      if (!response.ok) {\n        throw new Error(`Network error: ${response.status}`);\n      }\n      return response;\n    } catch (error) {\n      if (attempt >= retries) {\n        throw error;\n      }\n      // Exponential backoff with jitter\n      const delay = backoff * Math.pow(2, attempt) + Math.random() * 100;\n      await new Promise(res => setTimeout(res, delay));\n      attempt++;\n    }\n  }\n} ","import { useState, useEffect, useRef, useCallback } from 'react';\n\n/**\n * Custom hook for using localStorage with React state\n * @param {string} key - The localStorage key\n * @param {any} initialValue - The initial value if key doesn't exist\n * @returns {[any, Function]} - State value and setter function\n */\nexport const useLocalStorage = (key, initialValue) => {\n  // Use a ref to hold the initial value to avoid unnecessary state updates\n  const initialValueRef = useRef(initialValue);\n  \n  // Initialize state from localStorage or use initialValue\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from localStorage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or return initialValue\n      return item ? JSON.parse(item) : initialValueRef.current;\n    } catch (error) {\n      console.error(`Error reading localStorage key \"${key}\":`, error);\n      return initialValueRef.current;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that\n  // persists the new value to localStorage\n  const setValue = useCallback((value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      \n      // Save state\n      setStoredValue(valueToStore);\n      \n      // Save to localStorage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.error(`Error setting localStorage key \"${key}\":`, error);\n    }\n  }, [key, storedValue]);\n\n  // Update stored value if key changes\n  useEffect(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      setStoredValue(item ? JSON.parse(item) : initialValueRef.current);\n    } catch (error) {\n      console.error(`Error updating from localStorage key \"${key}\":`, error);\n      setStoredValue(initialValueRef.current);\n    }\n  }, [key]); // Remove initialValue from dependencies\n\n  return [storedValue, setValue];\n};\n\n/**\n * Custom hook for writing to localStorage without React state\n * @param {string} key - The localStorage key\n * @returns {Object} - Methods for accessing localStorage\n */\nexport const useLocalStorageWrite = (key) => {\n  const writeValue = (value) => {\n    try {\n      window.localStorage.setItem(key, JSON.stringify(value));\n      return true;\n    } catch (error) {\n      console.error(`Error writing to localStorage key \"${key}\":`, error);\n      return false;\n    }\n  };\n\n  const readValue = () => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : null;\n    } catch (error) {\n      console.error(`Error reading from localStorage key \"${key}\":`, error);\n      return null;\n    }\n  };\n\n  const removeValue = () => {\n    try {\n      window.localStorage.removeItem(key);\n      return true;\n    } catch (error) {\n      console.error(`Error removing localStorage key \"${key}\":`, error);\n      return false;\n    }\n  };\n\n  return { writeValue, readValue, removeValue };\n}; ","__webpack_require__.O(0, [3428], () => {\n\t[4314,208,5764,2042,4370,1042,4912,4910,268,496,6716,8990,8360,4377,3542,8467,5419,5174,7007,1524,5433,4431,9173,4537,1802,4191,5028,535,5100,393,5039,5444,2412,6017,399,4917,7777,438,662,7272,7390,4734,6755,4182,4582,8162,6760,1217,822,4335,6814,2489,9734,5522,5080,1927,9283,8476,5816,4120,7295,237,9104,2993,9889,392,7514,8482,5418,1506,5796,4266,7210,3484,9579].map(__webpack_require__.E);\n}, 5);"],"names":["ThemeContext","createContext","useTheme","context","useContext","undefined","Error","ThemeProvider","_ref","children","theme","setTheme","useState","localStorage","getItem","toggleTheme","useCallback","prevTheme","newTheme","setItem","useEffect","document","body","classList","remove","add","value","useMemo","isDark","_jsx","Provider","PerformanceMetricsContext","usePerformanceMetrics","PerformanceMetricsProvider","setChatHistory","useChatHistory","currentMessageMetrics","setCurrentMessageMetrics","startTime","endTime","elapsedTime","tokenCount","tokensPerSecond","isComplete","timeToFirstToken","promptTokens","completionTokens","totalTokens","finishReason","resetPerformanceMetrics","startPerformanceTimer","prev","Date","now","updatePerformanceMetrics","newTokenCount","arguments","length","tokenInfo","Math","round","prevHistory","newHistory","lastMsg","role","metrics","setTokenMetricsForLastMessage","DEFAULT_SETTINGS","temperature","top_p","max_tokens","frequency_penalty","presence_penalty","streaming","systemPrompt","SettingsContext","useSettings","SettingsProvider","settings","setSettings","useLocalStorage","updateSetting","key","resetSettings","shouldRestrictTemperature","model","requiresFixedTemperature","properties","includes","id","toLowerCase","startsWith","series","getModelAdjustedSettings","PERFORMANCE_MARKS","APP_START","CONTEXT_INIT","COMPONENT_LOAD","IMPORTANT_COMPONENTS_LOADED","FORMATTING_COMPONENTS_LOADED","MODEL_SELECTOR_COMPONENTS_LOADED","FIRST_PAINT","FIRST_CONTENTFUL_PAINT","APP_INTERACTIVE","APP_READY","PERFORMANCE_MEASURES","TOTAL_LOAD","TIME_TO_INTERACTIVE","IMPORTANT_LOAD_TIME","FORMATTING_LOAD_TIME","MODEL_SELECTOR_LOAD_TIME","performanceMonitor","constructor","this","marks","Set","measures","window","trackPaintMetrics","PerformanceObserver","entries","getEntries","forEach","entry","markName","name","performance","mark","measureName","measure","error","observe","entryTypes","startMark","endMark","getMeasures","getEntriesByType","clear","clearMarks","clearMeasures","logMetrics","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","prefersDark","matchMedia","matches","ReactDOM","getElementById","render","React","ToastProvider","_jsxs","LoadingProvider","Suspense","fallback","style","display","justifyContent","alignItems","height","App","GlobalLoadingIndicator","reportWebVitals","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","waitingServiceWorker","waiting","event","target","postMessage","type","ToastContext","useToast","ADD_TOAST","REMOVE_TOAST","toastReducer","action","payload","filter","toast","toasts","dispatch","useReducer","showToast","_ref2","message","duration","toString","random","substr","setTimeout","dismissToast","ToastContainer","StreamingEventsContext","useStreamingEvents","StreamingEventsProvider","apiUrl","useApi","selectedModel","useModel","idToken","useAuth","chatHistoryRef","addMessageToHistory","updateChatWithContent","setIsWaitingForResponse","setError","useChatStatus","streamingTextRef","useRef","currentRequestIdRef","abortControllerRef","isStreamingRef","firstTokenReceivedRef","debouncedUpdateChat","debounce","content","streamWorkerUrlRef","streamWorkerRef","getOrCreateStreamWorker","current","Worker","parseStreamChunk","chunk","Promise","resolve","reject","worker","onmessage","e","data","onerror","streamMessageWithFetch","async","editIndex","requestId","crypto","randomUUID","substring","isEditing","Number","isInteger","modelId","provider","userMessage","truncated","slice","original","timeoutId","_abortControllerRef$c","abort","abortController","AbortController","adjusted","historyForApi","map","m","unshift","timestamp","push","messages","fetchWithRetry","method","JSON","stringify","signal","cache","ok","reader","getReader","decoder","TextDecoder","accumulatedContent","done","read","clearTimeout","_abortControllerRef$c2","decode","stream","msgs","msg","_msg$rawChunk","_msg$usage$completion","_msg$usage","rawChunk","_msg$rawChunk2","_msg$rawChunk2$error","errMsg","usage","isDone","flush","stopStreaming","reqId","isStreaming","useCacheToggle","cacheEnabled","setCacheEnabled","clearModelCache","removeItem","toggleCache","enabled","newValue","refreshModels","originalFunc","isCacheValid","allModels","processedModels","experimentalModels","input","init","retries","backoff","attempt","delay","pow","res","initialValue","initialValueRef","storedValue","setStoredValue","item","parse","setValue","valueToStore","__webpack_require__","O","E"],"sourceRoot":""}