{"version":3,"file":"static/js/6961.1e981f7edf.chunk.v1_7.js","mappings":"AAoEAA,KAAKC,UAAYC,IAAe,IAAd,KAAEC,GAAMD,EACxB,IACE,MAAME,EA9DV,SAAuBD,GACrB,MAAME,EAAY,GACZC,EAAqB,GACrBC,EAAkB,CAAC,EAGnBC,EAAsBC,IAC1B,MAAMC,EAAOD,EAAME,IAAM,GACzB,OAAOD,EAAKE,MAAM,KAAKC,OAASH,CAAI,EAgDtC,OA7CAP,EAAKW,oBAAoBC,SAAQC,IAC/B,MAAMC,EAAWD,EAAcE,YAC1BF,EAAcG,UAEnBH,EAAcG,SAASJ,SAAQK,IAC7B,MAAMC,EAAOD,EAAUF,YAClBE,EAAUD,UAEfC,EAAUD,SAASJ,SAAQO,IACzB,MAAMC,EAAUD,EAAaJ,YACxBM,MAAMC,QAAQH,EAAaI,SAEhCJ,EAAaI,OAAOX,SAAQN,IAC1B,IAAIkB,EAAW,OACf,MAAMC,GAAKnB,EAAMY,MAAQA,GAAQ,IAAIQ,cACjCD,EAAEE,SAAS,SAAUH,EAAW,QAC3BC,EAAEE,SAAS,eAAcH,EAAW,aAE7C,MAAMI,EAAiB,CACrBpB,GAAIF,EAAME,GACVD,KAAMD,EAAMC,MAAQD,EAAMuB,cAAgBxB,EAAmBC,GAC7DQ,WACAI,KAAMZ,EAAMY,MAAQA,EACpBE,QAASd,EAAMc,SAAWA,EAC1BI,WACAM,gBAAiBxB,EAAMwB,gBACvBC,cAAezB,EAAMyB,cACrBC,aAAc1B,EAAM0B,aACpBC,OAAQ3B,EAAM2B,QAAUf,EACxBgB,OAAQ5B,EAAM4B,QAAUd,GAG1BlB,EAAUiC,KAAKP,GACXtB,EAAMwB,iBAAiB3B,EAAmBgC,KAAKP,GAGnDxB,EAAgBoB,GAAYpB,EAAgBoB,IAAa,CAAC,EAC1DpB,EAAgBoB,GAAUV,GAAYV,EAAgBoB,GAAUV,IAAa,CAAC,EAC9EV,EAAgBoB,GAAUV,GAAUI,GAAQd,EAAgBoB,GAAUV,GAAUI,IAAS,GACzFd,EAAgBoB,GAAUV,GAAUI,GAAMiB,KAAKP,EAAe,GAC9D,GACF,GACF,IAGG,CAAE1B,YAAWE,kBAAiBD,qBACvC,CAKmBiC,CAAcpC,GAC7BH,KAAKwC,YAAY,IAAKpC,GACxB,CAAE,MAAOqC,GACPzC,KAAKwC,YAAY,CAAEE,MAAOD,EAAIE,SAChC","sources":["workers/modelProcessor.js"],"sourcesContent":["/* eslint-disable no-restricted-globals */\n// modelProcessor.js\n// Web Worker for processing model list data in the background\n\n/**\n * processModels replicates the logic from ModelContext to transform\n * hierarchical_groups into flat arrays and nested maps.\n */\nfunction processModels(data) {\n  const allModels = [];\n  const experimentalModels = [];\n  const processedModels = {};\n\n  // Helper to normalize a model name\n  const normalizeModelName = (model) => {\n    const name = model.id || '';\n    return name.split('/').pop() || name;\n  };\n\n  data.hierarchical_groups.forEach(providerGroup => {\n    const provider = providerGroup.group_value;\n    if (!providerGroup.children) return;\n\n    providerGroup.children.forEach(typeGroup => {\n      const type = typeGroup.group_value;\n      if (!typeGroup.children) return;\n\n      typeGroup.children.forEach(versionGroup => {\n        const version = versionGroup.group_value;\n        if (!Array.isArray(versionGroup.models)) return;\n\n        versionGroup.models.forEach(model => {\n          let category = 'Chat';\n          const t = (model.type || type || '').toLowerCase();\n          if (t.includes('image')) category = 'Image';\n          else if (t.includes('embedding')) category = 'Embedding';\n\n          const processedModel = {\n            id: model.id,\n            name: model.name || model.display_name || normalizeModelName(model),\n            provider,\n            type: model.type || type,\n            version: model.version || version,\n            category,\n            is_experimental: model.is_experimental,\n            is_multimodal: model.is_multimodal,\n            capabilities: model.capabilities,\n            family: model.family || type,\n            series: model.series || version\n          };\n\n          allModels.push(processedModel);\n          if (model.is_experimental) experimentalModels.push(processedModel);\n\n          // Build nested map: processedModels[category][provider][type]\n          processedModels[category] = processedModels[category] || {};\n          processedModels[category][provider] = processedModels[category][provider] || {};\n          processedModels[category][provider][type] = processedModels[category][provider][type] || [];\n          processedModels[category][provider][type].push(processedModel);\n        });\n      });\n    });\n  });\n\n  return { allModels, processedModels, experimentalModels };\n}\n\n// Listen for messages from main thread\nself.onmessage = ({ data }) => {\n  try {\n    const result = processModels(data);\n    self.postMessage({ ...result });\n  } catch (err) {\n    self.postMessage({ error: err.message });\n  }\n}; "],"names":["self","onmessage","_ref","data","result","allModels","experimentalModels","processedModels","normalizeModelName","model","name","id","split","pop","hierarchical_groups","forEach","providerGroup","provider","group_value","children","typeGroup","type","versionGroup","version","Array","isArray","models","category","t","toLowerCase","includes","processedModel","display_name","is_experimental","is_multimodal","capabilities","family","series","push","processModels","postMessage","err","error","message"],"sourceRoot":""}