{"version":3,"file":"static/js/5174.8b2767d7.chunk.js","mappings":"sHAYO,SAASA,EAAWC,GAEzB,MAAMC,EAEJD,GAA0B,iBAAVA,GAAqC,SAAfA,EAAME,KAExCF,EAAMC,OAAS,GACfD,EAIN,MAAwB,iBAAVC,GAA4D,KAAtCA,EAAME,QAAQ,eAAgB,GACpE,C,+CCFO,SAASC,EAAMH,GAEpB,MAAMI,EAAS,GACTC,EAAQC,OAAON,GAAS,IAC9B,IAAIO,EAAQF,EAAMG,QAAQ,KACtBC,EAAQ,EAERC,GAAM,EAEV,MAAQA,GAAK,EACI,IAAXH,IACFA,EAAQF,EAAMM,OACdD,GAAM,GAGR,MAAME,EAAQP,EAAMQ,MAAMJ,EAAOF,GAAOO,QAEpCF,GAAUF,GACZN,EAAOW,KAAKH,GAGdH,EAAQF,EAAQ,EAChBA,EAAQF,EAAMG,QAAQ,IAAKC,EAC7B,CAEA,OAAOL,CACT,CAYO,SAASY,EAAUC,EAAQC,GAChC,MAAMC,EAAWD,GAAW,CAAC,EAK7B,OAF4C,KAA9BD,EAAOA,EAAON,OAAS,GAAY,IAAIM,EAAQ,IAAMA,GAGhEG,MACED,EAASE,SAAW,IAAM,IACzB,MACsB,IAArBF,EAASG,QAAoB,GAAK,MAEtCR,MACL,C,uDC/DO,SAASS,EAAOvB,EAAOwB,GAC5B,MAAMC,EAASnB,OAAON,GAEtB,GAAyB,iBAAdwB,EACT,MAAM,IAAIE,UAAU,sBAGtB,IAAIC,EAAQ,EACRpB,EAAQkB,EAAOjB,QAAQgB,GAE3B,MAAkB,IAAXjB,GACLoB,IACApB,EAAQkB,EAAOjB,QAAQgB,EAAWjB,EAAQiB,EAAUb,QAGtD,OAAOgB,CACT,C,yCCxBA,IAAIC,EAASC,OAAOC,UAAUC,eAC1BC,EAAQH,OAAOC,UAAUG,SACzBC,EAAiBL,OAAOK,eACxBC,EAAON,OAAOO,yBAEdC,EAAU,SAAiBC,GAC9B,MAA6B,mBAAlBC,MAAMF,QACTE,MAAMF,QAAQC,GAGK,mBAApBN,EAAMQ,KAAKF,EACnB,EAEIG,EAAgB,SAAuBC,GAC1C,IAAKA,GAA2B,oBAApBV,EAAMQ,KAAKE,GACtB,OAAO,EAGR,IASIC,EATAC,EAAoBhB,EAAOY,KAAKE,EAAK,eACrCG,EAAmBH,EAAII,aAAeJ,EAAII,YAAYhB,WAAaF,EAAOY,KAAKE,EAAII,YAAYhB,UAAW,iBAE9G,GAAIY,EAAII,cAAgBF,IAAsBC,EAC7C,OAAO,EAMR,IAAKF,KAAOD,GAEZ,YAAsB,IAARC,GAAuBf,EAAOY,KAAKE,EAAKC,EACvD,EAGII,EAAc,SAAqBC,EAAQ9B,GAC1CgB,GAAmC,cAAjBhB,EAAQ+B,KAC7Bf,EAAec,EAAQ9B,EAAQ+B,KAAM,CACpCC,YAAY,EACZC,cAAc,EACdnD,MAAOkB,EAAQkC,SACfC,UAAU,IAGXL,EAAO9B,EAAQ+B,MAAQ/B,EAAQkC,QAEjC,EAGIE,EAAc,SAAqBZ,EAAKO,GAC3C,GAAa,cAATA,EAAsB,CACzB,IAAKrB,EAAOY,KAAKE,EAAKO,GACrB,OACM,GAAId,EAGV,OAAOA,EAAKO,EAAKO,GAAMjD,KAEzB,CAEA,OAAO0C,EAAIO,EACZ,EAEAM,EAAOC,QAAU,SAASC,IACzB,IAAIvC,EAAS+B,EAAMS,EAAKC,EAAMC,EAAaC,EACvCb,EAASc,UAAU,GACnBC,EAAI,EACJpD,EAASmD,UAAUnD,OACnBqD,GAAO,EAaX,IAVsB,kBAAXhB,IACVgB,EAAOhB,EACPA,EAASc,UAAU,IAAM,CAAC,EAE1BC,EAAI,IAES,MAAVf,GAAqC,iBAAXA,GAAyC,mBAAXA,KAC3DA,EAAS,CAAC,GAGJe,EAAIpD,IAAUoD,EAGpB,GAAe,OAFf7C,EAAU4C,UAAUC,IAInB,IAAKd,KAAQ/B,EACZwC,EAAMJ,EAAYN,EAAQC,GAItBD,KAHJW,EAAOL,EAAYpC,EAAS+B,MAKvBe,GAAQL,IAASlB,EAAckB,KAAUC,EAAcvB,EAAQsB,MAC9DC,GACHA,GAAc,EACdC,EAAQH,GAAOrB,EAAQqB,GAAOA,EAAM,IAEpCG,EAAQH,GAAOjB,EAAciB,GAAOA,EAAM,CAAC,EAI5CX,EAAYC,EAAQ,CAAEC,KAAMA,EAAMG,SAAUK,EAAOO,EAAMH,EAAOF,WAGtC,IAATA,GACjBZ,EAAYC,EAAQ,CAAEC,KAAMA,EAAMG,SAAUO,KAQjD,OAAOX,CACR,C,gDChHA,MAAMiB,EAAUC,SAASC,cAAc,KAMhC,SAASC,EAA8BpE,GAC5C,MAAMqE,EAAqB,IAAMrE,EAAQ,IACzCiE,EAAQK,UAAYD,EACpB,MAAM7C,EAAYyC,EAAQM,YAQ1B,OAGiD,KAA/C/C,EAAUgD,WAAWhD,EAAUb,OAAS,IAC9B,SAAVX,KASKwB,IAAc6C,GAA6B7C,EACpD,C,+BC5BO,SAASiD,EAAKC,GACnB,GAAIA,EACF,MAAMA,CAEV,C,4BCTA,IAAIC,EAAgB,kCAEhBC,EAAgB,MAChBC,EAAmB,OAGnBC,EAAiB,yCACjBC,EAAc,QACdC,EAAc,uDACdC,EAAkB,UAGlBC,EAAa,aAMbC,EAAe,GA8OnB,SAASrE,EAAKsE,GACZ,OAAOA,EAAMA,EAAIlF,QAAQgF,EAAYC,GAAgBA,CACvD,CAnOA5B,EAAOC,QAAU,SAAS6B,EAAOnE,GAC/B,GAAqB,iBAAVmE,EACT,MAAM,IAAI3D,UAAU,mCAGtB,IAAK2D,EAAO,MAAO,GAEnBnE,EAAUA,GAAW,CAAC,EAKtB,IAAIoE,EAAS,EACTC,EAAS,EAOb,SAASC,EAAeJ,GACtB,IAAIK,EAAQL,EAAIM,MAAMd,GAClBa,IAAOH,GAAUG,EAAM9E,QAC3B,IAAIoD,EAAIqB,EAAIO,YAvCF,MAwCVJ,GAAUxB,EAAIqB,EAAIzE,OAASoD,EAAIwB,EAASH,EAAIzE,MAC9C,CAOA,SAASiF,IACP,IAAInF,EAAQ,CAAEoF,KAAMP,EAAQC,OAAQA,GACpC,OAAO,SAASO,GAGd,OAFAA,EAAKF,SAAW,IAAIG,EAAStF,GAC7BX,IACOgG,CACT,CACF,CAUA,SAASC,EAAStF,GAChBuF,KAAKvF,MAAQA,EACbuF,KAAKtF,IAAM,CAAEmF,KAAMP,EAAQC,OAAQA,GACnCS,KAAKvE,OAASP,EAAQO,MACxB,CAKAsE,EAASjE,UAAUmE,QAAUZ,EAE7B,IAAIa,EAAa,GAQjB,SAASxB,EAAMyB,GACb,IAAIC,EAAM,IAAIC,MACZnF,EAAQO,OAAS,IAAM6D,EAAS,IAAMC,EAAS,KAAOY,GAQxD,GANAC,EAAIE,OAASH,EACbC,EAAIG,SAAWrF,EAAQO,OACvB2E,EAAIP,KAAOP,EACXc,EAAIb,OAASA,EACba,EAAI3E,OAAS4D,GAETnE,EAAQsF,OAGV,MAAMJ,EAFNF,EAAWnF,KAAKqF,EAIpB,CAQA,SAASV,EAAMe,GACb,IAAIC,EAAID,EAAGE,KAAKtB,GAChB,GAAKqB,EAAL,CACA,IAAItB,EAAMsB,EAAE,GAGZ,OAFAlB,EAAeJ,GACfC,EAAQA,EAAMxE,MAAMuE,EAAIzE,QACjB+F,CAJO,CAKhB,CAKA,SAAS5G,IACP4F,EAAMb,EACR,CAQA,SAAS+B,EAASC,GAChB,IAAIC,EAEJ,IADAD,EAAQA,GAAS,GACTC,EAAIC,MACA,IAAND,GACFD,EAAM9F,KAAK+F,GAGf,OAAOD,CACT,CAQA,SAASE,IACP,IAAIC,EAAMpB,IACV,GAnJgB,KAmJKP,EAAM4B,OAAO,IAlJvB,KAkJyC5B,EAAM4B,OAAO,GAAjE,CAGA,IADA,IAAIlD,EAAI,EAENoB,GAAgBE,EAAM4B,OAAOlD,KAtJpB,KAuJIsB,EAAM4B,OAAOlD,IAxJZ,KAwJmCsB,EAAM4B,OAAOlD,EAAI,OAEhEA,EAIJ,GAFAA,GAAK,EAEDoB,IAAiBE,EAAM4B,OAAOlD,EAAI,GACpC,OAAOW,EAAM,0BAGf,IAAIU,EAAMC,EAAMxE,MAAM,EAAGkD,EAAI,GAM7B,OALAwB,GAAU,EACVC,EAAeJ,GACfC,EAAQA,EAAMxE,MAAMkD,GACpBwB,GAAU,EAEHyB,EAAI,CACT/G,KApKa,UAqKb8G,QAAS3B,GAvBgE,CAyB7E,CAQA,SAAS8B,IACP,IAAIF,EAAMpB,IAGNuB,EAAOzB,EAAMZ,GACjB,GAAKqC,EAAL,CAIA,GAHAJ,KAGKrB,EAAMX,GAAc,OAAOL,EAAM,wBAGtC,IAAI0C,EAAM1B,EAAMV,GAEZqC,EAAML,EAAI,CACZ/G,KA7LiB,cA8LjBqH,SAAUxG,EAAKqG,EAAK,GAAGjH,QAAQyE,EAAeQ,IAC9CnF,MAAOoH,EACHtG,EAAKsG,EAAI,GAAGlH,QAAQyE,EAAeQ,IACnCA,IAMN,OAFAO,EAAMT,GAECoC,CApBU,CAqBnB,CAyBA,OADAvH,IAjBA,WACE,IAKIyH,EALAC,EAAQ,GAMZ,IAJAZ,EAASY,GAIDD,EAAOL,MACA,IAATK,IACFC,EAAMzG,KAAKwG,GACXX,EAASY,IAIb,OAAOA,CACT,CAGOC,EACT,C,+DCvLO,MAqEMC,EAeT,SAAUC,GACR,GAAIA,QACF,OAAO1D,EAGT,GAAoB,iBAAT0D,EACT,OAsDR,SAAwBC,GACtB,OAAOC,EAAYC,GAMnB,SAASA,EAAQ7D,GACf,OAAOA,EAAQ6D,UAAYF,CAC7B,CACF,CAhEeG,CAAeJ,GAIxB,GAAoB,iBAATA,EACT,OAiBR,SAAoBK,GAElB,MAAMC,EAAS,GACf,IAAI1H,GAAS,EAEb,OAASA,EAAQyH,EAAMrH,QACrBsH,EAAO1H,GAASmH,EAAeM,EAAMzH,IAGvC,OAAOsH,EAAYK,GAMnB,SAASA,IACP,IAAI3H,GAAS,EAAC,QAAA4H,EAAArE,UAAAnD,OADAyH,EAAU,IAAA7F,MAAA4F,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAVD,EAAUC,GAAAvE,UAAAuE,GAGxB,OAAS9H,EAAQ0H,EAAOtH,QACtB,GAAIsH,EAAO1H,GAAO+H,MAAMtC,KAAMoC,GAAa,OAAO,EAGpD,OAAO,CACT,CACF,CAzCeG,CAAWZ,GAGpB,GAAoB,mBAATA,EACT,OAAOE,EAAYF,GAGrB,MAAM,IAAItB,MAAM,gDAClB,EA2DJ,SAASwB,EAAYW,GACnB,OAMA,SAAexI,EAAOO,EAAOkI,GAC3B,OAAOC,QACLC,EAAmB3I,IACjBwI,EAAahG,KACXwD,KACAhG,EACiB,iBAAVO,EAAqBA,OAAQqI,EACpCH,QAAUG,GAGlB,CACF,CAQA,SAAS3E,EAAQA,GACf,OAAOyE,QACLzE,GACqB,iBAAZA,GACP,SAAUA,GACO,YAAjBA,EAAQhE,MACR,YAAagE,GACc,iBAApBA,EAAQ6D,QAErB,CAMA,SAASa,EAAmB3I,GAC1B,OACY,OAAVA,GACiB,iBAAVA,GACP,SAAUA,GACV,YAAaA,CAEjB,CCnOA,MAAM6I,EAAkB,MAClBC,EAAoB,UAEpBC,EAAKrB,EAAe,MACpBsB,EAAOtB,GAyjBb,SAAgB5B,GACd,MAAwB,OAAjBA,EAAKgC,SAAqC,OAAjBhC,EAAKgC,OACvC,IA1jBMmB,EAAIvB,EAAe,KACnBwB,EAAMxB,EAAe,MAIrByB,EAAczB,EAAe,CAEjC,WACA,OACA,UACA,WACA,WACA,KACA,SACA,QACA,WACA,QA+hBF,SAAgB5B,GACd,OAAO4C,SAAS5C,EAAKsD,YAAc,CAAC,GAAGC,OACzC,EAcA,SAAsBvD,GACpB,MAAwB,WAAjBA,EAAKgC,WAA0BhC,EAAKsD,YAAc,CAAC,GAAGE,IAC/D,IAziBMC,EAAiB7B,EAAe,CACpC,UACA,UACA,QACA,aACA,OACA,UACA,SACA,KACA,SACA,MACA,KACA,KACA,MACA,SACA,aACA,SACA,QACA,KACA,KACA,KACA,KACA,KACA,KACA,SACA,SACA,KACA,OACA,SACA,KACA,UACA,OACA,OACA,MACA,KACA,IACA,YACA,MACA,UACA,KACA,QAoCK,SAAS8B,EAAOC,EAAMvI,GAC3B,MAAMwI,EAAWxI,GAAW,CAAC,EACvByI,EAAW,aAAcF,EAAOA,EAAKE,SAAW,GAChDC,EAAQL,EAAeE,GACvB3J,EAAa+J,EAAgBJ,EAAM,CACvC3J,WAAY4J,EAAS5J,YAAc,SACnCgK,aAAa,EACbC,YAAY,IAIRC,EAAU,GAUE,SAAdP,EAAKxJ,MAAiC,YAAdwJ,EAAKxJ,MAC/B+J,EAAQjJ,QACHkJ,EAAYR,EAAM,CACnB3J,aACAgK,aAAa,EACbC,YAAY,KAgBlB,IAAIxJ,GAAS,EAGb,OAASA,EAAQoJ,EAAShJ,QAMxBqJ,EAAQjJ,QACHmJ,EACDP,EAASpJ,GAETkJ,EACA,CACE3J,aACAgK,YAAavJ,OAAQqI,EAAYgB,EACjCG,WACExJ,EAAQoJ,EAAShJ,OAAS,EAAIoI,EAAGY,EAASpJ,EAAQ,IAAMqJ,KAclE,MAAMO,EAAS,GAEf,IAAIxI,EAIJ,IAFApB,GAAS,IAEAA,EAAQyJ,EAAQrJ,QAAQ,CAC/B,MAAMX,EAAQgK,EAAQzJ,GAED,iBAAVP,OACK4I,IAAVjH,GAAuB3B,EAAQ2B,IAAOA,EAAQ3B,GACzCA,SACK4I,IAAVjH,GAAuBA,GAAS,GAClCwI,EAAOpJ,KAAK,KAAKqJ,OAAOzI,IAAU,KAGpCA,GAAS,EACTwI,EAAOpJ,KAAKf,GAEhB,CAGA,OAAOmK,EAAO/I,KAAK,GACrB,CAUA,SAAS8I,EAAuBpE,EAAM2C,EAAQ4B,GAC5C,MAAkB,YAAdvE,EAAK7F,KAuBX,SAAwB6F,EAAM2C,EAAQ4B,GAEpC,MAAMvK,EAAa+J,EAAgB/D,EAAMuE,GACnCV,EAAW7D,EAAK6D,UAAY,GAClC,IAWIW,EAEAC,EAbAhK,GAAS,EAETiK,EAAQ,GAIZ,GAAIrB,EAAYrD,GACd,OAAO0E,EAuBLzB,EAAGjD,IAaLoD,EAAIpD,KAEJ2E,EAAAA,EAAAA,GAAUhC,EAAQ3C,EAAMoD,GAdxBqB,EAAS,KAqBFtB,EAAEnD,IACTwE,EAAS,EACTC,EAAS,GAMFhB,EAAezD,KACtBwE,EAAS,EACTC,EAAS,GAMX,OAAShK,EAAQoJ,EAAShJ,QACxB6J,EAAQA,EAAME,OACZR,EAAuBP,EAASpJ,GAAQuF,EAAM,CAC5ChG,aACAgK,YAAavJ,OAAQqI,EAAY0B,EACjCP,WACExJ,EAAQoJ,EAAShJ,OAAS,EAAIoI,EAAGY,EAASpJ,EAAQ,IAAMgK,KAY9DvB,EAAKlD,KAEL2E,EAAAA,EAAAA,GAAUhC,EAAQ3C,EAAMkD,IAExBwB,EAAMzJ,KAAK,MAITuJ,GAAQE,EAAMG,QAAQL,GACtBC,GAAQC,EAAMzJ,KAAKwJ,GAEvB,OAAOC,CACT,CA5HWI,CAAe9E,EAAM2C,EAAQ4B,GAGpB,SAAdvE,EAAK7F,KACoB,WAApBoK,EAAKvK,WACRmK,EAAYnE,EAAMuE,GA8O1B,SAAwBvE,GACtB,MAAO,CAACxF,OAAOwF,EAAK9F,OACtB,CA/OQ6K,CAAe/E,GAGd,EACT,CA4IA,SAASmE,EAAYnE,EAAMuE,GACzB,MAAMrK,EAAQM,OAAOwF,EAAK9F,OAEpByF,EAAQ,GAER0E,EAAS,GACf,IAAI1J,EAAQ,EAEZ,KAAOA,GAAST,EAAMW,QAAQ,CAC5BkI,EAAgBiC,UAAYrK,EAE5B,MAAMiF,EAAQmD,EAAgBlC,KAAK3G,GAC7BU,EAAMgF,GAAS,UAAWA,EAAQA,EAAMnF,MAAQP,EAAMW,OAE5D8E,EAAM1E,KAGJgK,EAIE/K,EACGa,MAAMJ,EAAOC,GACbR,QAAQ,kDAAmD,IACpD,IAAVO,GAAc4J,EAAKP,YACnBpJ,IAAQV,EAAMW,QAAS0J,EAAKN,aAIhCtJ,EAAQC,EAAM,CAChB,CAOA,IAEIU,EAFAb,GAAS,EAIb,OAASA,EAAQkF,EAAM9E,QAKkC,OAArD8E,EAAMlF,GAAOiE,WAAWiB,EAAMlF,GAAOI,OAAS,IAC7CJ,EAAQkF,EAAM9E,OAAS,GACa,OAAnC8E,EAAMlF,EAAQ,GAAGiE,WAAW,IAE9B2F,EAAOpJ,KAAK0E,EAAMlF,IAClBa,OAAOwH,GAmBAnD,EAAMlF,IACO,iBAATa,GAAmB+I,EAAOpJ,KAAKK,GAC1C+I,EAAOpJ,KAAK0E,EAAMlF,IAClBa,EAAO,GACY,IAAVb,GAAeA,IAAUkF,EAAM9E,OAAS,GAIjDwJ,EAAOpJ,KAAK,GAIhB,OAAOoJ,CACT,CA+BA,SAASY,EAA6B/K,EAAO8J,EAAaC,GAExD,MAAMI,EAAS,GACf,IAEIzJ,EAFAD,EAAQ,EAIZ,KAAOA,EAAQT,EAAMW,QAAQ,CAC3BmI,EAAkBgC,UAAYrK,EAC9B,MAAMiF,EAAQoD,EAAkBnC,KAAK3G,GACrCU,EAAMgF,EAAQA,EAAMnF,MAAQP,EAAMW,OAI7BF,GAAUC,IAAOgF,GAAUoE,GAC9BK,EAAOpJ,KAAK,IAGVN,IAAUC,GACZyJ,EAAOpJ,KAAKf,EAAMa,MAAMJ,EAAOC,IAGjCD,EAAQiF,EAAQhF,EAAMgF,EAAM,GAAG/E,OAASD,CAC1C,CASA,OAJID,IAAUC,GAAQqJ,GACpBI,EAAOpJ,KAAK,IAGPoJ,EAAO/I,KAAK,IACrB,CAcA,SAASyI,EAAgB/D,EAAMuE,GAC7B,GAAkB,YAAdvE,EAAK7F,KAAoB,CAC3B,MAAMmJ,EAAatD,EAAKsD,YAAc,CAAC,EACvC,OAAQtD,EAAKgC,SACX,IAAK,UACL,IAAK,YACL,IAAK,MACH,MAAO,MAGT,IAAK,OACH,MAAO,SAGT,IAAK,MACH,OAAOsB,EAAW4B,KAAO,WAAa,MAGxC,IAAK,KACL,IAAK,KACH,OAAO5B,EAAW6B,OAAS,SAAWZ,EAAKvK,WAG7C,IAAK,WACH,MAAO,WAKb,CAEA,OAAOuK,EAAKvK,UACd,C,+DCvlBA,MAAMoL,EAAS,IAAIC,UAGZ,SAASC,EAAmBpL,EAAOkB,GACxC,MAAM4E,EAAO5E,GAASmK,SAaxB,SAAuBrL,GACrB,MAAMsL,EAAWpH,SAASC,cAAc,YAExC,OADAmH,EAAShH,UAAYtE,EACdsL,EAASrF,OAClB,CAhBMsF,CAAcvL,GACdkL,EAAOM,gBAAgBxL,EAAO,aAElC,OAA4ByL,EAAAA,EAAAA,GAAQ3F,EACtC,C","sources":["../node_modules/hast-util-whitespace/index.js","../node_modules/comma-separated-tokens/index.js","../node_modules/ccount/index.js","../node_modules/extend/index.js","../node_modules/decode-named-character-reference/index.dom.js","../node_modules/bail/index.js","../node_modules/inline-style-parser/index.js","../node_modules/hast-util-is-element/lib/index.js","../node_modules/hast-util-to-text/lib/index.js","../node_modules/hast-util-from-html-isomorphic/lib/browser.js"],"sourcesContent":["/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {unknown} thing\n *   Thing to check (typically `Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`).\n *   If a node is passed it must be a `Text` node, whose `value` field is\n *   checked.\n */\nexport function whitespace(thing) {\n  /** @type {string} */\n  const value =\n    // @ts-expect-error looks like a node.\n    thing && typeof thing === 'object' && thing.type === 'text'\n      ? // @ts-expect-error looks like a text.\n        thing.value || ''\n      : thing\n\n  // HTML whitespace expression.\n  // See <https://infra.spec.whatwg.org/#ascii-whitespace>.\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === ''\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string | false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const character = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  if (\n    // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n    // yield `null`.\n    character.charCodeAt(character.length - 1) === 59 /* `;` */ &&\n    value !== 'semi'\n  ) {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return character === characterReference ? false : character\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function(style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function(node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Parents} Parents\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is an element.\n * @param {unknown} this\n *   Context object (`this`) to call `test` with\n * @param {unknown} [element]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   Position of `element` in its parent.\n * @param {Parents | null | undefined} [parent]\n *   Parent of `element`.\n * @returns {boolean}\n *   Whether this is an element and passes a test.\n *\n * @typedef {Array<TestFunction | string> | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary element.\n *\n *   * when `string`, checks that the element has that tag name\n *   * when `function`, see `TestFunction`\n *   * when `Array`, checks if one of the subtests pass\n *\n * @callback TestFunction\n *   Check if an element passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Element} element\n *   An element.\n * @param {number | undefined} [index]\n *   Position of `element` in its parent.\n * @param {Parents | undefined} [parent]\n *   Parent of `element`.\n * @returns {boolean | undefined | void}\n *   Whether this element passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `element` is an `Element` and whether it passes the given test.\n *\n * @param element\n *   Thing to check, typically `element`.\n * @param test\n *   Check for a specific element.\n * @param index\n *   Position of `element` in its parent.\n * @param parent\n *   Parent of `element`.\n * @param context\n *   Context object (`this`) to call `test` with.\n * @returns\n *   Whether `element` is an `Element` and passes a test.\n * @throws\n *   When an incorrect `test`, `index`, or `parent` is given; there is no error\n *   thrown when `element` is not a node or not an element.\n */\nexport const isElement =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends TestFunction>(element: unknown, test: Condition, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & Predicate<Condition, Element>) &\n   *   (<Condition extends string>(element: unknown, test: Condition, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & {tagName: Condition}) &\n   *   ((element?: null | undefined) => false) &\n   *   ((element: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element) &\n   *   ((element: unknown, test?: Test, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [element]\n     * @param {Test | undefined} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parents | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (element, test, index, parent, context) {\n      const check = convertElement(test)\n\n      if (\n        index !== null &&\n        index !== undefined &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite `index`')\n      }\n\n      if (\n        parent !== null &&\n        parent !== undefined &&\n        (!parent.type || !parent.children)\n      ) {\n        throw new Error('Expected valid `parent`')\n      }\n\n      if (\n        (index === null || index === undefined) !==\n        (parent === null || parent === undefined)\n      ) {\n        throw new Error('Expected both `index` and `parent`')\n      }\n\n      return looksLikeAnElement(element)\n        ? check.call(context, element, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate a check from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * an `element`, `index`, and `parent`.\n *\n * @param test\n *   A test for a specific element.\n * @returns\n *   A check.\n */\nexport const convertElement =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends TestFunction>(test: Condition) => (element: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & Predicate<Condition, Element>) &\n   *   (<Condition extends string>(test: Condition) => (element: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & {tagName: Condition}) &\n   *   ((test?: null | undefined) => (element?: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test | null | undefined} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return element\n      }\n\n      if (typeof test === 'string') {\n        return tagNameFactory(test)\n      }\n\n      // Assume array.\n      if (typeof test === 'object') {\n        return anyFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or array as `test`')\n    }\n  )\n\n/**\n * Handle multiple tests.\n *\n * @param {Array<TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convertElement(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn a string into a test for an element with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction tagNameFactory(check) {\n  return castFactory(tagName)\n\n  /**\n   * @param {Element} element\n   * @returns {boolean}\n   */\n  function tagName(element) {\n    return element.tagName === check\n  }\n}\n\n/**\n * Turn a custom test into a test for an element that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeAnElement(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\n/**\n * Make sure something is an element.\n *\n * @param {unknown} element\n * @returns {element is Element}\n */\nfunction element(element) {\n  return Boolean(\n    element &&\n      typeof element === 'object' &&\n      'type' in element &&\n      element.type === 'element' &&\n      'tagName' in element &&\n      typeof element.tagName === 'string'\n  )\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Element}\n */\nfunction looksLikeAnElement(value) {\n  return (\n    value !== null &&\n    typeof value === 'object' &&\n    'type' in value &&\n    'tagName' in value\n  )\n}\n","/**\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast-util-is-element').TestFunction} TestFunction\n */\n\n/**\n * @typedef {'normal' | 'nowrap' | 'pre' | 'pre-wrap'} Whitespace\n *   Valid and useful whitespace values (from CSS).\n *\n * @typedef {0 | 1 | 2} BreakNumber\n *   Specific break:\n *\n *   *   `0` — space\n *   *   `1` — line ending\n *   *   `2` — blank line\n *\n * @typedef {'\\n'} BreakForce\n *   Forced break.\n *\n * @typedef {boolean} BreakValue\n *   Whether there was a break.\n *\n * @typedef {BreakNumber | BreakValue | undefined} BreakBefore\n *   Any value for a break before.\n *\n * @typedef {BreakForce | BreakNumber | BreakValue | undefined} BreakAfter\n *   Any value for a break after.\n *\n * @typedef CollectionInfo\n *   Info on current collection.\n * @property {BreakAfter} breakAfter\n *   Whether there was a break after.\n * @property {BreakBefore} breakBefore\n *   Whether there was a break before.\n * @property {Whitespace} whitespace\n *   Current whitespace setting.\n *\n * @typedef Options\n *   Configuration.\n * @property {Whitespace | null | undefined} [whitespace='normal']\n *   Initial CSS whitespace setting to use (default: `'normal'`).\n */\n\nimport {findAfter} from 'unist-util-find-after'\nimport {convertElement} from 'hast-util-is-element'\n\nconst searchLineFeeds = /\\n/g\nconst searchTabOrSpaces = /[\\t ]+/g\n\nconst br = convertElement('br')\nconst cell = convertElement(isCell)\nconst p = convertElement('p')\nconst row = convertElement('tr')\n\n// Note that we don’t need to include void elements here as they don’t have text.\n// See: <https://github.com/wooorm/html-void-elements>\nconst notRendered = convertElement([\n  // List from: <https://html.spec.whatwg.org/multipage/rendering.html#hidden-elements>\n  'datalist',\n  'head',\n  'noembed',\n  'noframes',\n  'noscript', // Act as if we support scripting.\n  'rp',\n  'script',\n  'style',\n  'template',\n  'title',\n  // Hidden attribute.\n  hidden,\n  // From: <https://html.spec.whatwg.org/multipage/rendering.html#flow-content-3>\n  closedDialog\n])\n\n// See: <https://html.spec.whatwg.org/multipage/rendering.html#the-css-user-agent-style-sheet-and-presentational-hints>\nconst blockOrCaption = convertElement([\n  'address', // Flow content\n  'article', // Sections and headings\n  'aside', // Sections and headings\n  'blockquote', // Flow content\n  'body', // Page\n  'caption', // `table-caption`\n  'center', // Flow content (legacy)\n  'dd', // Lists\n  'dialog', // Flow content\n  'dir', // Lists (legacy)\n  'dl', // Lists\n  'dt', // Lists\n  'div', // Flow content\n  'figure', // Flow content\n  'figcaption', // Flow content\n  'footer', // Flow content\n  'form,', // Flow content\n  'h1', // Sections and headings\n  'h2', // Sections and headings\n  'h3', // Sections and headings\n  'h4', // Sections and headings\n  'h5', // Sections and headings\n  'h6', // Sections and headings\n  'header', // Flow content\n  'hgroup', // Sections and headings\n  'hr', // Flow content\n  'html', // Page\n  'legend', // Flow content\n  'li', // Lists (as `display: list-item`)\n  'listing', // Flow content (legacy)\n  'main', // Flow content\n  'menu', // Lists\n  'nav', // Sections and headings\n  'ol', // Lists\n  'p', // Flow content\n  'plaintext', // Flow content (legacy)\n  'pre', // Flow content\n  'section', // Sections and headings\n  'ul', // Lists\n  'xmp' // Flow content (legacy)\n])\n\n/**\n * Get the plain-text value of a node.\n *\n * ###### Algorithm\n *\n * *   if `tree` is a comment, returns its `value`\n * *   if `tree` is a text, applies normal whitespace collapsing to its\n *     `value`, as defined by the CSS Text spec\n * *   if `tree` is a root or element, applies an algorithm similar to the\n *     `innerText` getter as defined by HTML\n *\n * ###### Notes\n *\n * > 👉 **Note**: the algorithm acts as if `tree` is being rendered, and as if\n * > we’re a CSS-supporting user agent, with scripting enabled.\n *\n * *   if `tree` is an element that is not displayed (such as a `head`), we’ll\n *     still use the `innerText` algorithm instead of switching to `textContent`\n * *   if descendants of `tree` are elements that are not displayed, they are\n *     ignored\n * *   CSS is not considered, except for the default user agent style sheet\n * *   a line feed is collapsed instead of ignored in cases where Fullwidth, Wide,\n *     or Halfwidth East Asian Width characters are used, the same goes for a case\n *     with Chinese, Japanese, or Yi writing systems\n * *   replaced elements (such as `audio`) are treated like non-replaced elements\n *\n * @param {Nodes} tree\n *   Tree to turn into text.\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `tree`.\n */\nexport function toText(tree, options) {\n  const options_ = options || {}\n  const children = 'children' in tree ? tree.children : []\n  const block = blockOrCaption(tree)\n  const whitespace = inferWhitespace(tree, {\n    whitespace: options_.whitespace || 'normal',\n    breakBefore: false,\n    breakAfter: false\n  })\n\n  /** @type {Array<BreakNumber | string>} */\n  const results = []\n\n  // Treat `text` and `comment` as having normal white-space.\n  // This deviates from the spec as in the DOM the node’s `.data` has to be\n  // returned.\n  // If you want that behavior use `hast-util-to-string`.\n  // All other nodes are later handled as if they are `element`s (so the\n  // algorithm also works on a `root`).\n  // Nodes without children are treated as a void element, so `doctype` is thus\n  // ignored.\n  if (tree.type === 'text' || tree.type === 'comment') {\n    results.push(\n      ...collectText(tree, {\n        whitespace,\n        breakBefore: true,\n        breakAfter: true\n      })\n    )\n  }\n\n  // 1.  If this element is not being rendered, or if the user agent is a\n  //     non-CSS user agent, then return the same value as the textContent IDL\n  //     attribute on this element.\n  //\n  //     Note: we’re not supporting stylesheets so we’re acting as if the node\n  //     is rendered.\n  //\n  //     If you want that behavior use `hast-util-to-string`.\n  //     Important: we’ll have to account for this later though.\n\n  // 2.  Let results be a new empty list.\n  let index = -1\n\n  // 3.  For each child node node of this element:\n  while (++index < children.length) {\n    // 3.1. Let current be the list resulting in running the inner text\n    //      collection steps with node.\n    //      Each item in results will either be a JavaScript string or a\n    //      positive integer (a required line break count).\n    // 3.2. For each item item in current, append item to results.\n    results.push(\n      ...renderedTextCollection(\n        children[index],\n        // @ts-expect-error: `tree` is a parent if we’re here.\n        tree,\n        {\n          whitespace,\n          breakBefore: index ? undefined : block,\n          breakAfter:\n            index < children.length - 1 ? br(children[index + 1]) : block\n        }\n      )\n    )\n  }\n\n  // 4.  Remove any items from results that are the empty string.\n  // 5.  Remove any runs of consecutive required line break count items at the\n  //     start or end of results.\n  // 6.  Replace each remaining run of consecutive required line break count\n  //     items with a string consisting of as many U+000A LINE FEED (LF)\n  //     characters as the maximum of the values in the required line break\n  //     count items.\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {number | undefined} */\n  let count\n\n  index = -1\n\n  while (++index < results.length) {\n    const value = results[index]\n\n    if (typeof value === 'number') {\n      if (count !== undefined && value > count) count = value\n    } else if (value) {\n      if (count !== undefined && count > -1) {\n        result.push('\\n'.repeat(count) || ' ')\n      }\n\n      count = -1\n      result.push(value)\n    }\n  }\n\n  // 7.  Return the concatenation of the string items in results.\n  return result.join('')\n}\n\n/**\n * <https://html.spec.whatwg.org/multipage/dom.html#rendered-text-collection-steps>\n *\n * @param {Nodes} node\n * @param {Parents} parent\n * @param {CollectionInfo} info\n * @returns {Array<BreakNumber | string>}\n */\nfunction renderedTextCollection(node, parent, info) {\n  if (node.type === 'element') {\n    return collectElement(node, parent, info)\n  }\n\n  if (node.type === 'text') {\n    return info.whitespace === 'normal'\n      ? collectText(node, info)\n      : collectPreText(node)\n  }\n\n  return []\n}\n\n/**\n * Collect an element.\n *\n * @param {Element} node\n *   Element node.\n * @param {Parents} parent\n * @param {CollectionInfo} info\n *   Info on current collection.\n * @returns {Array<BreakNumber | string>}\n */\nfunction collectElement(node, parent, info) {\n  // First we infer the `white-space` property.\n  const whitespace = inferWhitespace(node, info)\n  const children = node.children || []\n  let index = -1\n  /** @type {Array<BreakNumber | string>} */\n  let items = []\n\n  // We’re ignoring point 3, and exiting without any content here, because we\n  // deviated from the spec in `toText` at step 3.\n  if (notRendered(node)) {\n    return items\n  }\n\n  /** @type {BreakNumber | undefined} */\n  let prefix\n  /** @type {BreakForce | BreakNumber | undefined} */\n  let suffix\n  // Note: we first detect if there is going to be a break before or after the\n  // contents, as that changes the white-space handling.\n\n  // 2.  If node’s computed value of `visibility` is not `visible`, then return\n  //     items.\n  //\n  //     Note: Ignored, as everything is visible by default user agent styles.\n\n  // 3.  If node is not being rendered, then return items. [...]\n  //\n  //     Note: We already did this above.\n\n  // See `collectText` for step 4.\n\n  // 5.  If node is a `<br>` element, then append a string containing a single\n  //     U+000A LINE FEED (LF) character to items.\n  if (br(node)) {\n    suffix = '\\n'\n  }\n\n  // 7.  If node’s computed value of `display` is `table-row`, and node’s CSS\n  //     box is not the last `table-row` box of the nearest ancestor `table`\n  //     box, then append a string containing a single U+000A LINE FEED (LF)\n  //     character to items.\n  //\n  //     See: <https://html.spec.whatwg.org/multipage/rendering.html#tables-2>\n  //     Note: needs further investigation as this does not account for implicit\n  //     rows.\n  else if (\n    row(node) &&\n    // @ts-expect-error: something up with types of parents.\n    findAfter(parent, node, row)\n  ) {\n    suffix = '\\n'\n  }\n\n  // 8.  If node is a `<p>` element, then append 2 (a required line break count)\n  //     at the beginning and end of items.\n  else if (p(node)) {\n    prefix = 2\n    suffix = 2\n  }\n\n  // 9.  If node’s used value of `display` is block-level or `table-caption`,\n  //     then append 1 (a required line break count) at the beginning and end of\n  //     items.\n  else if (blockOrCaption(node)) {\n    prefix = 1\n    suffix = 1\n  }\n\n  // 1.  Let items be the result of running the inner text collection steps with\n  //     each child node of node in tree order, and then concatenating the\n  //     results to a single list.\n  while (++index < children.length) {\n    items = items.concat(\n      renderedTextCollection(children[index], node, {\n        whitespace,\n        breakBefore: index ? undefined : prefix,\n        breakAfter:\n          index < children.length - 1 ? br(children[index + 1]) : suffix\n      })\n    )\n  }\n\n  // 6.  If node’s computed value of `display` is `table-cell`, and node’s CSS\n  //     box is not the last `table-cell` box of its enclosing `table-row` box,\n  //     then append a string containing a single U+0009 CHARACTER TABULATION\n  //     (tab) character to items.\n  //\n  //     See: <https://html.spec.whatwg.org/multipage/rendering.html#tables-2>\n  if (\n    cell(node) &&\n    // @ts-expect-error: something up with types of parents.\n    findAfter(parent, node, cell)\n  ) {\n    items.push('\\t')\n  }\n\n  // Add the pre- and suffix.\n  if (prefix) items.unshift(prefix)\n  if (suffix) items.push(suffix)\n\n  return items\n}\n\n/**\n * 4.  If node is a Text node, then for each CSS text box produced by node,\n *     in content order, compute the text of the box after application of the\n *     CSS `white-space` processing rules and `text-transform` rules, set\n *     items to the list of the resulting strings, and return items.\n *     The CSS `white-space` processing rules are slightly modified:\n *     collapsible spaces at the end of lines are always collapsed, but they\n *     are only removed if the line is the last line of the block, or it ends\n *     with a br element.\n *     Soft hyphens should be preserved.\n *\n *     Note: See `collectText` and `collectPreText`.\n *     Note: we don’t deal with `text-transform`, no element has that by\n *     default.\n *\n * See: <https://drafts.csswg.org/css-text/#white-space-phase-1>\n *\n * @param {Comment | Text} node\n *   Text node.\n * @param {CollectionInfo} info\n *   Info on current collection.\n * @returns {Array<BreakNumber | string>}\n *   Result.\n */\nfunction collectText(node, info) {\n  const value = String(node.value)\n  /** @type {Array<string>} */\n  const lines = []\n  /** @type {Array<BreakNumber | string>} */\n  const result = []\n  let start = 0\n\n  while (start <= value.length) {\n    searchLineFeeds.lastIndex = start\n\n    const match = searchLineFeeds.exec(value)\n    const end = match && 'index' in match ? match.index : value.length\n\n    lines.push(\n      // Any sequence of collapsible spaces and tabs immediately preceding or\n      // following a segment break is removed.\n      trimAndCollapseSpacesAndTabs(\n        // […] ignoring bidi formatting characters (characters with the\n        // Bidi_Control property [UAX9]: ALM, LTR, RTL, LRE-RLO, LRI-PDI) as if\n        // they were not there.\n        value\n          .slice(start, end)\n          .replace(/[\\u061C\\u200E\\u200F\\u202A-\\u202E\\u2066-\\u2069]/g, ''),\n        start === 0 ? info.breakBefore : true,\n        end === value.length ? info.breakAfter : true\n      )\n    )\n\n    start = end + 1\n  }\n\n  // Collapsible segment breaks are transformed for rendering according to the\n  // segment break transformation rules.\n  // So here we jump to 4.1.2 of [CSSTEXT]:\n  // Any collapsible segment break immediately following another collapsible\n  // segment break is removed\n  let index = -1\n  /** @type {BreakNumber | undefined} */\n  let join\n\n  while (++index < lines.length) {\n    // *   If the character immediately before or immediately after the segment\n    //     break is the zero-width space character (U+200B), then the break is\n    //     removed, leaving behind the zero-width space.\n    if (\n      lines[index].charCodeAt(lines[index].length - 1) === 0x20_0b /* ZWSP */ ||\n      (index < lines.length - 1 &&\n        lines[index + 1].charCodeAt(0) === 0x20_0b) /* ZWSP */\n    ) {\n      result.push(lines[index])\n      join = undefined\n    }\n\n    // *   Otherwise, if the East Asian Width property [UAX11] of both the\n    //     character before and after the segment break is Fullwidth, Wide, or\n    //     Halfwidth (not Ambiguous), and neither side is Hangul, then the\n    //     segment break is removed.\n    //\n    //     Note: ignored.\n    // *   Otherwise, if the writing system of the segment break is Chinese,\n    //     Japanese, or Yi, and the character before or after the segment break\n    //     is punctuation or a symbol (Unicode general category P* or S*) and\n    //     has an East Asian Width property of Ambiguous, and the character on\n    //     the other side of the segment break is Fullwidth, Wide, or Halfwidth,\n    //     and not Hangul, then the segment break is removed.\n    //\n    //     Note: ignored.\n\n    // *   Otherwise, the segment break is converted to a space (U+0020).\n    else if (lines[index]) {\n      if (typeof join === 'number') result.push(join)\n      result.push(lines[index])\n      join = 0\n    } else if (index === 0 || index === lines.length - 1) {\n      // If this line is empty, and it’s the first or last, add a space.\n      // Note that this function is only called in normal whitespace, so we\n      // don’t worry about `pre`.\n      result.push(0)\n    }\n  }\n\n  return result\n}\n\n/**\n * Collect a text node as “pre” whitespace.\n *\n * @param {Text} node\n *   Text node.\n * @returns {Array<BreakNumber | string>}\n *   Result.\n */\nfunction collectPreText(node) {\n  return [String(node.value)]\n}\n\n/**\n * 3.  Every collapsible tab is converted to a collapsible space (U+0020).\n * 4.  Any collapsible space immediately following another collapsible\n *     space—even one outside the boundary of the inline containing that\n *     space, provided both spaces are within the same inline formatting\n *     context—is collapsed to have zero advance width. (It is invisible,\n *     but retains its soft wrap opportunity, if any.)\n *\n * @param {string} value\n *   Value to collapse.\n * @param {BreakBefore} breakBefore\n *   Whether there was a break before.\n * @param {BreakAfter} breakAfter\n *   Whether there was a break after.\n * @returns {string}\n *   Result.\n */\nfunction trimAndCollapseSpacesAndTabs(value, breakBefore, breakAfter) {\n  /** @type {Array<string>} */\n  const result = []\n  let start = 0\n  /** @type {number | undefined} */\n  let end\n\n  while (start < value.length) {\n    searchTabOrSpaces.lastIndex = start\n    const match = searchTabOrSpaces.exec(value)\n    end = match ? match.index : value.length\n\n    // If we’re not directly after a segment break, but there was white space,\n    // add an empty value that will be turned into a space.\n    if (!start && !end && match && !breakBefore) {\n      result.push('')\n    }\n\n    if (start !== end) {\n      result.push(value.slice(start, end))\n    }\n\n    start = match ? end + match[0].length : end\n  }\n\n  // If we reached the end, there was trailing white space, and there’s no\n  // segment break after this node, add an empty value that will be turned\n  // into a space.\n  if (start !== end && !breakAfter) {\n    result.push('')\n  }\n\n  return result.join(' ')\n}\n\n/**\n * Figure out the whitespace of a node.\n *\n * We don’t support void elements here (so `nobr wbr` -> `normal` is ignored).\n *\n * @param {Nodes} node\n *   Node (typically `Element`).\n * @param {CollectionInfo} info\n *   Info on current collection.\n * @returns {Whitespace}\n *   Applied whitespace.\n */\nfunction inferWhitespace(node, info) {\n  if (node.type === 'element') {\n    const properties = node.properties || {}\n    switch (node.tagName) {\n      case 'listing':\n      case 'plaintext':\n      case 'xmp': {\n        return 'pre'\n      }\n\n      case 'nobr': {\n        return 'nowrap'\n      }\n\n      case 'pre': {\n        return properties.wrap ? 'pre-wrap' : 'pre'\n      }\n\n      case 'td':\n      case 'th': {\n        return properties.noWrap ? 'nowrap' : info.whitespace\n      }\n\n      case 'textarea': {\n        return 'pre-wrap'\n      }\n\n      default:\n    }\n  }\n\n  return info.whitespace\n}\n\n/**\n * @type {TestFunction}\n * @param {Element} node\n * @returns {node is {properties: {hidden: true}}}\n */\nfunction hidden(node) {\n  return Boolean((node.properties || {}).hidden)\n}\n\n/**\n * @type {TestFunction}\n * @param {Element} node\n * @returns {node is {tagName: 'td' | 'th'}}\n */\nfunction isCell(node) {\n  return node.tagName === 'td' || node.tagName === 'th'\n}\n\n/**\n * @type {TestFunction}\n */\nfunction closedDialog(node) {\n  return node.tagName === 'dialog' && !(node.properties || {}).open\n}\n","/**\n * @typedef {import('hast').Root} Root\n *\n * @typedef {typeof import('./index.js').fromHtmlIsomorphic} FromHtmlIsomorphic\n */\n\nimport {fromDom} from 'hast-util-from-dom'\n\nconst parser = new DOMParser()\n\n/** @type {FromHtmlIsomorphic} */\nexport function fromHtmlIsomorphic(value, options) {\n  const node = options?.fragment\n    ? parseFragment(value)\n    : parser.parseFromString(value, 'text/html')\n\n  return /** @type {Root} */ (fromDom(node))\n}\n\n/**\n * Parse as a fragment.\n *\n * @param {string} value\n * @returns {DocumentFragment}\n */\nfunction parseFragment(value) {\n  const template = document.createElement('template')\n  template.innerHTML = value\n  return template.content\n}\n"],"names":["whitespace","thing","value","type","replace","parse","tokens","input","String","index","indexOf","start","end","length","token","slice","trim","push","stringify","values","options","settings","join","padRight","padLeft","ccount","character","source","TypeError","count","hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","name","enumerable","configurable","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","deep","element","document","createElement","decodeNamedCharacterReference","characterReference","innerHTML","textContent","charCodeAt","bail","error","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","str","style","lineno","column","updatePosition","lines","match","lastIndexOf","position","line","node","Position","this","content","errorsList","msg","err","Error","reason","filename","silent","re","m","exec","comments","rules","c","comment","pos","charAt","declaration","prop","val","ret","property","decl","decls","declarations","convertElement","test","check","castFactory","tagName","tagNameFactory","tests","checks","any","_len","parameters","_key","apply","anyFactory","testFunction","parent","Boolean","looksLikeAnElement","undefined","searchLineFeeds","searchTabOrSpaces","br","cell","p","row","notRendered","properties","hidden","open","blockOrCaption","toText","tree","options_","children","block","inferWhitespace","breakBefore","breakAfter","results","collectText","renderedTextCollection","result","repeat","info","prefix","suffix","items","findAfter","concat","unshift","collectElement","collectPreText","lastIndex","trimAndCollapseSpacesAndTabs","wrap","noWrap","parser","DOMParser","fromHtmlIsomorphic","fragment","template","parseFragment","parseFromString","fromDom"],"sourceRoot":""}