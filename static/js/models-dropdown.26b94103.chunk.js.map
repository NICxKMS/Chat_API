{"version":3,"file":"static/js/models-dropdown.26b94103.chunk.js","mappings":"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","sources":["components/models/ModelItem/index.js","components/models/ModelSearch/index.js","components/models/ModelDropdown/index.js"],"sourcesContent":["import { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ModelItem.module.css';\n\n/**\n * Component for displaying a single model\n * @param {Object} props - Component props\n * @param {Object} props.model - Model data\n * @param {boolean} props.selected - Whether the model is currently selected\n * @param {Function} props.onClick - Function to handle model selection\n * @param {string} props.searchTerm - Current search term for highlighting\n * @returns {JSX.Element} - Rendered component\n */\nconst ModelItem = memo(({ \n  model, \n  selected, \n  onClick,\n  searchTerm\n}) => {\n  // Highlight matching text if searchTerm is provided\n  const highlightMatch = (text) => {\n    if (!searchTerm || !text) return text;\n    \n    const regex = new RegExp(`(${searchTerm})`, 'gi');\n    const parts = text.split(regex);\n    \n    return (\n      <>\n        {parts.map((part, i) => (\n          regex.test(part) ? (\n            <span key={i} className={styles.highlight}>{part}</span>\n          ) : (\n            <span key={i}>{part}</span>\n          )\n        ))}\n      </>\n    );\n  };\n  \n  return (\n    <div \n      className={`${styles.modelItem} ${selected ? styles.selected : ''}`}\n      onClick={() => onClick(model)}\n      role=\"option\"\n      aria-selected={selected}\n    >\n      <div className={styles.modelIcon}>\n        {model.series?.charAt(0) || model.name.charAt(0)}\n      </div>\n      \n      <div className={styles.modelDetails}>\n        <div className={styles.modelName}>\n          {highlightMatch(model.name)}\n        </div>\n        \n        {model.description && (\n          <div className={styles.modelDescription}>\n            {highlightMatch(model.description)}\n          </div>\n        )}\n        \n        {model.tags && model.tags.length > 0 && (\n          <div className={styles.tags}>\n            {model.tags.map(tag => (\n              <span \n                key={tag} \n                className={styles.tag}\n                style={{\n                  backgroundColor: \n                    searchTerm && \n                    tag.toLowerCase().includes(searchTerm.toLowerCase()) \n                      ? 'rgba(var(--button-bg-rgb), 0.2)' \n                      : undefined\n                }}\n              >\n                {highlightMatch(tag)}\n              </span>\n            ))}\n          </div>\n        )}\n      </div>\n      \n      {selected && (\n        <div className={styles.selectedIndicator} data-testid=\"check-icon\">\n          <CheckIcon className={styles.checkIcon} />\n        </div>\n      )}\n    </div>\n  );\n});\n\n// SVG Check icon as a component\nconst CheckIcon = ({ className }) => (\n  <svg \n    xmlns=\"http://www.w3.org/2000/svg\" \n    viewBox=\"0 0 24 24\" \n    fill=\"none\" \n    stroke=\"currentColor\" \n    strokeWidth=\"3\" \n    strokeLinecap=\"round\" \n    strokeLinejoin=\"round\" \n    className={className}\n    aria-hidden=\"true\"\n  >\n    <polyline points=\"20 6 9 17 4 12\" />\n  </svg>\n);\n\nModelItem.propTypes = {\n  model: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    description: PropTypes.string,\n    series: PropTypes.string,\n    providerName: PropTypes.string,\n    typeGroupName: PropTypes.string,\n    tags: PropTypes.arrayOf(PropTypes.string)\n  }).isRequired,\n  selected: PropTypes.bool.isRequired,\n  onClick: PropTypes.func.isRequired,\n  searchTerm: PropTypes.string\n};\n\n// Display name for debugging\nModelItem.displayName = 'ModelItem';\n\nexport default ModelItem; ","import { useCallback, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { SearchIcon, XIcon } from '@primer/octicons-react';\nimport styles from './ModelSearch.module.css';\n\n/**\n * Search input for filtering models\n * @param {Object} props - Component props\n * @param {string} props.searchTerm - Current search term\n * @param {Function} props.onSearchChange - Search term change handler\n * @param {number} props.resultCount - Number of search results\n * @returns {JSX.Element} - Rendered component\n */\nconst ModelSearch = ({ searchTerm, onSearchChange, resultCount }) => {\n  const inputRef = useRef(null);\n  \n  // Handle search input changes\n  const handleInputChange = useCallback((e) => {\n    // Pass the value directly instead of the event object\n    if (e && typeof e === 'object' && e.target) {\n      onSearchChange(e.target.value);\n    } else {\n      console.warn('Invalid event object in ModelSearch handleInputChange');\n    }\n  }, [onSearchChange]);\n  \n  // Clear search input\n  const handleClearSearch = useCallback(() => {\n    // Pass empty string directly\n    onSearchChange('');\n    \n    // Focus the input after clearing\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [onSearchChange]);\n  \n  return (\n    <div className={styles.searchContainer}>\n      <div className={styles.inputWrapper}>\n        <SearchIcon className={styles.searchIcon} size={16} />\n        \n        <input\n          ref={inputRef}\n          type=\"text\"\n          className={styles.searchInput}\n          placeholder=\"Search models...\"\n          value={searchTerm}\n          onChange={handleInputChange}\n          aria-label=\"Search models\"\n        />\n        \n        {searchTerm && (\n          <button \n            className={styles.clearButton} \n            onClick={handleClearSearch}\n            aria-label=\"Clear search\"\n          >\n            <XIcon className={styles.clearIcon} size={16} />\n          </button>\n        )}\n      </div>\n      \n      {searchTerm && (\n        <div className={styles.results}>\n          {resultCount} {resultCount === 1 ? 'result' : 'results'}\n        </div>\n      )}\n    </div>\n  );\n};\n\nModelSearch.propTypes = {\n  searchTerm: PropTypes.string.isRequired,\n  onSearchChange: PropTypes.func.isRequired,\n  resultCount: PropTypes.number.isRequired\n};\n\nexport default ModelSearch; ","import React, { \n  useEffect, \n  useRef, \n  useCallback, \n  useMemo, \n  useState\n} from 'react';\nimport { useModel, useModelFilter } from '../../../contexts/ModelContext';\nimport ModelItem from '../ModelItem';\nimport ModelSearch from '../ModelSearch';\nimport styles from './ModelDropdown.module.css';\n\n/**\n * SelectedModelDisplay component showing the currently selected model\n */\nconst SelectedModelDisplay = React.memo(({ selectedModel }) => (\n  <div className={styles.selectedModelContainer}>\n    <div className={styles.selectedModelLabel}>Current Model:</div>\n    <div className={styles.selectedModelInfo}>\n      <h3 className={styles.modelName}>\n        {selectedModel ? selectedModel.name : 'No model selected'}\n      </h3>\n      {selectedModel && (\n        <p className={styles.modelDescription}>\n          {selectedModel.provider ? `${selectedModel.provider} - ${selectedModel.type}` : 'Model details unavailable'}\n        </p>\n      )}\n    </div>\n  </div>\n));\n\n/**\n * CapabilityTabs component for selecting model categories\n */\nconst CapabilityTabs = React.memo(({ capabilities, activeCapability, onSelectCapability }) => {\n  const tabsRef = useRef(null);\n  \n  // Scroll the selected tab into view when it changes\n  useEffect(() => {\n    if (tabsRef.current) {\n      const activeTab = tabsRef.current.querySelector(`.${styles.active}`);\n      if (activeTab) {\n        // Calculate position to center the tab in the container\n        const container = tabsRef.current;\n        const containerWidth = container.offsetWidth;\n        const tabWidth = activeTab.offsetWidth;\n        const tabLeft = activeTab.offsetLeft;\n        \n        // Center the tab\n        const scrollPosition = tabLeft - (containerWidth / 2) + (tabWidth / 2);\n        container.scrollTo({\n          left: Math.max(0, scrollPosition),\n          behavior: 'smooth'\n        });\n      }\n    }\n  }, [activeCapability]);\n  \n  return (\n    <div className={styles.capabilityTabs} ref={tabsRef}>\n      {Object.keys(capabilities).map(capability => (\n        <button\n          key={capability}\n          className={`${styles.capabilityTab} ${activeCapability === capability ? styles.active : ''}`}\n          onClick={() => onSelectCapability(capability)}\n        >\n          {capability}\n          <span> ({capabilities[capability]})</span>\n        </button>\n      ))}\n    </div>\n  );\n});\n\n/**\n * ModelList component showing the filtered and grouped models\n */\nconst ModelList = React.memo(({ isLoading, groupedModels, selectedModel, onSelectModel, searchTerm, totalCount, activeCapability, onClearSearch }) => (\n  <div className={styles.modelList} role=\"listbox\">\n    {isLoading ? (\n      <div className={styles.loading}>Loading models...</div>\n    ) : groupedModels && Object.keys(groupedModels).length > 0 ? (\n      groupedModels.map((group) => (\n        <div key={`${group.provider}-${group.type}`}>\n          <div className={styles.providerTypeHeader}>\n            <span className={styles.providerName}>{group.provider}</span>\n            <span className={styles.providerTypeSeparator}>→</span>\n            <span className={styles.typeLabel}>{group.type}</span>\n            <span className={styles.modelCount}>({group.models.length})</span>\n          </div>\n          \n          {group.models.map(model => (\n            <ModelItem\n              key={model.id}\n              model={model}\n              selected={selectedModel?.id === model.id}\n              onClick={onSelectModel}\n              searchTerm={searchTerm}\n            />\n          ))}\n        </div>\n      ))\n    ) : (\n      searchTerm && totalCount === 0 ? (\n        <div className={styles.noResults}>\n          No models found matching \"{searchTerm}\"\n          <button \n            className={styles.clearSearch}\n            onClick={onClearSearch}\n          >\n            Clear search\n          </button>\n        </div>\n      ) : (\n        <div className={styles.noResults}>\n          No {activeCapability.toLowerCase()} models available\n        </div>\n      )\n    )}\n  </div>\n));\n\n/**\n * SearchContainer component for model searching\n */\nconst SearchContainer = React.memo(({ searchTerm, onSearchChange, totalCount }) => (\n  <div className={styles.searchContainer}>\n    <ModelSearch \n      searchTerm={searchTerm}\n      onSearchChange={onSearchChange}\n      resultCount={totalCount} \n    />\n  </div>\n));\n\n/**\n * ModelSelectionPanel component for selecting models from a filterable list\n */\nconst ModelSelectionPanel = React.forwardRef(({ \n  isExperimentalModelsEnabled, \n  toggleExperimentalModels, \n  capabilitiesWithCounts, \n  activeCapability, \n  setActiveCapability,\n  isLoading,\n  groupedModels,\n  selectedModel,\n  handleSelectModel,\n  searchTerm,\n  totalCount,\n  handleClearSearch \n}, ref) => (\n  <div className={styles.modelsContainer} ref={ref}>\n    <div className={styles.fixedHeader}>\n      <CapabilityTabs \n        capabilities={capabilitiesWithCounts} \n        activeCapability={activeCapability} \n        onSelectCapability={setActiveCapability} \n      />\n    </div>\n    \n    <div className={styles.scrollableModelList}>\n      <ModelList \n        isLoading={isLoading}\n        groupedModels={groupedModels}\n        selectedModel={selectedModel}\n        onSelectModel={handleSelectModel}\n        searchTerm={searchTerm}\n        totalCount={totalCount}\n        activeCapability={activeCapability}\n        onClearSearch={handleClearSearch}\n      />\n    </div>\n  </div>\n));\n\n// Helper function to format provider name\nconst formatProviderName = (provider) => {\n  if (!provider) return '';\n  // Simple title case, handle AI\n  return provider\n    .split(' ')\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n    .join(' ')\n    .replace(/ai/gi, 'AI');\n};\n\n// Helper function to check if model should be included\nconst shouldIncludeModel = (model, showExperimental, searchTerm, provider, formattedProvider, typeGroup) => {\n  if (!model) return false;\n  if (searchTerm) {\n    const searchLower = searchTerm.toLowerCase();\n    const nameMatch = model.name?.toLowerCase().includes(searchLower) || model.displayName?.toLowerCase().includes(searchLower);\n    const providerMatch = provider?.toLowerCase().includes(searchLower) || formattedProvider?.toLowerCase().includes(searchLower);\n    const typeMatch = typeGroup?.toLowerCase().includes(searchLower);\n    const tagMatch = model.tags && model.tags.some(tag => tag?.toLowerCase().includes(searchLower));\n\n    if (!(nameMatch || providerMatch || typeMatch || tagMatch)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// ExperimentalToggle component is not currently used, commented out\n// const ExperimentalToggle = React.memo(({ isEnabled, onToggle }) => (\n//   <div className={styles.experimentalToggle}>\n//     <label className={styles.toggleLabel}>\n//       <input\n//         type=\"checkbox\"\n//         checked={isEnabled}\n//         onChange={onToggle}\n//         className={styles.toggleInput}\n//       />\n//       <span className={styles.toggleTrack}>\n//         <span className={styles.toggleThumb} />\n//       </span>\n//       <span className={styles.toggleText}>Show experimental models</span>\n//     </label>\n//   </div>\n// ));\n\n/**\n * Main ModelSelection component that orchestrates all model selection UI\n * @returns {JSX.Element} - Rendered component\n */\nconst ModelSelection = () => {\n  const { \n    processedModels, \n    selectedModel, \n    isLoading, \n    selectModel, \n    showExperimental,\n    toggleExperimentalModels\n  } = useModel();\n  \n  const {\n    modelFilter,\n    updateSearchFilter\n  } = useModelFilter();\n  \n  const [activeCapability, setActiveCapability] = useState('Chat');\n  const panelRef = useRef(null);\n  \n  const handleSelectModel = useCallback((model) => {\n    selectModel(model);\n  }, [selectModel]);\n  \n  // Handle search input changes\n  const handleSearchChange = useCallback((searchValue) => {\n    if (typeof searchValue === 'string') {\n      updateSearchFilter(searchValue);\n    } else {\n      console.warn('Invalid search value in ModelDropdown handleSearchChange');\n    }\n  }, [updateSearchFilter]);\n\n  // Handle clearing search\n  const handleClearSearch = useCallback(() => {\n    updateSearchFilter('');\n  }, [updateSearchFilter]);\n  \n  const capabilitiesWithCounts = useMemo(() => {\n    const counts = {};\n    if (processedModels) {\n      Object.keys(processedModels).forEach(category => {\n        counts[category] = Object.values(processedModels[category])\n          .flatMap(providerGroups => Object.values(providerGroups))\n          .flat()\n          .filter(model => shouldIncludeModel(model, showExperimental, modelFilter.search, model.provider, formatProviderName(model.provider), model.type))\n          .length;\n      });\n    }\n    return counts;\n  }, [processedModels, showExperimental, modelFilter.search]);\n\n  const groupedModels = useMemo(() => {\n    if (!processedModels || !processedModels[activeCapability]) {\n      return [];\n    }\n    \n    const modelsInCategory = processedModels[activeCapability];\n    const groups = [];\n\n    Object.entries(modelsInCategory).forEach(([provider, typeGroups]) => {\n      const formattedProvider = formatProviderName(provider);\n      Object.entries(typeGroups).forEach(([type, models]) => {\n        const filteredGroupModels = models.filter(model =>\n          shouldIncludeModel(model, showExperimental, modelFilter.search, provider, formattedProvider, type)\n        );\n        if (filteredGroupModels.length > 0) {\n          groups.push({\n            provider: formattedProvider,\n            type: type,\n            models: filteredGroupModels\n          });\n        }\n      });\n    });\n\n    return groups;\n  }, [processedModels, activeCapability, showExperimental, modelFilter.search]);\n\n  const totalModelCount = useMemo(() => {\n    return groupedModels.reduce((count, group) => count + group.models.length, 0);\n  }, [groupedModels]);\n\n  return (\n    <div className={styles.modelSelectionContainer}>\n      <SelectedModelDisplay selectedModel={selectedModel} />\n      <SearchContainer \n        searchTerm={modelFilter.search}\n        onSearchChange={handleSearchChange}\n        totalCount={totalModelCount} \n      />\n      <ModelSelectionPanel\n        ref={panelRef}\n        isExperimentalModelsEnabled={showExperimental}\n        toggleExperimentalModels={toggleExperimentalModels}\n        capabilitiesWithCounts={capabilitiesWithCounts}\n        activeCapability={activeCapability}\n        setActiveCapability={setActiveCapability}\n        isLoading={isLoading}\n        groupedModels={groupedModels}\n        selectedModel={selectedModel}\n        handleSelectModel={handleSelectModel}\n        searchTerm={modelFilter.search}\n        totalCount={totalModelCount}\n        handleClearSearch={handleClearSearch}\n      />\n    </div>\n  );\n};\n\nexport default ModelSelection; "],"names":["ModelItem","memo","_ref","_model$series","model","selected","onClick","searchTerm","highlightMatch","text","regex","RegExp","parts","split","_jsx","_Fragment","children","map","part","i","test","className","styles","highlight","_jsxs","modelItem","role","modelIcon","series","charAt","name","modelDetails","modelName","description","modelDescription","tags","length","tag","style","backgroundColor","toLowerCase","includes","undefined","selectedIndicator","CheckIcon","checkIcon","_ref2","xmlns","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","points","displayName","onSearchChange","resultCount","inputRef","useRef","handleInputChange","useCallback","e","target","value","handleClearSearch","current","focus","searchContainer","inputWrapper","SearchIcon","searchIcon","size","ref","type","searchInput","placeholder","onChange","clearButton","XIcon","clearIcon","results","SelectedModelDisplay","React","selectedModel","selectedModelContainer","selectedModelLabel","selectedModelInfo","provider","CapabilityTabs","capabilities","activeCapability","onSelectCapability","tabsRef","useEffect","activeTab","querySelector","active","container","containerWidth","offsetWidth","tabWidth","scrollPosition","offsetLeft","scrollTo","left","Math","max","behavior","capabilityTabs","Object","keys","capability","capabilityTab","ModelList","_ref3","isLoading","groupedModels","onSelectModel","totalCount","onClearSearch","modelList","loading","group","providerTypeHeader","providerName","providerTypeSeparator","typeLabel","modelCount","models","id","noResults","clearSearch","SearchContainer","_ref4","ModelSearch","ModelSelectionPanel","_ref5","isExperimentalModelsEnabled","toggleExperimentalModels","capabilitiesWithCounts","setActiveCapability","handleSelectModel","modelsContainer","fixedHeader","scrollableModelList","formatProviderName","word","toUpperCase","slice","join","replace","shouldIncludeModel","showExperimental","formattedProvider","typeGroup","_model$name","_model$displayName","searchLower","nameMatch","providerMatch","typeMatch","tagMatch","some","ModelSelection","processedModels","selectModel","useModel","modelFilter","updateSearchFilter","useModelFilter","useState","panelRef","handleSearchChange","searchValue","useMemo","counts","forEach","category","values","flatMap","providerGroups","flat","filter","search","modelsInCategory","groups","entries","_ref6","typeGroups","_ref7","filteredGroupModels","push","totalModelCount","reduce","count","modelSelectionContainer"],"sourceRoot":""}