{"version":3,"file":"static/js/vendor.highlight.js-271b93ce.6f2c8a96e3.chunk.v1_9_0.js","mappings":"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CLL,SAAUoC,EACVlC,SAAU,CACR,CAAEuC,cAAe,UACjB,CACErC,MAAOR,EAAKgD,oBAAsB,UAClCC,aAAa,EACbvC,UAAW,EACXJ,SAAU,CAACN,EAAK+C,wBAElB,CACExC,UAAW,SACXC,MAAO,KAAMC,IAAK,KAClBL,SAAUoC,EACV9B,UAAW,EACXJ,SAAU,CACRN,EAAK2C,uBAGT3C,EAAK0C,oBACL1C,EAAK2C,uBAGT,CACEpC,UAAW,WACXC,MAAO,IAAM+B,EAAmB,SAAWvC,EAAKgD,oBAAsB,UAAWC,aAAa,EAAMxC,IAAK,QACzGqC,YAAY,EACZ1C,SAAUoC,EACVlC,SAAU,CACR,CACEE,MAAOR,EAAKgD,oBAAsB,UAAWC,aAAa,EAC1DvC,UAAW,EACXJ,SAAU,CAACN,EAAK+C,wBAElB,CACExC,UAAW,SACXC,MAAO,KAAMC,IAAK,KAClBL,SAAUoC,EACV9B,UAAW,EACXJ,SAAU,CACRmC,EACAzC,EAAK4C,iBACL5C,EAAKkB,kBACLH,EACAf,EAAK2C,uBAGT3C,EAAK0C,oBACL1C,EAAK2C,uBAGT5B,EACA0B,GAGN,C,YClLA,MAAMS,EAAW,2BACXV,EAAW,CACf,KACA,KACA,KACA,KACA,MACA,QACA,UACA,MACA,MACA,WACA,KACA,SACA,OACA,OACA,QACA,QACA,aACA,OACA,QACA,OACA,UACA,MACA,SACA,WACA,SACA,SACA,MACA,QACA,QACA,QAIA,WACA,QACA,QACA,SACA,SACA,OACA,SACA,WAEIW,EAAW,CACf,OACA,QACA,OACA,YACA,MACA,YAoFIC,EAAY,GAAGC,OAlCI,CACvB,cACA,aACA,gBACA,eAEA,UACA,UAEA,OACA,WACA,QACA,aACA,WACA,YACA,qBACA,YACA,qBACA,SACA,YAGyB,CACzB,YACA,OACA,QACA,UACA,SACA,WACA,eACA,SACA,UA9EY,CACZ,OACA,WACA,SACA,OACA,OACA,SACA,SACA,SACA,WACA,UACA,QACA,SACA,MACA,MACA,UACA,UACA,QACA,UACA,OACA,UACA,eACA,aACA,aACA,YACA,cACA,cACA,eA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","sources":["../node_modules/highlight.js/lib/languages/inform7.js","../node_modules/highlight.js/lib/languages/hy.js","../node_modules/highlight.js/lib/languages/java.js","../node_modules/highlight.js/lib/languages/javascript.js","../node_modules/highlight.js/lib/languages/ini.js","../node_modules/highlight.js/lib/languages/jboss-cli.js","../node_modules/highlight.js/lib/languages/irpf90.js"],"sourcesContent":["/*\nLanguage: Inform 7\nAuthor: Bruno Dias <bruno.r.dias@gmail.com>\nDescription: Language definition for Inform 7, a DSL for writing parser interactive fiction.\nWebsite: http://inform7.com\n*/\n\nfunction inform7(hljs) {\n  const START_BRACKET = '\\\\[';\n  const END_BRACKET = '\\\\]';\n  return {\n    name: 'Inform 7',\n    aliases: ['i7'],\n    case_insensitive: true,\n    keywords: {\n      // Some keywords more or less unique to I7, for relevance.\n      keyword:\n        // kind:\n        'thing room person man woman animal container ' +\n        'supporter backdrop door ' +\n        // characteristic:\n        'scenery open closed locked inside gender ' +\n        // verb:\n        'is are say understand ' +\n        // misc keyword:\n        'kind of rule'\n    },\n    contains: [\n      {\n        className: 'string',\n        begin: '\"',\n        end: '\"',\n        relevance: 0,\n        contains: [\n          {\n            className: 'subst',\n            begin: START_BRACKET,\n            end: END_BRACKET\n          }\n        ]\n      },\n      {\n        className: 'section',\n        begin: /^(Volume|Book|Part|Chapter|Section|Table)\\b/,\n        end: '$'\n      },\n      {\n        // Rule definition\n        // This is here for relevance.\n        begin: /^(Check|Carry out|Report|Instead of|To|Rule|When|Before|After)\\b/,\n        end: ':',\n        contains: [\n          {\n            // Rule name\n            begin: '\\\\(This',\n            end: '\\\\)'\n          }\n        ]\n      },\n      {\n        className: 'comment',\n        begin: START_BRACKET,\n        end: END_BRACKET,\n        contains: ['self']\n      }\n    ]\n  };\n}\n\nmodule.exports = inform7;\n","/*\nLanguage: Hy\nDescription: Hy is a wonderful dialect of Lisp that’s embedded in Python.\nAuthor: Sergey Sobko <s.sobko@profitware.ru>\nWebsite: http://docs.hylang.org/en/stable/\nCategory: lisp\n*/\n\nfunction hy(hljs) {\n  var SYMBOLSTART = 'a-zA-Z_\\\\-!.?+*=<>&#\\'';\n  var SYMBOL_RE = '[' + SYMBOLSTART + '][' + SYMBOLSTART + '0-9/;:]*';\n  var keywords = {\n    $pattern: SYMBOL_RE,\n    'builtin-name':\n      // keywords\n      '!= % %= & &= * ** **= *= *map ' +\n      '+ += , --build-class-- --import-- -= . / // //= ' +\n      '/= < << <<= <= = > >= >> >>= ' +\n      '@ @= ^ ^= abs accumulate all and any ap-compose ' +\n      'ap-dotimes ap-each ap-each-while ap-filter ap-first ap-if ap-last ap-map ap-map-when ap-pipe ' +\n      'ap-reduce ap-reject apply as-> ascii assert assoc bin break butlast ' +\n      'callable calling-module-name car case cdr chain chr coll? combinations compile ' +\n      'compress cond cons cons? continue count curry cut cycle dec ' +\n      'def default-method defclass defmacro defmacro-alias defmacro/g! defmain defmethod defmulti defn ' +\n      'defn-alias defnc defnr defreader defseq del delattr delete-route dict-comp dir ' +\n      'disassemble dispatch-reader-macro distinct divmod do doto drop drop-last drop-while empty? ' +\n      'end-sequence eval eval-and-compile eval-when-compile even? every? except exec filter first ' +\n      'flatten float? fn fnc fnr for for* format fraction genexpr ' +\n      'gensym get getattr global globals group-by hasattr hash hex id ' +\n      'identity if if* if-not if-python2 import in inc input instance? ' +\n      'integer integer-char? integer? interleave interpose is is-coll is-cons is-empty is-even ' +\n      'is-every is-float is-instance is-integer is-integer-char is-iterable is-iterator is-keyword is-neg is-none ' +\n      'is-not is-numeric is-odd is-pos is-string is-symbol is-zero isinstance islice issubclass ' +\n      'iter iterable? iterate iterator? keyword keyword? lambda last len let ' +\n      'lif lif-not list* list-comp locals loop macro-error macroexpand macroexpand-1 macroexpand-all ' +\n      'map max merge-with method-decorator min multi-decorator multicombinations name neg? next ' +\n      'none? nonlocal not not-in not? nth numeric? oct odd? open ' +\n      'or ord partition permutations pos? post-route postwalk pow prewalk print ' +\n      'product profile/calls profile/cpu put-route quasiquote quote raise range read read-str ' +\n      'recursive-replace reduce remove repeat repeatedly repr require rest round route ' +\n      'route-with-methods rwm second seq set-comp setattr setv some sorted string ' +\n      'string? sum switch symbol? take take-nth take-while tee try unless ' +\n      'unquote unquote-splicing vars walk when while with with* with-decorator with-gensyms ' +\n      'xi xor yield yield-from zero? zip zip-longest | |= ~'\n   };\n\n  var SIMPLE_NUMBER_RE = '[-+]?\\\\d+(\\\\.\\\\d+)?';\n\n  var SYMBOL = {\n    begin: SYMBOL_RE,\n    relevance: 0\n  };\n  var NUMBER = {\n    className: 'number', begin: SIMPLE_NUMBER_RE,\n    relevance: 0\n  };\n  var STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null});\n  var COMMENT = hljs.COMMENT(\n    ';',\n    '$',\n    {\n      relevance: 0\n    }\n  );\n  var LITERAL = {\n    className: 'literal',\n    begin: /\\b([Tt]rue|[Ff]alse|nil|None)\\b/\n  };\n  var COLLECTION = {\n    begin: '[\\\\[\\\\{]', end: '[\\\\]\\\\}]'\n  };\n  var HINT = {\n    className: 'comment',\n    begin: '\\\\^' + SYMBOL_RE\n  };\n  var HINT_COL = hljs.COMMENT('\\\\^\\\\{', '\\\\}');\n  var KEY = {\n    className: 'symbol',\n    begin: '[:]{1,2}' + SYMBOL_RE\n  };\n  var LIST = {\n    begin: '\\\\(', end: '\\\\)'\n  };\n  var BODY = {\n    endsWithParent: true,\n    relevance: 0\n  };\n  var NAME = {\n    className: 'name',\n    relevance: 0,\n    keywords: keywords,\n    begin: SYMBOL_RE,\n    starts: BODY\n  };\n  var DEFAULT_CONTAINS = [LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL, SYMBOL];\n\n  LIST.contains = [hljs.COMMENT('comment', ''), NAME, BODY];\n  BODY.contains = DEFAULT_CONTAINS;\n  COLLECTION.contains = DEFAULT_CONTAINS;\n\n  return {\n    name: 'Hy',\n    aliases: ['hylang'],\n    illegal: /\\S/,\n    contains: [hljs.SHEBANG(), LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL]\n  };\n}\n\nmodule.exports = hy;\n","// https://docs.oracle.com/javase/specs/jls/se15/html/jls-3.html#jls-3.10\nvar decimalDigits = '[0-9](_*[0-9])*';\nvar frac = `\\\\.(${decimalDigits})`;\nvar hexDigits = '[0-9a-fA-F](_*[0-9a-fA-F])*';\nvar NUMERIC = {\n  className: 'number',\n  variants: [\n    // DecimalFloatingPointLiteral\n    // including ExponentPart\n    { begin: `(\\\\b(${decimalDigits})((${frac})|\\\\.)?|(${frac}))` +\n      `[eE][+-]?(${decimalDigits})[fFdD]?\\\\b` },\n    // excluding ExponentPart\n    { begin: `\\\\b(${decimalDigits})((${frac})[fFdD]?\\\\b|\\\\.([fFdD]\\\\b)?)` },\n    { begin: `(${frac})[fFdD]?\\\\b` },\n    { begin: `\\\\b(${decimalDigits})[fFdD]\\\\b` },\n\n    // HexadecimalFloatingPointLiteral\n    { begin: `\\\\b0[xX]((${hexDigits})\\\\.?|(${hexDigits})?\\\\.(${hexDigits}))` +\n      `[pP][+-]?(${decimalDigits})[fFdD]?\\\\b` },\n\n    // DecimalIntegerLiteral\n    { begin: '\\\\b(0|[1-9](_*[0-9])*)[lL]?\\\\b' },\n\n    // HexIntegerLiteral\n    { begin: `\\\\b0[xX](${hexDigits})[lL]?\\\\b` },\n\n    // OctalIntegerLiteral\n    { begin: '\\\\b0(_*[0-7])*[lL]?\\\\b' },\n\n    // BinaryIntegerLiteral\n    { begin: '\\\\b0[bB][01](_*[01])*[lL]?\\\\b' },\n  ],\n  relevance: 0\n};\n\n/*\nLanguage: Java\nAuthor: Vsevolod Solovyov <vsevolod.solovyov@gmail.com>\nCategory: common, enterprise\nWebsite: https://www.java.com/\n*/\n\nfunction java(hljs) {\n  var JAVA_IDENT_RE = '[\\u00C0-\\u02B8a-zA-Z_$][\\u00C0-\\u02B8a-zA-Z_$0-9]*';\n  var GENERIC_IDENT_RE = JAVA_IDENT_RE + '(<' + JAVA_IDENT_RE + '(\\\\s*,\\\\s*' + JAVA_IDENT_RE + ')*>)?';\n  var KEYWORDS = 'false synchronized int abstract float private char boolean var static null if const ' +\n    'for true while long strictfp finally protected import native final void ' +\n    'enum else break transient catch instanceof byte super volatile case assert short ' +\n    'package default double public try this switch continue throws protected public private ' +\n    'module requires exports do';\n\n  var ANNOTATION = {\n    className: 'meta',\n    begin: '@' + JAVA_IDENT_RE,\n    contains: [\n      {\n        begin: /\\(/,\n        end: /\\)/,\n        contains: [\"self\"] // allow nested () inside our annotation\n      },\n    ]\n  };\n  const NUMBER = NUMERIC;\n\n  return {\n    name: 'Java',\n    aliases: ['jsp'],\n    keywords: KEYWORDS,\n    illegal: /<\\/|#/,\n    contains: [\n      hljs.COMMENT(\n        '/\\\\*\\\\*',\n        '\\\\*/',\n        {\n          relevance: 0,\n          contains: [\n            {\n              // eat up @'s in emails to prevent them to be recognized as doctags\n              begin: /\\w+@/, relevance: 0\n            },\n            {\n              className: 'doctag',\n              begin: '@[A-Za-z]+'\n            }\n          ]\n        }\n      ),\n      // relevance boost\n      {\n        begin: /import java\\.[a-z]+\\./,\n        keywords: \"import\",\n        relevance: 2\n      },\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      hljs.APOS_STRING_MODE,\n      hljs.QUOTE_STRING_MODE,\n      {\n        className: 'class',\n        beginKeywords: 'class interface enum', end: /[{;=]/, excludeEnd: true,\n        // TODO: can this be removed somehow?\n        // an extra boost because Java is more popular than other languages with\n        // this same syntax feature (this is just to preserve our tests passing\n        // for now)\n        relevance: 1,\n        keywords: 'class interface enum',\n        illegal: /[:\"\\[\\]]/,\n        contains: [\n          { beginKeywords: 'extends implements' },\n          hljs.UNDERSCORE_TITLE_MODE\n        ]\n      },\n      {\n        // Expression keywords prevent 'keyword Name(...)' from being\n        // recognized as a function definition\n        beginKeywords: 'new throw return else',\n        relevance: 0\n      },\n      {\n        className: 'class',\n        begin: 'record\\\\s+' + hljs.UNDERSCORE_IDENT_RE + '\\\\s*\\\\(',\n        returnBegin: true,\n        excludeEnd: true,\n        end: /[{;=]/,\n        keywords: KEYWORDS,\n        contains: [\n          { beginKeywords: \"record\" },\n          {\n            begin: hljs.UNDERSCORE_IDENT_RE + '\\\\s*\\\\(',\n            returnBegin: true,\n            relevance: 0,\n            contains: [hljs.UNDERSCORE_TITLE_MODE]\n          },\n          {\n            className: 'params',\n            begin: /\\(/, end: /\\)/,\n            keywords: KEYWORDS,\n            relevance: 0,\n            contains: [\n              hljs.C_BLOCK_COMMENT_MODE\n            ]\n          },\n          hljs.C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE\n        ]\n      },\n      {\n        className: 'function',\n        begin: '(' + GENERIC_IDENT_RE + '\\\\s+)+' + hljs.UNDERSCORE_IDENT_RE + '\\\\s*\\\\(', returnBegin: true, end: /[{;=]/,\n        excludeEnd: true,\n        keywords: KEYWORDS,\n        contains: [\n          {\n            begin: hljs.UNDERSCORE_IDENT_RE + '\\\\s*\\\\(', returnBegin: true,\n            relevance: 0,\n            contains: [hljs.UNDERSCORE_TITLE_MODE]\n          },\n          {\n            className: 'params',\n            begin: /\\(/, end: /\\)/,\n            keywords: KEYWORDS,\n            relevance: 0,\n            contains: [\n              ANNOTATION,\n              hljs.APOS_STRING_MODE,\n              hljs.QUOTE_STRING_MODE,\n              NUMBER,\n              hljs.C_BLOCK_COMMENT_MODE\n            ]\n          },\n          hljs.C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE\n        ]\n      },\n      NUMBER,\n      ANNOTATION\n    ]\n  };\n}\n\nmodule.exports = java;\n","const IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';\nconst KEYWORDS = [\n  \"as\", // for exports\n  \"in\",\n  \"of\",\n  \"if\",\n  \"for\",\n  \"while\",\n  \"finally\",\n  \"var\",\n  \"new\",\n  \"function\",\n  \"do\",\n  \"return\",\n  \"void\",\n  \"else\",\n  \"break\",\n  \"catch\",\n  \"instanceof\",\n  \"with\",\n  \"throw\",\n  \"case\",\n  \"default\",\n  \"try\",\n  \"switch\",\n  \"continue\",\n  \"typeof\",\n  \"delete\",\n  \"let\",\n  \"yield\",\n  \"const\",\n  \"class\",\n  // JS handles these with a special rule\n  // \"get\",\n  // \"set\",\n  \"debugger\",\n  \"async\",\n  \"await\",\n  \"static\",\n  \"import\",\n  \"from\",\n  \"export\",\n  \"extends\"\n];\nconst LITERALS = [\n  \"true\",\n  \"false\",\n  \"null\",\n  \"undefined\",\n  \"NaN\",\n  \"Infinity\"\n];\n\nconst TYPES = [\n  \"Intl\",\n  \"DataView\",\n  \"Number\",\n  \"Math\",\n  \"Date\",\n  \"String\",\n  \"RegExp\",\n  \"Object\",\n  \"Function\",\n  \"Boolean\",\n  \"Error\",\n  \"Symbol\",\n  \"Set\",\n  \"Map\",\n  \"WeakSet\",\n  \"WeakMap\",\n  \"Proxy\",\n  \"Reflect\",\n  \"JSON\",\n  \"Promise\",\n  \"Float64Array\",\n  \"Int16Array\",\n  \"Int32Array\",\n  \"Int8Array\",\n  \"Uint16Array\",\n  \"Uint32Array\",\n  \"Float32Array\",\n  \"Array\",\n  \"Uint8Array\",\n  \"Uint8ClampedArray\",\n  \"ArrayBuffer\",\n  \"BigInt64Array\",\n  \"BigUint64Array\",\n  \"BigInt\"\n];\n\nconst ERROR_TYPES = [\n  \"EvalError\",\n  \"InternalError\",\n  \"RangeError\",\n  \"ReferenceError\",\n  \"SyntaxError\",\n  \"TypeError\",\n  \"URIError\"\n];\n\nconst BUILT_IN_GLOBALS = [\n  \"setInterval\",\n  \"setTimeout\",\n  \"clearInterval\",\n  \"clearTimeout\",\n\n  \"require\",\n  \"exports\",\n\n  \"eval\",\n  \"isFinite\",\n  \"isNaN\",\n  \"parseFloat\",\n  \"parseInt\",\n  \"decodeURI\",\n  \"decodeURIComponent\",\n  \"encodeURI\",\n  \"encodeURIComponent\",\n  \"escape\",\n  \"unescape\"\n];\n\nconst BUILT_IN_VARIABLES = [\n  \"arguments\",\n  \"this\",\n  \"super\",\n  \"console\",\n  \"window\",\n  \"document\",\n  \"localStorage\",\n  \"module\",\n  \"global\" // Node.js\n];\n\nconst BUILT_INS = [].concat(\n  BUILT_IN_GLOBALS,\n  BUILT_IN_VARIABLES,\n  TYPES,\n  ERROR_TYPES\n);\n\n/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction lookahead(re) {\n  return concat('(?=', re, ')');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/*\nLanguage: JavaScript\nDescription: JavaScript (JS) is a lightweight, interpreted, or just-in-time compiled programming language with first-class functions.\nCategory: common, scripting\nWebsite: https://developer.mozilla.org/en-US/docs/Web/JavaScript\n*/\n\n/** @type LanguageFn */\nfunction javascript(hljs) {\n  /**\n   * Takes a string like \"<Booger\" and checks to see\n   * if we can find a matching \"</Booger\" later in the\n   * content.\n   * @param {RegExpMatchArray} match\n   * @param {{after:number}} param1\n   */\n  const hasClosingTag = (match, { after }) => {\n    const tag = \"</\" + match[0].slice(1);\n    const pos = match.input.indexOf(tag, after);\n    return pos !== -1;\n  };\n\n  const IDENT_RE$1 = IDENT_RE;\n  const FRAGMENT = {\n    begin: '<>',\n    end: '</>'\n  };\n  const XML_TAG = {\n    begin: /<[A-Za-z0-9\\\\._:-]+/,\n    end: /\\/[A-Za-z0-9\\\\._:-]+>|\\/>/,\n    /**\n     * @param {RegExpMatchArray} match\n     * @param {CallbackResponse} response\n     */\n    isTrulyOpeningTag: (match, response) => {\n      const afterMatchIndex = match[0].length + match.index;\n      const nextChar = match.input[afterMatchIndex];\n      // nested type?\n      // HTML should not include another raw `<` inside a tag\n      // But a type might: `<Array<Array<number>>`, etc.\n      if (nextChar === \"<\") {\n        response.ignoreMatch();\n        return;\n      }\n      // <something>\n      // This is now either a tag or a type.\n      if (nextChar === \">\") {\n        // if we cannot find a matching closing tag, then we\n        // will ignore it\n        if (!hasClosingTag(match, { after: afterMatchIndex })) {\n          response.ignoreMatch();\n        }\n      }\n    }\n  };\n  const KEYWORDS$1 = {\n    $pattern: IDENT_RE,\n    keyword: KEYWORDS,\n    literal: LITERALS,\n    built_in: BUILT_INS\n  };\n\n  // https://tc39.es/ecma262/#sec-literals-numeric-literals\n  const decimalDigits = '[0-9](_?[0-9])*';\n  const frac = `\\\\.(${decimalDigits})`;\n  // DecimalIntegerLiteral, including Annex B NonOctalDecimalIntegerLiteral\n  // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals\n  const decimalInteger = `0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*`;\n  const NUMBER = {\n    className: 'number',\n    variants: [\n      // DecimalLiteral\n      { begin: `(\\\\b(${decimalInteger})((${frac})|\\\\.)?|(${frac}))` +\n        `[eE][+-]?(${decimalDigits})\\\\b` },\n      { begin: `\\\\b(${decimalInteger})\\\\b((${frac})\\\\b|\\\\.)?|(${frac})\\\\b` },\n\n      // DecimalBigIntegerLiteral\n      { begin: `\\\\b(0|[1-9](_?[0-9])*)n\\\\b` },\n\n      // NonDecimalIntegerLiteral\n      { begin: \"\\\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\\\b\" },\n      { begin: \"\\\\b0[bB][0-1](_?[0-1])*n?\\\\b\" },\n      { begin: \"\\\\b0[oO][0-7](_?[0-7])*n?\\\\b\" },\n\n      // LegacyOctalIntegerLiteral (does not include underscore separators)\n      // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals\n      { begin: \"\\\\b0[0-7]+n?\\\\b\" },\n    ],\n    relevance: 0\n  };\n\n  const SUBST = {\n    className: 'subst',\n    begin: '\\\\$\\\\{',\n    end: '\\\\}',\n    keywords: KEYWORDS$1,\n    contains: [] // defined later\n  };\n  const HTML_TEMPLATE = {\n    begin: 'html`',\n    end: '',\n    starts: {\n      end: '`',\n      returnEnd: false,\n      contains: [\n        hljs.BACKSLASH_ESCAPE,\n        SUBST\n      ],\n      subLanguage: 'xml'\n    }\n  };\n  const CSS_TEMPLATE = {\n    begin: 'css`',\n    end: '',\n    starts: {\n      end: '`',\n      returnEnd: false,\n      contains: [\n        hljs.BACKSLASH_ESCAPE,\n        SUBST\n      ],\n      subLanguage: 'css'\n    }\n  };\n  const TEMPLATE_STRING = {\n    className: 'string',\n    begin: '`',\n    end: '`',\n    contains: [\n      hljs.BACKSLASH_ESCAPE,\n      SUBST\n    ]\n  };\n  const JSDOC_COMMENT = hljs.COMMENT(\n    /\\/\\*\\*(?!\\/)/,\n    '\\\\*/',\n    {\n      relevance: 0,\n      contains: [\n        {\n          className: 'doctag',\n          begin: '@[A-Za-z]+',\n          contains: [\n            {\n              className: 'type',\n              begin: '\\\\{',\n              end: '\\\\}',\n              relevance: 0\n            },\n            {\n              className: 'variable',\n              begin: IDENT_RE$1 + '(?=\\\\s*(-)|$)',\n              endsParent: true,\n              relevance: 0\n            },\n            // eat spaces (not newlines) so we can find\n            // types or variables\n            {\n              begin: /(?=[^\\n])\\s/,\n              relevance: 0\n            }\n          ]\n        }\n      ]\n    }\n  );\n  const COMMENT = {\n    className: \"comment\",\n    variants: [\n      JSDOC_COMMENT,\n      hljs.C_BLOCK_COMMENT_MODE,\n      hljs.C_LINE_COMMENT_MODE\n    ]\n  };\n  const SUBST_INTERNALS = [\n    hljs.APOS_STRING_MODE,\n    hljs.QUOTE_STRING_MODE,\n    HTML_TEMPLATE,\n    CSS_TEMPLATE,\n    TEMPLATE_STRING,\n    NUMBER,\n    hljs.REGEXP_MODE\n  ];\n  SUBST.contains = SUBST_INTERNALS\n    .concat({\n      // we need to pair up {} inside our subst to prevent\n      // it from ending too early by matching another }\n      begin: /\\{/,\n      end: /\\}/,\n      keywords: KEYWORDS$1,\n      contains: [\n        \"self\"\n      ].concat(SUBST_INTERNALS)\n    });\n  const SUBST_AND_COMMENTS = [].concat(COMMENT, SUBST.contains);\n  const PARAMS_CONTAINS = SUBST_AND_COMMENTS.concat([\n    // eat recursive parens in sub expressions\n    {\n      begin: /\\(/,\n      end: /\\)/,\n      keywords: KEYWORDS$1,\n      contains: [\"self\"].concat(SUBST_AND_COMMENTS)\n    }\n  ]);\n  const PARAMS = {\n    className: 'params',\n    begin: /\\(/,\n    end: /\\)/,\n    excludeBegin: true,\n    excludeEnd: true,\n    keywords: KEYWORDS$1,\n    contains: PARAMS_CONTAINS\n  };\n\n  return {\n    name: 'Javascript',\n    aliases: ['js', 'jsx', 'mjs', 'cjs'],\n    keywords: KEYWORDS$1,\n    // this will be extended by TypeScript\n    exports: { PARAMS_CONTAINS },\n    illegal: /#(?![$_A-z])/,\n    contains: [\n      hljs.SHEBANG({\n        label: \"shebang\",\n        binary: \"node\",\n        relevance: 5\n      }),\n      {\n        label: \"use_strict\",\n        className: 'meta',\n        relevance: 10,\n        begin: /^\\s*['\"]use (strict|asm)['\"]/\n      },\n      hljs.APOS_STRING_MODE,\n      hljs.QUOTE_STRING_MODE,\n      HTML_TEMPLATE,\n      CSS_TEMPLATE,\n      TEMPLATE_STRING,\n      COMMENT,\n      NUMBER,\n      { // object attr container\n        begin: concat(/[{,\\n]\\s*/,\n          // we need to look ahead to make sure that we actually have an\n          // attribute coming up so we don't steal a comma from a potential\n          // \"value\" container\n          //\n          // NOTE: this might not work how you think.  We don't actually always\n          // enter this mode and stay.  Instead it might merely match `,\n          // <comments up next>` and then immediately end after the , because it\n          // fails to find any actual attrs. But this still does the job because\n          // it prevents the value contain rule from grabbing this instead and\n          // prevening this rule from firing when we actually DO have keys.\n          lookahead(concat(\n            // we also need to allow for multiple possible comments inbetween\n            // the first key:value pairing\n            /(((\\/\\/.*$)|(\\/\\*(\\*[^/]|[^*])*\\*\\/))\\s*)*/,\n            IDENT_RE$1 + '\\\\s*:'))),\n        relevance: 0,\n        contains: [\n          {\n            className: 'attr',\n            begin: IDENT_RE$1 + lookahead('\\\\s*:'),\n            relevance: 0\n          }\n        ]\n      },\n      { // \"value\" container\n        begin: '(' + hljs.RE_STARTERS_RE + '|\\\\b(case|return|throw)\\\\b)\\\\s*',\n        keywords: 'return throw case',\n        contains: [\n          COMMENT,\n          hljs.REGEXP_MODE,\n          {\n            className: 'function',\n            // we have to count the parens to make sure we actually have the\n            // correct bounding ( ) before the =>.  There could be any number of\n            // sub-expressions inside also surrounded by parens.\n            begin: '(\\\\(' +\n            '[^()]*(\\\\(' +\n            '[^()]*(\\\\(' +\n            '[^()]*' +\n            '\\\\)[^()]*)*' +\n            '\\\\)[^()]*)*' +\n            '\\\\)|' + hljs.UNDERSCORE_IDENT_RE + ')\\\\s*=>',\n            returnBegin: true,\n            end: '\\\\s*=>',\n            contains: [\n              {\n                className: 'params',\n                variants: [\n                  {\n                    begin: hljs.UNDERSCORE_IDENT_RE,\n                    relevance: 0\n                  },\n                  {\n                    className: null,\n                    begin: /\\(\\s*\\)/,\n                    skip: true\n                  },\n                  {\n                    begin: /\\(/,\n                    end: /\\)/,\n                    excludeBegin: true,\n                    excludeEnd: true,\n                    keywords: KEYWORDS$1,\n                    contains: PARAMS_CONTAINS\n                  }\n                ]\n              }\n            ]\n          },\n          { // could be a comma delimited list of params to a function call\n            begin: /,/, relevance: 0\n          },\n          {\n            className: '',\n            begin: /\\s/,\n            end: /\\s*/,\n            skip: true\n          },\n          { // JSX\n            variants: [\n              { begin: FRAGMENT.begin, end: FRAGMENT.end },\n              {\n                begin: XML_TAG.begin,\n                // we carefully check the opening tag to see if it truly\n                // is a tag and not a false positive\n                'on:begin': XML_TAG.isTrulyOpeningTag,\n                end: XML_TAG.end\n              }\n            ],\n            subLanguage: 'xml',\n            contains: [\n              {\n                begin: XML_TAG.begin,\n                end: XML_TAG.end,\n                skip: true,\n                contains: ['self']\n              }\n            ]\n          }\n        ],\n        relevance: 0\n      },\n      {\n        className: 'function',\n        beginKeywords: 'function',\n        end: /[{;]/,\n        excludeEnd: true,\n        keywords: KEYWORDS$1,\n        contains: [\n          'self',\n          hljs.inherit(hljs.TITLE_MODE, { begin: IDENT_RE$1 }),\n          PARAMS\n        ],\n        illegal: /%/\n      },\n      {\n        // prevent this from getting swallowed up by function\n        // since they appear \"function like\"\n        beginKeywords: \"while if switch catch for\"\n      },\n      {\n        className: 'function',\n        // we have to count the parens to make sure we actually have the correct\n        // bounding ( ).  There could be any number of sub-expressions inside\n        // also surrounded by parens.\n        begin: hljs.UNDERSCORE_IDENT_RE +\n          '\\\\(' + // first parens\n          '[^()]*(\\\\(' +\n            '[^()]*(\\\\(' +\n              '[^()]*' +\n            '\\\\)[^()]*)*' +\n          '\\\\)[^()]*)*' +\n          '\\\\)\\\\s*\\\\{', // end parens\n        returnBegin:true,\n        contains: [\n          PARAMS,\n          hljs.inherit(hljs.TITLE_MODE, { begin: IDENT_RE$1 }),\n        ]\n      },\n      // hack: prevents detection of keywords in some circumstances\n      // .keyword()\n      // $keyword = x\n      {\n        variants: [\n          { begin: '\\\\.' + IDENT_RE$1 },\n          { begin: '\\\\$' + IDENT_RE$1 }\n        ],\n        relevance: 0\n      },\n      { // ES6 class\n        className: 'class',\n        beginKeywords: 'class',\n        end: /[{;=]/,\n        excludeEnd: true,\n        illegal: /[:\"[\\]]/,\n        contains: [\n          { beginKeywords: 'extends' },\n          hljs.UNDERSCORE_TITLE_MODE\n        ]\n      },\n      {\n        begin: /\\b(?=constructor)/,\n        end: /[{;]/,\n        excludeEnd: true,\n        contains: [\n          hljs.inherit(hljs.TITLE_MODE, { begin: IDENT_RE$1 }),\n          'self',\n          PARAMS\n        ]\n      },\n      {\n        begin: '(get|set)\\\\s+(?=' + IDENT_RE$1 + '\\\\()',\n        end: /\\{/,\n        keywords: \"get set\",\n        contains: [\n          hljs.inherit(hljs.TITLE_MODE, { begin: IDENT_RE$1 }),\n          { begin: /\\(\\)/ }, // eat to avoid empty params\n          PARAMS\n        ]\n      },\n      {\n        begin: /\\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`\n      }\n    ]\n  };\n}\n\nmodule.exports = javascript;\n","/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction lookahead(re) {\n  return concat('(?=', re, ')');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/**\n * Any of the passed expresssions may match\n *\n * Creates a huge this | this | that | that match\n * @param {(RegExp | string)[] } args\n * @returns {string}\n */\nfunction either(...args) {\n  const joined = '(' + args.map((x) => source(x)).join(\"|\") + \")\";\n  return joined;\n}\n\n/*\nLanguage: TOML, also INI\nDescription: TOML aims to be a minimal configuration file format that's easy to read due to obvious semantics.\nContributors: Guillaume Gomez <guillaume1.gomez@gmail.com>\nCategory: common, config\nWebsite: https://github.com/toml-lang/toml\n*/\n\nfunction ini(hljs) {\n  const NUMBERS = {\n    className: 'number',\n    relevance: 0,\n    variants: [\n      {\n        begin: /([+-]+)?[\\d]+_[\\d_]+/\n      },\n      {\n        begin: hljs.NUMBER_RE\n      }\n    ]\n  };\n  const COMMENTS = hljs.COMMENT();\n  COMMENTS.variants = [\n    {\n      begin: /;/,\n      end: /$/\n    },\n    {\n      begin: /#/,\n      end: /$/\n    }\n  ];\n  const VARIABLES = {\n    className: 'variable',\n    variants: [\n      {\n        begin: /\\$[\\w\\d\"][\\w\\d_]*/\n      },\n      {\n        begin: /\\$\\{(.*?)\\}/\n      }\n    ]\n  };\n  const LITERALS = {\n    className: 'literal',\n    begin: /\\bon|off|true|false|yes|no\\b/\n  };\n  const STRINGS = {\n    className: \"string\",\n    contains: [hljs.BACKSLASH_ESCAPE],\n    variants: [\n      {\n        begin: \"'''\",\n        end: \"'''\",\n        relevance: 10\n      },\n      {\n        begin: '\"\"\"',\n        end: '\"\"\"',\n        relevance: 10\n      },\n      {\n        begin: '\"',\n        end: '\"'\n      },\n      {\n        begin: \"'\",\n        end: \"'\"\n      }\n    ]\n  };\n  const ARRAY = {\n    begin: /\\[/,\n    end: /\\]/,\n    contains: [\n      COMMENTS,\n      LITERALS,\n      VARIABLES,\n      STRINGS,\n      NUMBERS,\n      'self'\n    ],\n    relevance: 0\n  };\n\n  const BARE_KEY = /[A-Za-z0-9_-]+/;\n  const QUOTED_KEY_DOUBLE_QUOTE = /\"(\\\\\"|[^\"])*\"/;\n  const QUOTED_KEY_SINGLE_QUOTE = /'[^']*'/;\n  const ANY_KEY = either(\n    BARE_KEY, QUOTED_KEY_DOUBLE_QUOTE, QUOTED_KEY_SINGLE_QUOTE\n  );\n  const DOTTED_KEY = concat(\n    ANY_KEY, '(\\\\s*\\\\.\\\\s*', ANY_KEY, ')*',\n    lookahead(/\\s*=\\s*[^#\\s]/)\n  );\n\n  return {\n    name: 'TOML, also INI',\n    aliases: ['toml'],\n    case_insensitive: true,\n    illegal: /\\S/,\n    contains: [\n      COMMENTS,\n      {\n        className: 'section',\n        begin: /\\[+/,\n        end: /\\]+/\n      },\n      {\n        begin: DOTTED_KEY,\n        className: 'attr',\n        starts: {\n          end: /$/,\n          contains: [\n            COMMENTS,\n            ARRAY,\n            LITERALS,\n            VARIABLES,\n            STRINGS,\n            NUMBERS\n          ]\n        }\n      }\n    ]\n  };\n}\n\nmodule.exports = ini;\n","/*\n Language: JBoss CLI\n Author: Raphaël Parrëe <rparree@edc4it.com>\n Description: language definition jboss cli\n Website: https://docs.jboss.org/author/display/WFLY/Command+Line+Interface\n Category: config\n */\n\nfunction jbossCli(hljs) {\n  const PARAM = {\n    begin: /[\\w-]+ *=/,\n    returnBegin: true,\n    relevance: 0,\n    contains: [\n      {\n        className: 'attr',\n        begin: /[\\w-]+/\n      }\n    ]\n  };\n  const PARAMSBLOCK = {\n    className: 'params',\n    begin: /\\(/,\n    end: /\\)/,\n    contains: [PARAM],\n    relevance: 0\n  };\n  const OPERATION = {\n    className: 'function',\n    begin: /:[\\w\\-.]+/,\n    relevance: 0\n  };\n  const PATH = {\n    className: 'string',\n    begin: /\\B([\\/.])[\\w\\-.\\/=]+/\n  };\n  const COMMAND_PARAMS = {\n    className: 'params',\n    begin: /--[\\w\\-=\\/]+/\n  };\n  return {\n    name: 'JBoss CLI',\n    aliases: ['wildfly-cli'],\n    keywords: {\n      $pattern: '[a-z\\-]+',\n      keyword: 'alias batch cd clear command connect connection-factory connection-info data-source deploy ' +\n      'deployment-info deployment-overlay echo echo-dmr help history if jdbc-driver-info jms-queue|20 jms-topic|20 ls ' +\n      'patch pwd quit read-attribute read-operation reload rollout-plan run-batch set shutdown try unalias ' +\n      'undeploy unset version xa-data-source', // module\n      literal: 'true false'\n    },\n    contains: [\n      hljs.HASH_COMMENT_MODE,\n      hljs.QUOTE_STRING_MODE,\n      COMMAND_PARAMS,\n      OPERATION,\n      PATH,\n      PARAMSBLOCK\n    ]\n  };\n}\n\nmodule.exports = jbossCli;\n","/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/*\nLanguage: IRPF90\nAuthor: Anthony Scemama <scemama@irsamc.ups-tlse.fr>\nDescription: IRPF90 is an open-source Fortran code generator\nWebsite: http://irpf90.ups-tlse.fr\nCategory: scientific\n*/\n\n/** @type LanguageFn */\nfunction irpf90(hljs) {\n  const PARAMS = {\n    className: 'params',\n    begin: '\\\\(',\n    end: '\\\\)'\n  };\n\n  // regex in both fortran and irpf90 should match\n  const OPTIONAL_NUMBER_SUFFIX = /(_[a-z_\\d]+)?/;\n  const OPTIONAL_NUMBER_EXP = /([de][+-]?\\d+)?/;\n  const NUMBER = {\n    className: 'number',\n    variants: [\n      {\n        begin: concat(/\\b\\d+/, /\\.(\\d*)/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX)\n      },\n      {\n        begin: concat(/\\b\\d+/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX)\n      },\n      {\n        begin: concat(/\\.\\d+/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX)\n      }\n    ],\n    relevance: 0\n  };\n\n  const F_KEYWORDS = {\n    literal: '.False. .True.',\n    keyword: 'kind do while private call intrinsic where elsewhere ' +\n      'type endtype endmodule endselect endinterface end enddo endif if forall endforall only contains default return stop then ' +\n      'public subroutine|10 function program .and. .or. .not. .le. .eq. .ge. .gt. .lt. ' +\n      'goto save else use module select case ' +\n      'access blank direct exist file fmt form formatted iostat name named nextrec number opened rec recl sequential status unformatted unit ' +\n      'continue format pause cycle exit ' +\n      'c_null_char c_alert c_backspace c_form_feed flush wait decimal round iomsg ' +\n      'synchronous nopass non_overridable pass protected volatile abstract extends import ' +\n      'non_intrinsic value deferred generic final enumerator class associate bind enum ' +\n      'c_int c_short c_long c_long_long c_signed_char c_size_t c_int8_t c_int16_t c_int32_t c_int64_t c_int_least8_t c_int_least16_t ' +\n      'c_int_least32_t c_int_least64_t c_int_fast8_t c_int_fast16_t c_int_fast32_t c_int_fast64_t c_intmax_t C_intptr_t c_float c_double ' +\n      'c_long_double c_float_complex c_double_complex c_long_double_complex c_bool c_char c_null_ptr c_null_funptr ' +\n      'c_new_line c_carriage_return c_horizontal_tab c_vertical_tab iso_c_binding c_loc c_funloc c_associated  c_f_pointer ' +\n      'c_ptr c_funptr iso_fortran_env character_storage_size error_unit file_storage_size input_unit iostat_end iostat_eor ' +\n      'numeric_storage_size output_unit c_f_procpointer ieee_arithmetic ieee_support_underflow_control ' +\n      'ieee_get_underflow_mode ieee_set_underflow_mode newunit contiguous recursive ' +\n      'pad position action delim readwrite eor advance nml interface procedure namelist include sequence elemental pure ' +\n      'integer real character complex logical dimension allocatable|10 parameter ' +\n      'external implicit|10 none double precision assign intent optional pointer ' +\n      'target in out common equivalence data ' +\n      // IRPF90 special keywords\n      'begin_provider &begin_provider end_provider begin_shell end_shell begin_template end_template subst assert touch ' +\n      'soft_touch provide no_dep free irp_if irp_else irp_endif irp_write irp_read',\n    built_in: 'alog alog10 amax0 amax1 amin0 amin1 amod cabs ccos cexp clog csin csqrt dabs dacos dasin datan datan2 dcos dcosh ddim dexp dint ' +\n      'dlog dlog10 dmax1 dmin1 dmod dnint dsign dsin dsinh dsqrt dtan dtanh float iabs idim idint idnint ifix isign max0 max1 min0 min1 sngl ' +\n      'algama cdabs cdcos cdexp cdlog cdsin cdsqrt cqabs cqcos cqexp cqlog cqsin cqsqrt dcmplx dconjg derf derfc dfloat dgamma dimag dlgama ' +\n      'iqint qabs qacos qasin qatan qatan2 qcmplx qconjg qcos qcosh qdim qerf qerfc qexp qgamma qimag qlgama qlog qlog10 qmax1 qmin1 qmod ' +\n      'qnint qsign qsin qsinh qsqrt qtan qtanh abs acos aimag aint anint asin atan atan2 char cmplx conjg cos cosh exp ichar index int log ' +\n      'log10 max min nint sign sin sinh sqrt tan tanh print write dim lge lgt lle llt mod nullify allocate deallocate ' +\n      'adjustl adjustr all allocated any associated bit_size btest ceiling count cshift date_and_time digits dot_product ' +\n      'eoshift epsilon exponent floor fraction huge iand ibclr ibits ibset ieor ior ishft ishftc lbound len_trim matmul ' +\n      'maxexponent maxloc maxval merge minexponent minloc minval modulo mvbits nearest pack present product ' +\n      'radix random_number random_seed range repeat reshape rrspacing scale scan selected_int_kind selected_real_kind ' +\n      'set_exponent shape size spacing spread sum system_clock tiny transpose trim ubound unpack verify achar iachar transfer ' +\n      'dble entry dprod cpu_time command_argument_count get_command get_command_argument get_environment_variable is_iostat_end ' +\n      'ieee_arithmetic ieee_support_underflow_control ieee_get_underflow_mode ieee_set_underflow_mode ' +\n      'is_iostat_eor move_alloc new_line selected_char_kind same_type_as extends_type_of ' +\n      'acosh asinh atanh bessel_j0 bessel_j1 bessel_jn bessel_y0 bessel_y1 bessel_yn erf erfc erfc_scaled gamma log_gamma hypot norm2 ' +\n      'atomic_define atomic_ref execute_command_line leadz trailz storage_size merge_bits ' +\n      'bge bgt ble blt dshiftl dshiftr findloc iall iany iparity image_index lcobound ucobound maskl maskr ' +\n      'num_images parity popcnt poppar shifta shiftl shiftr this_image ' +\n      // IRPF90 special built_ins\n      'IRP_ALIGN irp_here'\n  };\n  return {\n    name: 'IRPF90',\n    case_insensitive: true,\n    keywords: F_KEYWORDS,\n    illegal: /\\/\\*/,\n    contains: [\n      hljs.inherit(hljs.APOS_STRING_MODE, {\n        className: 'string',\n        relevance: 0\n      }),\n      hljs.inherit(hljs.QUOTE_STRING_MODE, {\n        className: 'string',\n        relevance: 0\n      }),\n      {\n        className: 'function',\n        beginKeywords: 'subroutine function program',\n        illegal: '[${=\\\\n]',\n        contains: [\n          hljs.UNDERSCORE_TITLE_MODE,\n          PARAMS\n        ]\n      },\n      hljs.COMMENT('!', '$', {\n        relevance: 0\n      }),\n      hljs.COMMENT('begin_doc', 'end_doc', {\n        relevance: 10\n      }),\n      NUMBER\n    ]\n  };\n}\n\nmodule.exports = irpf90;\n"],"names":["module","exports","hljs","name","aliases","case_insensitive","keywords","keyword","contains","className","begin","end","relevance","SYMBOLSTART","SYMBOL_RE","$pattern","SYMBOL","NUMBER","STRING","inherit","QUOTE_STRING_MODE","illegal","COMMENT","LITERAL","COLLECTION","HINT","HINT_COL","KEY","LIST","BODY","endsWithParent","NAME","starts","DEFAULT_CONTAINS","SHEBANG","decimalDigits","frac","hexDigits","NUMERIC","variants","JAVA_IDENT_RE","GENERIC_IDENT_RE","KEYWORDS","ANNOTATION","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","APOS_STRING_MODE","beginKeywords","excludeEnd","UNDERSCORE_TITLE_MODE","UNDERSCORE_IDENT_RE","returnBegin","IDENT_RE","LITERALS","BUILT_INS","concat","lookahead","re","_len","arguments","length","args","Array","_key","map","x","source","join","IDENT_RE$1","FRAGMENT","XML_TAG","isTrulyOpeningTag","match","response","afterMatchIndex","index","nextChar","input","hasClosingTag","_ref","after","tag","slice","indexOf","ignoreMatch","KEYWORDS$1","literal","built_in","decimalInteger","SUBST","HTML_TEMPLATE","returnEnd","BACKSLASH_ESCAPE","subLanguage","CSS_TEMPLATE","TEMPLATE_STRING","endsParent","SUBST_INTERNALS","REGEXP_MODE","SUBST_AND_COMMENTS","PARAMS_CONTAINS","PARAMS","excludeBegin","label","binary","RE_STARTERS_RE","skip","TITLE_MODE","NUMBERS","NUMBER_RE","COMMENTS","VARIABLES","STRINGS","ARRAY","ANY_KEY","_len2","_key2","either","PARAMSBLOCK","HASH_COMMENT_MODE","OPTIONAL_NUMBER_SUFFIX","OPTIONAL_NUMBER_EXP"],"sourceRoot":""}