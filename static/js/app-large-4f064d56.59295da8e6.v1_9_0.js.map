{"version":3,"file":"static/js/app-large-4f064d56.59295da8e6.v1_9_0.js","mappings":"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","sources":["contexts/AuthContext.js","contexts/ChatStateContext.js","contexts/ChatControlContext.js","contexts/ChatStatusContext.js","contexts/ChatHistoryContext.js","contexts/ApiContext.js","App.js"],"sourcesContent":["import { createContext, useContext, useState, useEffect, useCallback, useMemo } from 'react';\nimport { useToast } from './ToastContext';\nimport { useLoading } from './LoadingContext';\n// Firebase is dynamically imported to avoid blocking\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [idToken, setIdToken] = useState(null);\n  const [loading, setLoading] = useState(false); // Changed to false initially - we're proceeding anonymously\n  // Sync with global loading context for auth\n  const [, startAuthLoading, stopAuthLoading] = useLoading('auth');\n  const [error, setError] = useState(null);\n  const [isLoggingIn, setIsLoggingIn] = useState(false); // State to trigger login UI\n  const [isFirebaseInitialized, setIsFirebaseInitialized] = useState(false);\n  const { showToast } = useToast();\n\n  useEffect(() => {\n    if (loading) startAuthLoading(); else stopAuthLoading();\n  }, [loading, startAuthLoading, stopAuthLoading]);\n\n  const login = useCallback(async () => {\n    console.log(\"Login button clicked, setting isLoggingIn to true.\");\n    setIsLoggingIn(true);\n  }, [setIsLoggingIn]);\n\n  const logout = useCallback(async () => {\n    if (!isFirebaseInitialized) {\n      console.log(\"Firebase not initialized yet, cannot logout.\");\n      return;\n    }\n    const { getFirebaseAuth } = await import(/* webpackChunkName: \"firebase-config\" */ '../firebaseConfig');\n    const { signOut: firebaseSignOut } = await import(/* webpackChunkName: \"firebase-auth\" */ 'firebase/auth');\n    const auth = getFirebaseAuth();\n    if (!auth) {\n      const msg = \"Firebase not initialized.\";\n      setError(msg);\n      showToast({ type: 'error', message: msg });\n      return;\n    }\n    try {\n      await firebaseSignOut(auth);\n      console.log(\"Sign out successful.\");\n    } catch (err) {\n      console.error(\"Logout failed:\", err);\n      const msg = err.message || 'Failed to logout.';\n      setError(msg);\n      showToast({ type: 'error', message: msg });\n    }\n  }, [isFirebaseInitialized, setError, showToast]);\n\n  // Effect to listen for Firebase auth state changes\n  useEffect(() => {\n    let unsubscribe = null;\n\n    // Listen for the 'firebaseInitialized' event from App.js\n    const handleFirebaseInit = () => {\n      console.log(\"Received Firebase initialized event\");\n      setIsFirebaseInitialized(true);\n      initializeAuthListener();\n    };\n\n    // Function to initialize auth listener\n    const initializeAuthListener = async () => {\n      setLoading(true);\n      // Dynamically import Firebase auth\n      const { getFirebaseAuth } = await import(/* webpackChunkName: \"firebase-config\" */ '../firebaseConfig');\n      const { onAuthStateChanged: firebaseOnAuthStateChanged } = await import(/* webpackChunkName: \"firebase-auth\" */ 'firebase/auth');\n      \n      const auth = getFirebaseAuth();\n      if (!auth) {\n        console.warn(\"Auth service not available for onAuthStateChanged listener.\");\n        setLoading(false);\n        return;\n      }\n      \n      console.log(\"Setting up Firebase onAuthStateChanged listener.\");\n      unsubscribe = firebaseOnAuthStateChanged(auth, async (user) => {\n        setCurrentUser(user);\n        if (user) {\n          try {\n            // Force refresh is false by default, gets cached token if available\n            const token = await user.getIdToken();\n            setIdToken(token);\n            try { localStorage.setItem('idToken', token); } catch (e) { console.warn('Failed to cache idToken', e); }\n            setError(null); // Clear previous errors on successful login\n            setIsLoggingIn(false); // Ensure login UI closes if open\n            console.log(\"User signed in, token obtained.\");\n          } catch (err) {\n            console.error(\"Failed to get ID token:\", err);\n            const msg = \"Failed to get authentication token.\";\n            setError(msg);\n            showToast({ type: 'error', message: msg });\n            setIdToken(null);\n            // Optionally sign out the user if token fetch fails critically\n            const { signOut: firebaseSignOut } = await import(/* webpackChunkName: \"firebase-auth\" */ 'firebase/auth');\n            await firebaseSignOut(auth);\n          }\n        } else {\n          // User is signed out\n          setIdToken(null);\n          try { localStorage.removeItem('idToken'); } catch (e) { console.warn('Failed to remove cached idToken', e); }\n          setIsLoggingIn(false); // Ensure login UI closes if open\n          console.log(\"User signed out.\");\n        }\n        setLoading(false); // Auth state determined\n      });\n    };\n\n    // Define a custom event for Firebase initialization\n    window.addEventListener('firebaseInitialized', handleFirebaseInit);\n\n    // Cleanup listener on component unmount\n    return () => {\n      window.removeEventListener('firebaseInitialized', handleFirebaseInit);\n      if (typeof unsubscribe === 'function') {\n      console.log(\"Cleaning up Firebase onAuthStateChanged listener.\");\n        unsubscribe();\n      }\n    };\n  }, [showToast]);\n\n  const value = useMemo(() => ({\n    currentUser,\n    idToken,\n    loading,\n    error,\n    login,\n    logout,\n    isAuthenticated: !!currentUser && !!idToken,\n    isLoggingIn,\n    setIsLoggingIn,\n    isFirebaseInitialized\n  }), [currentUser, idToken, loading, error, login, logout, isLoggingIn, setIsLoggingIn, isFirebaseInitialized]);\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}; ","import React, { createContext, useContext, useMemo } from 'react';\nimport { useChatHistory } from './ChatHistoryContext';\nimport { useChatStatus } from './ChatStatusContext';\n\n// Context for read-only chat state\nconst ChatStateContext = createContext();\n\n// Hook to consume chat state\nexport const useChatState = () => {\n  const context = useContext(ChatStateContext);\n  if (context === undefined) {\n    throw new Error('useChatState must be used within a ChatStateProvider');\n  }\n  return context;\n};\n\n// Provider component for chat state\nexport const ChatStateProvider = ({ children }) => {\n  const { chatHistory, chatHistoryRef } = useChatHistory();\n  const { isWaitingForResponse, error } = useChatStatus();\n\n  const value = useMemo(() => ({\n    chatHistory,\n    chatHistoryRef,\n    isWaitingForResponse,\n    error\n  }), [chatHistory, chatHistoryRef, isWaitingForResponse, error]);\n\n  return (\n    <ChatStateContext.Provider value={value}>\n      {children}\n    </ChatStateContext.Provider>\n  );\n}; ","import React, { createContext, useContext, useMemo, useCallback, useRef } from 'react';\nimport { useApi } from './ApiContext';\nimport { useModel } from './ModelContext';\nimport { useSettings } from './SettingsContext';\nimport { useAuth } from './AuthContext';\nimport { useChatHistory } from './ChatHistoryContext';\nimport { useChatStatus } from './ChatStatusContext';\nimport { usePerformanceMetrics } from './PerformanceMetricsContext';\nimport { useStreamingEvents } from './StreamingEventsContext';\nimport { fetchWithRetry } from '../utils/network';\nimport { useToast } from './ToastContext';\n\n// Context for chat actions (controls)\nconst ChatControlContext = createContext();\n\n// Hook to consume chat controls\nexport const useChatControl = () => {\n  const context = useContext(ChatControlContext);\n  if (context === undefined) {\n    throw new Error('useChatControl must be used within a ChatControlProvider');\n  }\n  return context;\n};\n\n// Provider component for chat controls\nexport const ChatControlProvider = ({ children }) => {\n  // Ref to track client-generated request ID for non-streaming\n  const currentRequestIdRef = useRef(null);\n  const { apiUrl } = useApi();\n  const { selectedModel } = useModel();\n  const { settings, getModelAdjustedSettings } = useSettings();\n  const { idToken } = useAuth();\n  const { chatHistoryRef, setChatHistory, addMessageToHistory } = useChatHistory();\n  const { setIsWaitingForResponse, setError } = useChatStatus();\n  const { resetPerformanceMetrics, startPerformanceTimer, setTokenMetricsForLastMessage } = usePerformanceMetrics();\n  const { streamMessageWithFetch, stopStreaming } = useStreamingEvents();\n  const { showToast } = useToast();\n\n  // Helpers\n  const formatModelIdentifier = useCallback((model) => {\n    if (!model || !model.provider || !model.id) return null;\n    return `${model.provider}/${model.id}`;\n  }, []);\n\n  // Action: sendMessage\n  const sendMessage = useCallback(async (message, editIndex = null) => {\n    // Generate unique client-side requestId\n    const clientRequestId = (typeof crypto !== 'undefined' && crypto.randomUUID)\n      ? crypto.randomUUID()\n      : Math.random().toString(36).substring(2) + Date.now().toString(36);\n    currentRequestIdRef.current = clientRequestId;\n    const isEditing = editIndex !== null && Number.isInteger(editIndex) && editIndex >= 0;\n    if (settings.streaming) {\n      return streamMessageWithFetch(message, isEditing ? editIndex : null);\n    }\n    if (!message || !selectedModel) {\n      setError('Please enter a message and select a model');\n      return null;\n    }\n    const modelId = formatModelIdentifier(selectedModel);\n    if (!modelId) {\n      setError('Invalid model selection');\n      return null;\n    }\n    let userMessage;\n    if (isEditing) {\n      setChatHistory(prev => {\n        const truncated = prev.slice(0, editIndex);\n        const original = prev[editIndex];\n        // Preserve original id/timestamp, only update content\n        userMessage = { ...original, content: message };\n        return [...truncated, userMessage];\n      });\n    } else {\n      userMessage = addMessageToHistory('user', message);\n    }\n    const requestStartTime = Date.now();\n    setIsWaitingForResponse(true);\n    setError(null);\n    try {\n      const adjusted = getModelAdjustedSettings(selectedModel);\n      const historyForApi = chatHistoryRef.current.map(({ metrics, ...m }) => m);\n      if (adjusted.systemPrompt && (!historyForApi.length || historyForApi[0].role !== 'system')) {\n        historyForApi.unshift({ role: 'system', content: adjusted.systemPrompt, timestamp: Date.now()-1 });\n      }\n      historyForApi.push(userMessage);\n      const payload = { \n        requestId: clientRequestId,\n        model: modelId, messages: historyForApi,\n        temperature: adjusted.temperature,\n        max_tokens: adjusted.max_tokens,\n        top_p: adjusted.top_p,\n        frequency_penalty: adjusted.frequency_penalty,\n        presence_penalty: adjusted.presence_penalty\n      };\n      resetPerformanceMetrics();\n      startPerformanceTimer();\n      const headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' };\n      if (idToken) headers['Authorization'] = `Bearer ${idToken}`;\n      const response = await fetchWithRetry(new URL('/api/chat/completions', apiUrl).toString(), {\n        method: 'POST', headers, body: JSON.stringify(payload)\n      });\n      if (!response.ok) {\n        let errMsg = `API error: ${response.status}`;\n        try { const errData = await response.json(); errMsg = errData?.error?.message || errData?.message || errMsg; } catch {};\n        throw new Error(errMsg);\n      }\n      const data = await response.json();\n      console.log('Received non-streaming chat data:', data);\n\n      // Handle server-sent error in response payload\n      if (data.error?.message || data.finishReason === 'error') {\n        const errMsg = data.error?.message || 'Error occurred during generation';\n        console.error('Error in API response:', errMsg);\n        setError(errMsg);\n        const rawUsage = data.usage || {};\n        const promptTokens = rawUsage.promptTokens ?? rawUsage.prompt_tokens ?? 0;\n        const completionTokens = rawUsage.completionTokens ?? rawUsage.completion_tokens ?? 0;\n        const totalTokens = rawUsage.totalTokens ?? rawUsage.total_tokens ?? completionTokens;\n        const requestEndTime = Date.now();\n        const elapsed = requestEndTime - requestStartTime;\n        const tokensPerSecond = elapsed ? Math.round((completionTokens / (elapsed / 1000)) * 10) / 10 : null;\n        const errorMetrics = {\n          startTime: requestStartTime,\n          endTime: requestEndTime,\n          elapsedTime: elapsed,\n          tokenCount: completionTokens,\n          tokensPerSecond,\n          isComplete: true,\n          timeToFirstToken: null,\n          promptTokens,\n          completionTokens,\n          totalTokens,\n          finishReason: data.finishReason || 'error',\n          error: true\n        };\n        addMessageToHistory('assistant', errMsg, errorMetrics);\n        return null;\n      }\n      const content = data.content || 'No Response returned';\n      // Use server-provided usage tokens directly\n      const rawUsage = data.usage || {};\n      const promptTokens = rawUsage.promptTokens ?? rawUsage.prompt_tokens ?? 0;\n      const completionTokens = rawUsage.completionTokens ?? rawUsage.completion_tokens ?? 0;\n      const totalTokens = rawUsage.totalTokens ?? rawUsage.total_tokens ?? completionTokens;\n      // Compute timing and rates\n      const requestEndTime = Date.now();\n      const elapsed = requestEndTime - requestStartTime;\n      const tokensForMetrics = completionTokens > 0 ? completionTokens : 0;\n      const tokensPerSecond = elapsed\n        ? Math.round((tokensForMetrics / (elapsed / 1000)) * 10) / 10\n        : null;\n      const finalMetrics = {\n        startTime: requestStartTime,\n        endTime: requestEndTime,\n        elapsedTime: elapsed,\n        tokenCount: tokensForMetrics,\n        tokensPerSecond,\n        isComplete: true,\n        timeToFirstToken: null,\n        promptTokens,\n        completionTokens,\n        totalTokens,\n        finishReason: data.finishReason\n      };\n      addMessageToHistory('assistant', content, finalMetrics);\n      return content;\n    } catch (err) {\n      console.error('Error sending message:', err);\n      setError(err.message);\n      // Show the server error as an assistant reply\n      addMessageToHistory('assistant', err.message || 'An error occurred');\n      return null;\n    } finally {\n      // Clear the clientRequestId after completion\n      currentRequestIdRef.current = null;\n      setIsWaitingForResponse(false);\n    }\n  }, [\n    apiUrl,\n    selectedModel,\n    settings.streaming,\n    getModelAdjustedSettings,\n    idToken,\n    chatHistoryRef,\n    setChatHistory,\n    addMessageToHistory,\n    streamMessageWithFetch,\n    formatModelIdentifier,\n    resetPerformanceMetrics,\n    startPerformanceTimer,\n    setError,\n    setIsWaitingForResponse,\n  ]);\n\n  // Action: stopGeneration\n  const stopGenerationAction = useCallback(async () => {\n    stopStreaming();\n    return true;\n  }, [stopStreaming]);\n\n  // Action: clearChat\n  const clearChat = useCallback(() => {\n    setChatHistory([]);\n    resetPerformanceMetrics();\n  }, [setChatHistory, resetPerformanceMetrics]);\n\n  // Action: newChat\n  const newChat = useCallback(() => {\n    if (chatHistoryRef.current.length > 0) {\n      clearChat();\n    }\n  }, [chatHistoryRef, clearChat]);\n\n  // Action: resetChat\n  const resetChat = useCallback(() => {\n    if (chatHistoryRef.current.length === 0) return;\n    \n    if (window.confirm('Are you sure you want to clear the current chat?')) {\n      clearChat();\n      showToast({ type: 'info', message: 'Chat has been cleared' });\n    }\n  }, [chatHistoryRef, clearChat, showToast]);\n\n  // Action: downloadChat\n  const downloadChat = useCallback(() => {\n    const history = chatHistoryRef.current;\n    if (!history.length) return;\n    try {\n      const formatted = history.map(msg => {\n        const role = msg.role === 'user'\n          ? 'You'\n          : msg.role === 'assistant'\n            ? selectedModel?.name || 'Assistant'\n            : msg.role;\n        let contentText = '';\n        if (typeof msg.content === 'string') {\n          contentText = msg.content;\n        } else if (Array.isArray(msg.content)) {\n          contentText = msg.content\n            .map(part => part.type === 'text' ? part.text : '[Image]')\n            .join('\\n');\n        }\n        return `${role}: ${contentText}\\n`;\n      }).join('');\n      const blob = new Blob([formatted], { type: 'text/plain' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `chat_${new Date().toISOString().replace(/:/g, '-')}.txt`;\n      document.body.appendChild(a);\n      a.click();\n      showToast({ type: 'success', message: 'Chat downloaded successfully' });\n      // Clean up anchor and URL\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n    } catch (error) {\n      console.error(\"Error downloading chat:\", error);\n      showToast({ type: 'error', message: 'Failed to download chat. Please try again.' });\n    }\n  }, [chatHistoryRef, selectedModel, showToast]);\n\n  // Action: getOrCreateConversation (stub)\n  const getOrCreateConversation = useCallback((conversationId) => {\n    // implement or delegate\n  }, []);\n\n  // Value\n  const value = useMemo(() => ({\n    sendMessage,\n    stopGeneration: stopGenerationAction,\n    addMessageToHistory,\n    clearChat,\n    newChat,\n    resetChat,\n    downloadChat,\n    getOrCreateConversation,\n    setTokenMetricsForLastMessage\n  }), [\n    sendMessage,\n    stopGenerationAction,\n    addMessageToHistory,\n    clearChat,\n    newChat,\n    resetChat,\n    downloadChat,\n    getOrCreateConversation,\n    setTokenMetricsForLastMessage\n  ]);\n\n  return (\n    <ChatControlContext.Provider value={value}>\n      {children}\n    </ChatControlContext.Provider>\n  );\n}; ","import { createContext, useContext, useState, useMemo, useEffect } from 'react';\nimport { useLoading } from './LoadingContext';\n\n// Create chat status context\nconst ChatStatusContext = createContext();\n\n// Hook to use chat status context\nexport const useChatStatus = () => {\n  const context = useContext(ChatStatusContext);\n  if (context === undefined) {\n    throw new Error('useChatStatus must be used within a ChatStatusProvider');\n  }\n  return context;\n};\n\n// Provider component for chat status\nexport const ChatStatusProvider = ({ children }) => {\n  const [isWaitingForResponse, setIsWaitingForResponse] = useState(false);\n  const [error, setError] = useState(null);\n  // Sync with global loading context for chat\n  const [, startChatLoading, stopChatLoading] = useLoading('chat');\n  useEffect(() => {\n    if (isWaitingForResponse) startChatLoading();\n    else stopChatLoading();\n  }, [isWaitingForResponse, startChatLoading, stopChatLoading]);\n\n  const value = useMemo(() => ({\n    isWaitingForResponse,\n    setIsWaitingForResponse,\n    error,\n    setError,\n  }), [isWaitingForResponse, error]);\n\n  return (\n    <ChatStatusContext.Provider value={value}>\n      {children}\n    </ChatStatusContext.Provider>\n  );\n}; ","import React, { createContext, useContext, useState, useRef,  useCallback, useMemo } from 'react';\n\n// Create chat history context\nconst ChatHistoryContext = createContext();\n\n// Hook to use chat history context\nexport const useChatHistory = () => {\n  const context = useContext(ChatHistoryContext);\n  if (context === undefined) {\n    throw new Error('useChatHistory must be used within a ChatHistoryProvider');\n  }\n  return context;\n};\n\n// Provider component for chat history\nexport const ChatHistoryProvider = ({ children }) => {\n  // State and ref for chat history, with custom setter to sync ref immediately\n  const [chatHistory, internalSetChatHistory] = useState([]);\n  const chatHistoryRef = useRef([]);\n\n  // Wrap setter to sync ref and state in one step\n  const setChatHistory = useCallback((update) => {\n    internalSetChatHistory(prev => {\n      const newHistory = typeof update === 'function' ? update(prev) : update;\n      chatHistoryRef.current = newHistory;\n      return newHistory;\n    });\n  }, []);\n\n  // Add message, stable callback\n  const addMessageToHistory = useCallback((role, content, metrics) => {\n    const timestamp = Date.now();\n    const message = { id: timestamp, role, content, timestamp, ...(metrics && { metrics }) };\n    setChatHistory(prev => [...prev, message]);\n    return message;\n  }, [setChatHistory]);\n\n  // Function to update content of the most recent assistant message (avoiding user replacements)\n  const updateChatWithContent = useCallback((content) => {\n    setChatHistory(prev => {\n      const lastIndex = prev.length - 1;\n      if (lastIndex < 0) return prev;\n      const lastMsg = prev[lastIndex];\n      // No-op if not assistant or same content\n      if (lastMsg.role !== 'assistant' || lastMsg.content === content) {\n        return prev;\n      }\n      // Otherwise clone and update\n      const newHistory = [...prev];\n      newHistory[lastIndex] = { ...lastMsg, content };\n      return newHistory;\n    });\n  }, [setChatHistory]);\n\n  // Memoize context value to avoid re-renders\n  const value = useMemo(() => ({\n    chatHistory,\n    chatHistoryRef,\n    setChatHistory,\n    addMessageToHistory,\n    updateChatWithContent\n  }), [chatHistory, setChatHistory, addMessageToHistory, updateChatWithContent]);\n\n  return (\n    <ChatHistoryContext.Provider value={value}>\n      {children}\n    </ChatHistoryContext.Provider>\n  );\n}; ","import { createContext, useContext, useState, useMemo } from 'react';\n\n// Create API context\nconst ApiContext = createContext();\n\n// Custom hook for using API context\nexport const useApi = () => {\n  const context = useContext(ApiContext);\n  if (context === undefined) {\n    throw new Error('useApi must be used within an ApiProvider');\n  }\n  return context;\n};\n\n// API provider component\nexport const ApiProvider = ({ children }) => {\n  const [apiUrl] = useState(process.env.REACT_APP_API_URL || 'http://localhost:3000/api'); // Base API URL\n\n  // Memoize context value to prevent unnecessary re-renders\n  const value = useMemo(() => ({\n    apiUrl,\n  }), [apiUrl]);\n\n  return (\n    <ApiContext.Provider value={value}>\n      {children}\n    </ApiContext.Provider>\n  );\n}; ","/* eslint-disable no-unused-vars */\nimport React, { lazy, Suspense, useEffect, useState } from \"react\";\nimport { AuthProvider, useAuth } from \"./contexts/AuthContext\";\nimport { ContextManager } from \"./contexts/ContextManager\";\nimport Spinner from \"./components/common/Spinner\";\nimport {\n  performanceMonitor,\n  PERFORMANCE_MARKS,\n  PERFORMANCE_MEASURES,\n} from \"./utils/performance\";\nimport {\n  loadChunkGroup,\n  idlePreloadChunks,\n  createChunkMonitor,\n  createAdaptiveLoader,\n  createSmallChunkBundle,\n} from \"./utils/chunkOptimizer\";\n// (Formatting preloads removed - we rely on on-demand loading)\n\n// === Enhanced Lazy Loading Strategy with Chunk Optimization ===\n// Group related components into micro-chunks for better caching and loading\n\n// Core Layout Components (Critical - Load First)\nconst CORE_IMPORTS = {\n  layout: () =>\n    import(/* webpackChunkName: \"core-layout\" */ \"./components/layout/Layout\"),\n  spinner: () =>\n    import(\n      /* webpackChunkName: \"core-spinner\" */ \"./components/common/Spinner\"\n    ),\n};\n\n// Essential UI Components (Load Second)\nconst ESSENTIAL_IMPORTS = {\n  chatContainer: () =>\n    import(\n      /* webpackChunkName: \"chat-container\" */ \"./components/chat/ChatContainer\"\n    ),\n  chatInput: () =>\n    import(/* webpackChunkName: \"chat-input\" */ \"./components/chat/ChatInput\"),\n  messageList: () =>\n    import(\n      /* webpackChunkName: \"chat-messages\" */ \"./components/chat/MessageList\"\n    ),\n  sidebar: () =>\n    import(\n      /* webpackChunkName: \"layout-sidebar\" */ \"./components/layout/Sidebar\"\n    ),\n  mainContent: () =>\n    import(\n      /* webpackChunkName: \"layout-main\" */ \"./components/layout/MainContent\"\n    ),\n};\n\n// UI Controls (Load Third) - Group small controls together\nconst UI_CONTROLS_IMPORTS = createSmallChunkBundle(\n  [\n    () =>\n      import(\n        /* webpackChunkName: \"ui-controls\" */ \"./components/models/ModelDropdown\"\n      ),\n    () =>\n      import(\n        /* webpackChunkName: \"ui-controls\" */ \"./components/common/ThemeToggle\"\n      ),\n    () =>\n      import(\n        /* webpackChunkName: \"ui-controls\" */ \"./components/layout/SidebarToggle\"\n      ),\n    () =>\n      import(\n        /* webpackChunkName: \"ui-controls\" */ \"./components/auth/AuthButton\"\n      ),\n    () =>\n      import(\n        /* webpackChunkName: \"ui-controls\" */ \"./components/common/MoreActions\"\n      ),\n  ],\n  \"ui-controls\"\n);\n\n// Secondary Features (Load Fourth) - Group feature components\nconst SECONDARY_IMPORTS = createSmallChunkBundle(\n  [\n    () =>\n      import(\n        /* webpackChunkName: \"features\" */ \"./components/chat/GlobalMetricsBar\"\n      ),\n    () =>\n      import(\n        /* webpackChunkName: \"features\" */ \"./components/chat/PerformanceMetrics\"\n      ),\n    () =>\n      import(\n        /* webpackChunkName: \"features\" */ \"./components/settings/SettingsPanel\"\n      ),\n  ],\n  \"features\"\n);\n\n// Heavy/Optional Components (Load on Idle)\nconst HEAVY_IMPORTS = {\n  markdownRenderer: () =>\n    import(\n      /* webpackChunkName: \"heavy-markdown\" */ \"./components/common/LazyMarkdownRenderer/MarkdownRenderer\"\n    ),\n  streamingMessage: () =>\n    import(\n      /* webpackChunkName: \"heavy-streaming\" */ \"./components/chat/ChatMessage/StreamingMessage\"\n    ),\n  loginModal: () =>\n    import(\n      /* webpackChunkName: \"heavy-auth-modal\" */ \"./components/auth/LoginModal\"\n    ),\n  imageOverlay: () =>\n    import(\n      /* webpackChunkName: \"heavy-image-overlay\" */ \"./components/common/ImageOverlay\"\n    ),\n  typingIndicator: () =>\n    import(\n      /* webpackChunkName: \"heavy-typing\" */ \"./components/common/TypingIndicator\"\n    ),\n};\n\n// External Services (Load Last)\nconst EXTERNAL_IMPORTS = {\n  firebase: () =>\n    import(/* webpackChunkName: \"external-firebase\" */ \"./firebaseConfig\").then(\n      () => {\n        window.dispatchEvent(new Event(\"firebaseInitialized\"));\n      }\n    ),\n};\n\n// Micro-components bundled together for efficiency\nconst MICRO_IMPORTS = createSmallChunkBundle(\n  [\n    () => import(/* webpackChunkName: \"micro-bundle\" */ \"react-icons\"),\n    () => import(/* webpackChunkName: \"micro-bundle\" */ \"lodash.debounce\"),\n    () => import(/* webpackChunkName: \"micro-bundle\" */ \"lodash.throttle\"),\n    () => import(/* webpackChunkName: \"micro-bundle\" */ \"clsx\"),\n  ],\n  \"micro-bundle\"\n);\n\n// Lazy-load the layout using the shared import\nconst Layout = lazy(CORE_IMPORTS.layout);\nconst LoginModal = lazy(HEAVY_IMPORTS.loginModal);\n\n// Initialize performance monitoring and adaptive loading\nconst chunkMonitor = createChunkMonitor();\nconst adaptiveLoader = createAdaptiveLoader();\n\n/**\n * Enhanced AppShell with intelligent chunk loading and network awareness\n */\nfunction AppShell() {\n  const [loadingPhase, setLoadingPhase] = useState(\"initializing\");\n  const [loadedPhases, setLoadedPhases] = useState(new Set());\n  const [networkStrategy, setNetworkStrategy] = useState(null);\n  const { isLoggingIn, setIsLoggingIn } = useAuth();\n\n  useEffect(() => {\n    let canceled = false;\n\n    async function runEnhancedPhases() {\n      performanceMonitor.mark(PERFORMANCE_MARKS.APP_START);\n\n      // Get network-aware loading strategy\n      const strategy = adaptiveLoader.getStrategy();\n      setNetworkStrategy(strategy);\n\n      console.log(\"🌐 Network strategy:\", strategy);\n\n      try {\n        // Phase 1: Core Components (Critical Path)\n        setLoadingPhase(\"core\");\n        chunkMonitor.startLoad(\"core\");\n\n        await loadChunkGroup(CORE_IMPORTS, {\n          groupName: \"core\",\n          timeout: strategy.timeout,\n          retries: strategy.skipNonEssential ? 1 : 2,\n        });\n\n        if (canceled) return;\n\n        chunkMonitor.endLoad(\"core\", true);\n        performanceMonitor.mark(PERFORMANCE_MARKS.IMPORTANT_COMPONENTS_LOADED);\n        setLoadedPhases((prev) => new Set([...prev, \"core\"]));\n\n        // Phase 2: Essential UI (Main Interface)\n        setLoadingPhase(\"essential\");\n        chunkMonitor.startLoad(\"essential\");\n\n        await loadChunkGroup(ESSENTIAL_IMPORTS, {\n          groupName: \"essential\",\n          timeout: strategy.timeout,\n          retries: strategy.skipNonEssential ? 1 : 2,\n        });\n\n        if (canceled) return;\n\n        chunkMonitor.endLoad(\"essential\", true);\n        setLoadedPhases((prev) => new Set([...prev, \"essential\"]));\n\n        // Phase 3: UI Controls (Interactive Elements) - Load as bundled group\n        setLoadingPhase(\"controls\");\n        chunkMonitor.startLoad(\"ui-controls\");\n\n        await loadChunkGroup(UI_CONTROLS_IMPORTS, {\n          groupName: \"ui-controls\",\n          timeout: strategy.timeout,\n          retries: 1,\n        });\n\n        if (canceled) return;\n\n        chunkMonitor.endLoad(\"ui-controls\", true);\n        performanceMonitor.mark(PERFORMANCE_MARKS.COMPONENT_LOAD);\n        performanceMonitor.measure(\n          PERFORMANCE_MEASURES.COMPONENT_LOAD,\n          PERFORMANCE_MARKS.APP_START,\n          PERFORMANCE_MARKS.COMPONENT_LOAD\n        );\n\n        setLoadedPhases((prev) => new Set([...prev, \"controls\"]));\n        setLoadingPhase(\"ready\");\n\n        // Show app as interactive\n        requestAnimationFrame(() => {\n          if (canceled) return;\n\n          performanceMonitor.mark(PERFORMANCE_MARKS.APP_INTERACTIVE);\n          performanceMonitor.measure(\n            PERFORMANCE_MEASURES.TIME_TO_INTERACTIVE,\n            PERFORMANCE_MARKS.APP_START,\n            PERFORMANCE_MARKS.APP_INTERACTIVE\n          );\n\n          console.log(\n            \"[Enhanced] App is interactive; starting intelligent preloading\"\n          );\n\n          // Phase 4+: Intelligent idle loading based on network conditions\n          if (!strategy.skipNonEssential) {\n            const chunkGroups = {\n              \"secondary-features\": {\n                imports: SECONDARY_IMPORTS,\n                priority: 0,\n                options: { timeout: strategy.timeout },\n              },\n              \"heavy-components\": {\n                imports: HEAVY_IMPORTS,\n                priority: 1,\n                options: { timeout: strategy.timeout * 1.5 },\n              },\n              \"external-services\": {\n                imports: EXTERNAL_IMPORTS,\n                priority: 2,\n                options: { timeout: strategy.timeout * 2 },\n              },\n              \"micro-components\": {\n                imports: MICRO_IMPORTS,\n                priority: 3,\n                options: { timeout: strategy.timeout },\n              },\n            };\n\n            idlePreloadChunks(chunkGroups, {\n              maxConcurrent: strategy.maxConcurrent,\n              priorityDelay: strategy.priorityDelay,\n              idleTimeout: strategy.timeout,\n            });\n\n            // Monitor chunk loading\n            Object.keys(chunkGroups).forEach((groupName) => {\n              chunkMonitor.startLoad(groupName);\n            });\n\n            // Update loaded phases as chunks complete\n            const originalOnComplete = (groupName) => {\n              chunkMonitor.endLoad(groupName, true);\n              setLoadedPhases(\n                (prev) =>\n                  new Set([...prev, groupName.toLowerCase().replace(\" \", \"-\")])\n              );\n            };\n          } else {\n            console.log(\n              \"🚫 Skipping non-essential chunks due to network conditions\"\n            );\n          }\n        });\n      } catch (error) {\n        console.error(\"[Enhanced] Error in loading phases:\", error);\n        chunkMonitor.endLoad(loadingPhase, false);\n        setLoadingPhase(\"error\");\n      }\n    }\n\n    runEnhancedPhases();\n\n    return () => {\n      canceled = true;\n      performanceMonitor.clear();\n    };\n  }, []);\n\n  // Enhanced loading states with network awareness\n  const isReady = loadingPhase === \"ready\" || loadedPhases.has(\"controls\");\n  const showSpinner =\n    loadingPhase === \"initializing\" || loadingPhase === \"core\";\n\n  if (showSpinner) {\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          height: \"100vh\",\n          flexDirection: \"column\",\n          gap: \"1rem\",\n        }}\n      >\n        <Spinner size=\"medium\" />\n        <div style={{ fontSize: \"0.875rem\", opacity: 0.7 }}>\n          Loading {loadingPhase}...\n          {networkStrategy && (\n            <div style={{ fontSize: \"0.75rem\", marginTop: \"0.5rem\" }}>\n              Network: {networkStrategy.effectiveType || \"detecting...\"}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  if (loadingPhase === \"error\") {\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          height: \"100vh\",\n          flexDirection: \"column\",\n          gap: \"1rem\",\n        }}\n      >\n        <div>⚠️ Loading Error</div>\n        <button onClick={() => window.location.reload()}>Reload App</button>\n        {process.env.NODE_ENV === \"development\" && (\n          <details style={{ marginTop: \"1rem\", fontSize: \"0.875rem\" }}>\n            <summary>Performance Metrics</summary>\n            <pre style={{ textAlign: \"left\", fontSize: \"0.75rem\" }}>\n              {JSON.stringify(chunkMonitor.getMetrics(), null, 2)}\n            </pre>\n          </details>\n        )}\n      </div>\n    );\n  }\n\n  // App ready: render layout + chat UI\n  return (\n    <>\n      <Suspense\n        fallback={\n          <div\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              height: \"100vh\",\n            }}\n          >\n            <Spinner size=\"small\" />\n          </div>\n        }\n      >\n        <Layout />\n      </Suspense>\n\n      {isLoggingIn && loadedPhases.has(\"heavy-components\") && (\n        <Suspense fallback={<Spinner size=\"small\" />}>\n          <LoginModal onClose={() => setIsLoggingIn(false)} />\n        </Suspense>\n      )}\n\n      {/* Enhanced debug info in development */}\n      {process.env.NODE_ENV === \"development\" && (\n        <div\n          style={{\n            position: \"fixed\",\n            bottom: \"10px\",\n            right: \"10px\",\n            background: \"rgba(0,0,0,0.9)\",\n            color: \"white\",\n            padding: \"12px\",\n            borderRadius: \"8px\",\n            fontSize: \"11px\",\n            zIndex: 9999,\n            maxWidth: \"300px\",\n            fontFamily: \"monospace\",\n          }}\n        >\n          <div>\n            <strong>Phase:</strong> {loadingPhase}\n          </div>\n          <div>\n            <strong>Loaded:</strong> {Array.from(loadedPhases).join(\", \")}\n          </div>\n          {networkStrategy && (\n            <>\n              <div>\n                <strong>Network:</strong>{\" \"}\n                {adaptiveLoader.getNetworkInfo().effectiveType}\n              </div>\n              <div>\n                <strong>Strategy:</strong> {networkStrategy.maxConcurrent}x\n                concurrent\n              </div>\n            </>\n          )}\n          <div>\n            <strong>Chunks:</strong> {chunkMonitor.getMetrics().totalLoaded}{\" \"}\n            loaded, {chunkMonitor.getMetrics().totalFailed} failed\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n\n/** Root App with providers **/\nexport default function App() {\n  return (\n    <AuthProvider>\n      <ContextManager>\n        <AppShell />\n      </ContextManager>\n    </AuthProvider>\n  );\n}\n"],"names":["AuthContext","createContext","useAuth","context","useContext","undefined","Error","AuthProvider","_ref","children","currentUser","setCurrentUser","useState","idToken","setIdToken","loading","setLoading","startAuthLoading","stopAuthLoading","useLoading","error","setError","isLoggingIn","setIsLoggingIn","isFirebaseInitialized","setIsFirebaseInitialized","showToast","useToast","useEffect","login","useCallback","async","logout","getFirebaseAuth","signOut","firebaseSignOut","auth","msg","type","message","err","unsubscribe","handleFirebaseInit","initializeAuthListener","onAuthStateChanged","firebaseOnAuthStateChanged","user","token","getIdToken","localStorage","setItem","e","removeItem","window","addEventListener","removeEventListener","value","useMemo","isAuthenticated","_jsx","Provider","ChatStateContext","useChatState","ChatStateProvider","chatHistory","chatHistoryRef","useChatHistory","isWaitingForResponse","useChatStatus","ChatControlContext","useChatControl","ChatControlProvider","currentRequestIdRef","useRef","apiUrl","useApi","selectedModel","useModel","settings","getModelAdjustedSettings","useSettings","setChatHistory","addMessageToHistory","setIsWaitingForResponse","resetPerformanceMetrics","startPerformanceTimer","setTokenMetricsForLastMessage","usePerformanceMetrics","streamMessageWithFetch","stopStreaming","useStreamingEvents","formatModelIdentifier","model","provider","id","sendMessage","editIndex","arguments","length","clientRequestId","crypto","randomUUID","Math","random","toString","substring","Date","now","current","isEditing","Number","isInteger","streaming","modelId","userMessage","prev","truncated","slice","original","content","requestStartTime","_data$error","_ref6","_rawUsage$promptToken2","_ref7","_rawUsage$completionT2","_ref8","_rawUsage$totalTokens2","adjusted","historyForApi","map","_ref2","metrics","m","systemPrompt","role","unshift","timestamp","push","payload","requestId","messages","temperature","max_tokens","top_p","frequency_penalty","presence_penalty","headers","response","fetchWithRetry","URL","method","body","JSON","stringify","ok","errMsg","status","_errData$error","errData","json","data","finishReason","_data$error2","_ref3","_rawUsage$promptToken","_ref4","_rawUsage$completionT","_ref5","_rawUsage$totalTokens","rawUsage","usage","promptTokens","prompt_tokens","completionTokens","completion_tokens","totalTokens","total_tokens","requestEndTime","elapsed","errorMetrics","startTime","endTime","elapsedTime","tokenCount","tokensPerSecond","round","isComplete","timeToFirstToken","tokensForMetrics","finalMetrics","stopGenerationAction","clearChat","newChat","resetChat","confirm","downloadChat","history","formatted","name","contentText","Array","isArray","part","text","join","blob","Blob","url","createObjectURL","a","document","createElement","href","download","toISOString","replace","appendChild","click","removeChild","revokeObjectURL","getOrCreateConversation","conversationId","stopGeneration","ChatStatusContext","ChatStatusProvider","startChatLoading","stopChatLoading","ChatHistoryContext","ChatHistoryProvider","internalSetChatHistory","update","newHistory","updateChatWithContent","lastIndex","lastMsg","ApiContext","ApiProvider","process","CORE_IMPORTS","layout","spinner","ESSENTIAL_IMPORTS","chatContainer","chatInput","messageList","sidebar","mainContent","UI_CONTROLS_IMPORTS","createSmallChunkBundle","SECONDARY_IMPORTS","HEAVY_IMPORTS","markdownRenderer","streamingMessage","loginModal","imageOverlay","typingIndicator","EXTERNAL_IMPORTS","firebase","then","dispatchEvent","Event","MICRO_IMPORTS","Layout","lazy","LoginModal","chunkMonitor","createChunkMonitor","adaptiveLoader","createAdaptiveLoader","AppShell","loadingPhase","setLoadingPhase","loadedPhases","setLoadedPhases","Set","networkStrategy","setNetworkStrategy","canceled","performanceMonitor","mark","PERFORMANCE_MARKS","APP_START","strategy","getStrategy","startLoad","loadChunkGroup","groupName","timeout","retries","skipNonEssential","endLoad","IMPORTANT_COMPONENTS_LOADED","COMPONENT_LOAD","measure","PERFORMANCE_MEASURES","requestAnimationFrame","APP_INTERACTIVE","TIME_TO_INTERACTIVE","chunkGroups","imports","priority","options","idlePreloadChunks","maxConcurrent","priorityDelay","idleTimeout","Object","keys","forEach","runEnhancedPhases","clear","has","_jsxs","style","display","alignItems","justifyContent","height","flexDirection","gap","Spinner","size","fontSize","opacity","marginTop","effectiveType","onClick","location","reload","_Fragment","Suspense","fallback","onClose","App","ContextManager"],"sourceRoot":""}