{"version":3,"file":"static/js/chat-container.493a4965d9.chunk.v1_9_0.js","mappings":"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","sources":["components/chat/ChatContainer/index.js"],"sourcesContent":["import { memo, lazy, useRef, useEffect, useState, useCallback, useMemo, Suspense } from 'react';\nimport { useChatLogic } from '../../../hooks/useChatLogic';\nimport { ChevronDownIcon } from '@primer/octicons-react';\nimport styles from './ChatContainer.module.css';\nimport throttle from 'lodash.throttle';\nimport PropTypes from 'prop-types';\n\n// Lazy-loaded components\nconst MessageList = lazy(() => import(/* webpackChunkName: \"chat-messagelist\" */ '../MessageList'));\nconst ChatInput = lazy(() => import(/* webpackChunkName: \"chat-input\" */ '../ChatInput'));\nconst GlobalMetricsBar = lazy(() => import(/* webpackChunkName: \"chat-globalmetrics\" */ '../GlobalMetricsBar'));\nconst ModelSelectorButton = lazy(() => import(/* webpackChunkName: \"model-selector-button\" */ '../../models/ModelSelectorButton'));\n\n/**\n * Main chat container component\n */\nconst ChatContainer = memo(({ \n  selectedModel: passedSelectedModel,\n  isLoadingModels, \n  toggleModelSelector,\n  onToggleSettings,\n  isSidebarOpen,\n  isSettingsOpen,\n  isModelSelectorOpen\n}) => {\n  const {\n    chatHistory,\n    isWaitingForResponse,\n    error,\n    metrics, \n    selectedModel: modelFromLogic,\n    handleSendMessage,\n  } = useChatLogic();\n\n  // Add state to track which message is being edited\n  const [editingMessage, setEditingMessage] = useState(null);\n\n  const messageListRef = useRef(null);\n  const scrollContainerRef = useRef(null);\n  const containerRef = useRef(null);\n  const isActiveChat = chatHistory.length > 0;\n  const [showScrollToBottomButton, setShowScrollToBottomButton] = useState(false);\n  const prevWaitingForResponse = useRef(isWaitingForResponse);\n\n  // === Performance-tuned handlers ===\n  // Smooth scroll to bottom, memoized\n  const scrollToBottom = useCallback((behavior = 'smooth') => {\n    if (scrollContainerRef.current) {\n      scrollContainerRef.current.scrollTo({ top: scrollContainerRef.current.scrollHeight, behavior });\n      setShowScrollToBottomButton(false);\n    }\n  }, []);\n\n  // Scroll handler for showing/hiding the scroll-to-bottom button, throttled\n  const handleScroll = useCallback(() => {\n    const container = scrollContainerRef.current;\n    if (!container) return;\n    const scrollThreshold = 10;\n    const atBottom = container.scrollHeight - container.scrollTop - container.clientHeight < scrollThreshold;\n    setShowScrollToBottomButton(!atBottom);\n  }, []);\n  const throttledHandleScroll = useMemo(\n    () => throttle(handleScroll, 100),\n    [handleScroll]\n  );\n\n  // Focus input helper, memoized\n  const focusInputField = useCallback(() => {\n    // Use a timeout to ensure the component is fully rendered and mounted\n    setTimeout(() => {\n      // Try to find the textarea within the ChatInput component\n      const inputField = document.querySelector('textarea.'+styles.chatInput) || \n                         document.querySelector('textarea[aria-label=\"Chat message input\"]');\n      if (inputField) {\n        inputField.focus();\n      }\n    }, 100);\n  }, []);\n\n  // Focus the input field when the component is mounted\n  useEffect(() => {\n    focusInputField();\n  }, [focusInputField]);\n\n  // Focus input when response is completed, only if UI elements aren't open\n  useEffect(() => {\n    // Check if response has just completed (was waiting, now not waiting)\n    if (prevWaitingForResponse.current && !isWaitingForResponse) {\n      // Only focus if no UI elements are open\n      const noUIElementsOpen = !isSidebarOpen && !isSettingsOpen && !isModelSelectorOpen && !editingMessage;\n      \n      if (noUIElementsOpen) {\n        focusInputField();\n      }\n    }\n    \n    // Update the ref for the next check\n    prevWaitingForResponse.current = isWaitingForResponse;\n  }, [isWaitingForResponse, isSidebarOpen, isSettingsOpen, isModelSelectorOpen, editingMessage, focusInputField]);\n\n  // Effect to handle manual scrolling by the user (NOW MANAGES BUTTON VISIBILITY)\n  useEffect(() => {\n    const container = scrollContainerRef.current;\n    if (!container) return;\n    // Initial check\n    throttledHandleScroll();\n    container.addEventListener('scroll', throttledHandleScroll, { passive: true });\n    return () => {\n      container.removeEventListener('scroll', throttledHandleScroll);\n      throttledHandleScroll.cancel();\n    };\n  }, [throttledHandleScroll]);\n\n  // Effect to handle manual scrolling by the user (NOW MANAGES BUTTON VISIBILITY)\n  useEffect(() => {\n    const container = scrollContainerRef.current;\n    if (!container) return;\n\n    const handleScroll = () => {\n      const scrollThreshold = 10; // Pixels from bottom to consider \"at bottom\"\n      const atBottom = container.scrollHeight - container.scrollTop - container.clientHeight < scrollThreshold;\n      // Show the button if user is NOT at the bottom\n      setShowScrollToBottomButton(!atBottom);\n    };\n\n    // Run handler once initially to set correct state\n    handleScroll();\n\n    container.addEventListener('scroll', handleScroll, { passive: true });\n    return () => container.removeEventListener('scroll', handleScroll);\n\n  }, [showScrollToBottomButton]); // Dependency helps re-attach listener if needed, though primary logic is inside\n\n  // Need another effect to check scroll position when chatHistory length changes,\n  // as new content might make the button necessary even if user didn't scroll.\n  useEffect(() => {\n    // React to new messages by re-checking scroll only once after DOM update\n    const timeout = setTimeout(() => throttledHandleScroll(), 100);\n    return () => clearTimeout(timeout);\n  }, [chatHistory, throttledHandleScroll]);\n\n  // Use the selected model passed down for the button, but model from logic elsewhere\n  const displayModelName = passedSelectedModel?.name;\n  const displayProviderName = passedSelectedModel?.provider;\n\n  // Handle edit message request from a message\n  const handleEditMessage = useCallback((message) => {\n    // Can't edit while waiting for response\n    if (isWaitingForResponse) return;\n    setEditingMessage(message);\n    // Scroll to input area if needed\n    setTimeout(() => {\n      const inputArea = document.querySelector(`.${styles.ChatContainer__fixedInputArea}`);\n      if (inputArea) {\n        // inputArea.scrollIntoView({ behavior: 'smooth' }); // Commented out to prevent scroll\n      }\n    }, 100);\n  }, [isWaitingForResponse]);\n\n  // Handle cancel edit\n  const handleCancelEdit = useCallback(() => {\n    setEditingMessage(null);\n  }, []);\n\n  // Disable editing if the model starts responding\n  useEffect(() => {\n    if (isWaitingForResponse && editingMessage) {\n      setEditingMessage(null);\n    }\n  }, [isWaitingForResponse, editingMessage]);\n\n  // Classes for the main container\n  const chatContainerClasses = `${styles.ChatContainer} ${isActiveChat ? styles['ChatContainer--activeChat'] : styles['ChatContainer--emptyChat']} ${editingMessage ? styles['ChatContainer--editingMode'] : ''}`;\n\n  // Helper function to render the input area contents\n  const renderInputAreaContents = (isFixedLayout) => {\n    // Determine if it's the initial chat state\n    const isInitialChat = !isActiveChat;\n\n    return (\n      <>\n        {/* Global Metrics: Only show when fixed */}\n        {isFixedLayout && !editingMessage && (\n          <Suspense fallback={<div className={styles.globalMetricsPlaceholder} />}>\n            <GlobalMetricsBar \n              metrics={metrics?.session}\n              modelName={modelFromLogic?.name} \n            />\n          </Suspense>\n        )}\n\n        <div className={styles.ChatContainer__inputControlsWrapper}> \n          <Suspense fallback={<div className={styles.ChatContainer__inputPlaceholder} />}>\n            <ChatInput\n              isInitialChat={isInitialChat}\n              onSendMessage={handleSendMessage}\n              disabled={isWaitingForResponse} \n              selectedModel={modelFromLogic} \n              editingMessage={editingMessage}\n              onCancelEdit={handleCancelEdit}\n              isStreaming={isWaitingForResponse}\n              toggleModelSelector={toggleModelSelector}\n              onFocus={focusInputField}\n            />\n          </Suspense>\n        </div>\n      </>\n    );\n  };\n\n  // Update CSS var for input height\n  useEffect(() => {\n    if (!chatHistory.length) return;\n    const container = containerRef.current;\n    if (!container) return;\n    const updateInputHeight = () => {\n      const inputArea = container.querySelector(`.${styles.ChatContainer__fixedInputArea}`);\n      if (inputArea) {\n        const height = inputArea.getBoundingClientRect().height;\n        container.style.setProperty('--input-height', `${height}px`);\n      }\n    };\n    updateInputHeight();\n    window.addEventListener('resize', updateInputHeight);\n    return () => window.removeEventListener('resize', updateInputHeight);\n  }, [chatHistory]);\n\n  return (\n    <div ref={containerRef} className={chatContainerClasses}>\n      {/* Container for the Model Selector Button */}\n      <div className={styles.ChatContainer__modelButtonContainer}>\n        <Suspense fallback={null}> \n          <ModelSelectorButton \n            selectedModelName={displayModelName}\n            providerName={displayProviderName}\n            onClick={toggleModelSelector}\n            disabled={isLoadingModels}\n          />\n        </Suspense>\n      </div>\n\n      <div className={styles.ChatContainer__chatAreaWrapper}>\n        <div className={styles.ChatContainer__chatArea}>\n          {isActiveChat ? (\n            // Active Chat: Render MessageList inside scroll container\n            <div className={styles.ChatContainer__scrollContainer} ref={scrollContainerRef}>\n              <div className={styles.ChatContainer__scrollInner}>\n                <Suspense fallback={<div className={styles.messagePlaceholder} />}>\n                  <MessageList\n                    ref={messageListRef}\n                    messages={chatHistory}\n                    error={error}\n                    onEditMessage={handleEditMessage}\n                  />\n                </Suspense>\n              </div>\n            </div>\n          ) : (\n            // Empty Chat: Render Greeting and Input Area (Static Layout)\n            <div className={styles.ChatContainer__emptyChatContent}>\n              <div className={styles.ChatContainer__greetingMessage}>\n                <h2>Welcome to AI Chat!</h2>\n                <p>Select a model above and start your conversation.</p>\n              </div>\n              {/* Render input area directly below greeting */}\n              <div className={`${styles.ChatContainer__inputArea} ${styles.ChatContainer__staticInputArea}`}> \n                {renderInputAreaContents(false)} \n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Scroll to Bottom Button */}\n        {showScrollToBottomButton && isActiveChat && (\n          <button\n            className={styles.ChatContainer__scrollToBottomButton}\n            onClick={() => scrollToBottom('smooth')}\n            aria-label=\"Scroll to bottom\"\n            title=\"Scroll to bottom\"\n          >\n            <ChevronDownIcon size={20} />\n          </button>\n        )}\n      </div>\n\n      {/* Fixed Input Area Wrapper (Only rendered when chat is active) */}\n      {isActiveChat && (\n        <div className={`${styles.ChatContainer__inputArea} ${styles.ChatContainer__fixedInputArea}`}> \n          {renderInputAreaContents(true)} \n        </div>\n      )}\n    </div>\n  );\n});\n\nChatContainer.displayName = 'ChatContainer';\n\nChatContainer.propTypes = {\n  selectedModel: PropTypes.object, // Shape could be refined\n  isLoadingModels: PropTypes.bool,\n  toggleModelSelector: PropTypes.func.isRequired,\n  onToggleSettings: PropTypes.func.isRequired,\n  isSidebarOpen: PropTypes.bool,\n  isSettingsOpen: PropTypes.bool,\n  isModelSelectorOpen: PropTypes.bool\n};\n\nexport default ChatContainer; "],"names":["MessageList","lazy","ChatInput","GlobalMetricsBar","ModelSelectorButton","ChatContainer","memo","_ref","selectedModel","passedSelectedModel","isLoadingModels","toggleModelSelector","onToggleSettings","isSidebarOpen","isSettingsOpen","isModelSelectorOpen","chatHistory","isWaitingForResponse","error","metrics","modelFromLogic","handleSendMessage","useChatLogic","editingMessage","setEditingMessage","useState","messageListRef","useRef","scrollContainerRef","containerRef","isActiveChat","length","showScrollToBottomButton","setShowScrollToBottomButton","prevWaitingForResponse","scrollToBottom","useCallback","behavior","arguments","undefined","current","scrollTo","top","scrollHeight","handleScroll","container","atBottom","scrollTop","clientHeight","throttledHandleScroll","useMemo","throttle","focusInputField","setTimeout","inputField","document","querySelector","styles","chatInput","focus","useEffect","addEventListener","passive","removeEventListener","cancel","timeout","clearTimeout","displayModelName","name","displayProviderName","provider","handleEditMessage","message","ChatContainer__fixedInputArea","handleCancelEdit","chatContainerClasses","renderInputAreaContents","isFixedLayout","isInitialChat","_jsxs","_Fragment","children","_jsx","Suspense","fallback","className","globalMetricsPlaceholder","session","modelName","ChatContainer__inputControlsWrapper","ChatContainer__inputPlaceholder","onSendMessage","disabled","onCancelEdit","isStreaming","onFocus","updateInputHeight","inputArea","height","getBoundingClientRect","style","setProperty","window","ref","ChatContainer__modelButtonContainer","selectedModelName","providerName","onClick","ChatContainer__chatAreaWrapper","ChatContainer__chatArea","ChatContainer__scrollContainer","ChatContainer__scrollInner","messagePlaceholder","messages","onEditMessage","ChatContainer__emptyChatContent","ChatContainer__greetingMessage","ChatContainer__inputArea","ChatContainer__staticInputArea","ChatContainer__scrollToBottomButton","title","ChevronDownIcon","size","displayName"],"sourceRoot":""}