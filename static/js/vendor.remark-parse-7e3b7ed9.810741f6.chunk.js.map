{"version":3,"file":"static/js/vendor.remark-parse-7e3b7ed9.810741f6.chunk.js","mappings":"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","sources":["../node_modules/remark-parse/node_modules/micromark/lib/initialize/content.js","../node_modules/remark-parse/node_modules/micromark/lib/initialize/document.js","../node_modules/remark-parse/node_modules/micromark/lib/initialize/flow.js","../node_modules/remark-parse/node_modules/micromark/lib/initialize/text.js","../node_modules/remark-parse/node_modules/micromark/lib/create-tokenizer.js","../node_modules/remark-parse/node_modules/micromark/lib/constructs.js","../node_modules/remark-parse/node_modules/micromark/lib/parse.js","../node_modules/remark-parse/node_modules/micromark/lib/postprocess.js","../node_modules/remark-parse/node_modules/micromark/lib/preprocess.js","../node_modules/remark-parse/node_modules/unist-util-stringify-position/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {void}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {void}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | void}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n\n    // @ts-expect-error `Buffer` does allow an encoding.\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n"],"names":["content","tokenize","effects","contentStart","attempt","this","parser","constructs","contentInitial","code","consume","enter","exit","factorySpace","lineStart","previous","token","contentType","next","data","markdownLineEnding","document","self","stack","childFlow","childToken","lineStartOffset","continued","start","length","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","undefined","closeFlow","indexBeforeExits","events","point","indexBeforeFlow","type","end","exitContainers","index","Object","assign","splice","slice","documentContinued","currentConstruct","concrete","flowStart","interrupt","Boolean","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","line","offset","containerContinue","push","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","size","entry","call","ok","nok","disable","null","includes","initial","blankLine","flowInitial","afterConstruct","resolver","resolveAll","createResolver","string","initializeFactory","text","field","notText","atBreak","list","resolveAllLineSuffixes","extraResolver","context","eventIndex","chunks","tabs","bufferIndex","chunk","charCodeAt","column","_index","_bufferIndex","createTokenizer","initialize","from","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","pop","constructFactory","construct","info","addResult","onsuccessfulcheck","sliceSerialize","expandTabs","result","atTab","value","String","fromCharCode","join","serializeChunks","main","expectedCode","state","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","shift","sliceChunks","chunkIndex","go","_","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","Array","isArray","handleListOfConstructs","map","def","all","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","partial","name","create","resolve","resolveTo","blockQuote","definition","codeIndented","headingAtx","thematicBreak","setextUnderline","htmlFlow","codeFenced","characterReference","characterEscape","lineEnding","labelStartImage","attention","autolink","htmlText","labelStartLink","hardBreakEscape","labelEnd","codeText","insideSpan","resolveText","attentionMarkers","parse","options","settings","defined","combineExtensions","defaultConstructs","extensions","postprocess","subtokenize","search","preprocess","atCarriageReturn","buffer","encoding","match","startPosition","endPosition","toString","lastIndex","exec","Math","ceil","stringifyPosition","position","pos"],"sourceRoot":""}