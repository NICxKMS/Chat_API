{"version":3,"file":"static/js/vendor-refractor-217b7b8a.3c6c1f5570.chunk.v1_9_0.js","mappings":"uIAKA,SAASA,EAASC,IACf,SAAWA,GACVA,EAAMC,UAAUF,SAAWC,EAAMC,UAAUC,OAAO,SAAU,CAAC,GAC7D,IAAIH,EAAW,CACbI,SAAU,CACRC,QACE,4GACFC,YAAY,EACZC,OAAQ,CAAC,GAEXC,OAAQ,CACNH,QAAS,kBACTI,QAAQ,GAEVC,OAAQ,UACRC,QAAS,qBACTC,SACE,iEACFC,YAAa,gBAEfb,EAASI,SAASG,OAAS,CACzBC,OAAQR,EAAiB,OACzBc,SAAU,CACRT,QAAS,4BACTC,YAAY,GAEdI,OAAQV,EAAiB,OACzBW,QAASX,EAAkB,QAC3Ba,YAAab,EAAsB,aAErCC,EAAMC,UAAUa,aAAa,WAAY,UAAW,CAClDC,SAAU,CACRX,QAAS,8BACTC,YAAY,EACZG,QAAQ,EACRF,OAAQ,CACNM,YAAa,kBAGjB,mBAAoB,CAClB,CACER,QAAS,0BACTC,YAAY,EACZG,QAAQ,EACRQ,MAAO,WAET,CACEZ,QAAS,gBACTC,YAAY,EACZG,QAAQ,EACRQ,MAAO,YAGXC,UAAW,CACTb,QACE,yFACFC,YAAY,EACZC,OAAQ,CACNY,QAAS,CACPd,QAAS,6CACTE,OAAQ,CACNM,YAAa,SAGjBO,KAAMpB,IAGVI,SAAUJ,EAAmB,WAE/BC,EAAMC,UAAUF,SAAc,IAAEO,OAAO,cAAcA,OAAOa,KAC1DnB,EAAMC,UAAUF,QACnB,CAtEA,CAsEEC,EACL,CA3EAoB,EAAOC,QAAUtB,EACjBA,EAASuB,YAAc,WACvBvB,EAASwB,QAAU,E,YCCnB,SAASC,EAAQxB,GACfA,EAAMC,UAAUuB,QAAU,CACxBC,QAAS,CACPrB,QAAS,0BACTI,QAAQ,GAEVD,OAAQ,CACNH,QAAS,sCACTI,QAAQ,GAEV,kBAAmB,CAEjBJ,QAAS,YACTY,MAAO,YAGTU,SAAU,WACVb,SAAU,cAEVK,QACE,gmDAEFS,UAAW,4DAEXlB,OACE,4EACFE,SAAU,uBACVC,YAAa,cAEjB,CAhCAQ,EAAOC,QAAUG,EACjBA,EAAQF,YAAc,UACtBE,EAAQD,QAAU,E","sources":["../node_modules/refractor/lang/velocity.js","../node_modules/refractor/lang/verilog.js"],"sourcesContent":["'use strict'\n\nmodule.exports = velocity\nvelocity.displayName = 'velocity'\nvelocity.aliases = []\nfunction velocity(Prism) {\n  ;(function (Prism) {\n    Prism.languages.velocity = Prism.languages.extend('markup', {})\n    var velocity = {\n      variable: {\n        pattern:\n          /(^|[^\\\\](?:\\\\\\\\)*)\\$!?(?:[a-z][\\w-]*(?:\\([^)]*\\))?(?:\\.[a-z][\\w-]*(?:\\([^)]*\\))?|\\[[^\\]]+\\])*|\\{[^}]+\\})/i,\n        lookbehind: true,\n        inside: {} // See below\n      },\n      string: {\n        pattern: /\"[^\"]*\"|'[^']*'/,\n        greedy: true\n      },\n      number: /\\b\\d+\\b/,\n      boolean: /\\b(?:false|true)\\b/,\n      operator:\n        /[=!<>]=?|[+*/%-]|&&|\\|\\||\\.\\.|\\b(?:eq|g[et]|l[et]|n(?:e|ot))\\b/,\n      punctuation: /[(){}[\\]:,.]/\n    }\n    velocity.variable.inside = {\n      string: velocity['string'],\n      function: {\n        pattern: /([^\\w-])[a-z][\\w-]*(?=\\()/,\n        lookbehind: true\n      },\n      number: velocity['number'],\n      boolean: velocity['boolean'],\n      punctuation: velocity['punctuation']\n    }\n    Prism.languages.insertBefore('velocity', 'comment', {\n      unparsed: {\n        pattern: /(^|[^\\\\])#\\[\\[[\\s\\S]*?\\]\\]#/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          punctuation: /^#\\[\\[|\\]\\]#$/\n        }\n      },\n      'velocity-comment': [\n        {\n          pattern: /(^|[^\\\\])#\\*[\\s\\S]*?\\*#/,\n          lookbehind: true,\n          greedy: true,\n          alias: 'comment'\n        },\n        {\n          pattern: /(^|[^\\\\])##.*/,\n          lookbehind: true,\n          greedy: true,\n          alias: 'comment'\n        }\n      ],\n      directive: {\n        pattern:\n          /(^|[^\\\\](?:\\\\\\\\)*)#@?(?:[a-z][\\w-]*|\\{[a-z][\\w-]*\\})(?:\\s*\\((?:[^()]|\\([^()]*\\))*\\))?/i,\n        lookbehind: true,\n        inside: {\n          keyword: {\n            pattern: /^#@?(?:[a-z][\\w-]*|\\{[a-z][\\w-]*\\})|\\bin\\b/,\n            inside: {\n              punctuation: /[{}]/\n            }\n          },\n          rest: velocity\n        }\n      },\n      variable: velocity['variable']\n    })\n    Prism.languages.velocity['tag'].inside['attr-value'].inside.rest =\n      Prism.languages.velocity\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = verilog\nverilog.displayName = 'verilog'\nverilog.aliases = []\nfunction verilog(Prism) {\n  Prism.languages.verilog = {\n    comment: {\n      pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n      greedy: true\n    },\n    string: {\n      pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n      greedy: true\n    },\n    'kernel-function': {\n      // support for any kernel function (ex: $display())\n      pattern: /\\B\\$\\w+\\b/,\n      alias: 'property'\n    },\n    // support for user defined constants (ex: `define)\n    constant: /\\B`\\w+\\b/,\n    function: /\\b\\w+(?=\\()/,\n    // support for verilog and system verilog keywords\n    keyword:\n      /\\b(?:alias|and|assert|assign|assume|automatic|before|begin|bind|bins|binsof|bit|break|buf|bufif0|bufif1|byte|case|casex|casez|cell|chandle|class|clocking|cmos|config|const|constraint|context|continue|cover|covergroup|coverpoint|cross|deassign|default|defparam|design|disable|dist|do|edge|else|end|endcase|endclass|endclocking|endconfig|endfunction|endgenerate|endgroup|endinterface|endmodule|endpackage|endprimitive|endprogram|endproperty|endsequence|endspecify|endtable|endtask|enum|event|expect|export|extends|extern|final|first_match|for|force|foreach|forever|fork|forkjoin|function|generate|genvar|highz0|highz1|if|iff|ifnone|ignore_bins|illegal_bins|import|incdir|include|initial|inout|input|inside|instance|int|integer|interface|intersect|join|join_any|join_none|large|liblist|library|local|localparam|logic|longint|macromodule|matches|medium|modport|module|nand|negedge|new|nmos|nor|noshowcancelled|not|notif0|notif1|null|or|output|package|packed|parameter|pmos|posedge|primitive|priority|program|property|protected|pull0|pull1|pulldown|pullup|pulsestyle_ondetect|pulsestyle_onevent|pure|rand|randc|randcase|randsequence|rcmos|real|realtime|ref|reg|release|repeat|return|rnmos|rpmos|rtran|rtranif0|rtranif1|scalared|sequence|shortint|shortreal|showcancelled|signed|small|solve|specify|specparam|static|string|strong0|strong1|struct|super|supply0|supply1|table|tagged|task|this|throughout|time|timeprecision|timeunit|tran|tranif0|tranif1|tri|tri0|tri1|triand|trior|trireg|type|typedef|union|unique|unsigned|use|uwire|var|vectored|virtual|void|wait|wait_order|wand|weak0|weak1|while|wildcard|wire|with|within|wor|xnor|xor)\\b/,\n    // bold highlighting for all verilog and system verilog logic blocks\n    important: /\\b(?:always|always_comb|always_ff|always_latch)\\b(?: *@)?/,\n    // support for time ticks, vectors, and real numbers\n    number:\n      /\\B##?\\d+|(?:\\b\\d+)?'[odbh] ?[\\da-fzx_?]+|\\b(?:\\d*[._])?\\d+(?:e[-+]?\\d+)?/i,\n    operator: /[-+{}^~%*\\/?=!<>&|]+/,\n    punctuation: /[[\\];(),.:]/\n  }\n}\n"],"names":["velocity","Prism","languages","extend","variable","pattern","lookbehind","inside","string","greedy","number","boolean","operator","punctuation","function","insertBefore","unparsed","alias","directive","keyword","rest","module","exports","displayName","aliases","verilog","comment","constant","important"],"sourceRoot":""}