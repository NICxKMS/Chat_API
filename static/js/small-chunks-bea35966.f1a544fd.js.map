{"version":3,"file":"static/js/small-chunks-bea35966.f1a544fd.js","mappings":"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","sources":["components/layout/Layout/index.js","components/models/ModelSearch/index.js","components/layout/MainContent/index.js","components/models/ModelItem/index.js","components/layout/SidebarToggle/index.js","components/layout/Sidebar/index.js","components/models/ModelSelectorButton/index.js","components/models/ModelDropdown/index.js"],"sourcesContent":["import { lazy, useState, useCallback, Suspense } from 'react';\nimport { useIsDesktop } from '../../../hooks/useMediaQuery';\nimport { useModel } from '../../../contexts/ModelContext';\nimport { useChat } from '../../../contexts/ChatContext';\n// Import useApi if needed for apiUrl, but not for status\n// import { useApi } from '../../../contexts/ApiContext'; \nimport { useAuth } from '../../../contexts/AuthContext'; // Import useAuth\nimport { useTheme } from '../../../contexts/ThemeContext'; // Import ThemeContext\nimport { GearIcon, PlusIcon, TrashIcon, DownloadIcon } from '@primer/octicons-react';\nimport styles from './Layout.module.css';\n// Import icons using the correct paths\n// Import only the specific icons needed\n// const ApiStatus = lazy(() => import('../../common/ApiStatus')); // Removed\n// Assuming lazyLoad utility path\n\n// Lazily loaded components - Prefetch hints removed for manual loading\nconst Sidebar = lazy(() => import(/* webpackChunkName: \"layout-sidebar\" */ '../Sidebar'));\nconst MainContent = lazy(() => import(/* webpackPreload: true, webpackChunkName: \"layout-main\" */ '../MainContent'));\n// import ModelSelectorButton from '../../models/ModelSelectorButton'; // Remove this import\nconst ModelDropdown = lazy(() => import(/* webpackChunkName: \"models-dropdown\" */ '../../models/ModelDropdown'));\nconst Spinner = lazy(() => import(/* webpackChunkName: \"common-spinner\" */ '../../common/Spinner'));\nconst ThemeToggle = lazy(() => import(/* webpackChunkName: \"common-theme\" */ '../../common/ThemeToggle'));\n// Remove ApiStatus import\n// const ApiStatus = lazy(() => import('../../common/ApiStatus')); // Removed\nconst SettingsPanel = lazy(() => import(/* webpackChunkName: \"settings-panel\" */ '../../settings/SettingsPanel'));\nconst SidebarToggle = lazy(() => import(/* webpackChunkName: \"layout-sidebar-toggle\" */ '../SidebarToggle'));\nconst MoreActions = lazy(() => import(/* webpackChunkName: \"common-more-actions\" */ '../../common/MoreActions'));\nconst AuthButton = lazy(() => import(/* webpackChunkName: \"auth-button\" */ '../../auth/AuthButton'));\n\n// Loading fallback component\nconst LoadingFallback = () => (\n  <div className={styles.loadingFallback}>\n    <Spinner size=\"medium\" />\n  </div>\n);\n\n/**\n * Layout component that handles responsive design\n * @returns {JSX.Element} - Rendered layout\n */\nconst Layout = () => {\n  const isDesktop = useIsDesktop();\n  // Default sidebar to open on desktop, closed on mobile initially\n  const [isSidebarOpen, setIsSidebarOpen] = useState(isDesktop); \n  const [isSettingsOpen, setIsSettingsOpen] = useState(false); // State for settings panel\n  const [isModelSelectorOpen, setIsModelSelectorOpen] = useState(false); // State for model selector visibility\n  const { selectedModel, isLoadingModels } = useModel(); // Get model data\n  const { chatHistory, resetChat, downloadChatHistory } = useChat();\n  const { currentUser, isAuthenticated, login, logout, loading: authLoading } = useAuth(); // Get auth context\n  const { theme, toggleTheme } = useTheme(); // Get theme context\n\n  const toggleSidebar = useCallback(() => {\n    setIsSidebarOpen(prev => !prev);\n  }, []);\n\n  // Toggle settings panel - passed down from MainContent originally, now managed here\n  const toggleSettings = useCallback(() => {\n    // console.log(\"Toggling settings panel...\"); // Add log\n    setIsSettingsOpen(prev => {\n      // console.log(\"Previous state:\", prev, \"New state:\", !prev); // Log state change\n      return !prev;\n    });\n  }, []);\n\n  const toggleModelSelector = useCallback(() => {\n    setIsModelSelectorOpen(prev => !prev);\n  }, []);\n\n  // Implement new chat functionality\n  const handleNewChat = useCallback(() => {\n    // Close sidebar on mobile after starting new chat\n    if (!isDesktop) {\n      setIsSidebarOpen(false);\n    }\n    \n    // Clear chat history if there are messages\n    if (chatHistory.length > 0) {\n      resetChat();\n    }\n  }, [isDesktop, chatHistory.length, resetChat]);\n\n  // Implement reset chat functionality\n  const handleResetChat = useCallback(() => {\n    if (chatHistory.length === 0) return;\n    \n    if (window.confirm('Are you sure you want to clear the current chat?')) {\n      resetChat();\n      \n      // Show confirmation to the user\n      const notification = document.createElement('div');\n      notification.style.position = 'fixed';\n      notification.style.bottom = '20px';\n      notification.style.left = '50%';\n      notification.style.transform = 'translateX(-50%)';\n      notification.style.backgroundColor = 'var(--hover)';\n      notification.style.color = 'var(--text)';\n      notification.style.padding = '10px 20px';\n      notification.style.borderRadius = '8px';\n      notification.style.zIndex = '9999';\n      notification.textContent = 'Chat has been cleared';\n      document.body.appendChild(notification);\n      \n      // Remove notification after 3 seconds\n      setTimeout(() => {\n        document.body.removeChild(notification);\n      }, 3000);\n    }\n  }, [chatHistory.length, resetChat]);\n\n  // Implement download chat functionality\n  const handleDownloadChat = useCallback(() => {\n    if (chatHistory.length === 0) return;\n    try {\n      downloadChatHistory();\n      \n      // Show confirmation to the user (especially useful for mobile)\n      const notification = document.createElement('div');\n      notification.style.position = 'fixed';\n      notification.style.bottom = '20px';\n      notification.style.left = '50%';\n      notification.style.transform = 'translateX(-50%)';\n      notification.style.backgroundColor = 'var(--hover)';\n      notification.style.color = 'var(--text)';\n      notification.style.padding = '10px 20px';\n      notification.style.borderRadius = '8px';\n      notification.style.zIndex = '9999';\n      notification.textContent = 'Chat downloaded successfully';\n      document.body.appendChild(notification);\n      \n      // Remove notification after 3 seconds\n      setTimeout(() => {\n        document.body.removeChild(notification);\n      }, 3000);\n    } catch (error) {\n      console.error(\"Error downloading chat:\", error);\n      alert(\"Failed to download chat. Please try again.\");\n    }\n  }, [chatHistory.length, downloadChatHistory]);\n  \n  // Determine layout classes based on state and viewport\n  const isSidebarEffectivelyHidden = isDesktop && !isSidebarOpen;\n  const layoutClasses = [\n    styles.layout,\n    isSidebarEffectivelyHidden ? styles.sidebarCompact : '', // Handles transform\n    !isDesktop && isSidebarOpen ? styles.sidebarOpenMobile : '', // Mobile slide-in\n    isSidebarEffectivelyHidden ? styles.sidebarHidden : '' // Controls floating icon visibility\n  ].filter(Boolean).join(' ');\n\n  return (\n    <div className={layoutClasses}>\n      {/* Mobile Actions Container (Top Right) */}\n      <div className={styles.mobileActionsContainer}>\n        <div className={styles.mobileActions}>\n          {/* Theme Toggle */}\n          <Suspense fallback={null}>\n            <ThemeToggle />\n          </Suspense>\n          \n          {/* Auth Button */}\n          <Suspense fallback={null}>\n            <AuthButton \n              isAuthenticated={isAuthenticated}\n              onLogin={login}\n              onLogout={logout}\n              userName={currentUser?.displayName || currentUser?.email || 'User'}\n              isLoading={authLoading}\n              currentUser={currentUser}\n            />\n          </Suspense>\n          \n          {/* Settings Button */}\n          <button \n            className={styles.mobileActionButton} \n            onClick={toggleSettings}\n            aria-label=\"Settings\"\n            title=\"Settings\"\n          >\n            <GearIcon size={20} />\n          </button>\n          \n          {/* More Actions Menu */}\n          <MoreActions \n            actions={[\n              // Always included actions\n              {\n                icon: <PlusIcon size={16} />,\n                label: 'New Chat',\n                onClick: handleNewChat\n              },\n              {\n                icon: <TrashIcon size={16} />,\n                label: 'Reset Chat',\n                onClick: handleResetChat\n              },\n              {\n                icon: <DownloadIcon size={16} />,\n                label: 'Download Chat',\n                onClick: handleDownloadChat\n              },\n              // Mobile-specific actions (will only be visible on mobile)\n              ...(isDesktop ? [] : [\n                // Theme toggle action\n                {\n                  icon: theme === 'dark' ? <span style={{ fontSize: '16px' }}>☀️</span> : <span style={{ fontSize: '16px' }}>🌙</span>,\n                  label: `Switch to ${theme === 'dark' ? 'light' : 'dark'} mode`,\n                  onClick: toggleTheme\n                },\n                // Settings action\n                {\n                  icon: <GearIcon size={16} />,\n                  label: 'Settings',\n                  onClick: toggleSettings\n                },\n                // Login/Logout action\n                {\n                  icon: isAuthenticated ? <span style={{ fontSize: '16px' }}>👤</span> : <span style={{ fontSize: '16px' }}>🔑</span>,\n                  label: isAuthenticated ? `Logout (${currentUser?.displayName || currentUser?.email || 'User'})` : 'Login',\n                  onClick: isAuthenticated ? logout : login\n                }\n              ])\n            ]}\n          />\n        </div>\n      </div>\n\n      {/* Sidebar Toggle */}\n      <Suspense fallback={<LoadingFallback />}>\n        <SidebarToggle\n          isOpen={isSidebarOpen}\n          onToggle={toggleSidebar}\n        />\n      </Suspense>\n\n      {/* Conditionally render the ModelDropdown as a modal/overlay */}\n      {isModelSelectorOpen && (\n        <Suspense fallback={\n          <div className={styles.modalOverlay}>\n            <Spinner size=\"large\" />\n          </div>\n        }>\n           <div className={styles.modalOverlay} onClick={toggleModelSelector}>\n            <div className={styles.modalContent} onClick={(e) => e.stopPropagation()}>\n              <ModelDropdown /> \n            </div>\n          </div>\n        </Suspense>\n      )}\n\n      {/* Sidebar container */}\n      <div className={styles.sidebarContainer}>\n        <Suspense fallback={<div className={styles.sidebarPlaceholder} />}>\n          <Sidebar \n            onNewChat={handleNewChat}\n            onToggleSettings={toggleSettings}\n          />\n        </Suspense>\n      </div>\n      \n      {/* Main content container */}\n      <div className={styles.mainContentContainer}>\n        <Suspense fallback={<div className={styles.contentPlaceholder} />}>\n          <MainContent \n            isSidebarOpen={isSidebarOpen} \n            toggleSidebar={toggleSidebar} \n            isSettingsOpen={isSettingsOpen} \n            toggleSettings={toggleSettings}\n            selectedModel={selectedModel}\n            isLoadingModels={isLoadingModels}\n            toggleModelSelector={toggleModelSelector}\n            isModelSelectorOpen={isModelSelectorOpen}\n            onNewChat={handleNewChat}\n            onToggleSettings={toggleSettings}\n            onResetChat={handleResetChat}\n            onDownloadChat={handleDownloadChat}\n          />\n        </Suspense>\n      </div>\n\n      {/* Mobile overlay */}\n      {!isDesktop && isSidebarOpen && (\n        <div \n          className={`${styles.overlay} ${styles.overlayVisible}`}\n          onClick={toggleSidebar}\n          aria-hidden=\"true\"\n        />\n      )}\n\n      {/* Conditionally render Settings Panel */} \n      {/* Always render Settings Panel for CSS transitions, control visibility via props/classes */}\n      <Suspense fallback={null}> {/* No visible fallback needed */}\n        <SettingsPanel \n          isOpen={isSettingsOpen} \n          onClose={toggleSettings} \n        /> \n      </Suspense>\n    </div>\n  );\n};\n\nexport default Layout; ","import { useCallback, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { SearchIcon, XIcon } from '@primer/octicons-react';\nimport styles from './ModelSearch.module.css';\n\n/**\n * Search input for filtering models\n * @param {Object} props - Component props\n * @param {string} props.searchTerm - Current search term\n * @param {Function} props.onSearchChange - Search term change handler\n * @param {number} props.resultCount - Number of search results\n * @returns {JSX.Element} - Rendered component\n */\nconst ModelSearch = ({ searchTerm, onSearchChange, resultCount }) => {\n  const inputRef = useRef(null);\n  \n  // Handle search input changes\n  const handleInputChange = useCallback((e) => {\n    // Pass the value directly instead of the event object\n    if (e && typeof e === 'object' && e.target) {\n      onSearchChange(e.target.value);\n    } else {\n      console.warn('Invalid event object in ModelSearch handleInputChange');\n    }\n  }, [onSearchChange]);\n  \n  // Clear search input\n  const handleClearSearch = useCallback(() => {\n    // Pass empty string directly\n    onSearchChange('');\n    \n    // Focus the input after clearing\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [onSearchChange]);\n  \n  return (\n    <div className={styles.searchContainer}>\n      <div className={styles.inputWrapper}>\n        <SearchIcon className={styles.searchIcon} size={16} />\n        \n        <input\n          ref={inputRef}\n          type=\"text\"\n          className={styles.searchInput}\n          placeholder=\"Search models...\"\n          value={searchTerm}\n          onChange={handleInputChange}\n          aria-label=\"Search models\"\n        />\n        \n        {searchTerm && (\n          <button \n            className={styles.clearButton} \n            onClick={handleClearSearch}\n            aria-label=\"Clear search\"\n          >\n            <XIcon className={styles.clearIcon} size={16} />\n          </button>\n        )}\n      </div>\n      \n      {searchTerm && (\n        <div className={styles.results}>\n          {resultCount} {resultCount === 1 ? 'result' : 'results'}\n        </div>\n      )}\n    </div>\n  );\n};\n\nModelSearch.propTypes = {\n  searchTerm: PropTypes.string.isRequired,\n  onSearchChange: PropTypes.func.isRequired,\n  resultCount: PropTypes.number.isRequired\n};\n\nexport default ModelSearch; ","import { lazy, Suspense } from 'react';\nimport styles from './MainContent.module.css';\nimport Spinner from '../../common/Spinner';\n\n// Lazily loaded components\nconst ChatContainer = lazy(() => import(/* webpackChunkName: \"chat-container\" */ '../../chat/ChatContainer'));\n\n/**\n * Main content area component containing chat interface and settings\n * @param {Object} props - Component props\n * @param {boolean} props.isSidebarOpen - Whether the sidebar is open (mobile)\n * @param {Function} props.toggleSidebar - Function to toggle the sidebar (mobile)\n * @param {Object} props.selectedModel - The currently selected model object\n * @param {boolean} props.isLoadingModels - Whether models are currently loading\n * @param {Function} props.toggleModelSelector - Function to toggle the model dropdown/modal\n * @param {Function} props.onNewChat - Function to handle new chat\n * @param {Function} props.onResetChat - Function to handle reset chat\n * @param {Function} props.onDownloadChat - Function to handle download chat\n * @param {Function} props.onToggleSettings - Function to handle settings toggle\n * @param {boolean} props.isSettingsOpen - Whether the settings panel is open\n * @param {boolean} props.isModelSelectorOpen - Whether the model selector is open\n * @returns {JSX.Element} - Rendered component\n */\nconst MainContent = ({ \n  isSidebarOpen, \n  toggleSidebar, \n  selectedModel,\n  isLoadingModels,\n  toggleModelSelector,\n  onNewChat,\n  onResetChat,\n  onDownloadChat,\n  onToggleSettings,\n  isSettingsOpen,\n  isModelSelectorOpen\n}) => {\n  return (\n    <main className={styles.mainContent}>\n      {/* Model Loading Indicator - shows only during initial model loading */}\n      {isLoadingModels && (\n        <div className={styles.modelLoadingOverlay}>\n          <div className={styles.modelLoadingContent}>\n            <Spinner size=\"medium\" />\n            <div className={styles.modelLoadingText}>Loading models...</div>\n          </div>\n        </div>\n      )}\n      \n      {/* Chat area - Pass all action handlers down */}\n      <Suspense fallback={<div className={styles.chatPlaceholder} />}>\n        <ChatContainer \n          selectedModel={selectedModel}\n          isLoadingModels={isLoadingModels}\n          toggleModelSelector={toggleModelSelector}\n          onNewChat={onNewChat}\n          onResetChat={onResetChat}\n          onDownloadChat={onDownloadChat}\n          onToggleSettings={onToggleSettings}\n          isSidebarOpen={isSidebarOpen}\n          isSettingsOpen={isSettingsOpen}\n          isModelSelectorOpen={isModelSelectorOpen}\n        />\n      </Suspense>\n    </main>\n  );\n};\n\nexport default MainContent; ","import { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ModelItem.module.css';\n\n/**\n * Component for displaying a single model\n * @param {Object} props - Component props\n * @param {Object} props.model - Model data\n * @param {boolean} props.selected - Whether the model is currently selected\n * @param {Function} props.onClick - Function to handle model selection\n * @param {string} props.searchTerm - Current search term for highlighting\n * @returns {JSX.Element} - Rendered component\n */\nconst ModelItem = memo(({ \n  model, \n  selected, \n  onClick,\n  searchTerm\n}) => {\n  // Highlight matching text if searchTerm is provided\n  const highlightMatch = (text) => {\n    if (!searchTerm || !text) return text;\n    \n    const regex = new RegExp(`(${searchTerm})`, 'gi');\n    const parts = text.split(regex);\n    \n    return (\n      <>\n        {parts.map((part, i) => (\n          regex.test(part) ? (\n            <span key={i} className={styles.highlight}>{part}</span>\n          ) : (\n            <span key={i}>{part}</span>\n          )\n        ))}\n      </>\n    );\n  };\n  \n  return (\n    <div \n      className={`${styles.modelItem} ${selected ? styles.selected : ''}`}\n      onClick={() => onClick(model)}\n      role=\"option\"\n      aria-selected={selected}\n    >\n      <div className={styles.modelIcon}>\n        {model.series?.charAt(0) || model.name.charAt(0)}\n      </div>\n      \n      <div className={styles.modelDetails}>\n        <div className={styles.modelName}>\n          {highlightMatch(model.name)}\n        </div>\n        \n        {model.description && (\n          <div className={styles.modelDescription}>\n            {highlightMatch(model.description)}\n          </div>\n        )}\n        \n        {model.tags && model.tags.length > 0 && (\n          <div className={styles.tags}>\n            {model.tags.map(tag => (\n              <span \n                key={tag} \n                className={styles.tag}\n                style={{\n                  backgroundColor: \n                    searchTerm && \n                    tag.toLowerCase().includes(searchTerm.toLowerCase()) \n                      ? 'rgba(var(--button-bg-rgb), 0.2)' \n                      : undefined\n                }}\n              >\n                {highlightMatch(tag)}\n              </span>\n            ))}\n          </div>\n        )}\n      </div>\n      \n      {selected && (\n        <div className={styles.selectedIndicator} data-testid=\"check-icon\">\n          <CheckIcon className={styles.checkIcon} />\n        </div>\n      )}\n    </div>\n  );\n});\n\n// SVG Check icon as a component\nconst CheckIcon = ({ className }) => (\n  <svg \n    xmlns=\"http://www.w3.org/2000/svg\" \n    viewBox=\"0 0 24 24\" \n    fill=\"none\" \n    stroke=\"currentColor\" \n    strokeWidth=\"3\" \n    strokeLinecap=\"round\" \n    strokeLinejoin=\"round\" \n    className={className}\n    aria-hidden=\"true\"\n  >\n    <polyline points=\"20 6 9 17 4 12\" />\n  </svg>\n);\n\nModelItem.propTypes = {\n  model: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    description: PropTypes.string,\n    series: PropTypes.string,\n    providerName: PropTypes.string,\n    typeGroupName: PropTypes.string,\n    tags: PropTypes.arrayOf(PropTypes.string)\n  }).isRequired,\n  selected: PropTypes.bool.isRequired,\n  onClick: PropTypes.func.isRequired,\n  searchTerm: PropTypes.string\n};\n\n// Display name for debugging\nModelItem.displayName = 'ModelItem';\n\nexport default ModelItem; ","import { memo } from 'react';\nimport styles from './SidebarToggle.module.css';\n\n/**\n * Button to toggle the sidebar visibility\n * @param {Object} props - Component props\n * @param {boolean} props.isOpen - Whether the sidebar is open\n * @param {Function} props.onToggle - Function to toggle the sidebar\n * @returns {JSX.Element} - Rendered component\n */\nconst SidebarToggle = memo(({ isOpen, onToggle }) => {\n  return (\n    <div className={styles.toggleContainer}>\n      <button \n        className={`${styles.toggleButton} ${isOpen ? styles.active : ''}`}\n        onClick={onToggle}\n        aria-label={isOpen ? 'Close sidebar' : 'Open sidebar'}\n        title={isOpen ? 'Close sidebar' : 'Open sidebar'}\n      >\n        <div className={styles.hamburger}>\n          <span className={styles.bar}></span>\n          <span className={styles.bar}></span>\n          <span className={styles.bar}></span>\n        </div>\n      </button>\n    </div>\n  );\n});\n\n// Display name for debugging\nSidebarToggle.displayName = 'SidebarToggle';\n\nexport default SidebarToggle; ","import { memo } from 'react';\nimport { PlusIcon, GearIcon } from '@primer/octicons-react';\nimport { useAuth } from '../../../contexts/AuthContext';\nimport styles from './Sidebar.module.css';\n// Remove unused icons if PlusIcon/GearIcon only used for floating buttons\n// import { GearIcon, PlusIcon } from '@primer/octicons-react'; \n\n// Remove imports for components moved out\n// const ThemeToggle = lazy(() => import('../../common/ThemeToggle'));\n// const ApiStatus = lazy(() => import('../../common/ApiStatus'));\n\n// Sample data (keep for now)\nconst sampleSessions = [\n  { id: 'session-1', title: 'LLM Explanation Chat', timestamp: '2 hours ago' },\n  { id: 'session-2', title: 'React Component Refactoring', timestamp: 'Yesterday' },\n  { id: 'session-3', title: 'CSS Grid Layout Ideas', timestamp: 'Mar 30' },\n  { id: 'session-4', title: 'Python Script Debugging', timestamp: 'Mar 28' },\n];\n\n/**\n * Sidebar component containing app controls and chat session list\n * @param {Object} props - Component props\n * @param {string} [props.className] - Additional CSS class\n * @param {Function} [props.onNewChat] - Handler for new chat button click\n * @param {Function} [props.onToggleSettings] - Handler for settings button click\n * @returns {JSX.Element} - Rendered sidebar\n */\nconst Sidebar = memo(({ className = '', onNewChat, onToggleSettings }) => {\n  const { currentUser, isAuthenticated } = useAuth();\n  \n  const userName = currentUser?.displayName || currentUser?.email || 'Sir';\n  \n  // Handle button clicks with fallbacks\n  const handleNewChat = (e) => {\n    e.preventDefault();\n    if (onNewChat) {\n      onNewChat();\n    } else {\n      console.warn('New chat handler not provided');\n    }\n  };\n\n  const handleSettings = (e) => {\n    e.preventDefault();\n    if (onToggleSettings) {\n      onToggleSettings();\n    } else {\n      console.warn('Settings handler not provided');\n    }\n  };\n\n  return (\n    <div className={`${styles.sidebar} ${className}`}>\n      {/* Header with Title and Controls */}\n      <div className={styles.header}>\n        <h1 className={styles.title}>AI Chat</h1>\n        <div className={styles.headerControls}>\n          <button \n            className={`${styles.iconButton} ${styles.newChatButton}`}\n            onClick={handleNewChat}\n            aria-label=\"New chat\"\n            title=\"New chat\"\n          >\n            <PlusIcon size={20} />\n          </button>\n          <button \n            className={`${styles.iconButton} ${styles.settingsButton}`}\n            onClick={handleSettings}\n            aria-label=\"Settings\"\n            title=\"Settings\"\n          >\n            <GearIcon size={20} />\n          </button>\n        </div>\n      </div>\n      \n      {/* Chat Session List */}\n      <div className={styles.chatListContainer}>\n        <ul className={styles.sessionList}>\n          {sampleSessions.map(session => (\n            <li key={session.id} className={styles.sessionItem}>\n              <button className={styles.sessionButton} onClick={() => console.log('Load session:', session.id)}>\n                <span className={styles.sessionTitle}>{session.title}</span>\n                <span className={styles.sessionTimestamp}>{session.timestamp}</span>\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      {/* Footer */}\n      <div className={styles.footer}>\n        {isAuthenticated ? (\n          <div className={styles.userProfile}>\n            {currentUser?.photoURL ? (\n              <img \n                src={currentUser.photoURL} \n                alt={`${userName}'s profile`}\n                className={styles.userAvatar}\n              />\n            ) : (\n              <div className={styles.userInitial}>\n                {userName.charAt(0).toUpperCase()}\n              </div>\n            )}\n            <span className={styles.userName}>{userName}</span>\n          </div>\n        ) : (\n          <span className={styles.footerPlaceholderText}></span>\n        )}\n      </div>\n    </div>\n  );\n});\n\nSidebar.displayName = 'Sidebar';\n\nexport default Sidebar; ","import PropTypes from 'prop-types';\nimport { useState, useEffect, useRef } from 'react';\nimport { ChevronDownIcon } from '@primer/octicons-react';\nimport styles from './ModelSelectorButton.module.css';\n\n/**\n * Button to trigger the model selection UI (Dropdown/Modal)\n */\nconst ModelSelectorButton = ({ \n  selectedModelName = null, \n  providerName = null,\n  onClick, \n  disabled = false \n}) => {\n  // State to track window width for responsive text\n  const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);\n  const [showProvider, setShowProvider] = useState(false);\n  const buttonRef = useRef(null);\n  const textRef = useRef(null);\n  const [buttonWidth, setButtonWidth] = useState(0);\n  const [buttonSet, setButtonSet] = useState(false);\n  const [hasOverflow, setHasOverflow] = useState(false);\n\n  // Update mobile state on window resize\n  useEffect(() => {\n    const handleResize = () => {\n      setIsMobile(window.innerWidth <= 768);\n    };\n    \n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  \n  // Measure button width once it's rendered with the model name\n  useEffect(() => {\n    if (buttonRef.current && selectedModelName && !buttonSet) {\n      const width = buttonRef.current.offsetWidth;\n      setButtonWidth(width);\n      setButtonSet(true);\n    }\n  }, [selectedModelName, buttonSet]);\n  \n  // Apply width to button when width is determined\n  useEffect(() => {\n    if (buttonWidth > 0 && buttonRef.current) {\n      buttonRef.current.style.width = `${buttonWidth+10}px`;\n    }\n  }, [buttonWidth]);\n  \n  // Animation to toggle between model and provider\n  useEffect(() => {\n    if (!selectedModelName || !providerName) return;\n    \n    const interval = setInterval(() => {\n      setShowProvider(prev => !prev);\n    }, 5000);\n    \n    return () => clearInterval(interval);\n  }, [selectedModelName, providerName]);\n  \n  // Check if text is overflowing\n  useEffect(() => {\n    if (textRef.current) {\n      const isOverflowing = textRef.current.scrollWidth > textRef.current.clientWidth;\n      setHasOverflow(isOverflowing);\n    }\n  }, [showProvider, selectedModelName, providerName, isMobile]);\n  \n  // Format provider name to title case\n  const getFormattedProvider = () => {\n    if (!providerName) return '';\n    \n    return providerName\n      .split(' ')\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n      .join(' ')\n      .replace(/Ai\\b/g, 'AI');\n  };\n  \n  // Get display text based on current state\n  const displayText = () => {\n    if (!selectedModelName) {\n      return isMobile ? 'Select Model' : 'Select a Model';\n    }\n    \n    if (!providerName || !showProvider) {\n      return selectedModelName;\n    } else {\n      return getFormattedProvider();\n    }\n  };\n  \n  return (\n    <button \n      ref={buttonRef}\n      className={styles.modelSelectorButton}\n      onClick={onClick}\n      disabled={disabled}\n      aria-haspopup=\"true\"\n      aria-label={`Select Model (Current: ${selectedModelName || 'None'})`}\n    >\n      <span className={styles.innerContent}>\n        <span \n          ref={textRef}\n          className={`${styles.buttonText} ${showProvider ? styles.showProvider : ''} ${hasOverflow && showProvider ? styles.scrollText : ''}`}\n        >\n          {displayText()}\n        </span>\n        <ChevronDownIcon size={16} className={styles.buttonIcon} />\n      </span>\n    </button>\n  );\n};\n\nModelSelectorButton.propTypes = {\n  /** Currently selected model name to display */\n  selectedModelName: PropTypes.string,\n  /** Provider name of the selected model */\n  providerName: PropTypes.string,\n  /** Function to call when the button is clicked */\n  onClick: PropTypes.func.isRequired,\n  /** Whether the button should be disabled */\n  disabled: PropTypes.bool,\n};\n\nexport default ModelSelectorButton;","import React, { \n  useEffect, \n  useRef, \n  useCallback, \n  useMemo, \n  useState\n} from 'react';\nimport { useModel, useModelFilter } from '../../../contexts/ModelContext';\nimport ModelItem from '../ModelItem';\nimport ModelSearch from '../ModelSearch';\nimport styles from './ModelDropdown.module.css';\n\n/**\n * SelectedModelDisplay component showing the currently selected model\n */\nconst SelectedModelDisplay = React.memo(({ selectedModel }) => (\n  <div className={styles.selectedModelContainer}>\n    <div className={styles.selectedModelLabel}>Current Model:</div>\n    <div className={styles.selectedModelInfo}>\n      <h3 className={styles.modelName}>\n        {selectedModel ? selectedModel.name : 'No model selected'}\n      </h3>\n      {selectedModel && (\n        <p className={styles.modelDescription}>\n          {selectedModel.provider ? `${selectedModel.provider} - ${selectedModel.type}` : 'Model details unavailable'}\n        </p>\n      )}\n    </div>\n  </div>\n));\n\n/**\n * CapabilityTabs component for selecting model categories\n */\nconst CapabilityTabs = React.memo(({ capabilities, activeCapability, onSelectCapability }) => {\n  const tabsRef = useRef(null);\n  \n  // Scroll the selected tab into view when it changes\n  useEffect(() => {\n    if (tabsRef.current) {\n      const activeTab = tabsRef.current.querySelector(`.${styles.active}`);\n      if (activeTab) {\n        // Calculate position to center the tab in the container\n        const container = tabsRef.current;\n        const containerWidth = container.offsetWidth;\n        const tabWidth = activeTab.offsetWidth;\n        const tabLeft = activeTab.offsetLeft;\n        \n        // Center the tab\n        const scrollPosition = tabLeft - (containerWidth / 2) + (tabWidth / 2);\n        container.scrollTo({\n          left: Math.max(0, scrollPosition),\n          behavior: 'smooth'\n        });\n      }\n    }\n  }, [activeCapability]);\n  \n  return (\n    <div className={styles.capabilityTabs} ref={tabsRef}>\n      {Object.keys(capabilities).map(capability => (\n        <button\n          key={capability}\n          className={`${styles.capabilityTab} ${activeCapability === capability ? styles.active : ''}`}\n          onClick={() => onSelectCapability(capability)}\n        >\n          {capability}\n          <span> ({capabilities[capability]})</span>\n        </button>\n      ))}\n    </div>\n  );\n});\n\n/**\n * ModelList component showing the filtered and grouped models\n */\nconst ModelList = React.memo(({ isLoading, groupedModels, selectedModel, onSelectModel, searchTerm, totalCount, activeCapability, onClearSearch }) => (\n  <div className={styles.modelList} role=\"listbox\">\n    {isLoading ? (\n      <div className={styles.loading}>Loading models...</div>\n    ) : groupedModels && Object.keys(groupedModels).length > 0 ? (\n      groupedModels.map((group) => (\n        <div key={`${group.provider}-${group.type}`}>\n          <div className={styles.providerTypeHeader}>\n            <span className={styles.providerName}>{group.provider}</span>\n            <span className={styles.providerTypeSeparator}>→</span>\n            <span className={styles.typeLabel}>{group.type}</span>\n            <span className={styles.modelCount}>({group.models.length})</span>\n          </div>\n          \n          {group.models.map(model => (\n            <ModelItem\n              key={model.id}\n              model={model}\n              selected={selectedModel?.id === model.id}\n              onClick={onSelectModel}\n              searchTerm={searchTerm}\n            />\n          ))}\n        </div>\n      ))\n    ) : (\n      searchTerm && totalCount === 0 ? (\n        <div className={styles.noResults}>\n          No models found matching \"{searchTerm}\"\n          <button \n            className={styles.clearSearch}\n            onClick={onClearSearch}\n          >\n            Clear search\n          </button>\n        </div>\n      ) : (\n        <div className={styles.noResults}>\n          No {activeCapability.toLowerCase()} models available\n        </div>\n      )\n    )}\n  </div>\n));\n\n/**\n * SearchContainer component for model searching\n */\nconst SearchContainer = React.memo(({ searchTerm, onSearchChange, totalCount }) => (\n  <div className={styles.searchContainer}>\n    <ModelSearch \n      searchTerm={searchTerm}\n      onSearchChange={onSearchChange}\n      resultCount={totalCount} \n    />\n  </div>\n));\n\n/**\n * ModelSelectionPanel component for selecting models from a filterable list\n */\nconst ModelSelectionPanel = React.forwardRef(({ \n  isExperimentalModelsEnabled, \n  toggleExperimentalModels, \n  capabilitiesWithCounts, \n  activeCapability, \n  setActiveCapability,\n  isLoading,\n  groupedModels,\n  selectedModel,\n  handleSelectModel,\n  searchTerm,\n  totalCount,\n  handleClearSearch \n}, ref) => (\n  <div className={styles.modelsContainer} ref={ref}>\n    <div className={styles.fixedHeader}>\n      <CapabilityTabs \n        capabilities={capabilitiesWithCounts} \n        activeCapability={activeCapability} \n        onSelectCapability={setActiveCapability} \n      />\n    </div>\n    \n    <div className={styles.scrollableModelList}>\n      <ModelList \n        isLoading={isLoading}\n        groupedModels={groupedModels}\n        selectedModel={selectedModel}\n        onSelectModel={handleSelectModel}\n        searchTerm={searchTerm}\n        totalCount={totalCount}\n        activeCapability={activeCapability}\n        onClearSearch={handleClearSearch}\n      />\n    </div>\n  </div>\n));\n\n// Helper function to format provider name\nconst formatProviderName = (provider) => {\n  if (!provider) return '';\n  // Simple title case, handle AI\n  return provider\n    .split(' ')\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n    .join(' ')\n    .replace(/ai/gi, 'AI');\n};\n\n// Helper function to check if model should be included\nconst shouldIncludeModel = (model, showExperimental, searchTerm, provider, formattedProvider, typeGroup) => {\n  if (!model) return false;\n  if (searchTerm) {\n    const searchLower = searchTerm.toLowerCase();\n    const nameMatch = model.name?.toLowerCase().includes(searchLower) || model.displayName?.toLowerCase().includes(searchLower);\n    const providerMatch = provider?.toLowerCase().includes(searchLower) || formattedProvider?.toLowerCase().includes(searchLower);\n    const typeMatch = typeGroup?.toLowerCase().includes(searchLower);\n    const tagMatch = model.tags && model.tags.some(tag => tag?.toLowerCase().includes(searchLower));\n\n    if (!(nameMatch || providerMatch || typeMatch || tagMatch)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// ExperimentalToggle component is not currently used, commented out\n// const ExperimentalToggle = React.memo(({ isEnabled, onToggle }) => (\n//   <div className={styles.experimentalToggle}>\n//     <label className={styles.toggleLabel}>\n//       <input\n//         type=\"checkbox\"\n//         checked={isEnabled}\n//         onChange={onToggle}\n//         className={styles.toggleInput}\n//       />\n//       <span className={styles.toggleTrack}>\n//         <span className={styles.toggleThumb} />\n//       </span>\n//       <span className={styles.toggleText}>Show experimental models</span>\n//     </label>\n//   </div>\n// ));\n\n/**\n * Main ModelSelection component that orchestrates all model selection UI\n * @returns {JSX.Element} - Rendered component\n */\nconst ModelSelection = () => {\n  const { \n    processedModels, \n    selectedModel, \n    isLoading, \n    selectModel, \n    showExperimental,\n    toggleExperimentalModels\n  } = useModel();\n  \n  const {\n    modelFilter,\n    updateSearchFilter\n  } = useModelFilter();\n  \n  const [activeCapability, setActiveCapability] = useState('Chat');\n  const panelRef = useRef(null);\n  \n  const handleSelectModel = useCallback((model) => {\n    selectModel(model);\n  }, [selectModel]);\n  \n  // Handle search input changes\n  const handleSearchChange = useCallback((searchValue) => {\n    if (typeof searchValue === 'string') {\n      updateSearchFilter(searchValue);\n    } else {\n      console.warn('Invalid search value in ModelDropdown handleSearchChange');\n    }\n  }, [updateSearchFilter]);\n\n  // Handle clearing search\n  const handleClearSearch = useCallback(() => {\n    updateSearchFilter('');\n  }, [updateSearchFilter]);\n  \n  const capabilitiesWithCounts = useMemo(() => {\n    const counts = {};\n    if (processedModels) {\n      Object.keys(processedModels).forEach(category => {\n        counts[category] = Object.values(processedModels[category])\n          .flatMap(providerGroups => Object.values(providerGroups))\n          .flat()\n          .filter(model => shouldIncludeModel(model, showExperimental, modelFilter.search, model.provider, formatProviderName(model.provider), model.type))\n          .length;\n      });\n    }\n    return counts;\n  }, [processedModels, showExperimental, modelFilter.search]);\n\n  const groupedModels = useMemo(() => {\n    if (!processedModels || !processedModels[activeCapability]) {\n      return [];\n    }\n    \n    const modelsInCategory = processedModels[activeCapability];\n    const groups = [];\n\n    Object.entries(modelsInCategory).forEach(([provider, typeGroups]) => {\n      const formattedProvider = formatProviderName(provider);\n      Object.entries(typeGroups).forEach(([type, models]) => {\n        const filteredGroupModels = models.filter(model =>\n          shouldIncludeModel(model, showExperimental, modelFilter.search, provider, formattedProvider, type)\n        );\n        if (filteredGroupModels.length > 0) {\n          groups.push({\n            provider: formattedProvider,\n            type: type,\n            models: filteredGroupModels\n          });\n        }\n      });\n    });\n\n    return groups;\n  }, [processedModels, activeCapability, showExperimental, modelFilter.search]);\n\n  const totalModelCount = useMemo(() => {\n    return groupedModels.reduce((count, group) => count + group.models.length, 0);\n  }, [groupedModels]);\n\n  return (\n    <div className={styles.modelSelectionContainer}>\n      <SelectedModelDisplay selectedModel={selectedModel} />\n      <SearchContainer \n        searchTerm={modelFilter.search}\n        onSearchChange={handleSearchChange}\n        totalCount={totalModelCount} \n      />\n      <ModelSelectionPanel\n        ref={panelRef}\n        isExperimentalModelsEnabled={showExperimental}\n        toggleExperimentalModels={toggleExperimentalModels}\n        capabilitiesWithCounts={capabilitiesWithCounts}\n        activeCapability={activeCapability}\n        setActiveCapability={setActiveCapability}\n        isLoading={isLoading}\n        groupedModels={groupedModels}\n        selectedModel={selectedModel}\n        handleSelectModel={handleSelectModel}\n        searchTerm={modelFilter.search}\n        totalCount={totalModelCount}\n        handleClearSearch={handleClearSearch}\n      />\n    </div>\n  );\n};\n\nexport default ModelSelection; "],"names":["Sidebar","lazy","MainContent","ModelDropdown","Spinner","ThemeToggle","SettingsPanel","SidebarToggle","MoreActions","AuthButton","LoadingFallback","_jsx","className","styles","loadingFallback","children","size","Layout","isDesktop","useIsDesktop","isSidebarOpen","setIsSidebarOpen","useState","isSettingsOpen","setIsSettingsOpen","isModelSelectorOpen","setIsModelSelectorOpen","selectedModel","isLoadingModels","useModel","chatHistory","resetChat","downloadChatHistory","useChat","currentUser","isAuthenticated","login","logout","loading","authLoading","useAuth","theme","toggleTheme","useTheme","toggleSidebar","useCallback","prev","toggleSettings","toggleModelSelector","handleNewChat","length","handleResetChat","window","confirm","notification","document","createElement","style","position","bottom","left","transform","backgroundColor","color","padding","borderRadius","zIndex","textContent","body","appendChild","setTimeout","removeChild","handleDownloadChat","error","alert","isSidebarEffectivelyHidden","layoutClasses","layout","sidebarCompact","sidebarOpenMobile","sidebarHidden","filter","Boolean","join","_jsxs","mobileActionsContainer","mobileActions","Suspense","fallback","onLogin","onLogout","userName","displayName","email","isLoading","mobileActionButton","onClick","title","GearIcon","actions","icon","PlusIcon","label","TrashIcon","DownloadIcon","fontSize","isOpen","onToggle","modalOverlay","modalContent","e","stopPropagation","sidebarContainer","sidebarPlaceholder","onNewChat","onToggleSettings","mainContentContainer","contentPlaceholder","onResetChat","onDownloadChat","overlay","overlayVisible","onClose","ModelSearch","_ref","searchTerm","onSearchChange","resultCount","inputRef","useRef","handleInputChange","target","value","handleClearSearch","current","focus","searchContainer","inputWrapper","SearchIcon","searchIcon","ref","type","searchInput","placeholder","onChange","clearButton","XIcon","clearIcon","results","ChatContainer","mainContent","modelLoadingOverlay","modelLoadingContent","modelLoadingText","chatPlaceholder","ModelItem","memo","_model$series","model","selected","highlightMatch","text","regex","RegExp","parts","split","_Fragment","map","part","i","test","highlight","modelItem","role","modelIcon","series","charAt","name","modelDetails","modelName","description","modelDescription","tags","tag","toLowerCase","includes","undefined","selectedIndicator","CheckIcon","checkIcon","_ref2","xmlns","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","points","toggleContainer","toggleButton","active","hamburger","bar","sampleSessions","id","timestamp","sidebar","header","headerControls","iconButton","newChatButton","preventDefault","settingsButton","chatListContainer","sessionList","session","sessionItem","sessionButton","sessionTitle","sessionTimestamp","footer","userProfile","photoURL","src","alt","userAvatar","userInitial","toUpperCase","footerPlaceholderText","ModelSelectorButton","selectedModelName","providerName","disabled","isMobile","setIsMobile","innerWidth","showProvider","setShowProvider","buttonRef","textRef","buttonWidth","setButtonWidth","buttonSet","setButtonSet","hasOverflow","setHasOverflow","useEffect","handleResize","addEventListener","removeEventListener","width","offsetWidth","interval","setInterval","clearInterval","isOverflowing","scrollWidth","clientWidth","modelSelectorButton","innerContent","buttonText","scrollText","word","slice","replace","ChevronDownIcon","buttonIcon","SelectedModelDisplay","React","selectedModelContainer","selectedModelLabel","selectedModelInfo","provider","CapabilityTabs","capabilities","activeCapability","onSelectCapability","tabsRef","activeTab","querySelector","container","containerWidth","tabWidth","scrollPosition","offsetLeft","scrollTo","Math","max","behavior","capabilityTabs","Object","keys","capability","capabilityTab","ModelList","_ref3","groupedModels","onSelectModel","totalCount","onClearSearch","modelList","group","providerTypeHeader","providerTypeSeparator","typeLabel","modelCount","models","noResults","clearSearch","SearchContainer","_ref4","ModelSelectionPanel","_ref5","isExperimentalModelsEnabled","toggleExperimentalModels","capabilitiesWithCounts","setActiveCapability","handleSelectModel","modelsContainer","fixedHeader","scrollableModelList","formatProviderName","shouldIncludeModel","showExperimental","formattedProvider","typeGroup","_model$name","_model$displayName","searchLower","nameMatch","providerMatch","typeMatch","tagMatch","some","ModelSelection","processedModels","selectModel","modelFilter","updateSearchFilter","useModelFilter","panelRef","handleSearchChange","searchValue","useMemo","counts","forEach","category","values","flatMap","providerGroups","flat","search","modelsInCategory","groups","entries","_ref6","typeGroups","_ref7","filteredGroupModels","push","totalModelCount","reduce","count","modelSelectionContainer"],"sourceRoot":""}