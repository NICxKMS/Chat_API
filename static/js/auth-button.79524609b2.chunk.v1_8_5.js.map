{"version":3,"file":"static/js/auth-button.79524609b2.chunk.v1_8_5.js","mappings":"iKAIA,MAOaA,EAAqBC,IAChC,MAAMC,EAAW,kBAAkBD,KAE5BE,EAAaC,IAAkBC,EAAAA,EAAAA,GAAgBH,EAAU,OACzDI,EAAgBC,IAAqBC,EAAAA,EAAAA,UAAS,OAC9CC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IAChCG,EAAOC,IAAYJ,EAAAA,EAAAA,UAAS,MAuEnC,OArEAK,EAAAA,EAAAA,YAAU,KACR,IAAIC,GAAY,EAChB,IAAKb,EAIH,OAFAM,EAAkB,WAClBG,GAAW,GAKb,IAAIK,EAAQZ,EACZ,GAAIY,EAAO,CAET,GAAqB,iBAAVA,EAAoB,CAC7B,MAAMC,EAAU,CAAEC,KAAMF,EAAOG,UAAWC,KAAKC,OAC/ChB,EAAeY,GACfD,EAAQC,CACV,CAEA,GACED,EAAMG,WACNC,KAAKC,MAAQL,EAAMG,UApCf,OAqCJH,EAAME,KAIN,OAFAV,EAAkBQ,EAAME,WACxBP,GAAW,GAIbN,EAAe,KACjB,CAkCA,OA/BAM,GAAW,GACXW,MAAMpB,GACHqB,MAAMC,IACL,IAAKA,EAASC,GAAI,MAAM,IAAIC,MAAM,0BAA0BF,EAASG,UACrE,OAAOH,EAASI,MAAM,IAEvBL,MACEK,GACC,IAAIC,SAAQ,CAACC,EAASC,KACpB,MAAMC,EAAS,IAAIC,WACnBD,EAAOE,UAAY,IAAMJ,EAAQE,EAAOG,QACxCH,EAAOI,QAAUL,EACjBC,EAAOK,cAAcT,EAAK,MAG/BL,MAAMe,IACL,IAAKvB,EAAW,OAChB,MAAMwB,EAAe,CAAErB,KAAMoB,EAASnB,UAAWC,KAAKC,OACtDhB,EAAekC,GACf/B,EAAkB8B,EAAQ,IAE3BE,OAAOC,IACD1B,GAELF,EAAS4B,EAAI,IAEdC,SAAQ,KACF3B,GACLJ,GAAW,EAAM,IAGd,KACLI,GAAY,CAAK,CAClB,GACA,CAACb,EAAUE,EAAaC,IAEpB,CAAEE,iBAAgBG,UAASE,QAAO,C,8HCnE3C,MAAM+B,GAAaC,EAAAA,EAAAA,OAAKC,IAOjB,IAPkB,gBACvBC,EAAe,QACfC,EAAO,SACPC,EAAQ,SACRC,EAAW,OAAM,UACjBC,GAAY,EAAK,YACjBC,EAAc,MACfN,EACC,MAAM,eAAEtC,EAAgBG,QAAS0C,IAAkBnD,EAAAA,EAAAA,GAAkBkD,aAAW,EAAXA,EAAaE,UAElF,OACEC,EAAAA,EAAAA,KAAA,UACEC,UAAU,qBACVC,QAASV,EAAkBE,EAAWD,EACtCU,SAAUP,EACVQ,MAAOR,EAAY,6BAA+BJ,EAAkB,gBAAgBG,sBAA+B,kBACnH,aAAYC,EAAY,yBAA2BJ,EAAkB,SAAW,mBAAmBa,SAElGT,GACCI,EAAAA,EAAAA,KAACM,EAAAA,QAAO,CAACC,KAAK,QAAQC,IAAI,SACxBhB,EACFK,SAAAA,EAAaE,SACXD,GACEE,EAAAA,EAAAA,KAACM,EAAAA,QAAO,CAACC,KAAK,QAAQC,IAAI,WACxBvD,GACF+C,EAAAA,EAAAA,KAAA,OACES,IAAKxD,EACLyD,IAAK,GAAGf,cACRM,UAAWU,EAAAA,EAAOC,mBAClBxD,QAAQ,UAGV4C,EAAAA,EAAAA,KAAA,OAAKC,UAAWU,EAAAA,EAAOE,oBAAoBR,SACxCV,EAASmB,OAAO,GAAGC,iBAIxBf,EAAAA,EAAAA,KAAA,OAAKC,UAAWU,EAAAA,EAAOE,oBAAoBR,SACxCV,EAASmB,OAAO,GAAGC,iBAIxBf,EAAAA,EAAAA,KAACgB,EAAAA,IAAU,CAACT,KAAM,MAEb,IAKblB,EAAW4B,YAAc,aAEzB,S","sources":["hooks/useProfilePicture.js","components/auth/AuthButton/index.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useLocalStorage } from './useLocalStorage';\n\n// Time-to-live for cache entries (1 day in milliseconds)\nconst TTL = 24 * 60 * 60 * 1000;\n\n/**\n * Custom hook to fetch and cache user profile picture with a 1-day TTL.\n * @param {string} imageUrl - The URL to fetch the profile picture from.\n * @returns {{ profilePicture: string | null, loading: boolean, error: any }}\n */\nexport const useProfilePicture = (imageUrl) => {\n  const cacheKey = `profilePicture_${imageUrl}`;\n  // cachedEntry is either null, a string (legacy), or { data, timestamp }\n  const [cachedEntry, setCachedEntry] = useLocalStorage(cacheKey, null);\n  const [profilePicture, setProfilePicture] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    let isMounted = true;\n    if (!imageUrl) {\n      // No URL: clear state\n      setProfilePicture(null);\n      setLoading(false);\n      return;\n    }\n\n    // Validate cache entry\n    let entry = cachedEntry;\n    if (entry) {\n      // Legacy format: string\n      if (typeof entry === 'string') {\n        const wrapped = { data: entry, timestamp: Date.now() };\n        setCachedEntry(wrapped);\n        entry = wrapped;\n      }\n      // TTL check\n      if (\n        entry.timestamp &&\n        Date.now() - entry.timestamp < TTL &&\n        entry.data\n      ) {\n        setProfilePicture(entry.data);\n        setLoading(false);\n        return;\n      }\n      // Expired cache\n      setCachedEntry(null);\n    }\n\n    // Fetch and cache new image\n    setLoading(true);\n    fetch(imageUrl)\n      .then((response) => {\n        if (!response.ok) throw new Error(`Failed to fetch image: ${response.status}`);\n        return response.blob();\n      })\n      .then(\n        (blob) =>\n          new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            reader.onloadend = () => resolve(reader.result);\n            reader.onerror = reject;\n            reader.readAsDataURL(blob);\n          })\n      )\n      .then((dataUrl) => {\n        if (!isMounted) return;\n        const entryToCache = { data: dataUrl, timestamp: Date.now() };\n        setCachedEntry(entryToCache);\n        setProfilePicture(dataUrl);\n      })\n      .catch((err) => {\n        if (!isMounted) return;\n        console.error('Error fetching and caching profile image:', err);\n        setError(err);\n      })\n      .finally(() => {\n        if (!isMounted) return;\n        setLoading(false);\n      });\n\n    return () => {\n      isMounted = false;\n    };\n  }, [imageUrl, cachedEntry, setCachedEntry]);\n\n  return { profilePicture, loading, error };\n}; ","import { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { SignInIcon} from '@primer/octicons-react';\nimport { useProfilePicture } from '../../../hooks/useProfilePicture';\n// Import icons using the correct paths\nimport '../../../styles/common/buttons.css';\n// import component-specific styles for avatar/initial only\nimport styles from './AuthButton.module.css';\nimport Spinner from '../../common/Spinner';\n\n/**\n * Auth button component for login/logout\n * @param {Object} props - Component props\n * @param {boolean} props.isAuthenticated - Whether the user is authenticated\n * @param {Function} props.onLogin - Function to handle login\n * @param {Function} props.onLogout - Function to handle logout\n * @param {string} props.userName - User's display name or email\n * @param {boolean} props.isLoading - Whether authentication is in progress\n * @param {Object} props.currentUser - Firebase user object with photoURL\n * @returns {JSX.Element} - Rendered component\n */\nconst AuthButton = memo(({ \n  isAuthenticated, \n  onLogin, \n  onLogout, \n  userName = 'User',\n  isLoading = false,\n  currentUser = null\n}) => {\n  const { profilePicture, loading: avatarLoading } = useProfilePicture(currentUser?.photoURL);\n\n  return (\n    <button\n      className=\"circleActionButton\"\n      onClick={isAuthenticated ? onLogout : onLogin}\n      disabled={isLoading}\n      title={isLoading ? \"Checking authentication...\" : isAuthenticated ? `Logged in as ${userName}. Click to logout.` : \"Login / Sign Up\"}\n      aria-label={isLoading ? \"Loading Authentication\" : isAuthenticated ? \"Logout\" : \"Login or Sign Up\"}\n    >\n      {isLoading ? (\n        <Spinner size=\"small\" tag=\"auth\" />\n      ) : isAuthenticated ? (\n        currentUser?.photoURL ? (\n          avatarLoading ? (\n            <Spinner size=\"small\" tag=\"avatar\" />\n          ) : profilePicture ? (\n            <img \n              src={profilePicture} \n              alt={`${userName}'s profile`}\n              className={styles.AuthButton__avatar}\n              loading=\"lazy\"\n            />\n          ) : (\n            <div className={styles.AuthButton__initial}>\n              {userName.charAt(0).toUpperCase()}\n            </div>\n          )\n        ) : (\n          <div className={styles.AuthButton__initial}>\n            {userName.charAt(0).toUpperCase()}\n          </div>\n        )\n      ) : (\n        <SignInIcon size={20} />\n      )}\n    </button>\n  );\n});\n\n// Display name for debugging\nAuthButton.displayName = 'AuthButton';\n\nexport default AuthButton;\n\n// Define PropTypes\nAuthButton.propTypes = {\n  isAuthenticated: PropTypes.bool.isRequired,\n  onLogin: PropTypes.func.isRequired,\n  onLogout: PropTypes.func.isRequired,\n  userName: PropTypes.string,\n  isLoading: PropTypes.bool,\n  currentUser: PropTypes.shape({\n    displayName: PropTypes.string,\n    email: PropTypes.string,\n    photoURL: PropTypes.string\n  })\n};\n"],"names":["useProfilePicture","imageUrl","cacheKey","cachedEntry","setCachedEntry","useLocalStorage","profilePicture","setProfilePicture","useState","loading","setLoading","error","setError","useEffect","isMounted","entry","wrapped","data","timestamp","Date","now","fetch","then","response","ok","Error","status","blob","Promise","resolve","reject","reader","FileReader","onloadend","result","onerror","readAsDataURL","dataUrl","entryToCache","catch","err","finally","AuthButton","memo","_ref","isAuthenticated","onLogin","onLogout","userName","isLoading","currentUser","avatarLoading","photoURL","_jsx","className","onClick","disabled","title","children","Spinner","size","tag","src","alt","styles","AuthButton__avatar","AuthButton__initial","charAt","toUpperCase","SignInIcon","displayName"],"sourceRoot":""}