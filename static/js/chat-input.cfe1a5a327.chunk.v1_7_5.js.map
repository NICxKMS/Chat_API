{"version":3,"file":"static/js/chat-input.cfe1a5a327.chunk.v1_7_5.js","mappings":"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","sources":["components/chat/ChatInput/subcomponents/ImagePreviewList/index.js","components/chat/ChatInput/subcomponents/ChatInputTextArea/index.js","components/chat/ChatInput/subcomponents/ChatInputActionRow/index.js","components/chat/ChatInput/index.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { XIcon } from '@primer/octicons-react';\nimport styles from './ImagePreviewList.module.css';\n\nconst ImagePreviewList = ({ images, onRemoveImage }) => {\n  if (!images || images.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={styles.imagePreviewContainer}>\n      {images.map((image, index) => (\n        <div key={index} className={styles.imagePreviewWrapper}>\n          <img \n            src={image.url} \n            alt={`preview ${index}`} \n            className={styles.imagePreview} \n          />\n          <button \n            className={styles.removeImageButton} \n            onClick={() => onRemoveImage(index)}\n            aria-label={`Remove image ${index + 1}`}\n            title={`Remove image ${index + 1}`}\n          >\n            <XIcon size={12} />\n          </button>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nImagePreviewList.propTypes = {\n  images: PropTypes.arrayOf(PropTypes.shape({\n    url: PropTypes.string.isRequired,\n    name: PropTypes.string // Name might not always be relevant here\n  })).isRequired,\n  onRemoveImage: PropTypes.func.isRequired,\n};\n\nexport default React.memo(ImagePreviewList); ","import React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { PaperAirplaneIcon, CheckIcon } from '@primer/octicons-react';\nimport styles from './ChatInputTextArea.module.css';\n\nconst ChatInputTextArea = forwardRef(({\n  value,\n  onChange,\n  onKeyDown,\n  onPaste,\n  placeholder,\n  disabled = false,\n  isEditing = false,\n  isWaitingForResponse = false,\n  selectedModel = null,\n  onSendClick // Renamed from handleButtonClick for clarity\n}, ref) => {\n  \n  const sendButtonIcon = () => {\n    if (isWaitingForResponse) {\n      return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"21\" height=\"21\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n          <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\n        </svg>\n      );\n    }\n    if (!selectedModel) {\n      return (\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n          <rect x=\"3\" y=\"3\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n          <rect x=\"7\" y=\"3\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n          <rect x=\"11\" y=\"3\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n          <rect x=\"3\" y=\"7\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n          <rect x=\"7\" y=\"7\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n          <rect x=\"11\" y=\"7\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n          <rect x=\"3\" y=\"11\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n          <rect x=\"7\" y=\"11\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n          <rect x=\"11\" y=\"11\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n        </svg>\n      );\n    }\n    if (isEditing) {\n      return <CheckIcon size={21} />;\n    }\n    return <PaperAirplaneIcon size={21} />;\n  };\n  \n  const sendButtonLabel = isWaitingForResponse ? \"Stop generation\" \n                         : !selectedModel ? \"Select model\" \n                         : isEditing ? \"Save edit\" \n                         : \"Send message\";\n                         \n  const sendButtonTitle = isWaitingForResponse ? \"Stop generation\" \n                         : !selectedModel ? \"Select a model\" \n                         : isEditing ? \"Save edit (Enter)\" \n                         : \"Send message (Enter)\";\n\n  return (\n    <div className={`${styles['ChatInput__inputWrapper']} ${!selectedModel ? styles.noModelSelected : ''}`}>\n      <textarea\n        ref={ref} // Forwarded ref\n        className={styles['ChatInput__chatInput']}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        onKeyDown={onKeyDown}\n        onPaste={onPaste}\n        disabled={disabled}\n        rows={1}\n        aria-label=\"Chat message input\"\n      />\n      \n      <button\n        className={`${styles['ChatInput__sendButtonInline']} ${isWaitingForResponse ? styles['ChatInput__stopButton'] : ''} ${!selectedModel ? styles.noModelSelected : ''}`}\n        onClick={onSendClick}\n        // Disable logic simplified: disable if not waiting AND (no text OR disabled externally)\n        disabled={!isWaitingForResponse && (!value?.trim() || disabled)}\n        aria-label={sendButtonLabel}\n        title={sendButtonTitle}\n        type=\"button\"\n      >\n        {sendButtonIcon()}\n      </button>\n    </div>\n  );\n});\n\nChatInputTextArea.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onKeyDown: PropTypes.func.isRequired,\n  onPaste: PropTypes.func.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  disabled: PropTypes.bool,\n  isEditing: PropTypes.bool,\n  isWaitingForResponse: PropTypes.bool,\n  selectedModel: PropTypes.object,\n  onSendClick: PropTypes.func.isRequired,\n};\n\nChatInputTextArea.displayName = 'ChatInputTextArea';\n\nexport default ChatInputTextArea; ","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { PlusIcon, XIcon, KebabHorizontalIcon, ImageIcon, SearchIcon, LightBulbIcon } from '@primer/octicons-react';\nimport styles from './ChatInputActionRow.module.css';\n\nconst ChatInputActionRow = ({\n  isMobile = false,\n  isEditing = false,\n  disabled = false,\n  selectedModel = null,\n  onNewChat,\n  onUploadClick,\n  onCancelEdit,\n  onToggleModelSelector,\n  // Add props for Search/Reason/More buttons if implementing later\n}) => {\n  return (\n    <div className={styles['ChatInput__actionRow']}>\n      {/* Left side buttons */}\n      <div className={styles['ChatInput__leftButtons']}>\n        {/* Upload button */}\n        <button\n          className={styles['ChatInput__uploadButton']}\n          onClick={onUploadClick} // Use prop\n          disabled={disabled || !selectedModel?.capabilities?.includes('vision')} // Simplified logic\n          aria-label={selectedModel?.capabilities?.includes('vision') ? \"Upload images\" : \"Select a model with vision capabilities\"}\n          title={selectedModel?.capabilities?.includes('vision') ? \"Upload images\" : \"Select a model with vision capabilities\"}\n          type=\"button\"\n        >\n          <ImageIcon size={16} />\n        </button>\n        \n        {/* Placeholder Buttons - Add onClick handlers later */}\n        <button\n          className={`${styles['ChatInput__textButton']} ${isMobile ? styles['ChatInput__iconOnlyButton'] : ''}`}\n          aria-label=\"Search\"\n          title=\"Search (coming soon)\"\n          type=\"button\"\n          disabled={true} // Disable for now\n        >\n          <SearchIcon size={16} />\n          {!isMobile && <span className={styles.buttonText}>Search</span>}\n        </button>\n        \n        <button\n          className={`${styles['ChatInput__textButton']} ${isMobile ? styles['ChatInput__iconOnlyButton'] : ''}`}\n          aria-label=\"Reason mode\"\n          title=\"Reason mode (coming soon)\"\n          type=\"button\"\n          disabled={true} // Disable for now\n        >\n          <LightBulbIcon size={16} />\n          {!isMobile && <span className={styles.buttonText}>Reason</span>}\n        </button>\n        \n        <button\n          className={styles['ChatInput__actionButton']}\n          aria-label=\"More options\"\n          title=\"More options (coming soon)\"\n          type=\"button\"\n          disabled={true} // Disable for now\n        >\n          <KebabHorizontalIcon size={16} />\n        </button>\n      </div>\n      \n      {/* Right side buttons */}\n      <div className={styles['ChatInput__rightButtons']}>\n        {/* New chat button */}\n        <button \n          className={styles['ChatInput__actionButton']}\n          onClick={onNewChat}\n          aria-label=\"New chat\"\n          title=\"New chat\"\n          type=\"button\"\n        >\n          <PlusIcon size={16} />\n        </button>\n        \n        {/* Cancel edit button */}\n        {isEditing && (\n          <button\n            className={styles['ChatInput__uploadButton']} // Re-use style? Maybe rename this style\n            onClick={onCancelEdit}\n            aria-label=\"Cancel edit\"\n            title=\"Cancel edit (Esc)\"\n            type=\"button\"\n          >\n            <XIcon size={16} />\n          </button>\n        )}\n        \n        {/* AI model button */}\n        <button\n          className={styles['ChatInput__modelButton']}\n          onClick={onToggleModelSelector}\n          aria-label=\"Select AI model\"\n          title=\"Select AI model\"\n          type=\"button\"\n        >\n          <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            {/* SVG content */}\n             <rect x=\"3\" y=\"3\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n             <rect x=\"7\" y=\"3\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n             <rect x=\"11\" y=\"3\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n             <rect x=\"3\" y=\"7\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n             <rect x=\"7\" y=\"7\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n             <rect x=\"11\" y=\"7\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n             <rect x=\"3\" y=\"11\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n             <rect x=\"7\" y=\"11\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n             <rect x=\"11\" y=\"11\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n          </svg>\n        </button>\n      </div>\n    </div>\n  );\n};\n\nChatInputActionRow.propTypes = {\n  isMobile: PropTypes.bool,\n  isEditing: PropTypes.bool,\n  disabled: PropTypes.bool,\n  selectedModel: PropTypes.object,\n  onNewChat: PropTypes.func.isRequired,\n  onUploadClick: PropTypes.func.isRequired,\n  onCancelEdit: PropTypes.func.isRequired,\n  onToggleModelSelector: PropTypes.func.isRequired,\n};\n\nexport default React.memo(ChatInputActionRow); ","import { useState, useRef, useEffect, useCallback, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ChatInput.module.css';\nimport { useChatState } from '../../../contexts/ChatStateContext';\nimport { useChatControl } from '../../../contexts/ChatControlContext';\n\n// Import sub-components\nimport ImagePreviewList from './subcomponents/ImagePreviewList';\nimport ChatInputTextArea from './subcomponents/ChatInputTextArea';\nimport ChatInputActionRow from './subcomponents/ChatInputActionRow';\n\n/**\n * Reads a file and returns its base64 representation.\n * @param {File} file - The file to read.\n * @returns {Promise<string>} A promise resolving with the base64 data URL.\n */\nconst readFileAsBase64 = (file) => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = (error) => reject(error);\n    reader.readAsDataURL(file);\n  });\n};\n\n/**\n * Auto-resizing chat input component (Refactored)\n */\nconst ChatInput = memo(({ \n  disabled = false, \n  selectedModel = null, \n  isStaticLayout = false,\n  editingMessage = null,\n  onCancelEdit = () => {},\n  isStreaming = false,\n  toggleModelSelector = () => {},\n  onFocus = () => {},\n  isInitialChat = false,\n  onSendMessage,\n}) => {\n  const [message, setMessage] = useState('');\n  const [selectedImages, setSelectedImages] = useState([]);\n  const textareaRef = useRef(null);\n  const fileInputRef = useRef(null);\n  const isEditing = !!editingMessage;\n  const [isMobile, setIsMobile] = useState(window.innerWidth <= 600);\n  const { isWaitingForResponse } = useChatState();\n  const { stopGeneration, newChat } = useChatControl();\n  const [inputError, setInputError] = useState(null);\n  const errorTimeoutRef = useRef(null); // Ref to manage error timeout\n  \n  // Mobile detection\n  useEffect(() => {\n    const handleResize = () => setIsMobile(window.innerWidth <= 600);\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  \n  // Focus input on mount\n  useEffect(() => {\n    textareaRef.current?.focus();\n  }, []);\n  \n  // Set message/images when entering edit mode\n  useEffect(() => {\n    if (editingMessage) {\n      let textContent = '';\n      const images = [];\n      if (typeof editingMessage.content === 'string') {\n        textContent = editingMessage.content;\n      } else if (Array.isArray(editingMessage.content)) {\n        editingMessage.content.forEach(part => {\n          if (part.type === 'text') textContent += part.text || '';\n          if (part.type === 'image_url' && part.image_url?.url) {\n            images.push({ name: '', url: part.image_url.url });\n          }\n        });\n      }\n      setMessage(textContent);\n      setSelectedImages(images);\n      setTimeout(() => textareaRef.current?.focus(), 0);\n    } else {\n      // Clear state if exiting edit mode (e.g., via prop change)\n      setMessage('');\n      setSelectedImages([]);\n    }\n  }, [editingMessage]);\n  \n  // Auto-resize textarea\n  const adjustTextareaHeight = useCallback(() => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n    textarea.style.height = 'auto';\n    const newHeight = Math.min(textarea.scrollHeight + 2, 200);\n    textarea.style.height = `${newHeight}px`;\n    const inputContainer = textarea.closest(`.${styles.ChatInput}`);\n    if (inputContainer) {\n      inputContainer.style.setProperty('--textarea-height', `${newHeight}px`); // Use CSS var\n    }\n  }, []);\n  \n  useEffect(() => {\n    adjustTextareaHeight();\n  }, [message, adjustTextareaHeight]);\n\n  // Mobile keyboard detection (Keep this logic here as it affects body class)\n  useEffect(() => {\n    if (!isMobile) return;\n    const detectKeyboard = () => {\n      const isKeyboard = window.innerHeight < window.outerHeight * 0.75;\n      document.body.classList.toggle('keyboard-open', isKeyboard);\n    };\n    const handleFocus = () => {\n      if (isMobile) {\n        document.body.classList.add('keyboard-open');\n        window.addEventListener('resize', detectKeyboard);\n      }\n      if (onFocus) onFocus();\n    };\n    const handleBlur = () => {\n      if (isMobile) {\n        document.body.classList.remove('keyboard-open');\n        window.removeEventListener('resize', detectKeyboard);\n      }\n    };\n    const textarea = textareaRef.current;\n    if (textarea) {\n      textarea.addEventListener('focus', handleFocus);\n      textarea.addEventListener('blur', handleBlur);\n    }\n    return () => {\n      if (textarea) {\n        textarea.removeEventListener('focus', handleFocus);\n        textarea.removeEventListener('blur', handleBlur);\n      }\n      window.removeEventListener('resize', detectKeyboard);\n      document.body.classList.remove('keyboard-open'); // Cleanup on unmount\n    };\n  }, [isMobile, onFocus]);\n\n  // Helper to show error message temporarily\n  const showError = useCallback((message) => {\n    setInputError(message);\n    // Clear previous timeout if any\n    if (errorTimeoutRef.current) {\n      clearTimeout(errorTimeoutRef.current);\n    }\n    // Set new timeout to clear error\n    errorTimeoutRef.current = setTimeout(() => {\n      setInputError(null);\n      errorTimeoutRef.current = null;\n    }, 3000); // Show error for 3 seconds\n  }, []);\n  \n  // Cleanup timeout on unmount\n  useEffect(() => {\n    return () => {\n      if (errorTimeoutRef.current) {\n        clearTimeout(errorTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  // Event Handlers\n  \n  const handleChange = useCallback((e) => {\n    setMessage(e.target.value);\n  }, []);\n\n  const prepareAndSendMessage = useCallback(() => {\n    const hasText = message.trim().length > 0;\n    const hasImages = selectedImages.length > 0;\n    if ((!hasText && !hasImages) || disabled) return;\n\n    if (!selectedModel && toggleModelSelector) {\n      toggleModelSelector();\n      return;\n    }\n\n    const contentPayload = [];\n    if (hasText) contentPayload.push({ type: 'text', text: message.trim() });\n    if (hasImages) selectedImages.forEach(img => contentPayload.push({ type: 'image_url', image_url: { url: img.url } }));\n\n    if (contentPayload.length > 0) {\n      onSendMessage(contentPayload, isEditing ? editingMessage : null);\n    }\n\n    setMessage('');\n    setSelectedImages([]);\n    if (isEditing && onCancelEdit) onCancelEdit();\n\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto'; // Reset height immediately\n      setTimeout(() => textareaRef.current?.focus(), 0);\n    }\n  }, [message, selectedImages, disabled, selectedModel, toggleModelSelector, onSendMessage, isEditing, editingMessage, onCancelEdit]);\n\n  const handleKeyDown = useCallback((e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      if (!isWaitingForResponse) prepareAndSendMessage(); // Call renamed handler\n    } else if (isEditing && e.key === 'Escape') {\n      e.preventDefault();\n      if (onCancelEdit) onCancelEdit(); // Use onCancelEdit prop\n      setMessage(''); // Also clear message state\n      setSelectedImages([]);\n    }\n  }, [isWaitingForResponse, prepareAndSendMessage, isEditing, onCancelEdit]);\n\n  const handleImageSelection = useCallback(async (event) => {\n    const files = Array.from(event.target.files);\n    if (!files.length) return;\n    const MAX_IMAGES = 5;\n    if (selectedImages.length + files.length > MAX_IMAGES) {\n      showError(`Max ${MAX_IMAGES} images allowed.`); // Use showError\n      if (fileInputRef.current) fileInputRef.current.value = \"\";\n      return;\n    }\n    try {\n      const imagePromises = files.map(async (file) => {\n        if (!file.type.startsWith('image/')) throw new Error(`${file.name} invalid type.`);\n        const MAX_SIZE_MB = 5;\n        if (file.size > MAX_SIZE_MB * 1024 * 1024) throw new Error(`${file.name} > ${MAX_SIZE_MB}MB.`);\n        const base64 = await readFileAsBase64(file);\n        return { name: file.name, url: base64 };\n      });\n      const newImages = await Promise.all(imagePromises);\n      setSelectedImages((prev) => [...prev, ...newImages]);\n    } catch (error) {\n      console.error(\"Image processing error:\", error);\n      showError(`Image error: ${error.message}`); // Use showError\n    }\n    if (fileInputRef.current) fileInputRef.current.value = \"\";\n  }, [selectedImages.length, showError]);\n\n  const handlePaste = useCallback(async (e) => {\n    if (isEditing) return;\n    const items = e.clipboardData?.items;\n    if (!items) return;\n    const imageItems = Array.from(items).filter(item => item.type.startsWith('image/'));\n    if (imageItems.length === 0) return;\n    const MAX_IMAGES = 5;\n    if (selectedImages.length + imageItems.length > MAX_IMAGES) {\n      showError(`Max ${MAX_IMAGES} images allowed.`); // Use showError\n      return;\n    }\n    try {\n      const imagePromises = imageItems.map(async (item) => {\n        const file = item.getAsFile();\n        const MAX_SIZE_MB = 5;\n        if (file.size > MAX_SIZE_MB * 1024 * 1024) throw new Error(`Pasted image > ${MAX_SIZE_MB}MB.`);\n        const base64 = await readFileAsBase64(file);\n        return { name: 'pasted-' + Date.now(), url: base64 };\n      });\n      const newImages = await Promise.all(imagePromises);\n      if (newImages.length > 0) {\n         setSelectedImages((prev) => [...prev, ...newImages]);\n         e.preventDefault(); // Prevent pasting as text\n      }\n    } catch (error) {\n      console.error(\"Paste processing error:\", error);\n      showError(`Paste error: ${error.message}`); // Use showError\n    }\n  }, [isEditing, selectedImages.length, showError]);\n\n  const removeImage = useCallback((indexToRemove) => {\n    setSelectedImages((prev) => prev.filter((_, index) => index !== indexToRemove));\n  }, []);\n\n  const triggerFileInput = useCallback(() => {\n    // Logic for triggering file input based on model selection\n    if (!selectedModel && toggleModelSelector) {\n      toggleModelSelector();\n    } else if (selectedModel?.capabilities?.includes('vision')) {\n       fileInputRef.current?.click();\n    } else {\n      showError('Select a model with vision capabilities to upload images.'); // Use showError\n    }\n  }, [selectedModel, toggleModelSelector, showError]);\n\n  const handleCancelEdit = useCallback(() => {\n    if (onCancelEdit) onCancelEdit();\n    setMessage('');\n    setSelectedImages([]);\n  }, [onCancelEdit]);\n\n  const handleStop = useCallback(() => {\n    stopGeneration();\n  }, [stopGeneration]);\n\n  // Wrapper for the inline send/stop button click\n  const handleInlineSendClick = useCallback((e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (isWaitingForResponse) {\n      handleStop();\n    } else {\n      prepareAndSendMessage(); // Call renamed handler\n    }\n    if (isMobile && textareaRef.current) textareaRef.current.blur();\n  }, [isWaitingForResponse, handleStop, prepareAndSendMessage, isMobile]);\n\n  // Render Logic\n  \n  const placeholderText = isEditing \n    ? 'Edit your message...' \n    : isWaitingForResponse\n      ? 'Type your next message while waiting...'\n      : 'Ask anything';\n\n  return (\n    <>\n      {/* Image Previews */} \n      <ImagePreviewList images={selectedImages} onRemoveImage={removeImage} />\n\n      <div className={[\n          styles.ChatInput, \n          isEditing ? styles['ChatInput--editing'] : '', \n          isWaitingForResponse ? styles['ChatInput--waitingForResponse'] : '', \n          isMobile ? styles['ChatInput__mobileView'] : '',\n          isMobile ? (isInitialChat ? styles['ChatInput--mobileInitial'] : styles['ChatInput--mobileWithMessages']) : '',\n        ].filter(Boolean).join(' ')}\n      >\n        {/* Inline Error Message */} \n        {inputError && (\n          <div className={styles.ChatInput__error} role=\"alert\">\n            {inputError}\n          </div>\n        )}\n\n        {/* Hidden file input */} \n        <input\n          type=\"file\"\n          ref={fileInputRef}\n          style={{ display: 'none' }}\n          accept=\"image/jpeg, image/png, image/gif, image/webp\"\n          multiple\n          onChange={handleImageSelection}\n        />\n\n        {/* Text Area and Inline Button */} \n        <ChatInputTextArea \n           ref={textareaRef}\n           value={message}\n           onChange={handleChange}\n           onKeyDown={handleKeyDown}\n           onPaste={handlePaste}\n           placeholder={placeholderText}\n           disabled={disabled}\n           isEditing={isEditing}\n           isWaitingForResponse={isWaitingForResponse}\n           selectedModel={selectedModel}\n           onSendClick={handleInlineSendClick}\n        />\n        \n        {/* Action Button Row */} \n        <ChatInputActionRow \n           isMobile={isMobile}\n           isEditing={isEditing}\n           disabled={disabled}\n           selectedModel={selectedModel}\n           onNewChat={newChat}\n           onUploadClick={triggerFileInput}\n           onCancelEdit={handleCancelEdit}\n           onToggleModelSelector={toggleModelSelector}\n        />\n      </div>\n    </>\n  );\n});\n\n// Display name\nChatInput.displayName = 'ChatInput';\n\n// PropTypes\nChatInput.propTypes = {\n  disabled: PropTypes.bool,\n  selectedModel: PropTypes.shape({ // Define model shape if needed\n    // Add specific model properties here if known/required\n    id: PropTypes.string,\n    name: PropTypes.string,\n    // ... other properties\n  }), \n  isStaticLayout: PropTypes.bool,\n  editingMessage: PropTypes.shape({ // Define message shape for editing\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n    content: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.arrayOf(PropTypes.shape({ // Support complex content\n        type: PropTypes.string.isRequired,\n        text: PropTypes.string,\n        image_url: PropTypes.shape({\n          url: PropTypes.string.isRequired\n        })\n      }))\n    ]).isRequired\n  }),\n  onCancelEdit: PropTypes.func,\n  isStreaming: PropTypes.bool,\n  toggleModelSelector: PropTypes.func,\n  onFocus: PropTypes.func,\n  isInitialChat: PropTypes.bool,\n  onSendMessage: PropTypes.func.isRequired,\n};\n\nexport default ChatInput; "],"names":["ImagePreviewList","_ref","images","onRemoveImage","length","_jsx","className","styles","imagePreviewContainer","children","map","image","index","_jsxs","imagePreviewWrapper","src","url","alt","imagePreview","removeImageButton","onClick","title","XIcon","size","React","ChatInputTextArea","forwardRef","ref","value","onChange","onKeyDown","onPaste","placeholder","disabled","isEditing","isWaitingForResponse","selectedModel","onSendClick","sendButtonLabel","sendButtonTitle","noModelSelected","rows","trim","type","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","x","y","rx","ry","CheckIcon","PaperAirplaneIcon","displayName","ChatInputActionRow","_selectedModel$capabi","_selectedModel$capabi2","_selectedModel$capabi3","isMobile","onNewChat","onUploadClick","onCancelEdit","onToggleModelSelector","capabilities","includes","ImageIcon","SearchIcon","buttonText","LightBulbIcon","KebabHorizontalIcon","PlusIcon","readFileAsBase64","file","Promise","resolve","reject","reader","FileReader","onload","result","onerror","error","readAsDataURL","ChatInput","memo","isStaticLayout","editingMessage","isStreaming","toggleModelSelector","onFocus","isInitialChat","onSendMessage","message","setMessage","useState","selectedImages","setSelectedImages","textareaRef","useRef","fileInputRef","setIsMobile","window","innerWidth","useChatState","stopGeneration","newChat","useChatControl","inputError","setInputError","errorTimeoutRef","useEffect","handleResize","addEventListener","removeEventListener","_textareaRef$current","current","focus","textContent","content","Array","isArray","forEach","part","_part$image_url","text","image_url","push","name","setTimeout","_textareaRef$current2","adjustTextareaHeight","useCallback","textarea","style","newHeight","Math","min","scrollHeight","inputContainer","closest","setProperty","detectKeyboard","isKeyboard","innerHeight","outerHeight","document","body","classList","toggle","handleFocus","add","handleBlur","remove","showError","clearTimeout","handleChange","e","target","prepareAndSendMessage","hasText","hasImages","contentPayload","img","_textareaRef$current3","handleKeyDown","key","shiftKey","preventDefault","handleImageSelection","async","files","from","event","imagePromises","startsWith","Error","MAX_SIZE_MB","base64","newImages","all","prev","handlePaste","_e$clipboardData","items","clipboardData","imageItems","filter","item","getAsFile","Date","now","removeImage","indexToRemove","_","triggerFileInput","_fileInputRef$current","click","handleCancelEdit","handleStop","handleInlineSendClick","stopPropagation","blur","placeholderText","_Fragment","Boolean","join","ChatInput__error","role","display","accept","multiple"],"sourceRoot":""}