{"version":3,"file":"static/js/app-chat-ChatMessage.b042f9f4c6.chunk.v1_9_0.js","mappings":"2OAUA,MAAMA,GAAmBC,EAAAA,EAAAA,KAAK,IAAM,swFAGpC,IAAIC,EACJ,MAiBMC,EAAcC,IAAuG,IAAtG,QAAEC,EAAO,YAAEC,GAAc,EAAK,cAAEC,EAAgB,KAAI,gBAAEC,EAAkB,KAAI,UAAEC,EAAY,MAAML,EAEnH,MAAMM,EAA6B,MAAnBF,EAA0BA,EAAkBH,EAAQK,SAE7DC,EAAeC,IAAoBC,EAAAA,EAAAA,KAAS,GAC7CC,GAA0BC,EAAAA,EAAAA,KAAQ,IACrB,cAAjBV,EAAQW,KACJN,GACAO,EAAAA,EAAAA,IAAwBP,IAC3B,CAACA,EAASL,EAAQW,QACdE,EAAkBC,IAAuBN,EAAAA,EAAAA,IAASC,IAGzDM,EAAAA,EAAAA,KAAU,KACRD,EAAoBL,EAAwB,GAC3C,CAACA,KAEJM,EAAAA,EAAAA,KAAU,KACR,GAAqB,cAAjBf,EAAQW,MAA2C,iBAAZN,GAA0C,oBAAXW,OACxE,OAEF,MAAMC,EAAKjB,EAAQkB,UACbC,GAtCc,oBAAXH,QAA2BnB,IACpCA,EAAY,IAAImB,OAAO,IAAII,IAAI,gBAAsD,CAAEC,UAAM,KAExFxB,GAoCCyB,EAAiBC,IACjBA,EAAEC,KAAKP,KAAOA,IACdM,EAAEC,KAAKC,QAASX,EAAoBS,EAAEC,KAAKA,MAC1CV,EAAoBT,GAAQ,EAInC,OAFAc,EAAOO,iBAAiB,UAAWJ,GACnCH,EAAOQ,YAAY,CAAEV,KAAIZ,YAClB,KACLc,EAAOS,oBAAoB,UAAWN,EAAc,CACrD,GACA,CAACjB,EAASL,EAAQW,KAAMX,EAAQkB,YAGnC,MAAMW,GAAOnB,EAAAA,EAAAA,KAAQ,KACnB,OAAQV,EAAQW,MACd,IAAK,OACH,OAAOP,GACH0B,EAAAA,EAAAA,GAAA,OAAKC,IAAK3B,EAAW4B,IAAI,cAAcC,UAAWC,EAAAA,EAAOC,yBACzD,KACN,IAAK,YACH,OAAOL,EAAAA,EAAAA,GAACM,EAAAA,IAAW,CAACC,KAAM,GAAIJ,UAAWC,EAAAA,EAAOI,oBAClD,IAAK,SACH,OAAOR,EAAAA,EAAAA,GAACS,EAAAA,IAAQ,CAACF,KAAM,GAAIJ,UAAWC,EAAAA,EAAOI,oBAC/C,IAAK,QACH,OAAOR,EAAAA,EAAAA,GAACU,EAAAA,IAAS,CAACH,KAAM,GAAIJ,UAAWC,EAAAA,EAAOI,oBAChD,QACE,OAAO,KACX,GACC,CAACtC,EAAQW,KAAMP,IAGZqC,GAAe/B,EAAAA,EAAAA,KAAQ,KAC3B,OAAQV,EAAQW,MACd,IAAK,OACH,OAAOuB,EAAAA,EAAO,qBAChB,IAAK,YACH,OAAOA,EAAAA,EAAO,0BAChB,IAAK,SACH,OAAOA,EAAAA,EAAO,uBAChB,IAAK,QACH,OAAOA,EAAAA,EAAO,sBAChB,QACE,MAAO,GACX,GACC,CAAClC,EAAQW,OAGN+B,GAAoBhC,EAAAA,EAAAA,KAAQ,MAEX,cAAjBV,EAAQW,OAAyBX,EAAQ2C,UAE5C,CAAC3C,EAAQW,KAAMX,EAAQ2C,UAGpBC,GAAoBC,EAAAA,EAAAA,KAAY,KACpC,MAAMxC,EAAqC,iBAApBL,EAAQK,QAC3BL,EAAQK,QACRyC,MAAMC,QAAQ/C,EAAQK,SACpBL,EAAQK,QACL2C,QAAOC,GAAsB,SAAdA,EAAK5B,OACpB6B,KAAID,GAAQA,EAAKE,OACjBC,KAAK,MACR,GACNC,UAAUC,UAAUC,UAAUlD,GAASmD,MAAK,KAC1CjD,GAAiB,GACjBkD,YAAW,IAAMlD,GAAiB,IAAQ,IAAK,GAC/C,GACD,CAACP,EAAQK,UAGNqD,GAAgBhD,EAAAA,EAAAA,KAAQ,KAC5BoB,EAAAA,EAAAA,GAAA,UACEG,UAAW,GAAGC,EAAAA,EAAOyB,kCACD,cAAjB3D,EAAQW,MAAwB+B,EAAqBR,EAAAA,EAAO0B,wCAA0C1B,EAAAA,EAAO2B,4CAEhHC,QAASlB,EACT,aAAW,eACXmB,MAAM,eAAcC,SAEnB1D,GAAgBwB,EAAAA,EAAAA,GAACmC,EAAAA,IAAS,CAAC5B,KAAM,MAASP,EAAAA,EAAAA,GAACoC,EAAAA,IAAQ,CAAC7B,KAAM,QAE5D,CAACO,EAAmB5C,EAAQW,KAAM+B,EAAmBpC,IAGlD6D,GAAkBtB,EAAAA,EAAAA,KAAY,KAC9B3C,GAAeA,EAAcF,EAAQ,GACxC,CAACE,EAAeF,IACboE,GAAgB1D,EAAAA,EAAAA,KAAQ,IAAuB,SAAjBV,EAAQW,MAC1CmB,EAAAA,EAAAA,GAAA,UACEG,UAAWC,EAAAA,EAAOmC,+BAClBP,QAASK,EACT,aAAW,eACXJ,MAAM,eAAcC,UAEpBlC,EAAAA,EAAAA,GAACwC,EAAAA,IAAU,CAACjC,KAAM,OAElB,MAAM,CAACrC,EAAQW,KAAMwD,IAyGzB,OACEI,EAAAA,EAAAA,IAAA,OAAKtC,UAAWC,EAAAA,EAAOpC,YAAc,IAAM2C,EAAauB,SAAA,EACtDO,EAAAA,EAAAA,IAAA,OAAKtC,UAAWC,EAAAA,EAAOsC,kBAAkBR,SAAA,CAEtCnC,IACCC,EAAAA,EAAAA,GAAA,OAAKG,UAAWC,EAAAA,EAAOuC,oBAAoBT,SAAEnC,KAI/C0C,EAAAA,EAAAA,IAAA,OAAKtC,UAAWC,EAAAA,EAAOwC,4BAA4BV,SAAA,EACjDlC,EAAAA,EAAAA,GAAC6C,EAAAA,GAAQ,CAACC,SAAU,KAAKZ,UACvBlC,EAAAA,EAAAA,GAAA,OAAKG,UAAWC,EAAAA,EAAO2C,qBAAqBb,SACxB,cAAjBhE,EAAQW,MACPmB,EAAAA,EAAAA,GAACnC,EAAgB,CACfU,QAASQ,EACTZ,YAAaA,KAIf6B,EAAAA,EAAAA,GAACgD,EAAAA,EAAoB,CAAAd,SAClBnD,QAOS,cAAjBb,EAAQW,MAhIKoE,MACpB,IAAKrC,IAAsB1C,EAAQ2C,QAAS,OAAO,KAGnD,MAAMqC,EAAe/E,GACf,YACJgF,EAAW,WACXC,EAAU,gBACVC,EAAe,iBACfC,EAAgB,aAChBC,EAAY,iBACZC,EAAgB,YAChBC,EAAW,aACXC,GACExF,EAAQ2C,QAcZ,OAViB,MAAfsC,GACc,MAAdC,GACmB,MAAnBC,GACoB,MAApBC,GACgB,MAAhBC,GACoB,MAApBC,GACe,MAAfC,GACgB,MAAhBC,GAMAjB,EAAAA,EAAAA,IAAA,OAAKtC,UAAWC,EAAAA,EAAOuD,8BAA8BzB,SAAA,CAE9B,MAApBoB,GAAiD,IAArBA,IAC3Bb,EAAAA,EAAAA,IAAA,QAAMtC,UAAWC,EAAAA,EAAOwD,oBAAoB1B,SAAA,EAC1ClC,EAAAA,EAAAA,GAAC6D,EAAAA,GAAS,CAACtD,KAAM,GAAIJ,UAAWC,EAAAA,EAAO0D,0BAA2B,iBACpDC,EAAAA,EAAAA,GAAWT,MAGb,MAAfH,GAAuC,IAAhBA,IACtBV,EAAAA,EAAAA,IAAA,QAAMtC,UAAWC,EAAAA,EAAOwD,oBAAoB1B,SAAA,EAC1ClC,EAAAA,EAAAA,GAAC6D,EAAAA,GAAS,CAACtD,KAAM,GAAIJ,UAAWC,EAAAA,EAAO0D,0BAA2B,gBACrDC,EAAAA,EAAAA,GAAWZ,MAKb,MAAdC,GAAqC,IAAfA,IACrBX,EAAAA,EAAAA,IAAA,QAAMtC,UAAWC,EAAAA,EAAOwD,oBAAoB1B,SAAA,EAC1ClC,EAAAA,EAAAA,GAACM,EAAAA,IAAW,CAACC,KAAM,GAAIJ,UAAWC,EAAAA,EAAO0D,0BAA2B,WAC3DV,KAGI,MAAhBG,GAAyC,IAAjBA,IACvBd,EAAAA,EAAAA,IAAA,QAAMtC,UAAWC,EAAAA,EAAOwD,oBAAoB1B,SAAA,EAC1ClC,EAAAA,EAAAA,GAACM,EAAAA,IAAW,CAACC,KAAM,GAAIJ,UAAWC,EAAAA,EAAO0D,0BAA2B,WAC3DP,KAGQ,MAApBC,GAAiD,IAArBA,IAC3Bf,EAAAA,EAAAA,IAAA,QAAMtC,UAAWC,EAAAA,EAAOwD,oBAAoB1B,SAAA,EAC1ClC,EAAAA,EAAAA,GAACM,EAAAA,IAAW,CAACC,KAAM,GAAIJ,UAAWC,EAAAA,EAAO0D,0BAA2B,eACvDN,KAGD,MAAfC,GAAuC,IAAhBA,IACtBhB,EAAAA,EAAAA,IAAA,QAAMtC,UAAWC,EAAAA,EAAOwD,oBAAoB1B,SAAA,EAC1ClC,EAAAA,EAAAA,GAACM,EAAAA,IAAW,CAACC,KAAM,GAAIJ,UAAWC,EAAAA,EAAO0D,0BAA2B,UAC5DL,KAKQ,MAAnBJ,GAA+C,IAApBA,IAC1BZ,EAAAA,EAAAA,IAAA,QAAMtC,UAAWC,EAAAA,EAAOwD,oBAAoB1B,SAAA,EAC1ClC,EAAAA,EAAAA,GAACgE,EAAAA,IAAS,CAACzD,KAAM,GAAIJ,UAAWC,EAAAA,EAAO0D,0BAA2B,UAC1DT,EAAgB,UAKX,MAAhBK,GAAyC,KAAjBA,GAAsD,SAA/BA,EAAaO,eAA2D,YAA/BP,EAAaO,gBACpGxB,EAAAA,EAAAA,IAAA,QAAMtC,UAAWC,EAAAA,EAAOwD,oBAAoB1B,SAAA,EAC1ClC,EAAAA,EAAAA,GAACU,EAAAA,IAAS,CAACH,KAAM,GAAIJ,UAAWC,EAAAA,EAAO0D,0BACtCJ,KAGJR,IACCT,EAAAA,EAAAA,IAAA,QAAMtC,UAAW,GAAGC,EAAAA,EAAOwD,uBAAuBxD,EAAAA,EAAO8D,mCAAmChC,SAAA,EAC1FlC,EAAAA,EAAAA,GAAA,QAAMG,UAAWC,EAAAA,EAAO+D,6BAAmC,mBAM9DvC,KAnEwB,IAoErB,EAgC+BqB,GAGf,SAAjB/E,EAAQW,OAAqC,cAAjBX,EAAQW,OAAyB+B,IAAsBgB,QAItE,SAAjB1D,EAAQW,OACP4D,EAAAA,EAAAA,IAAA,OAAKtC,UAAWC,EAAAA,EAAOgE,qBAAqBlC,SAAA,CACzCI,EACAV,OAGD,EAKV5D,EAAYqG,YAAc,cAmC1B,SAAeC,EAAAA,EAAAA,IAAKtG,E,sHCxUpB,MAAMuG,EAAsB,IAAIC,IAG1BpC,EAAWA,KACfK,EAAAA,EAAAA,IAAA,OAAKgC,MAAM,6BAA6BC,QAAQ,YAAYC,MAAM,KAAKC,OAAO,KAAI1C,SAAA,EAChFlC,EAAAA,EAAAA,GAAA,QAAM6E,SAAS,UAAUC,EAAE,+MAC3B9E,EAAAA,EAAAA,GAAA,QAAM6E,SAAS,UAAUC,EAAE,uOAKzB3C,EAAYA,KAChBnC,EAAAA,EAAAA,GAAA,OAAKyE,MAAM,6BAA6BC,QAAQ,YAAYC,MAAM,KAAKC,OAAO,KAAI1C,UAChFlC,EAAAA,EAAAA,GAAA,QAAM6E,SAAS,UAAUC,EAAE,sIAQzBC,GAAoBjH,EAAAA,EAAAA,KAAKkH,UAC7B,MAAOC,EAAOC,EAAQC,EAAUC,EAASC,SAAmBC,QAAQC,IAAI,CACtE,27BACA,+fACA,yMACA,kMACA,8ZACA,mFAEF,MAAO,CACLC,QAASvH,IAAA,IAAC,SAAEiE,EAAQ,WAAEuD,GAAYxH,EAAA,OAChC+B,EAAAA,EAAAA,GAACiF,EAAMO,QAAO,CACZE,cAAe,CACbR,EAAOM,SAAWN,EAClBC,EAASK,SAAWL,EACpBC,EAAQI,SAAWJ,GAErBO,cAAe,CAACN,EAAUG,SAAWH,GACrCI,WAAYA,EAAWvD,SAEtBA,GACa,EAEnB,IAImB,oBAAX0D,SACYA,OAAOC,qBAAmB,CAAKC,GAAMnE,WAAWmE,EAAI,QAC5D,KACX,gDACA,uCACA,27BACA,+fACA,yMACA,kMACA,8ZACA,gFAAkC,IAOtC,MA8HA,EA9HyBC,IAA+B,IAA9B,QAAExH,EAAO,YAAEJ,GAAa4H,EAChD,MAAM,OAAEC,IAAWC,EAAAA,EAAAA,MACZC,EAAeC,IAAoBzH,EAAAA,EAAAA,IAAS,CAAC,IAE7C0H,EAAaC,IAAkB3H,EAAAA,EAAAA,IAAS,OAC/CO,EAAAA,EAAAA,KAAU,KACR,WACE,IACE,GAAI+G,EAAQ,CACV,MAAMM,QAAiB,gDACvBD,EAAeC,EAASd,QAC1B,KAAO,CACL,MAAMe,QAAmB,uCACzBF,EAAeE,EAAWf,QAC5B,CACF,CAAE,MAAO/F,GAET,CACD,EAZD,EAYI,GACH,CAACuG,IAGJ,MAAMQ,GAAiBzF,EAAAA,EAAAA,KAAY,CAAC0F,EAAMC,KACxCnF,UAAUC,UAAUC,UAAUgF,GAAM/E,MAAK,KACvCyE,GAAiBQ,IAAI,IAAUA,EAAM,CAACD,IAAQ,MAC9C/E,YAAW,KACTwE,GAAiBQ,IAAI,IAAUA,EAAM,CAACD,IAAQ,KAAS,GACtD,IAAK,GACR,GACD,IAGGE,GAAY7F,EAAAA,EAAAA,KAAY8F,IAAsD,IAADC,EAAAC,EAAAC,EAAA,IAApD,KAAEC,EAAI,OAAEC,EAAM,UAAE/G,EAAS,SAAE+B,KAAaiF,GAAON,EAE5E,MAAMO,EAAQ,iBAAiBC,KAAKlH,GAAa,IAC3CmH,EAAWF,EAAQA,EAAM,GAAK,YAEhCE,IAAa/C,EAAoBgD,IAAID,IACvC,SAEE,KAAqDA,QAEpD5F,MAAK8F,IACJC,EAAAA,EAAkBC,iBAAiBJ,EAAUE,EAAIhC,SAAWgC,GAC5DjD,EAAoBoD,IAAIL,EAAS,IAElCM,OAAMC,QAIX,MAAMC,EAAcC,OAAO7F,GAAU8F,QAAQ,MAAO,IAG9CC,EAA4C,QAAhCnB,EAAGG,SAAc,QAAVF,EAAJE,EAAMiB,gBAAQ,IAAAnB,GAAO,QAAPC,EAAdD,EAAgBoB,aAAK,IAAAnB,OAAjB,EAAJA,EAAuBoB,cAAM,IAAAtB,EAAAA,EAAIgB,EAAYO,UAAU,EAAG,IACzEC,EAAWpC,EAAc+B,GAE/B,OAAQf,GAoCNlH,EAAAA,EAAAA,GAAA,QAAMG,UAAW,GAAGC,EAAAA,EAAOmI,cAAcpI,GAAa,QAAUgH,EAAKjF,SAClEA,KApCHO,EAAAA,EAAAA,IAAA,OAAKtC,UAAWC,EAAAA,EAAOoI,mBAAmBtG,SAAA,EACxCO,EAAAA,EAAAA,IAAA,OAAKtC,UAAWC,EAAAA,EAAOqI,WAAWvG,SAAA,EAChClC,EAAAA,EAAAA,GAAA,QAAMG,UAAWC,EAAAA,EAAOkH,SAASpF,SAAEoF,KACnCtH,EAAAA,EAAAA,GAAA,UACEG,UAAWC,EAAAA,EAAOsI,WAClB1G,QAASA,IAAMwE,EAAesB,EAAaG,GAC3CU,SAAUL,EAASpG,SAElBoG,GACC7F,EAAAA,EAAAA,IAAAmG,EAAAA,GAAA,CAAA1G,SAAA,CAAE,KAAClC,EAAAA,EAAAA,GAACmC,EAAS,IAAG,gBAEhBM,EAAAA,EAAAA,IAAAmG,EAAAA,GAAA,CAAA1G,SAAA,CAAE,KAAClC,EAAAA,EAAAA,GAACoC,EAAQ,IAAG,kBAIrBpC,EAAAA,EAAAA,GAAC6C,EAAAA,GAAQ,CAACC,UAAU9C,EAAAA,EAAAA,GAAA,OAAKG,UAAWC,EAAAA,EAAOyI,IAAI3G,SAAE4F,IAAmB5F,SACjEkE,GACCpG,EAAAA,EAAAA,GAACyH,EAAAA,EAAiB,CAChBqB,MAAO1C,EACP2C,YAAa,CAAEC,WAAY,eAC3B1B,SAAUA,EACV2B,OAAO,MACP9I,UAAWC,EAAAA,EAAOyI,IAClBK,WAAW,KACP/B,EAAKjF,SAER4F,KAGH9H,EAAAA,EAAAA,GAAA,OAAKG,UAAWC,EAAAA,EAAOyI,IAAI3G,SAAE4F,QASpC,GACA,CAAC1B,EAAaI,EAAgBN,IAG3BiD,GAAqBvK,EAAAA,EAAAA,KAAQ,MACjC6H,KAAMG,KACJ,CAACA,IAGCwC,EAAoB,GAAGhJ,EAAAA,EAAOiJ,YAAYjJ,EAAAA,EAAOkJ,iCAAiCnL,EAAciC,EAAAA,EAAO,4CAA8C,KAGrJmJ,EAAmC,iBAAZhL,EAAuBA,EAAUwJ,OAAOxJ,GAAW,IAC1EiL,EAAmBD,GAA2BzK,EAAAA,EAAAA,IAAwByK,GAAnC,IAEzC,OACEvJ,EAAAA,EAAAA,GAAA,OAAKG,UAAWiJ,EAAkBlH,UAChClC,EAAAA,EAAAA,GAAC6C,EAAAA,GAAQ,CAACC,UAAU9C,EAAAA,EAAAA,GAAA,OAAAkC,SAAMsH,IAAuBtH,UAC/ClC,EAAAA,EAAAA,GAAC+E,EAAiB,CAACU,WAAY0D,EAAmBjH,SAC/CsH,OAGD,C","sources":["components/chat/ChatMessage/index.js","components/chat/ChatMessage/StreamingMessage.js"],"sourcesContent":["// eslint-disable import/first\nimport React, { memo, useMemo, useState, useEffect, useCallback, lazy, Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { CopilotIcon, GearIcon, AlertIcon, CheckIcon, CopyIcon, ClockIcon, PulseIcon, PencilIcon } from '@primer/octicons-react';\nimport styles from './ChatMessage.module.css';\nimport { formatTime } from '../../../utils/messageHelpers';\nimport { convertTeXToMathDollars } from '../../../utils/formatters';\n// Lazy-load Markdown renderer for user/system/error messages\nimport LazyMarkdownRenderer from '../../common/LazyMarkdownRenderer';\n// Dynamically load StreamingMessage to defer heavy modules\nconst StreamingMessage = lazy(() => import(/* webpackChunkName: \"streaming-message\", webpackPrefetch: true */ './StreamingMessage'));\n\n// Add a module-level singleton for the TeX worker so we only load the worker script once\nlet texWorker;\nconst getTexWorker = () => {\n  if (typeof Worker !== 'undefined' && !texWorker) {\n    texWorker = new Worker(new URL('../../../workers/texProcessor.js', import.meta.url), { type: 'module' });\n  }\n  return texWorker;\n};\n\n/**\n * ChatMessage component with optimized rendering for streaming content\n * @param {Object} props - Component props\n * @param {string} props.role - Message role (user, assistant, system, error)\n * @param {string} props.content - Message content\n * @param {number} props.index - Message index in the chat history\n * @param {boolean} props.isStreaming - Whether this message is currently streaming\n * @param {string} props.avatarUrl - Optional URL for user avatar image\n * @returns {JSX.Element} - Rendered component\n */\nconst ChatMessage = ({ message, isStreaming = false, onEditMessage = null, overrideContent = null, avatarUrl = null }) => {\n  // Use overrideContent if provided, else fall back to message.content\n  const content = overrideContent != null ? overrideContent : message.content;\n\n  const [messageCopied, setMessageCopied] = useState(false);\n  const defaultProcessedMessage = useMemo(() => (\n    message.role === 'assistant'\n      ? content\n      : convertTeXToMathDollars(content)\n  ), [content, message.role]);\n  const [processedMessage, setProcessedMessage] = useState(defaultProcessedMessage);\n\n  // Update processedMessage whenever the underlying content changes (e.g., after editing)\n  useEffect(() => {\n    setProcessedMessage(defaultProcessedMessage);\n  }, [defaultProcessedMessage]);\n\n  useEffect(() => {\n    if (message.role !== 'assistant' || typeof content !== 'string' || typeof Worker === 'undefined') {\n      return;\n    }\n    const id = message.timestamp;\n    const worker = getTexWorker();\n    const handleMessage = (e) => {\n      if (e.data.id !== id) return;\n      if (e.data.success) setProcessedMessage(e.data.data);\n      else setProcessedMessage(content);\n    };\n    worker.addEventListener('message', handleMessage);\n    worker.postMessage({ id, content });\n    return () => {\n      worker.removeEventListener('message', handleMessage);\n    };\n  }, [content, message.role, message.timestamp]);\n  \n  // Choose appropriate icon based on message role\n  const icon = useMemo(() => {\n    switch (message.role) {\n      case 'user':\n        return avatarUrl\n          ? <img src={avatarUrl} alt=\"User avatar\" className={styles.ChatMessage__avatarImg} />\n          : null;\n      case 'assistant':\n        return <CopilotIcon size={16} className={styles.ChatMessage__icon} />;\n      case 'system':\n        return <GearIcon size={16} className={styles.ChatMessage__icon} />;\n      case 'error':\n        return <AlertIcon size={16} className={styles.ChatMessage__icon} />;\n      default:\n        return null;\n    }\n  }, [message.role, avatarUrl]);\n  \n  // Select CSS classes based on message role\n  const messageClass = useMemo(() => {\n    switch (message.role) {\n      case 'user':\n        return styles['ChatMessage--user'];\n      case 'assistant':\n        return styles['ChatMessage--assistant'];\n      case 'system':\n        return styles['ChatMessage--system'];\n      case 'error':\n        return styles['ChatMessage--error'];\n      default:\n        return '';\n    }\n  }, [message.role]);\n  \n  // Determine if we should show metrics (only for assistant messages)\n  const shouldShowMetrics = useMemo(() => {\n    // Show metrics if this is an assistant message with any metrics\n    if (message.role !== 'assistant' || !message.metrics) return false;\n    return true;\n  }, [message.role, message.metrics]);\n  \n  // Copy message content to clipboard\n  const handleCopyMessage = useCallback(() => {\n    const content = typeof message.content === 'string' \n      ? message.content \n      : Array.isArray(message.content) \n        ? message.content\n            .filter(part => part.type === 'text')\n            .map(part => part.text)\n            .join('\\n')\n        : '';\n    navigator.clipboard.writeText(content).then(() => {\n      setMessageCopied(true);\n      setTimeout(() => setMessageCopied(false), 2000);\n    });\n  }, [message.content]);\n  \n  // === BUTTON JSX (Moved here for reuse) ===\n  const copyButtonJsx = useMemo(() => (\n    <button\n      className={`${styles.ChatMessage__copyMessageButton} ${\n        (message.role === 'assistant' && shouldShowMetrics) ? styles.ChatMessage__copyMessageButtonInMetrics : styles.ChatMessage__copyMessageButtonBottomRight\n      }`}\n      onClick={handleCopyMessage}\n      aria-label=\"Copy message\"\n      title=\"Copy message\"\n    >\n      {messageCopied ? <CheckIcon size={16} /> : <CopyIcon size={16} />}\n    </button>\n  ), [handleCopyMessage, message.role, shouldShowMetrics, messageCopied]);\n\n  // Edit button only for user messages\n  const handleEditClick = useCallback(() => {\n    if (onEditMessage) onEditMessage(message);\n  }, [onEditMessage, message]);\n  const editButtonJsx = useMemo(() => message.role === 'user' ? (\n    <button\n      className={styles.ChatMessage__editMessageButton}\n      onClick={handleEditClick}\n      aria-label=\"Edit message\"\n      title=\"Edit message\"\n    >\n      <PencilIcon size={16} />\n    </button>\n  ) : null, [message.role, handleEditClick]);\n  // ==========================================\n  \n  // Render performance metrics (only for assistant messages)\n  const renderMetrics = () => {\n    if (!shouldShowMetrics || !message.metrics) return null;\n    \n    // Use the specific isStreaming prop passed down to determine if THIS message is generating\n    const isGenerating = isStreaming;\n    const { \n      elapsedTime, \n      tokenCount, \n      tokensPerSecond, \n      timeToFirstToken, \n      promptTokens, \n      completionTokens, \n      totalTokens,\n      finishReason \n    } = message.metrics;\n    \n    // Check if we have any valid metrics to show\n    const hasValidMetrics = \n      elapsedTime != null || \n      tokenCount != null || \n      tokensPerSecond != null || \n      timeToFirstToken != null ||\n      promptTokens != null ||\n      completionTokens != null ||\n      totalTokens != null ||\n      finishReason != null;\n      \n    // Don't render anything if no valid metrics are found\n    if (!hasValidMetrics) return null;\n    \n    return (\n      <div className={styles.ChatMessage__metricsContainer}>\n        {/* Time metrics */}\n        {timeToFirstToken != null && timeToFirstToken !== 0 && (\n          <span className={styles.ChatMessage__metric}>\n            <ClockIcon size={14} className={styles.ChatMessage__metricIcon} />\n            First Token: {formatTime(timeToFirstToken)}\n          </span>\n        )}\n        {elapsedTime != null && elapsedTime !== 0 && (\n          <span className={styles.ChatMessage__metric}>\n            <ClockIcon size={14} className={styles.ChatMessage__metricIcon} />\n            Total Time: {formatTime(elapsedTime)}\n          </span>\n        )}\n        \n        {/* Token metrics */}\n        {tokenCount != null && tokenCount !== 0 && (\n          <span className={styles.ChatMessage__metric}>\n            <CopilotIcon size={14} className={styles.ChatMessage__metricIcon} />\n            Tokens: {tokenCount}\n          </span>\n        )}\n        {promptTokens != null && promptTokens !== 0 && (\n          <span className={styles.ChatMessage__metric}>\n            <CopilotIcon size={14} className={styles.ChatMessage__metricIcon} />\n            Prompt: {promptTokens}\n          </span>\n        )}\n        {completionTokens != null && completionTokens !== 0 && (\n          <span className={styles.ChatMessage__metric}>\n            <CopilotIcon size={14} className={styles.ChatMessage__metricIcon} />\n            Completion: {completionTokens}\n          </span>\n        )}\n        {totalTokens != null && totalTokens !== 0 && (\n          <span className={styles.ChatMessage__metric}>\n            <CopilotIcon size={14} className={styles.ChatMessage__metricIcon} />\n            Total: {totalTokens}\n          </span>\n        )}\n        \n        {/* Speed metrics */}\n        {tokensPerSecond != null && tokensPerSecond !== 0 && (\n          <span className={styles.ChatMessage__metric}>\n            <PulseIcon size={14} className={styles.ChatMessage__metricIcon} />\n            Speed: {tokensPerSecond} t/s\n          </span>\n        )}\n        \n        {/* Status (only show if meaningful) */}\n        {finishReason != null && finishReason !== '' && finishReason.toLowerCase() !== 'stop' && finishReason.toLowerCase() !== 'unknown' && (\n          <span className={styles.ChatMessage__metric}>\n            <AlertIcon size={14} className={styles.ChatMessage__metricIcon} />\n            {finishReason}\n          </span>\n        )}\n        {isGenerating && (\n          <span className={`${styles.ChatMessage__metric} ${styles.ChatMessage__generatingIndicator}`}>\n            <span className={styles.ChatMessage__generatingDot}></span>\n            Generating...\n          </span>\n        )}\n        \n        {/* Copy button */}\n        {copyButtonJsx}\n      </div>\n    );\n  };\n  \n  // Main return\n  return (\n    <div className={styles.ChatMessage + ' ' + messageClass}>\n      <div className={styles.ChatMessage__body}>\n        {/* Avatar (only render if icon exists) */}\n        {icon && (\n          <div className={styles.ChatMessage__avatar}>{icon}</div>\n        )}\n\n        {/* Message content section */}\n        <div className={styles.ChatMessage__contentWrapper}>\n          <Suspense fallback={null}>\n            <div className={styles.ChatMessage__content}>\n              {message.role === 'assistant' ? (\n                <StreamingMessage\n                  content={processedMessage}\n                  isStreaming={isStreaming}\n                />\n              ) : (\n                // Render markdown lazily for user/system/error messages\n                <LazyMarkdownRenderer>\n                  {processedMessage}\n                </LazyMarkdownRenderer>\n              )}\n            </div>\n          </Suspense>\n\n          {/* Render performance metrics for assistant messages */}\n          {message.role === 'assistant' && renderMetrics()}\n\n          {/* Copy button for non-user messages, hide when assistant metrics exist */}\n          {message.role !== 'user' && (message.role !== 'assistant' || !shouldShowMetrics) && copyButtonJsx}\n        </div>\n      </div>\n\n      {message.role === 'user' && (\n        <div className={styles.ChatMessage__actions}>\n          {editButtonJsx}\n          {copyButtonJsx}\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Display name\nChatMessage.displayName = 'ChatMessage';\n\n// PropTypes\nChatMessage.propTypes = {\n  message: PropTypes.shape({\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n    role: PropTypes.oneOf(['user', 'assistant', 'system', 'error']).isRequired,\n    content: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.arrayOf(PropTypes.shape({ // Support complex content\n        type: PropTypes.string.isRequired,\n        text: PropTypes.string,\n        image_url: PropTypes.shape({\n          url: PropTypes.string.isRequired\n        })\n      }))\n    ]).isRequired,\n    timestamp: PropTypes.number.isRequired,\n    metrics: PropTypes.shape({\n      elapsedTime: PropTypes.number,\n      tokenCount: PropTypes.number,\n      tokensPerSecond: PropTypes.number,\n      timeToFirstToken: PropTypes.number,\n      promptTokens: PropTypes.number,\n      completionTokens: PropTypes.number,\n      totalTokens: PropTypes.number,\n      finishReason: PropTypes.string\n    })\n  }).isRequired,\n  isStreaming: PropTypes.bool,\n  onEditMessage: PropTypes.func,\n  overrideContent: PropTypes.string, // Optional override for rendering previews\n  avatarUrl: PropTypes.string, // Optional URL for user avatar image\n};\n\nexport default memo(ChatMessage); ","import React, { useState, useCallback, useMemo, lazy, Suspense, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ChatMessage.module.css';\nimport { useTheme } from '../../../contexts/ThemeContext';\nimport { convertTeXToMathDollars } from '../../../utils/formatters';\n\n// Track registered Prism languages for on-demand lazy loading (all languages supported)\nconst registeredLanguages = new Set();\n\n// Copy Icon SVG (simple inline version)\nconst CopyIcon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"14\" height=\"14\">\n    <path fillRule=\"evenodd\" d=\"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z\"></path>\n    <path fillRule=\"evenodd\" d=\"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25h-7.5z\"></path>\n  </svg>\n);\n\n// Check Icon SVG (simple inline version)\nconst CheckIcon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"14\" height=\"14\">\n    <path fillRule=\"evenodd\" d=\"M13.78 4.22a.75.75 0 010 1.06l-7.25 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a.75.75 0 011.06 0z\"></path>\n  </svg>\n);\n\n// Import PrismLight and registerLanguage function\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\n\n// Dynamically load ReactMarkdown and its plugins for streaming\nconst StreamingMarkdown = lazy(async () => {\n  const [rmMod, gfmMod, emojiMod, mathMod, rehypeMod] = await Promise.all([\n    import('react-markdown'),\n    import('remark-gfm'),\n    import('remark-emoji'),\n    import('remark-math'),\n    import('rehype-katex'),\n    import('katex/dist/katex.min.css'),\n  ]);\n  return {\n    default: ({ children, components }) => (\n      <rmMod.default\n        remarkPlugins={[\n          gfmMod.default || gfmMod,\n          emojiMod.default || emojiMod,\n          mathMod.default || mathMod\n        ]}\n        rehypePlugins={[rehypeMod.default || rehypeMod]}\n        components={components}\n      >\n        {children}\n      </rmMod.default>\n    ),\n  };\n});\n\n// Preload theme and markdown modules during idle time if not yet loaded\nif (typeof window !== 'undefined') {\n  const idleCallback = window.requestIdleCallback || (cb => setTimeout(cb, 2000));\n  idleCallback(() => {\n    import('react-syntax-highlighter/dist/esm/styles/prism/atom-dark');\n    import('react-syntax-highlighter/dist/esm/styles/prism/prism');\n    import('react-markdown');\n    import('remark-gfm');\n    import('remark-emoji');\n    import('remark-math');\n    import('rehype-katex');\n    import('katex/dist/katex.min.css');\n  });\n}\n\n/**\n * StreamingMessage component using react-markdown for rendering the entire content.\n */\nconst StreamingMessage = ({ content, isStreaming }) => {\n  const { isDark } = useTheme();\n  const [copiedCodeMap, setCopiedCodeMap] = useState({}); // Use a map for multiple blocks\n  // Dynamically load theme style based on current theme\n  const [syntaxTheme, setSyntaxTheme] = useState(null);\n  useEffect(() => {\n    (async () => {\n      try {\n        if (isDark) {\n          const atomDark = await import('react-syntax-highlighter/dist/esm/styles/prism/atom-dark');\n          setSyntaxTheme(atomDark.default);\n        } else {\n          const prismTheme = await import('react-syntax-highlighter/dist/esm/styles/prism/prism');\n          setSyntaxTheme(prismTheme.default);\n        }\n      } catch (e) {\n        console.warn('Failed to load syntax theme', e);\n      }\n    })();\n  }, [isDark]);\n\n  // Handle copy code to clipboard, using index as key\n  const handleCopyCode = useCallback((code, index) => {\n    navigator.clipboard.writeText(code).then(() => {\n      setCopiedCodeMap(prev => ({ ...prev, [index]: true }));\n      setTimeout(() => {\n        setCopiedCodeMap(prev => ({ ...prev, [index]: false }));\n      }, 2000);\n    });\n  }, []);\n\n  // Custom component for rendering code blocks\n  const CodeBlock = useCallback(({ node, inline, className, children, ...props }) => {\n    // Only treat content wrapped in triple backticks as code blocks (ignore indents)\n    const match = /language-(\\w+)/.exec(className || '');\n    const language = match ? match[1] : 'plaintext'; // Default to plaintext if no language class\n    // Lazy-load Prism language definition on demand\n    if (language && !registeredLanguages.has(language)) {\n      import(\n        /* webpackChunkName: \"prism-language-[request]\" */\n        `react-syntax-highlighter/dist/esm/languages/prism/${language}.js`\n      )\n        .then(mod => {\n          SyntaxHighlighter.registerLanguage(language, mod.default || mod);\n          registeredLanguages.add(language);\n        })\n        .catch(err => {\n          console.warn(`Unable to load syntax highlighter language: ${language}`, err);\n        });\n    }\n    const codeContent = String(children).replace(/\\n$/, ''); // Get code content\n\n    // Use index from node's position if available, fallback to content hash or similar\n    const codeBlockKey = node?.position?.start?.offset ?? codeContent.substring(0, 20); // Example key\n    const isCopied = copiedCodeMap[codeBlockKey];\n\n    return !inline ? (\n      <div className={styles.codeBlockContainer}>\n        <div className={styles.codeHeader}>\n          <span className={styles.language}>{language}</span>\n          <button\n            className={styles.copyButton}\n            onClick={() => handleCopyCode(codeContent, codeBlockKey)}\n            disabled={isCopied}\n          >\n            {isCopied ? (\n              <> <CheckIcon /> Copied! </>\n            ) : (\n              <> <CopyIcon /> Copy </>\n            )}\n          </button>\n        </div>\n        <Suspense fallback={<pre className={styles.pre}>{codeContent}</pre>}>\n          {syntaxTheme ? (\n            <SyntaxHighlighter\n              style={syntaxTheme}\n              customStyle={{ background: 'transparent' }}\n              language={language}\n              PreTag=\"div\" // Use div instead of pre, SyntaxHighlighter wraps in its own pre\n              className={styles.pre}\n              wrapLines={true} // Consider wrapping lines based on preference\n              {...props}\n            >\n              {codeContent}\n            </SyntaxHighlighter>\n          ) : (\n            <pre className={styles.pre}>{codeContent}</pre>\n          )}\n        </Suspense>\n      </div>\n    ) : (\n      // Render inline code with specific styling\n      <code className={`${styles.inlineCode} ${className || ''}`} {...props}>\n        {children}\n      </code>\n    );\n  }, [syntaxTheme, handleCopyCode, copiedCodeMap]);\n\n  // Define components for ReactMarkdown\n  const markdownComponents = useMemo(() => ({\n    code: CodeBlock,\n  }), [CodeBlock]); // CodeBlock is the dependency\n\n  // Apply streaming class based on the passed-in prop\n  const markdownClassName = `${styles.markdown} ${styles.ChatMessage__streamingContent} ${isStreaming ? styles['ChatMessage__streamingContent--streaming'] : ''}`;\n\n  // Use a zero-width space for this purpose.\n  const actualContent = typeof content === 'string' ? content : String(content || '');\n  const contentToRender = !actualContent ? '\\u200B' : convertTeXToMathDollars(actualContent);\n\n  return (\n    <div className={markdownClassName}>\n      <Suspense fallback={<div>{contentToRender}</div>}>\n        <StreamingMarkdown components={markdownComponents}>\n          {contentToRender}\n        </StreamingMarkdown>\n      </Suspense>\n    </div>\n  );\n};\n\nStreamingMessage.propTypes = {\n  content: PropTypes.string,\n  isStreaming: PropTypes.bool // Add prop type for isStreaming\n};\n\nexport default StreamingMessage;\n"],"names":["StreamingMessage","lazy","texWorker","ChatMessage","_ref","message","isStreaming","onEditMessage","overrideContent","avatarUrl","content","messageCopied","setMessageCopied","useState","defaultProcessedMessage","useMemo","role","convertTeXToMathDollars","processedMessage","setProcessedMessage","useEffect","Worker","id","timestamp","worker","URL","type","handleMessage","e","data","success","addEventListener","postMessage","removeEventListener","icon","_jsx","src","alt","className","styles","ChatMessage__avatarImg","CopilotIcon","size","ChatMessage__icon","GearIcon","AlertIcon","messageClass","shouldShowMetrics","metrics","handleCopyMessage","useCallback","Array","isArray","filter","part","map","text","join","navigator","clipboard","writeText","then","setTimeout","copyButtonJsx","ChatMessage__copyMessageButton","ChatMessage__copyMessageButtonInMetrics","ChatMessage__copyMessageButtonBottomRight","onClick","title","children","CheckIcon","CopyIcon","handleEditClick","editButtonJsx","ChatMessage__editMessageButton","PencilIcon","_jsxs","ChatMessage__body","ChatMessage__avatar","ChatMessage__contentWrapper","Suspense","fallback","ChatMessage__content","LazyMarkdownRenderer","renderMetrics","isGenerating","elapsedTime","tokenCount","tokensPerSecond","timeToFirstToken","promptTokens","completionTokens","totalTokens","finishReason","ChatMessage__metricsContainer","ChatMessage__metric","ClockIcon","ChatMessage__metricIcon","formatTime","PulseIcon","toLowerCase","ChatMessage__generatingIndicator","ChatMessage__generatingDot","ChatMessage__actions","displayName","memo","registeredLanguages","Set","xmlns","viewBox","width","height","fillRule","d","StreamingMarkdown","async","rmMod","gfmMod","emojiMod","mathMod","rehypeMod","Promise","all","default","components","remarkPlugins","rehypePlugins","window","requestIdleCallback","cb","_ref2","isDark","useTheme","copiedCodeMap","setCopiedCodeMap","syntaxTheme","setSyntaxTheme","atomDark","prismTheme","handleCopyCode","code","index","prev","CodeBlock","_ref3","_node$position$start$","_node$position","_node$position$start","node","inline","props","match","exec","language","has","mod","SyntaxHighlighter","registerLanguage","add","catch","err","codeContent","String","replace","codeBlockKey","position","start","offset","substring","isCopied","inlineCode","codeBlockContainer","codeHeader","copyButton","disabled","_Fragment","pre","style","customStyle","background","PreTag","wrapLines","markdownComponents","markdownClassName","markdown","ChatMessage__streamingContent","actualContent","contentToRender"],"sourceRoot":""}