{"version":3,"file":"static/js/vendors-node_modules_mdast-util-to-markdown_lib_handle_inline-code_js-node_modules_mdast-util-b824d0.d10c905dd6.chunk.v1_9_0.js","mappings":"wPA0BO,SAASA,EAAYC,GAC1B,OAAIA,EAAKC,QAAUD,EAAKE,WACfF,EAAKC,OAAS,IAGhBE,EAAAA,EAAAA,GAAaH,EAAKE,WAC3B,C,iDChBO,SAASE,EAAWJ,EAAMK,EAAGC,GAClC,IAAIC,EAAQP,EAAKO,OAAS,GACtBC,EAAW,IACXC,GAAS,EAKb,KAAO,IAAIC,OAAO,WAAaF,EAAW,YAAYG,KAAKJ,IACzDC,GAAY,IAmBd,IAbE,WAAWG,KAAKJ,KACd,WAAWI,KAAKJ,IAAU,WAAWI,KAAKJ,IAAW,QAAQI,KAAKJ,MAEpEA,EAAQ,IAAMA,EAAQ,OAUfE,EAAQH,EAAMM,OAAOC,QAAQ,CACpC,MAAMC,EAAUR,EAAMM,OAAOH,GACvBM,GAAaC,EAAAA,EAAAA,GAAeF,GAElC,IAAIG,EAKJ,GAAKH,EAAQI,QAEb,KAAQD,EAAQF,EAAWI,KAAKZ,IAAS,CACvC,IAAIa,EAAWH,EAAMR,MAIY,KAA/BF,EAAMc,WAAWD,IACkB,KAAnCb,EAAMc,WAAWD,EAAW,IAE5BA,IAGFb,EAAQA,EAAMe,MAAM,EAAGF,GAAY,IAAMb,EAAMe,MAAML,EAAMR,MAAQ,EACrE,CACF,CAEA,OAAOD,EAAWD,EAAQC,CAC5B,CA/DAJ,EAAWmB,KAoEX,WACE,MAAO,GACT,C,iDCpEO,SAASC,EAAeC,EAAOX,GACpC,OACEY,EAAYD,EAAOX,EAAQa,aAAa,KACvCD,EAAYD,EAAOX,EAAQc,gBAAgB,EAEhD,CAQA,SAASF,EAAYD,EAAOI,EAAMC,GAKhC,GAJoB,iBAATD,IACTA,EAAO,CAACA,KAGLA,GAAwB,IAAhBA,EAAKhB,OAChB,OAAOiB,EAGT,IAAIrB,GAAS,EAEb,OAASA,EAAQoB,EAAKhB,QACpB,GAAIY,EAAMM,SAASF,EAAKpB,IACtB,OAAO,EAIX,OAAO,CACT,CCRO,SAASuB,EAAK1B,EAAO2B,EAAOC,GACjC,MAAM3B,GAAS2B,EAAOC,QAAU,KAAOF,GAAS,KAAOC,EAAOE,OAAS,IAEjEC,EAAY,GAEZC,EAAS,GAETC,EAAQ,CAAC,EACf,IAAI9B,GAAS,EAEb,OAASA,EAAQH,EAAMM,OAAOC,QAAQ,CACpC,MAAMC,EAAUR,EAAMM,OAAOH,GAE7B,IAAKe,EAAelB,EAAMmB,MAAOX,GAC/B,SAGF,MAAMC,GAAaC,EAAAA,EAAAA,GAAeF,GAElC,IAAIG,EAEJ,KAAQA,EAAQF,EAAWI,KAAKZ,IAAS,CACvC,MAAM4B,EAAS,WAAYrB,GAAW0B,QAAQ1B,EAAQI,SAChDkB,EAAQ,UAAWtB,EACnBM,EAAWH,EAAMR,OAAS0B,EAASlB,EAAM,GAAGJ,OAAS,GAEvDwB,EAAUN,SAASX,IACjBmB,EAAMnB,GAAUe,SAAWA,IAC7BI,EAAMnB,GAAUe,QAAS,GAGvBI,EAAMnB,GAAUgB,QAAUA,IAC5BG,EAAMnB,GAAUgB,OAAQ,KAG1BC,EAAUI,KAAKrB,GACfmB,EAAMnB,GAAY,CAACe,SAAQC,SAE/B,CACF,CAEAC,EAAUK,KAAKC,GAEf,IAAIC,EAAQV,EAAOC,OAASD,EAAOC,OAAOtB,OAAS,EACnD,MAAMgC,EAAMtC,EAAMM,QAAUqB,EAAOE,MAAQF,EAAOE,MAAMvB,OAAS,GAGjE,IAFAJ,GAAS,IAEAA,EAAQ4B,EAAUxB,QAAQ,CACjC,MAAMO,EAAWiB,EAAU5B,GAGvBW,EAAWwB,GAASxB,GAAYyB,IAQjCzB,EAAW,EAAIyB,GACdR,EAAU5B,EAAQ,KAAOW,EAAW,GACpCmB,EAAMnB,GAAUgB,QACfG,EAAMnB,EAAW,GAAGe,SACpBI,EAAMnB,EAAW,GAAGgB,OACtBC,EAAU5B,EAAQ,KAAOW,EAAW,GACnCmB,EAAMnB,GAAUe,SACfI,EAAMnB,EAAW,GAAGe,SACpBI,EAAMnB,EAAW,GAAGgB,QAKrBQ,IAAUxB,GAIZkB,EAAOG,KAAKK,EAAkBvC,EAAMe,MAAMsB,EAAOxB,GAAW,OAG9DwB,EAAQxB,GAGN,iBAAiBT,KAAKJ,EAAMwC,OAAO3B,KACjCc,EAAOc,QAAWd,EAAOc,OAAOjB,SAASxB,EAAMwC,OAAO3B,KAMxDkB,EAAOG,KACL,MAAQlC,EAAMc,WAAWD,GAAU6B,SAAS,IAAIC,cAAgB,KAElEN,KANAN,EAAOG,KAAK,OAQhB,CAIA,OAFAH,EAAOG,KAAKK,EAAkBvC,EAAMe,MAAMsB,EAAOC,GAAMX,EAAOE,QAEvDE,EAAOa,KAAK,GACrB,CAOA,SAASR,EAAUS,EAAGC,GACpB,OAAOD,EAAIC,CACb,CAOA,SAASP,EAAkBvC,EAAO6B,GAChC,MAAMrB,EAAa,wBAEbsB,EAAY,GAEZiB,EAAU,GACVC,EAAQhD,EAAQ6B,EACtB,IAGInB,EAHAR,GAAS,EACTmC,EAAQ,EAIZ,KAAQ3B,EAAQF,EAAWI,KAAKoC,IAC9BlB,EAAUI,KAAKxB,EAAMR,OAGvB,OAASA,EAAQ4B,EAAUxB,QACrB+B,IAAUP,EAAU5B,IACtB6C,EAAQb,KAAKlC,EAAMe,MAAMsB,EAAOP,EAAU5B,KAG5C6C,EAAQb,KAAK,MACbG,EAAQP,EAAU5B,GAKpB,OAFA6C,EAAQb,KAAKlC,EAAMe,MAAMsB,IAElBU,EAAQH,KAAK,GACtB,C,kBCxKO,SAASnC,EAAeF,GAC7B,IAAKA,EAAQ0C,UAAW,CACtB,MAAMrB,GACHrB,EAAQI,QAAU,kBAAoB,KACtCJ,EAAQqB,OAAS,MAAQrB,EAAQqB,OAAS,IAAM,IAEnDrB,EAAQ0C,UAAY,IAAI9C,QACrByB,EAAS,IAAMA,EAAS,IAAM,KAC5B,sBAAsBxB,KAAKG,EAAQ2C,WAAa,KAAO,IACxD3C,EAAQ2C,WACP3C,EAAQsB,MAAQ,MAAQtB,EAAQsB,MAAQ,IAAM,IACjD,IAEJ,CAEA,OAAOtB,EAAQ0C,SACjB,C,kCCZO,SAASE,EAAMxB,GAIpB,MAAMyB,EAAUzB,GAAU,CAAC,EACrB0B,EAAMD,EAAQC,KAAO,CAAC,EAC5B,IAAIC,EAAYF,EAAQE,WAAa,EACjCC,EAAOF,EAAIE,MAAQ,EACnBC,EAASH,EAAIG,QAAU,EAE3B,MAAO,CAACC,KAyBR,SAAc/B,GAEZ,MAAM1B,EAAQ0B,GAAS,GACjBgC,EAAS1D,EAAM2D,MAAM,aACrBC,EAAOF,EAAOA,EAAOpD,OAAS,GAIpC,OAHAiD,GAAQG,EAAOpD,OAAS,EACxBkD,EACoB,IAAlBE,EAAOpD,OAAekD,EAASI,EAAKtD,OAAS,EAAIsD,EAAKtD,OAASgD,EAC1DtD,CACT,EAlCc6D,QAOd,WACE,MAAO,CAACR,IAAK,CAACE,OAAMC,UAASF,YAC/B,EATuBQ,MAgBvB,SAAe9D,GACbsD,GAAatD,CACf,EAiBF,C,kCCvCO,SAAS+D,EAAStE,EAAMuE,EAAQjE,EAAOkE,GAC5C,MAAMC,ECVD,SAA6BnE,GAClC,MAAMoE,EAAQpE,EAAMqD,QAAQc,gBAAkB,MAI9C,GAAc,IAAVC,GAAyB,MAAVA,EACjB,MAAO,MAGT,GAAc,QAAVA,GAA6B,QAAVA,GAA6B,UAAVA,EACxC,MAAM,IAAIC,MACR,gCACED,EACA,qEAIN,OAAOA,CACT,CDRyBE,CAAoBtE,GAC3C,IAAIuE,EAASvE,EAAMwE,eEXd,SAAqBxE,GAC1B,MAAMyE,EAASzE,EAAMqD,QAAQkB,QAAU,IAEvC,GAAe,MAAXE,GAA6B,MAAXA,GAA6B,MAAXA,EACtC,MAAM,IAAIJ,MACR,gCACEI,EACA,qDAIN,OAAOA,CACT,CFDsCC,CAAY1E,GAG5CiE,GAA0B,SAAhBA,EAAOU,MAAmBV,EAAOW,UAC7CL,GAC2B,iBAAjBN,EAAO3B,OAAsB2B,EAAO3B,OAAS,EACjD2B,EAAO3B,MACP,KACmC,IAAtCtC,EAAMqD,QAAQwB,oBACX,EACAZ,EAAOa,SAASC,QAAQrF,IAC5B6E,GAGJ,IAAIS,EAAOT,EAAOhE,OAAS,GAGN,QAAnB4D,GACoB,UAAnBA,IACGF,GAA0B,SAAhBA,EAAOU,MAAmBV,EAAOgB,QAAWvF,EAAKuF,WAE/DD,EAA6B,EAAtBE,KAAKC,KAAKH,EAAO,IAG1B,MAAMI,EAAUpF,EAAMqF,cAAcnB,GACpCkB,EAAQ1B,KAAKa,EAAS,IAAIe,OAAON,EAAOT,EAAOhE,SAC/C6E,EAAQrB,MAAMiB,GACd,MAAMO,EAAOvF,EAAMwF,MAAM,YACnBvF,EAAQD,EAAMyF,YAClBzF,EAAM0F,cAAchG,EAAM0F,EAAQtB,YAQpC,SAAaN,EAAMrD,EAAOwF,GACxB,GAAIxF,EACF,OAAQwF,EAAQ,GAAK,IAAIL,OAAON,IAASxB,EAG3C,OAAQmC,EAAQpB,EAASA,EAAS,IAAIe,OAAON,EAAOT,EAAOhE,SAAWiD,CACxE,IATA,OAFA+B,IAEOtF,CAUT,C,uHGlCO,SAAS2F,EAAiBvC,GAE/B,IAAIwC,GADaxC,GAAW,CAAC,GACPyC,YACtB,MAAMC,EAAY,CAChBC,SA8GF,SAA+BC,EAASC,EAAIC,GAC1C,MAAMC,EAAWC,KAAKD,SAChBE,EAASD,KAAKC,OACpB,IAAItB,EAAO,EACX,OAGA,SAAeuB,GACb,GACe,MAAbH,GACsC,oBAAtCE,EAAOA,EAAO/F,OAAS,GAAG,GAAGoE,KAE7B,OAAOwB,EAAII,GAGb,OADAN,EAAQT,MAAM,kCACPgB,EAAKD,EACd,EAGA,SAASC,EAAKD,GACZ,MAAM1E,GAAS4E,EAAAA,EAAAA,GAAkBL,GACjC,GAAa,MAATG,EAEF,OAAIvB,EAAO,EAAUmB,EAAII,IACzBN,EAAQS,QAAQH,GAChBvB,IACOwB,GAET,GAAIxB,EAAO,IAAMa,EAAQ,OAAOM,EAAII,GACpC,MAAMI,EAAQV,EAAQV,KAAK,kCACrBzD,GAAQ2E,EAAAA,EAAAA,GAAkBF,GAGhC,OAFAI,EAAMC,OAAS9E,GAAoB,IAAVA,GAAeI,QAAQL,GAChD8E,EAAME,QAAUhF,GAAsB,IAAXA,GAAgBK,QAAQJ,GAC5CoE,EAAGK,EACZ,CACF,EAhJEO,WAsBF,SAAiCR,EAAQS,GACvC,IAAI5G,GAAS,EAGb,OAASA,EAAQmG,EAAO/F,QAEtB,GACuB,UAArB+F,EAAOnG,GAAO,IACY,mCAA1BmG,EAAOnG,GAAO,GAAGwE,MACjB2B,EAAOnG,GAAO,GAAG0G,OACjB,CACA,IAAIG,EAAO7G,EAGX,KAAO6G,KAEL,GACsB,SAApBV,EAAOU,GAAM,IACY,mCAAzBV,EAAOU,GAAM,GAAGrC,MAChB2B,EAAOU,GAAM,GAAGJ,OAEhBN,EAAOnG,GAAO,GAAGoC,IAAI0E,OAASX,EAAOnG,GAAO,GAAGmC,MAAM2E,QACnDX,EAAOU,GAAM,GAAGzE,IAAI0E,OAASX,EAAOU,GAAM,GAAG1E,MAAM2E,OACrD,CACAX,EAAOnG,GAAO,GAAGwE,KAAO,wBACxB2B,EAAOU,GAAM,GAAGrC,KAAO,wBAGvB,MAAMuC,EAAgB,CACpBvC,KAAM,gBACNrC,MAAO6E,OAAOC,OAAO,CAAC,EAAGd,EAAOU,GAAM,GAAG1E,OACzCC,IAAK4E,OAAOC,OAAO,CAAC,EAAGd,EAAOnG,GAAO,GAAGoC,MAIpC8E,EAAO,CACX1C,KAAM,oBACNrC,MAAO6E,OAAOC,OAAO,CAAC,EAAGd,EAAOU,GAAM,GAAGzE,KACzCA,IAAK4E,OAAOC,OAAO,CAAC,EAAGd,EAAOnG,GAAO,GAAGmC,QAKpCgF,EAAa,CACjB,CAAC,QAASJ,EAAeH,GACzB,CAAC,QAAST,EAAOU,GAAM,GAAID,GAC3B,CAAC,OAAQT,EAAOU,GAAM,GAAID,GAC1B,CAAC,QAASM,EAAMN,IAEZQ,EAAaR,EAAQS,OAAOC,WAAWF,WAAWG,KACpDH,IAEFI,EAAAA,EAAAA,GACEL,EACAA,EAAW/G,OACX,GACAuG,EAAAA,EAAAA,GAAWS,EAAYjB,EAAOtF,MAAMgG,EAAO,EAAG7G,GAAQ4G,KAK1DY,EAAAA,EAAAA,GAAOL,EAAYA,EAAW/G,OAAQ,EAAG,CACvC,CAAC,OAAQ8G,EAAMN,GACf,CAAC,QAAST,EAAOnG,GAAO,GAAI4G,GAC5B,CAAC,OAAQT,EAAOnG,GAAO,GAAI4G,GAC3B,CAAC,OAAQG,EAAeH,MAE1BY,EAAAA,EAAAA,GAAOrB,EAAQU,EAAO,EAAG7G,EAAQ6G,EAAO,EAAGM,GAC3CnH,EAAQ6G,EAAOM,EAAW/G,OAAS,EACnC,KACF,CAEJ,CAEFJ,GAAS,EACT,OAASA,EAAQmG,EAAO/F,QACQ,mCAA1B+F,EAAOnG,GAAO,GAAGwE,OACnB2B,EAAOnG,GAAO,GAAGwE,KAAO,QAG5B,OAAO2B,CACT,GAlGA,OAHIT,UACFA,GAAS,GAEJ,CACLwB,KAAM,CACJ,IAAOtB,GAETwB,WAAY,CACVG,KAAM,CAAC3B,IAET6B,iBAAkB,CAChBF,KAAM,CAAC,MAoIb,C,0BC7J0BG,EAAW,YAcJA,EAAW,cAuBlBA,EAAW,uBAgCXA,EAAW,MAoBRA,EAAW,cAeRA,EAAW,kBA0ETA,EC9LhC,wwCDoN+BA,EAAW,MAQ5C,SAASA,EAAWC,GAClB,OAUA,SAAevB,GACb,OAAgB,OAATA,GAAiBuB,EAAMzH,KAAK0H,OAAOC,aAAazB,GACzD,CACF,CExOA,MAYa0B,EAAkB,CAC7BZ,KAAM,CACJ,GAdkB,CACpBrB,SAqBF,SAA+BC,EAASC,EAAIC,GAC1C,MAAM+B,EAAO7B,KACb,OAYA,SAAcE,GACZ,GAEoB,OAAlB2B,EAAK9B,WAGJ8B,EAAKC,mCAEN,OAAOhC,EAAII,GAMb,OAJAN,EAAQT,MAAM,iBACdS,EAAQT,MAAM,uBACdS,EAAQS,QAAQH,GAChBN,EAAQV,KAAK,uBACN6C,CACT,EAYA,SAASA,EAAO7B,GAId,OF6EG,SAAmCA,GACxC,OAAgB,OAATA,IAAkBA,EAAO,GAAc,KAATA,EACvC,CE/EQ8B,CAA0B9B,IAC5BN,EAAQT,MAAM,+BACdS,EAAQS,QAAQH,GAChBN,EAAQV,KAAK,+BACN+C,GAEI,KAAT/B,GAAwB,MAATA,GACjBN,EAAQT,MAAM,6BACdS,EAAQS,QAAQH,GAChBN,EAAQV,KAAK,6BACN+C,GAEFnC,EAAII,EACb,CAYA,SAAS+B,EAAM/B,GACb,OAAa,KAATA,GACFN,EAAQT,MAAM,uBACdS,EAAQS,QAAQH,GAChBN,EAAQV,KAAK,uBACbU,EAAQV,KAAK,iBACNzD,GAEFqE,EAAII,EACb,CAKA,SAASzE,EAAMyE,GAEb,OFuBG,SAA4BA,GACjC,OAAgB,OAATA,GAAiBA,GAAQ,CAClC,CEzBQgC,CAAmBhC,GACdL,EAAGK,GFsDT,SAAuBA,GAC5B,OAAiB,IAAVA,IAAyB,IAAVA,GAAwB,KAATA,CACvC,CEnDQiC,CAAcjC,GACTN,EAAQwC,MACb,CACEzC,SAAU0C,GAEZxC,EACAC,EALKF,CAMLM,GAIGJ,EAAII,EACb,CACF,KAMA,SAASmC,EAAkBzC,EAASC,EAAIC,GACtC,OAAOwC,EAAAA,EAAAA,GAAa1C,GAYpB,SAAeM,GAKb,OAAgB,OAATA,EAAgBJ,EAAII,GAAQL,EAAGK,EACxC,GAlBoC,aAmBtC,CChIO,SAASqC,EAAIvF,GAClB,OAAOwF,EAAAA,EAAAA,GAAkB,CACvBC,EAAAA,GACAC,EAAAA,EAAAA,KACAnD,EAAiBvC,GACjB2F,EAAAA,EACAf,GAEJ,C,kBCxBO,SAASgB,EAAkBhF,EAAQjE,EAAOkE,GAC/C,MAAMgF,EAAalJ,EAAMkJ,WACnBpE,EAAWb,EAAOa,UAAY,GAE9B9B,EAAU,GAChB,IAAI7C,GAAS,EACT0B,EAASqC,EAAKrC,OAElBqH,EAAW/G,MAAM,GACjB,IAAIiD,EAAUpF,EAAMqF,cAAcnB,GAElC,OAAS/D,EAAQ2E,EAASvE,QAAQ,CAChC,MAAM4I,EAAQrE,EAAS3E,GAEvB,IAAI2B,EAIJ,GAFAoH,EAAWA,EAAW3I,OAAS,GAAKJ,EAEhCA,EAAQ,EAAI2E,EAASvE,OAAQ,CAG/B,IAAI6I,EAASpJ,EAAMoJ,OAAOC,SAASvE,EAAS3E,EAAQ,GAAGwE,MAGnDyE,GAAUA,EAAOnI,OAAMmI,EAASA,EAAOnI,MAC3Ca,EAAQsH,EACJA,EAAOtE,EAAS3E,EAAQ,GAAI8D,EAAQjE,EAAO,CACzC6B,OAAQ,GACRC,MAAO,MACJsD,EAAQtB,YACVrB,OAAO,GACV,EACN,MACEX,EAAQoC,EAAKpC,MAUbkB,EAAQzC,OAAS,IACL,OAAXsB,GAA8B,OAAXA,IACL,SAAfsH,EAAMxE,OAEN3B,EAAQA,EAAQzC,OAAS,GAAKyC,EAAQA,EAAQzC,OAAS,GAAG+I,QACxD,cACA,KAEFzH,EAAS,IAGTuD,EAAUpF,EAAMqF,cAAcnB,GAC9BkB,EAAQ1B,KAAKV,EAAQH,KAAK,MAG5BG,EAAQb,KACNiD,EAAQ1B,KACN1D,EAAMoJ,OAAOD,EAAOlF,EAAQjE,EAAO,IAC9BoF,EAAQtB,UACXjC,SACAC,YAKND,EAASmB,EAAQA,EAAQzC,OAAS,GAAGS,OAAO,EAC9C,CAIA,OAFAkI,EAAWK,MAEJvG,EAAQH,KAAK,GACtB,C,kCC9EO,SAAS6C,EAAczB,EAAQjE,EAAOkE,GAC3C,MAAMgF,EAAalJ,EAAMkJ,WACnBpE,EAAWb,EAAOa,UAAY,GAC9BM,EAAUpF,EAAMqF,cAAcnB,GAE9BlB,EAAU,GAChB,IAAI7C,GAAS,EAIb,IAFA+I,EAAW/G,MAAM,KAERhC,EAAQ2E,EAASvE,QAAQ,CAChC,MAAM4I,EAAQrE,EAAS3E,GAEvB+I,EAAWA,EAAW3I,OAAS,GAAKJ,EAEpC6C,EAAQb,KACNiD,EAAQ1B,KACN1D,EAAMoJ,OAAOD,EAAOlF,EAAQjE,EAAO,CACjC6B,OAAQ,KACRC,MAAO,QACJsD,EAAQtB,cAKE,SAAfqF,EAAMxE,OACR3E,EAAMwJ,oBAAiBC,GAGrBtJ,EAAQ2E,EAASvE,OAAS,GAC5ByC,EAAQb,KACNiD,EAAQ1B,KAAKgG,EAAQP,EAAOrE,EAAS3E,EAAQ,GAAI8D,EAAQjE,IAG/D,CAIA,OAFAkJ,EAAWK,MAEJvG,EAAQH,KAAK,GACtB,CASA,SAAS6G,EAAQC,EAAMC,EAAO3F,EAAQjE,GACpC,IAAIG,EAAQH,EAAM6C,KAAKtC,OAEvB,KAAOJ,KAAS,CACd,MAAM6B,EAAShC,EAAM6C,KAAK1C,GAAOwJ,EAAMC,EAAO3F,EAAQjE,GAEtD,IAAe,IAAXgC,GAA8B,IAAXA,EACrB,MAGF,GAAsB,iBAAXA,EACT,MAAO,KAAKsD,OAAO,EAAItD,GAGzB,IAAe,IAAXA,EACF,MAAO,uBAEX,CAEA,MAAO,MACT,C,mDClFA,MAAM6H,EAAM,YAKL,SAASpE,EAAYxF,EAAO6J,GAEjC,MAAM9H,EAAS,GACf,IAGIrB,EAHA2B,EAAQ,EACRkB,EAAO,EAIX,KAAQ7C,EAAQkJ,EAAIhJ,KAAKZ,IACvB8J,EAAI9J,EAAMe,MAAMsB,EAAO3B,EAAMR,QAC7B6B,EAAOG,KAAKxB,EAAM,IAClB2B,EAAQ3B,EAAMR,MAAQQ,EAAM,GAAGJ,OAC/BiD,IAKF,OAFAuG,EAAI9J,EAAMe,MAAMsB,IAETN,EAAOa,KAAK,IAKnB,SAASkH,EAAI9J,GACX+B,EAAOG,KAAK2H,EAAI7J,EAAOuD,GAAOvD,GAChC,CACF,C","sources":["../node_modules/mdast-util-to-markdown/lib/util/association.js","../node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","../node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","../node_modules/mdast-util-to-markdown/lib/util/safe.js","../node_modules/mdast-util-to-markdown/lib/util/pattern-compile.js","../node_modules/mdast-util-to-markdown/lib/util/track.js","../node_modules/mdast-util-to-markdown/lib/handle/list-item.js","../node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","../node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","../node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","../node_modules/micromark-extension-gfm-task-list-item/node_modules/micromark-util-character/index.js","../node_modules/micromark-extension-gfm-task-list-item/node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","../node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","../node_modules/micromark-extension-gfm/index.js","../node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js","../node_modules/mdast-util-to-markdown/lib/util/container-flow.js","../node_modules/mdast-util-to-markdown/lib/util/indent-lines.js"],"sourcesContent":["/**\n * @typedef {import('../types.js').AssociationId} AssociationId\n */\n\nimport {decodeString} from 'micromark-util-decode-string'\n\n/**\n * Get an identifier from an association to match it to others.\n *\n * Associations are nodes that match to something else through an ID:\n * <https://github.com/syntax-tree/mdast#association>.\n *\n * The `label` of an association is the string value: character escapes and\n * references work, and casing is intact.\n * The `identifier` is used to match one association to another:\n * controversially, character escapes and references don’t work in this\n * matching: `&copy;` does not match `©`, and `\\+` does not match `+`.\n *\n * But casing is ignored (and whitespace) is trimmed and collapsed: ` A\\nb`\n * matches `a b`.\n * So, we do prefer the label when figuring out how we’re going to serialize:\n * it has whitespace, casing, and we can ignore most useless character\n * escapes and all character references.\n *\n * @type {AssociationId}\n */\nexport function association(node) {\n  if (node.label || !node.identifier) {\n    return node.label || ''\n  }\n\n  return decodeString(node.identifier)\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n */\n\nimport {patternCompile} from '../util/pattern-compile.js'\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n * @typedef {import('../types.js').ConstructName} ConstructName\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').SafeConfig} SafeConfig\n */\n\nimport {patternCompile} from './pattern-compile.js'\nimport {patternInScope} from './pattern-in-scope.js'\n\n/**\n * Make a string safe for embedding in markdown constructs.\n *\n * In markdown, almost all punctuation characters can, in certain cases,\n * result in something.\n * Whether they do is highly subjective to where they happen and in what\n * they happen.\n *\n * To solve this, `mdast-util-to-markdown` tracks:\n *\n * * Characters before and after something;\n * * What “constructs” we are in.\n *\n * This information is then used by this function to escape or encode\n * special characters.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {string | null | undefined} input\n *   Raw value to make safe.\n * @param {SafeConfig} config\n *   Configuration.\n * @returns {string}\n *   Serialized markdown safe for embedding.\n */\nexport function safe(state, input, config) {\n  const value = (config.before || '') + (input || '') + (config.after || '')\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {Record<number, {before: boolean, after: boolean}>} */\n  const infos = {}\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n\n    if (!patternInScope(state.stack, pattern)) {\n      continue\n    }\n\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    while ((match = expression.exec(value))) {\n      const before = 'before' in pattern || Boolean(pattern.atBreak)\n      const after = 'after' in pattern\n      const position = match.index + (before ? match[1].length : 0)\n\n      if (positions.includes(position)) {\n        if (infos[position].before && !before) {\n          infos[position].before = false\n        }\n\n        if (infos[position].after && !after) {\n          infos[position].after = false\n        }\n      } else {\n        positions.push(position)\n        infos[position] = {before, after}\n      }\n    }\n  }\n\n  positions.sort(numerical)\n\n  let start = config.before ? config.before.length : 0\n  const end = value.length - (config.after ? config.after.length : 0)\n  index = -1\n\n  while (++index < positions.length) {\n    const position = positions[index]\n\n    // Character before or after matched:\n    if (position < start || position >= end) {\n      continue\n    }\n\n    // If this character is supposed to be escaped because it has a condition on\n    // the next character, and the next character is definitly being escaped,\n    // then skip this escape.\n    if (\n      (position + 1 < end &&\n        positions[index + 1] === position + 1 &&\n        infos[position].after &&\n        !infos[position + 1].before &&\n        !infos[position + 1].after) ||\n      (positions[index - 1] === position - 1 &&\n        infos[position].before &&\n        !infos[position - 1].before &&\n        !infos[position - 1].after)\n    ) {\n      continue\n    }\n\n    if (start !== position) {\n      // If we have to use a character reference, an ampersand would be more\n      // correct, but as backslashes only care about punctuation, either will\n      // do the trick\n      result.push(escapeBackslashes(value.slice(start, position), '\\\\'))\n    }\n\n    start = position\n\n    if (\n      /[!-/:-@[-`{-~]/.test(value.charAt(position)) &&\n      (!config.encode || !config.encode.includes(value.charAt(position)))\n    ) {\n      // Character escape.\n      result.push('\\\\')\n    } else {\n      // Character reference.\n      result.push(\n        '&#x' + value.charCodeAt(position).toString(16).toUpperCase() + ';'\n      )\n      start++\n    }\n  }\n\n  result.push(escapeBackslashes(value.slice(start, end), config.after))\n\n  return result.join('')\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nfunction numerical(a, b) {\n  return a - b\n}\n\n/**\n * @param {string} value\n * @param {string} after\n * @returns {string}\n */\nfunction escapeBackslashes(value, after) {\n  const expression = /\\\\(?=[!-/:-@[-`{-~])/g\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const results = []\n  const whole = value + after\n  let index = -1\n  let start = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = expression.exec(whole))) {\n    positions.push(match.index)\n  }\n\n  while (++index < positions.length) {\n    if (start !== positions[index]) {\n      results.push(value.slice(start, positions[index]))\n    }\n\n    results.push('\\\\')\n    start = positions[index]\n  }\n\n  results.push(value.slice(start))\n\n  return results.join('')\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Unsafe} pattern\n * @returns {RegExp}\n */\nexport function patternCompile(pattern) {\n  if (!pattern._compiled) {\n    const before =\n      (pattern.atBreak ? '[\\\\r\\\\n][\\\\t ]*' : '') +\n      (pattern.before ? '(?:' + pattern.before + ')' : '')\n\n    pattern._compiled = new RegExp(\n      (before ? '(' + before + ')' : '') +\n        (/[|\\\\{}()[\\]^$+*?.-]/.test(pattern.character) ? '\\\\' : '') +\n        pattern.character +\n        (pattern.after ? '(?:' + pattern.after + ')' : ''),\n      'g'\n    )\n  }\n\n  return pattern._compiled\n}\n","/**\n * @typedef {import('../types.js').CreateTracker} CreateTracker\n * @typedef {import('../types.js').TrackCurrent} TrackCurrent\n * @typedef {import('../types.js').TrackMove} TrackMove\n * @typedef {import('../types.js').TrackShift} TrackShift\n */\n\n/**\n * Track positional info in the output.\n *\n * @type {CreateTracker}\n */\nexport function track(config) {\n  // Defaults are used to prevent crashes when older utilities somehow activate\n  // this code.\n  /* c8 ignore next 5 */\n  const options = config || {}\n  const now = options.now || {}\n  let lineShift = options.lineShift || 0\n  let line = now.line || 1\n  let column = now.column || 1\n\n  return {move, current, shift}\n\n  /**\n   * Get the current tracked info.\n   *\n   * @type {TrackCurrent}\n   */\n  function current() {\n    return {now: {line, column}, lineShift}\n  }\n\n  /**\n   * Define an increased line shift (the typical indent for lines).\n   *\n   * @type {TrackShift}\n   */\n  function shift(value) {\n    lineShift += value\n  }\n\n  /**\n   * Move past some generated markdown.\n   *\n   * @type {TrackMove}\n   */\n  function move(input) {\n    // eslint-disable-next-line unicorn/prefer-default-parameters\n    const value = input || ''\n    const chunks = value.split(/\\r?\\n|\\r/g)\n    const tail = chunks[chunks.length - 1]\n    line += chunks.length - 1\n    column =\n      chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parent | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'tab'\n\n  // To do: remove in a major.\n  // @ts-expect-error: deprecated.\n  if (style === 1 || style === '1') {\n    return 'one'\n  }\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean} [singleTilde=true]\n *   Whether to support strikethrough with a single tilde.\n *\n *   Single tildes work on github.com, but are technically prohibited by the\n *   GFM spec.\n */\n\nimport {splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {}\n  let single = options_.singleTilde\n  const tokenizer = {\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  }\n  if (single === null || single === undefined) {\n    single = true\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  }\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (\n        events[index][0] === 'enter' &&\n        events[index][1].type === 'strikethroughSequenceTemporary' &&\n        events[index][1]._close\n      ) {\n        let open = index\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (\n            events[open][0] === 'exit' &&\n            events[open][1].type === 'strikethroughSequenceTemporary' &&\n            events[open][1]._open &&\n            // If the sizes are the same:\n            events[index][1].end.offset - events[index][1].start.offset ===\n              events[open][1].end.offset - events[open][1].start.offset\n          ) {\n            events[index][1].type = 'strikethroughSequence'\n            events[open][1].type = 'strikethroughSequence'\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            }\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            }\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [\n              ['enter', strikethrough, context],\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context],\n              ['enter', text, context]\n            ]\n            const insideSpan = context.parser.constructs.insideSpan.null\n            if (insideSpan) {\n              // Between.\n              splice(\n                nextEvents,\n                nextEvents.length,\n                0,\n                resolveAll(insideSpan, events.slice(open + 1, index), context)\n              )\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [\n              ['exit', text, context],\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context],\n              ['exit', strikethrough, context]\n            ])\n            splice(events, open - 1, index - open + 3, nextEvents)\n            index = open + nextEvents.length - 2\n            break\n          }\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = 'data'\n      }\n    }\n    return events\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous\n    const events = this.events\n    let size = 0\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      if (\n        previous === 126 &&\n        events[events.length - 1][1].type !== 'characterEscape'\n      ) {\n        return nok(code)\n      }\n      effects.enter('strikethroughSequenceTemporary')\n      return more(code)\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous)\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code)\n        effects.consume(code)\n        size++\n        return more\n      }\n      if (size < 2 && !single) return nok(code)\n      const token = effects.exit('strikethroughSequenceTemporary')\n      const after = classifyCharacter(code)\n      token._open = !after || (after === 2 && Boolean(before))\n      token._close = !before || (before === 2 && Boolean(after))\n      return ok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEndingOrSpace,\n  markdownLineEnding,\n  markdownSpace\n} from 'micromark-util-character'\nconst tasklistCheck = {\n  tokenize: tokenizeTasklistCheck\n}\n\n// To do: next major: expose function to make extension.\n\n/**\n * Extension for `micromark` that can be passed in `extensions`, to\n * enable GFM task list items syntax.\n *\n * @type {Extension}\n */\nexport const gfmTaskListItem = {\n  text: {\n    [91]: tasklistCheck\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this\n  return open\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n      // Exit if there’s stuff before.\n      self.previous !== null ||\n      // Exit if not in the first content that is the first child of a list\n      // item.\n      !self._gfmTasklistFirstContentOfListItem\n    ) {\n      return nok(code)\n    }\n    effects.enter('taskListCheck')\n    effects.enter('taskListCheckMarker')\n    effects.consume(code)\n    effects.exit('taskListCheckMarker')\n    return inside\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueUnchecked')\n      return close\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueChecked')\n      return close\n    }\n    return nok(code)\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker')\n      effects.consume(code)\n      effects.exit('taskListCheckMarker')\n      effects.exit('taskListCheck')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code)\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check(\n        {\n          tokenize: spaceThenNonSpace\n        },\n        ok,\n        nok\n      )(code)\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, 'whitespace')\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral,\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable,\n    gfmTaskListItem\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration.\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml,\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml,\n    gfmTableHtml,\n    gfmTagfilterHtml,\n    gfmTaskListItemHtml\n  ])\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').PhrasingContent} PhrasingContent\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * Serialize the children of a parent that contains phrasing children.\n *\n * These children will be joined flush together.\n *\n * @param {Parent & {children: Array<PhrasingContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Info} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined together.\n */\nexport function containerPhrasing(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n  let before = info.before\n\n  indexStack.push(-1)\n  let tracker = state.createTracker(info)\n\n  while (++index < children.length) {\n    const child = children[index]\n    /** @type {string} */\n    let after\n\n    indexStack[indexStack.length - 1] = index\n\n    if (index + 1 < children.length) {\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      let handle = state.handle.handlers[children[index + 1].type]\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      if (handle && handle.peek) handle = handle.peek\n      after = handle\n        ? handle(children[index + 1], parent, state, {\n            before: '',\n            after: '',\n            ...tracker.current()\n          }).charAt(0)\n        : ''\n    } else {\n      after = info.after\n    }\n\n    // In some cases, html (text) can be found in phrasing right after an eol.\n    // When we’d serialize that, in most cases that would be seen as html\n    // (flow).\n    // As we can’t escape or so to prevent it from happening, we take a somewhat\n    // reasonable approach: replace that eol with a space.\n    // See: <https://github.com/syntax-tree/mdast-util-to-markdown/issues/15>\n    if (\n      results.length > 0 &&\n      (before === '\\r' || before === '\\n') &&\n      child.type === 'html'\n    ) {\n      results[results.length - 1] = results[results.length - 1].replace(\n        /(\\r?\\n|\\r)$/,\n        ' '\n      )\n      before = ' '\n\n      // To do: does this work to reset tracker?\n      tracker = state.createTracker(info)\n      tracker.move(results.join(''))\n    }\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          ...tracker.current(),\n          before,\n          after\n        })\n      )\n    )\n\n    before = results[results.length - 1].slice(-1)\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n","/**\n * @typedef {import('../types.js').FlowContent} FlowContent\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').TrackFields} TrackFields\n */\n\n/**\n * @param {Parent & {children: Array<FlowContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {TrackFields} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined by (blank) lines.\n */\nexport function containerFlow(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  const tracker = state.createTracker(info)\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n\n  indexStack.push(-1)\n\n  while (++index < children.length) {\n    const child = children[index]\n\n    indexStack[indexStack.length - 1] = index\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          before: '\\n',\n          after: '\\n',\n          ...tracker.current()\n        })\n      )\n    )\n\n    if (child.type !== 'list') {\n      state.bulletLastUsed = undefined\n    }\n\n    if (index < children.length - 1) {\n      results.push(\n        tracker.move(between(child, children[index + 1], parent, state))\n      )\n    }\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n\n/**\n * @param {Node} left\n * @param {Node} right\n * @param {Parent} parent\n * @param {State} state\n * @returns {string}\n */\nfunction between(left, right, parent, state) {\n  let index = state.join.length\n\n  while (index--) {\n    const result = state.join[index](left, right, parent, state)\n\n    if (result === true || result === 1) {\n      break\n    }\n\n    if (typeof result === 'number') {\n      return '\\n'.repeat(1 + result)\n    }\n\n    if (result === false) {\n      return '\\n\\n<!---->\\n\\n'\n    }\n  }\n\n  return '\\n\\n'\n}\n","/**\n * @typedef {import('../types.js').IndentLines} IndentLines\n */\n\nconst eol = /\\r?\\n|\\r/g\n\n/**\n * @type {IndentLines}\n */\nexport function indentLines(value, map) {\n  /** @type {Array<string>} */\n  const result = []\n  let start = 0\n  let line = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = eol.exec(value))) {\n    one(value.slice(start, match.index))\n    result.push(match[0])\n    start = match.index + match[0].length\n    line++\n  }\n\n  one(value.slice(start))\n\n  return result.join('')\n\n  /**\n   * @param {string} value\n   */\n  function one(value) {\n    result.push(map(value, line, !value))\n  }\n}\n"],"names":["association","node","label","identifier","decodeString","inlineCode","_","state","value","sequence","index","RegExp","test","unsafe","length","pattern","expression","patternCompile","match","atBreak","exec","position","charCodeAt","slice","peek","patternInScope","stack","listInScope","inConstruct","notInConstruct","list","none","includes","safe","input","config","before","after","positions","result","infos","Boolean","push","sort","numerical","start","end","escapeBackslashes","charAt","encode","toString","toUpperCase","join","a","b","results","whole","_compiled","character","track","options","now","lineShift","line","column","move","chunks","split","tail","current","shift","listItem","parent","info","listItemIndent","style","Error","checkListItemIndent","bullet","bulletCurrent","marker","checkBullet","type","ordered","incrementListMarker","children","indexOf","size","spread","Math","ceil","tracker","createTracker","repeat","exit","enter","indentLines","containerFlow","blank","gfmStrikethrough","single","singleTilde","tokenizer","tokenize","effects","ok","nok","previous","this","events","code","more","classifyCharacter","consume","token","_open","_close","resolveAll","context","open","offset","strikethrough","Object","assign","text","nextEvents","insideSpan","parser","constructs","null","splice","attentionMarkers","regexCheck","regex","String","fromCharCode","gfmTaskListItem","self","_gfmTasklistFirstContentOfListItem","inside","markdownLineEndingOrSpace","close","markdownLineEnding","markdownSpace","check","spaceThenNonSpace","factorySpace","gfm","combineExtensions","gfmAutolinkLiteral","gfmFootnote","gfmTable","containerPhrasing","indexStack","child","handle","handlers","replace","pop","bulletLastUsed","undefined","between","left","right","eol","map","one"],"sourceRoot":""}