{"version":3,"file":"static/js/layout.d04f31ee69.chunk.v1_7.js","mappings":"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","sources":["components/layout/Layout/index.js","hooks/useMediaQuery.js"],"sourcesContent":["import { lazy, useState, useCallback, Suspense } from 'react';\nimport { useIsDesktop } from '../../../hooks/useMediaQuery';\nimport { useModel } from '../../../contexts/ModelContext';\nimport { useAuth } from '../../../contexts/AuthContext'; // Import useAuth\nimport { useTheme } from '../../../contexts/ThemeContext'; // Import ThemeContext\nimport { GearIcon} from '@primer/octicons-react';\nimport styles from './Layout.module.css';\n// Import icons using the correct paths\n// Import only the specific icons needed\n\n\n// Lazily loaded components - Prefetch hints removed for manual loading\nconst Sidebar = lazy(() => import(/* webpackChunkName: \"layout-sidebar\" */ '../Sidebar'));\nconst MainContent = lazy(() => import(/* webpackPreload: true, webpackChunkName: \"layout-main\" */ '../MainContent'));\nconst ModelDropdown = lazy(() => import(/* webpackChunkName: \"models-dropdown\" */ '../../models/ModelDropdown'));\nconst Spinner = lazy(() => import(/* webpackChunkName: \"common-spinner\" */ '../../common/Spinner'));\nconst ThemeToggle = lazy(() => import(/* webpackChunkName: \"common-theme\" */ '../../common/ThemeToggle'));\nconst SettingsPanel = lazy(() => import(/* webpackChunkName: \"settings-panel\" */ '../../settings/SettingsPanel'));\nconst SidebarToggle = lazy(() => import(/* webpackChunkName: \"layout-sidebar-toggle\" */ '../SidebarToggle'));\nconst MoreActions = lazy(() => import(/* webpackChunkName: \"common-more-actions\" */ '../../common/MoreActions'));\nconst AuthButton = lazy(() => import(/* webpackChunkName: \"auth-button\" */ '../../auth/AuthButton'));\n\n// Loading fallback component\nconst LoadingFallback = () => (\n  <div className={styles.loadingFallback}>\n    <Spinner size=\"medium\" />\n  </div>\n);\n\n/**\n * Layout component that handles responsive design\n * @returns {JSX.Element} - Rendered layout\n */\nconst Layout = () => {\n  const isDesktop = useIsDesktop();\n  // Default sidebar to open on desktop, closed on mobile initially\n  const [isSidebarOpen, setIsSidebarOpen] = useState(isDesktop); \n  const [isSettingsOpen, setIsSettingsOpen] = useState(false); // State for settings panel\n  const [isModelSelectorOpen, setIsModelSelectorOpen] = useState(false); // State for model selector visibility\n  const { selectedModel, isLoadingModels } = useModel(); // Get model data\n  const { currentUser, isAuthenticated, login, logout, loading: authLoading } = useAuth(); // Get auth context\n  const { theme, toggleTheme } = useTheme(); // Get theme context\n\n  const toggleSidebar = useCallback(() => {\n    setIsSidebarOpen(prev => !prev);\n  }, []);\n\n  // Toggle settings panel - passed down from MainContent originally, now managed here\n  const toggleSettings = useCallback(() => {\n    // console.log(\"Toggling settings panel...\"); // Add log\n    setIsSettingsOpen(prev => {\n      // console.log(\"Previous state:\", prev, \"New state:\", !prev); // Log state change\n      return !prev;\n    });\n  }, []);\n\n  const toggleModelSelector = useCallback(() => {\n    setIsModelSelectorOpen(prev => !prev);\n  }, []);\n\n  // Determine layout classes based on state and viewport\n  const isSidebarEffectivelyHidden = isDesktop && !isSidebarOpen;\n  const layoutClasses = [\n    styles.Layout,\n    isSidebarEffectivelyHidden ? styles['Layout--sidebarCompact'] : '', // Handles transform\n    !isDesktop && isSidebarOpen ? styles['Layout--sidebarOpenMobile'] : '', // Mobile slide-in\n  ].filter(Boolean).join(' ');\n\n  return (\n    <div className={layoutClasses}>\n      {/* Mobile Actions Container (Top Right) */}\n      <div className={styles.Layout__mobileActionsContainer}>\n        <div className={styles.Layout__mobileActions}>\n          {/* Theme Toggle */}\n          <Suspense fallback={null}>\n            <ThemeToggle />\n          </Suspense>\n          \n          {/* Auth Button */}\n          <Suspense fallback={null}>\n            <AuthButton \n              isAuthenticated={isAuthenticated}\n              onLogin={login}\n              onLogout={logout}\n              userName={currentUser?.displayName || currentUser?.email || 'User'}\n              isLoading={authLoading}\n              currentUser={currentUser}\n            />\n          </Suspense>\n          \n          {/* Settings Button */}\n          <button \n            className={styles.Layout__mobileActionButton} \n            onClick={toggleSettings}\n            aria-label=\"Settings\"\n            title=\"Settings\"\n          >\n            <GearIcon size={20} />\n          </button>\n          \n          {/* More Actions Menu - Now pass only additional actions */}\n          <MoreActions \n            triggerButtonClassName={styles.Layout__mobileActionButton}\n            actions={ // Pass only the mobile-specific actions now\n              isDesktop ? [] : [\n                // Theme toggle action\n                {\n                  icon: theme === 'dark' ? <span style={{ fontSize: '16px' }}>‚òÄÔ∏è</span> : <span style={{ fontSize: '16px' }}>üåô</span>,\n                  label: `Switch to ${theme === 'dark' ? 'light' : 'dark'} mode`,\n                  onClick: toggleTheme\n                },\n                // Settings action\n                {\n                  icon: <GearIcon size={16} />,\n                  label: 'Settings',\n                  onClick: toggleSettings\n                },\n                // Login/Logout action\n                {\n                  icon: isAuthenticated ? <span style={{ fontSize: '16px' }}>üë§</span> : <span style={{ fontSize: '16px' }}>üîë</span>,\n                  label: isAuthenticated ? `Logout (${currentUser?.displayName || currentUser?.email || 'User'})` : 'Login',\n                  onClick: isAuthenticated ? logout : login\n                }\n              ]\n            }\n          />\n        </div>\n      </div>\n\n      {/* Sidebar Toggle (floating) - only when sidebar is closed */}\n      {!isSidebarOpen && (\n        <Suspense fallback={<LoadingFallback />}>\n          <SidebarToggle\n            isOpen={isSidebarOpen}\n            onToggle={toggleSidebar}\n          />\n        </Suspense>\n      )}\n\n      {/* Conditionally render the ModelDropdown as a modal/overlay */}\n      {isModelSelectorOpen && (\n        <div className={styles.Layout__modalOverlay} onClick={toggleModelSelector}>\n          <div className={styles.Layout__modalContent} onClick={(e) => e.stopPropagation()}>\n            <Suspense fallback={<LoadingFallback />}>\n              <ModelDropdown onClose={toggleModelSelector} /> \n            </Suspense>\n          </div>\n        </div>\n      )}\n\n      {/* Sidebar container */}\n      {isSidebarOpen && (\n        <div className={styles.Layout__sidebarContainer}>\n          <Suspense fallback={<div className={styles.Layout__sidebarPlaceholder} />}>\n            <Sidebar \n              onToggleSettings={toggleSettings}\n              onToggleSidebar={toggleSidebar}\n            />\n          </Suspense>\n        </div>\n      )}\n      \n      {/* Main content container */}\n      <div className={styles.Layout__mainContentContainer}>\n        <Suspense fallback={<div className={styles.Layout__contentPlaceholder} />}>\n          <MainContent \n            isSidebarOpen={isSidebarOpen} \n            toggleSidebar={toggleSidebar} \n            isSettingsOpen={isSettingsOpen} \n            toggleSettings={toggleSettings}\n            selectedModel={selectedModel}\n            isLoadingModels={isLoadingModels}\n            toggleModelSelector={toggleModelSelector}\n            isModelSelectorOpen={isModelSelectorOpen}\n            onToggleSettings={toggleSettings}\n          />\n        </Suspense>\n      </div>\n\n      {/* Mobile overlay */}\n      {!isDesktop && isSidebarOpen && (\n        <div \n          className={`${styles.Layout__overlay} ${styles['Layout__overlay--visible']}`}\n          onClick={toggleSidebar}\n          aria-hidden=\"true\"\n        />\n      )}\n\n      {/* Conditionally render Settings Panel */} \n      {/* Always render Settings Panel for CSS transitions, control visibility via props/classes */}\n      <Suspense fallback={null}> {/* No visible fallback needed */}\n        <SettingsPanel \n          isOpen={isSettingsOpen} \n          onClose={toggleSettings} \n        /> \n      </Suspense>\n    </div>\n  );\n};\n\nexport default Layout; ","import { useState, useEffect, useMemo } from 'react';\n\n// Define breakpoint constants in a single source of truth\nexport const BREAKPOINTS = {\n  mobile: '640px',\n  tablet: '1023px',\n  desktop: '1024px',\n  settings: '550px'\n};\n\n// Cached media query listeners\nconst mediaQueryListeners = new Map();\n\n/**\n * Custom hook that returns true if the current viewport matches the provided media query\n * @param {string} query - Media query string e.g., \"(max-width: 1024px)\"\n * @returns {boolean} - True if the media query matches\n */\nexport const useMediaQuery = (query) => {\n  // Initialize with the current match state\n  const [matches, setMatches] = useState(() => {\n    // Check for window to avoid SSR issues\n    if (typeof window !== 'undefined') {\n      return window.matchMedia(query).matches;\n    }\n    return false;\n  });\n\n  useEffect(() => {\n    // Avoid running in SSR context\n    if (typeof window === 'undefined') {\n      return undefined;\n    }\n\n    // Check if we already have a listener for this query\n    if (!mediaQueryListeners.has(query)) {\n      // Create media query list\n      const mediaQueryList = window.matchMedia(query);\n      \n      // Create listener registry for this query\n      mediaQueryListeners.set(query, {\n        mediaQueryList,\n        listeners: new Set()\n      });\n    }\n    \n    const queryData = mediaQueryListeners.get(query);\n    const { mediaQueryList, listeners } = queryData;\n\n    // Initial check\n    setMatches(mediaQueryList.matches);\n\n    // Define listener function\n    const listener = (event) => {\n      setMatches(event.matches);\n    };\n    \n    // Add listener to registry\n    listeners.add(listener);\n\n    // Modern browsers\n    if (mediaQueryList.addEventListener) {\n      mediaQueryList.addEventListener('change', listener);\n      return () => {\n        mediaQueryList.removeEventListener('change', listener);\n        listeners.delete(listener);\n        \n        // Clean up registry if no more listeners\n        if (listeners.size === 0) {\n          mediaQueryListeners.delete(query);\n        }\n      };\n    } \n    // Legacy support for older browsers (e.g., IE, older Safari)\n    else if (mediaQueryList.addListener) {\n      mediaQueryList.addListener(listener);\n      return () => {\n        mediaQueryList.removeListener(listener);\n        listeners.delete(listener);\n        \n        // Clean up registry if no more listeners\n        if (listeners.size === 0) {\n          mediaQueryListeners.delete(query);\n        }\n      };\n    }\n\n    return undefined;\n  }, [query]);\n\n  return matches;\n};\n\n/**\n * Pre-configured hooks for common breakpoints\n */\nexport const useIsMobile = () => {\n  const query = useMemo(() => `(max-width: ${BREAKPOINTS.mobile})`, []);\n  return useMediaQuery(query);\n};\n\nexport const useIsTablet = () => {\n  const query = useMemo(() => \n    `(min-width: calc(${BREAKPOINTS.mobile} + 1px)) and (max-width: ${BREAKPOINTS.tablet})`, []);\n  return useMediaQuery(query);\n};\n\nexport const useIsDesktop = () => {\n  const query = useMemo(() => `(min-width: ${BREAKPOINTS.desktop})`, []);\n  return useMediaQuery(query);\n};\n\n/**\n * Special hook for settings components\n */\nexport const useIsSettingsMobile = () => {\n  const query = useMemo(() => `(max-width: ${BREAKPOINTS.settings})`, []);\n  return useMediaQuery(query);\n};\n\nexport const useIsSettingsDesktop = () => {\n  const query = useMemo(() => `(min-width: calc(${BREAKPOINTS.settings} + 1px))`, []);\n  return useMediaQuery(query);\n};\n\n/**\n * Get a consistent breakpoint value across the app\n * @returns {{mobile: string, tablet: string, desktop: string, settings: string}}\n */\nexport const useBreakpoints = () => {\n  return BREAKPOINTS;\n}; "],"names":["Sidebar","lazy","MainContent","ModelDropdown","Spinner","ThemeToggle","SettingsPanel","SidebarToggle","MoreActions","AuthButton","LoadingFallback","_jsx","className","styles","loadingFallback","children","size","Layout","isDesktop","useIsDesktop","isSidebarOpen","setIsSidebarOpen","useState","isSettingsOpen","setIsSettingsOpen","isModelSelectorOpen","setIsModelSelectorOpen","selectedModel","isLoadingModels","useModel","currentUser","isAuthenticated","login","logout","loading","authLoading","useAuth","theme","toggleTheme","useTheme","toggleSidebar","useCallback","prev","toggleSettings","toggleModelSelector","isSidebarEffectivelyHidden","layoutClasses","filter","Boolean","join","_jsxs","Layout__mobileActionsContainer","Layout__mobileActions","Suspense","fallback","onLogin","onLogout","userName","displayName","email","isLoading","Layout__mobileActionButton","onClick","title","GearIcon","triggerButtonClassName","actions","icon","style","fontSize","label","isOpen","onToggle","Layout__modalOverlay","Layout__modalContent","e","stopPropagation","onClose","Layout__sidebarContainer","Layout__sidebarPlaceholder","onToggleSettings","onToggleSidebar","Layout__mainContentContainer","Layout__contentPlaceholder","Layout__overlay","BREAKPOINTS","mobile","tablet","desktop","settings","mediaQueryListeners","Map","useMediaQuery","query","matches","setMatches","window","matchMedia","useEffect","has","mediaQueryList","set","listeners","Set","queryData","get","listener","event","add","addEventListener","removeEventListener","delete","addListener","removeListener","useMemo","useIsSettingsMobile"],"sourceRoot":""}