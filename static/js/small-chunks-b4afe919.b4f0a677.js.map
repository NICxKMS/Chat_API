{"version":3,"file":"static/js/small-chunks-b4afe919.b4f0a677.js","mappings":"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","sources":["components/chat/ChatMessage/index.js","components/common/ImageOverlay/index.js","components/chat/MessageList/index.js","components/common/LazyMarkdownRenderer.js","components/common/ThemeToggle/index.js","components/chat/ChatMessage/StreamingMessage.js","components/common/Spinner/index.js","components/chat/GlobalMetricsBar/index.js","components/common/MoreActions/index.js"],"sourcesContent":["// eslint-disable import/first\nimport React, { memo, useMemo, useState, lazy, Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport LazyMarkdownRenderer from '../../common/LazyMarkdownRenderer';\nimport { PersonIcon, CopilotIcon, GearIcon, AlertIcon, CheckIcon, CopyIcon, ClockIcon, PulseIcon, PencilIcon } from '@primer/octicons-react';\nimport styles from './ChatMessage.module.css';\nimport { convertTeXToMathDollars } from '../../../utils/formatters';\n// Dynamically load StreamingMessage to defer heavy modules\nconst StreamingMessage = lazy(() => import(/* webpackChunkName: \"streaming-message\" */ './StreamingMessage'));\n\n/**\n * Format time in milliseconds to a human-readable format\n * @param {number} ms - Time in milliseconds\n * @returns {string} - Formatted time string\n */\nconst formatTime = (ms) => {\n  if (!ms) return '0.0s';\n  if (ms < 1000) return `${ms}ms`;\n  return `${(ms / 1000).toFixed(1)}s`;\n};\n\n/**\n * ChatMessage component with optimized rendering for streaming content\n * @param {Object} props - Component props\n * @param {string} props.role - Message role (user, assistant, system, error)\n * @param {string} props.content - Message content\n * @param {number} props.index - Message index in the chat history\n * @param {boolean} props.isStreaming - Whether this message is currently streaming\n * @returns {JSX.Element} - Rendered component\n */\nconst ChatMessage = ({ message, isStreaming, onEditMessage }) => {\n  const [messageCopied, setMessageCopied] = useState(false);\n  \n  // Choose appropriate icon based on message role\n  const icon = useMemo(() => {\n    switch (message.role) {\n      case 'user':\n        return <PersonIcon size={16} className={styles.icon} />;\n      case 'assistant':\n        return <CopilotIcon size={16} className={styles.icon} />;\n      case 'system':\n        return <GearIcon size={16} className={styles.icon} />;\n      case 'error':\n        return <AlertIcon size={16} className={styles.icon} />;\n      default:\n        return null;\n    }\n  }, [message.role]);\n  \n  // Select CSS classes based on message role\n  const messageClass = useMemo(() => {\n    switch (message.role) {\n      case 'user':\n        return styles.userMessage;\n      case 'assistant':\n        return styles.assistantMessage;\n      case 'system':\n        return styles.systemMessage;\n      case 'error':\n        return styles.errorMessage;\n      default:\n        return '';\n    }\n  }, [message.role]);\n  \n  // Determine if we should show metrics (only for assistant messages)\n  const shouldShowMetrics = useMemo(() => {\n    // Show metrics if this is an assistant message with any metrics\n    if (message.role !== 'assistant' || !message.metrics) return false;\n    return true;\n  }, [message.role, message.metrics]);\n  \n  // Copy message content to clipboard\n  const handleCopyMessage = () => {\n    // If content is an array (multimodal message), extract just the text\n    const content = typeof message.content === 'string' \n      ? message.content \n      : Array.isArray(message.content) \n        ? message.content\n            .filter(part => part.type === 'text')\n            .map(part => part.text)\n            .join('\\n')\n        : '';\n        \n    navigator.clipboard.writeText(content).then(() => {\n      setMessageCopied(true);\n      setTimeout(() => setMessageCopied(false), 2000);\n    });\n  };\n  \n  // === BUTTON JSX (Moved here for reuse) ===\n  const copyButtonJsx = (\n    <button\n      className={`${styles.copyMessageButton} ${ // Apply conditional class later\n        (message.role === 'assistant' && shouldShowMetrics) ? styles.copyButtonInMetrics : styles.copyButtonBottomRight\n      }`}\n      onClick={handleCopyMessage}\n      aria-label=\"Copy message\"\n      title=\"Copy message\"\n    >\n      {messageCopied ? <CheckIcon size={16} /> : <CopyIcon size={16} />}\n    </button>\n  );\n\n  // Edit button only for user messages\n  const editButtonJsx = message.role === 'user' ? (\n    <button\n      className={styles.editMessageButton}\n      onClick={() => onEditMessage && onEditMessage(message)}\n      aria-label=\"Edit message\"\n      title=\"Edit message\"\n    >\n      <PencilIcon size={16} />\n    </button>\n  ) : null;\n  // ==========================================\n  \n  // Render performance metrics (Now includes the button)\n  const renderMetrics = () => {\n    if (!shouldShowMetrics || !message.metrics) return null;\n    \n    // Use the specific isStreaming prop passed down to determine if THIS message is generating\n    const isGenerating = isStreaming;\n    const { \n      elapsedTime, \n      tokenCount, \n      tokensPerSecond, \n      timeToFirstToken, \n      promptTokens, \n      completionTokens, \n      totalTokens,\n      finishReason \n    } = message.metrics;\n    \n    // Check if we have any valid metrics to show\n    const hasValidMetrics = \n      elapsedTime != null || \n      tokenCount != null || \n      tokensPerSecond != null || \n      timeToFirstToken != null ||\n      promptTokens != null ||\n      completionTokens != null ||\n      totalTokens != null ||\n      finishReason != null;\n      \n    // Don't render anything if no valid metrics are found\n    if (!hasValidMetrics) return null;\n    \n    return (\n      <div className={styles.metricsContainer}>\n        {/* Time metrics */}\n        {timeToFirstToken != null && timeToFirstToken !== 0 && (\n          <span className={styles.metric}>\n            <ClockIcon size={14} className={styles.metricIcon} />\n            First Token: {formatTime(timeToFirstToken)}\n          </span>\n        )}\n        {elapsedTime != null && elapsedTime !== 0 && (\n          <span className={styles.metric}>\n            <ClockIcon size={14} className={styles.metricIcon} />\n            Total Time: {formatTime(elapsedTime)}\n          </span>\n        )}\n        \n        {/* Token metrics */}\n        {tokenCount != null && tokenCount !== 0 && (\n          <span className={styles.metric}>\n            <CopilotIcon size={14} className={styles.metricIcon} />\n            Tokens: {tokenCount}\n          </span>\n        )}\n        {promptTokens != null && promptTokens !== 0 && (\n          <span className={styles.metric}>\n            <CopilotIcon size={14} className={styles.metricIcon} />\n            Prompt: {promptTokens}\n          </span>\n        )}\n        {completionTokens != null && completionTokens !== 0 && (\n          <span className={styles.metric}>\n            <CopilotIcon size={14} className={styles.metricIcon} />\n            Completion: {completionTokens}\n          </span>\n        )}\n        {totalTokens != null && totalTokens !== 0 && (\n          <span className={styles.metric}>\n            <CopilotIcon size={14} className={styles.metricIcon} />\n            Total: {totalTokens}\n          </span>\n        )}\n        \n        {/* Speed metrics */}\n        {tokensPerSecond != null && tokensPerSecond !== 0 && (\n          <span className={styles.metric}>\n            <PulseIcon size={14} className={styles.metricIcon} />\n            Speed: {tokensPerSecond} t/s\n          </span>\n        )}\n        \n        {/* Status */}\n        {finishReason != null && finishReason !== '' && (\n          <span className={styles.metric}>\n            <AlertIcon size={14} className={styles.metricIcon} />\n            {finishReason}\n          </span>\n        )}\n        {isGenerating && (\n          <span className={`${styles.metric} ${styles.generatingIndicator}`}>\n            <span className={styles.generatingDot}></span>\n            Generating...\n          </span>\n        )}\n        \n        {/* Copy button */}\n        {copyButtonJsx}\n      </div>\n    );\n  };\n  \n  // Process markdown content safely\n  const renderMarkdown = (content) => {\n    // Convert TeX notation if content is a string\n    const processedContent = typeof content === 'string' ? convertTeXToMathDollars(content) : content;\n    \n    // Use dynamic LazyMarkdownRenderer for non-blocking markdown rendering\n    return (\n      <Suspense fallback={null}>\n        <LazyMarkdownRenderer>\n          {processedContent}\n        </LazyMarkdownRenderer>\n      </Suspense>\n    );\n  };\n  \n  // Main return\n  return (\n    <div className={styles.message + ' ' + messageClass}>\n      {/* Avatar section */}\n      <div className={styles.avatar}>\n        {icon}\n      </div>\n      \n      {/* Message content section */}\n      <div className={styles.messageContentWrapper}>\n        <div className={styles.messageContent}>\n          {message.role === 'assistant' ? (\n            <StreamingMessage content={message.content} isStreaming={isStreaming} />\n          ) : (\n            renderMarkdown(message.content || '')\n          )}\n        </div>\n\n        {/* Render metrics (which now includes the button if applicable) */}\n        {message.role === 'assistant' && renderMetrics()}\n\n        {/* Render copy button at bottom-right for non-user assistant without metrics */}\n        {message.role !== 'user' && (message.role !== 'assistant' || !shouldShowMetrics) && copyButtonJsx}\n      </div>\n\n      {/* User message buttons container */}\n      {message.role === 'user' && (\n        <div className={styles.userButtonContainer}>\n          {editButtonJsx}\n          {copyButtonJsx}\n        </div>\n      )}\n    </div>\n  );\n};\n\nChatMessage.propTypes = {\n  message: PropTypes.shape({\n    role: PropTypes.string.isRequired,\n    content: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.array\n    ]).isRequired\n  }).isRequired,\n  isStreaming: PropTypes.bool,\n  onEditMessage: PropTypes.func\n};\n\nexport default memo(ChatMessage); ","import ReactDOM from 'react-dom'; // Import ReactDOM\nimport PropTypes from 'prop-types';\nimport styles from './ImageOverlay.module.css';\n\n/**\n * Full-screen overlay for displaying an image using React Portal.\n * Clicking anywhere on the overlay closes it.\n */\nconst ImageOverlay = ({ src, onClose }) => {\n  if (!src) return null;\n\n  // Prevent clicks on the image itself from closing if needed (optional)\n  const handleImageClick = (e) => {\n    e.stopPropagation(); // Prevents the overlay click handler from firing\n    // Could potentially add other actions here, like zoom controls\n  };\n\n  // The overlay content\n  const overlayContent = (\n    <div className={styles.overlay} onClick={onClose} role=\"dialog\" aria-modal=\"true\" title=\"Click to close image\">\n      <img \n        src={src} \n        alt=\"Full screen view\" \n        className={styles.overlayImage}\n        onClick={handleImageClick} // Handle clicks on the image specifically\n      />\n    </div>\n  );\n\n  // Use ReactDOM.createPortal to render the overlay into document.body\n  return ReactDOM.createPortal(\n    overlayContent,\n    document.body \n  );\n};\n\nImageOverlay.propTypes = {\n  /** The URL of the image to display */\n  src: PropTypes.string,\n  /** Function to call when the overlay should be closed */\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default ImageOverlay; ","import { forwardRef, useState, useMemo, memo } from 'react';\nimport styles from './MessageList.module.css';\nimport { useChat } from '../../../contexts/ChatContext';\nimport ChatMessage from '../ChatMessage';\nimport ImageOverlay from '../../common/ImageOverlay';\nimport PropTypes from 'prop-types';\n\n/**\n * Simple message list without virtualization\n * @param {Object} props - Component props\n * @param {Array} props.messages - Array of message objects\n * @param {string} props.error - Error message to display\n * @param {Function} props.onEditMessage - Function to handle message edit requests\n * @returns {JSX.Element} - Rendered component\n */\nconst MessageList = forwardRef(({ messages, error, onEditMessage }, ref) => {\n  const { isWaitingForResponse } = useChat();\n  const [overlayImageSrc, setOverlayImageSrc] = useState(null);\n\n  // Combine regular messages with error content (if any)\n  const finalMessages = useMemo(() => {\n    const result = [...messages];\n    \n    // Add error message if any\n    if (error) {\n      result.push({\n        role: 'error',\n        content: error,\n        timestamp: Date.now()\n      });\n    }\n    \n    return result;\n  }, [messages, error]);\n\n  // Process message content to extract images and text in a single pass\n  const processMessageContent = (content) => {\n    if (!content) return { images: [], text: content };\n\n    if (Array.isArray(content)) {\n      const images = [];\n      const texts = [];\n\n      content.forEach(part => {\n        if (part.type === 'image_url') {\n          images.push({\n            url: part.image_url.url,\n            alt: part.image_url.alt || part.alt || null // Support both image_url.alt and top-level alt\n          });\n        }\n        if (part.type === 'text') {\n          texts.push(part.text);\n        }\n      });\n\n      return { \n        images, \n        text: texts.join(' ') \n      };\n    }\n\n    return { images: [], text: content };\n  };\n\n  // Handlers for overlay\n  const handleImageClick = (src) => {\n    setOverlayImageSrc(src);\n  };\n\n  const handleCloseOverlay = () => {\n    setOverlayImageSrc(null);\n  };\n\n  return (\n    <>\n      <div \n        className={styles.messageListContainer} \n        ref={ref}\n        aria-live=\"polite\"\n        aria-relevant=\"additions text\"\n      >\n        {finalMessages.map((message, index) => {\n          // Determine if this message is currently streaming\n          const isLastMessage = index === finalMessages.length - 1;\n          const isStreaming = message.role === 'assistant' && \n                              isLastMessage && \n                              isWaitingForResponse &&\n                              !message.metrics?.isComplete;\n          \n          // Process message content for images and text\n          const { images, text } = processMessageContent(message.content);\n          \n          // Generate a unique key using timestamp if available, fallback to role-index\n          const messageKey = message.timestamp \n            ? `${message.role}-${message.timestamp}-${index}`\n            : `${message.role}-${index}`;\n          \n          return (\n            <div key={messageKey} className={styles.messageRow}>\n              {/* Render images first if it's a user message with images */}\n              {message.role === 'user' && images.length > 0 && (\n                <div className={styles.imageContainer}>\n                  {images.map((image, imgIndex) => (\n                    <img \n                      key={`${messageKey}-img-${imgIndex}`}\n                      src={image.url}\n                      alt={image.alt || `Uploaded image ${imgIndex + 1}`}\n                      className={styles.messageImage}\n                      onClick={() => handleImageClick(image.url)}\n                      style={{ cursor: 'pointer' }}\n                    />\n                  ))}\n                </div>\n              )}\n              {/* Render ChatMessage if there's text content or it's not a user message */}\n              {(text || message.role !== 'user') && (\n                <ChatMessage\n                  message={{ ...message, content: text || message.content }}\n                  isStreaming={isStreaming}\n                  onEditMessage={message.role === 'user' ? onEditMessage : undefined}\n                />\n              )}\n            </div>\n          );\n        })}\n      </div>\n      \n      {/* Render the overlay component */}\n      <ImageOverlay src={overlayImageSrc} onClose={handleCloseOverlay} />\n    </>\n  );\n});\n\nMessageList.displayName = 'MessageList';\n\nMessageList.propTypes = {\n  messages: PropTypes.array.isRequired,\n  error: PropTypes.string,\n  onEditMessage: PropTypes.func\n};\n\nexport default memo(MessageList); ","import React, { useState, useEffect, Suspense } from 'react';\n\n/**\n * LazyMarkdownRenderer dynamically imports react-markdown and markdown plugins\n * to avoid bundling heavy libraries in the initial bundle.\n */\nexport default function LazyMarkdownRenderer({ children, components = {} }) {\n  const [modules, setModules] = useState(null);\n\n  useEffect(() => {\n    let canceled = false;\n    Promise.all([\n      import(/* webpackChunkName: \"react-markdown\" */ 'react-markdown'),\n      import(/* webpackChunkName: \"remark-gfm\" */ 'remark-gfm'),\n      import(/* webpackChunkName: \"remark-emoji\" */ 'remark-emoji'),\n      import(/* webpackChunkName: \"remark-math\" */ 'remark-math'),\n      import(/* webpackChunkName: \"rehype-katex\" */ 'rehype-katex'),\n    ]).then(([md, gfm, emoji, math, katex]) => {\n      if (canceled) return;\n      // Load KaTeX CSS\n      import(/* webpackChunkName: \"katex-css\" */ 'katex/dist/katex.min.css');\n      setModules({\n        Markdown: md.default,\n        remarkPlugins: [gfm.default, emoji.default, math.default],\n        rehypePlugins: [katex.default]\n      });\n    }).catch(err => console.error('LazyMarkdownRenderer load error:', err));\n    return () => { canceled = true; };\n  }, []);\n\n  if (!modules) {\n    return null;\n  }\n\n  const { Markdown, remarkPlugins, rehypePlugins } = modules;\n  return (\n    <Suspense fallback={null}>\n      <Markdown\n        remarkPlugins={remarkPlugins}\n        rehypePlugins={rehypePlugins}\n        components={components}\n        skipHtml={false}\n      >\n        {children}\n      </Markdown>\n    </Suspense>\n  );\n} ","import { memo } from 'react';\nimport { useTheme } from '../../../contexts/ThemeContext';\nimport styles from './ThemeToggle.module.css';\n\n/**\n * Theme toggle button that switches between light and dark modes\n * @returns {JSX.Element} - Rendered toggle button\n */\nconst ThemeToggle = memo(() => {\n  const { theme, toggleTheme } = useTheme();\n  \n  return (\n    <button \n      className={styles.themeToggle} \n      onClick={toggleTheme}\n      aria-label={`Switch to ${theme === 'dark' ? 'light' : 'dark'} mode`}\n      title={`Switch to ${theme === 'dark' ? 'light' : 'dark'} mode`}\n    >\n      {theme === 'dark' ? (\n        <SunIcon className={styles.icon} />\n      ) : (\n        <MoonIcon className={styles.icon} />\n      )}\n    </button>\n  );\n});\n\n// SVG icons as components for better performance\nconst SunIcon = ({ className }) => (\n  <svg \n    xmlns=\"http://www.w3.org/2000/svg\" \n    viewBox=\"0 0 24 24\" \n    fill=\"none\" \n    stroke=\"currentColor\" \n    strokeWidth=\"2\" \n    strokeLinecap=\"round\" \n    strokeLinejoin=\"round\" \n    className={className}\n    aria-hidden=\"true\"\n  >\n    <circle cx=\"12\" cy=\"12\" r=\"5\"></circle>\n    <line x1=\"12\" y1=\"1\" x2=\"12\" y2=\"3\"></line>\n    <line x1=\"12\" y1=\"21\" x2=\"12\" y2=\"23\"></line>\n    <line x1=\"4.22\" y1=\"4.22\" x2=\"5.64\" y2=\"5.64\"></line>\n    <line x1=\"18.36\" y1=\"18.36\" x2=\"19.78\" y2=\"19.78\"></line>\n    <line x1=\"1\" y1=\"12\" x2=\"3\" y2=\"12\"></line>\n    <line x1=\"21\" y1=\"12\" x2=\"23\" y2=\"12\"></line>\n    <line x1=\"4.22\" y1=\"19.78\" x2=\"5.64\" y2=\"18.36\"></line>\n    <line x1=\"18.36\" y1=\"5.64\" x2=\"19.78\" y2=\"4.22\"></line>\n  </svg>\n);\n\nconst MoonIcon = ({ className }) => (\n  <svg \n    xmlns=\"http://www.w3.org/2000/svg\" \n    viewBox=\"0 0 24 24\" \n    fill=\"none\" \n    stroke=\"currentColor\" \n    strokeWidth=\"2\" \n    strokeLinecap=\"round\" \n    strokeLinejoin=\"round\" \n    className={className}\n    aria-hidden=\"true\"\n  >\n    <path d=\"M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z\"></path>\n  </svg>\n);\n\n// Display name for debugging\nThemeToggle.displayName = 'ThemeToggle';\n\nexport default ThemeToggle; ","import { useState, useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactMarkdown from 'react-markdown';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport styles from './ChatMessage.module.css';\nimport atomDark from 'react-syntax-highlighter/dist/esm/styles/prism/atom-dark';\nimport prism from 'react-syntax-highlighter/dist/esm/styles/prism/prism';\nimport { useTheme } from '../../../contexts/ThemeContext';\nimport remarkGfm from 'remark-gfm';\nimport remarkEmoji from 'remark-emoji';\nimport remarkMath from 'remark-math';\nimport rehypeKatex from 'rehype-katex';\nimport 'katex/dist/katex.min.css';\nimport { convertTeXToMathDollars } from '../../../utils/formatters';\n\n// Copy Icon SVG (simple inline version)\nconst CopyIcon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"14\" height=\"14\">\n    <path fillRule=\"evenodd\" d=\"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z\"></path>\n    <path fillRule=\"evenodd\" d=\"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25h-7.5z\"></path>\n  </svg>\n);\n\n// Check Icon SVG (simple inline version)\nconst CheckIcon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"14\" height=\"14\">\n    <path fillRule=\"evenodd\" d=\"M13.78 4.22a.75.75 0 010 1.06l-7.25 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a.75.75 0 011.06 0z\"></path>\n  </svg>\n);\n\n/**\n * StreamingMessage component using react-markdown for rendering the entire content.\n */\nconst StreamingMessage = ({ content, isStreaming }) => {\n  const { isDark } = useTheme();\n  const [copiedCodeMap, setCopiedCodeMap] = useState({}); // Use a map for multiple blocks\n\n  const syntaxTheme = isDark ? atomDark : prism;\n\n  // Handle copy code to clipboard, using index as key\n  const handleCopyCode = useCallback((code, index) => {\n    navigator.clipboard.writeText(code).then(() => {\n      setCopiedCodeMap(prev => ({ ...prev, [index]: true }));\n      setTimeout(() => {\n        setCopiedCodeMap(prev => ({ ...prev, [index]: false }));\n      }, 2000);\n    });\n  }, []);\n\n  // Custom component for rendering code blocks\n  const CodeBlock = useCallback(({ node, inline, className, children, ...props }) => {\n    // Only treat content wrapped in triple backticks as code blocks (ignore indents)\n    const match = /language-(\\w+)/.exec(className || '');\n    const language = match ? match[1] : 'plaintext'; // Default to plaintext if no language class\n    const codeContent = String(children).replace(/\\n$/, ''); // Get code content\n\n    // Use index from node's position if available, fallback to content hash or similar\n    const codeBlockKey = node?.position?.start?.offset ?? codeContent.substring(0, 20); // Example key\n    const isCopied = copiedCodeMap[codeBlockKey];\n\n    return !inline ? (\n      <div className={styles.codeBlockContainer}>\n        <div className={styles.codeHeader}>\n          <span className={styles.language}>{language}</span>\n          <button\n            className={styles.copyButton}\n            onClick={() => handleCopyCode(codeContent, codeBlockKey)}\n            disabled={isCopied}\n          >\n            {isCopied ? (\n              <> <CheckIcon /> Copied! </>\n            ) : (\n              <> <CopyIcon /> Copy </>\n            )}\n          </button>\n        </div>\n        <SyntaxHighlighter\n          style={syntaxTheme}\n          language={language}\n          PreTag=\"div\" // Use div instead of pre, SyntaxHighlighter wraps in its own pre\n          className={styles.pre}\n          wrapLines={true} // Consider wrapping lines based on preference\n          {...props}\n        >\n          {codeContent}\n        </SyntaxHighlighter>\n      </div>\n    ) : (\n      // Render inline code with specific styling\n      <code className={`${styles.inlineCode} ${className || ''}`} {...props}>\n        {children}\n      </code>\n    );\n  }, [syntaxTheme, handleCopyCode, copiedCodeMap]);\n\n  // Define components for ReactMarkdown\n  const markdownComponents = useMemo(() => ({\n    code: CodeBlock,\n  }), [CodeBlock]); // CodeBlock is the dependency\n\n  // Apply streaming class based on the passed-in prop\n  const markdownClassName = `${styles.markdown} ${styles.streamingContent} ${isStreaming ? styles.streaming : ''}`;\n\n  // Use a zero-width space for this purpose.\n  const actualContent = typeof content === 'string' ? content : String(content || '');\n  const contentToRender = !actualContent ? '\\u200B' : convertTeXToMathDollars(actualContent);\n\n  return (\n    <div className={markdownClassName}>\n      <ReactMarkdown\n        remarkPlugins={[remarkGfm, remarkEmoji, remarkMath]}\n        rehypePlugins={[rehypeKatex]}\n        components={markdownComponents}\n        // skipHtml={false}\n      >\n        {contentToRender}\n      </ReactMarkdown>\n    </div>\n  );\n};\n\nStreamingMessage.propTypes = {\n  content: PropTypes.string,\n  isStreaming: PropTypes.bool // Add prop type for isStreaming\n};\n\nexport default StreamingMessage;\n","import React from 'react';\nimport styles from './Spinner.module.css';\n\n/**\n * Loading spinner component with multiple sizes\n * @param {Object} props - Component props\n * @param {string} [props.size='medium'] - Size of spinner (small, medium, large)\n * @param {string} [props.color] - Optional custom color\n * @returns {JSX.Element} - Rendered spinner\n */\nconst Spinner = ({ size = 'medium', color }) => {\n  const sizeClass = styles[size] || styles.medium;\n  \n  const spinnerStyle = color ? { borderTopColor: color } : {};\n  \n  return (\n    <div className={`${styles.spinnerContainer} ${sizeClass}`}>\n      <div \n        className={styles.spinner} \n        style={spinnerStyle}\n        aria-label=\"Loading\"\n        role=\"status\"\n      />\n    </div>\n  );\n};\n\n// Wrap with React.memo to prevent unnecessary re-renders\nexport default React.memo(Spinner); ","import PropTypes from 'prop-types';\nimport styles from './GlobalMetricsBar.module.css';\n\n/**\n * Displays global/session-level metrics above the chat input.\n */\nconst GlobalMetricsBar = ({ metrics = null, modelName = null }) => {\n  if (!metrics) {\n    return null; // Don't render if no metrics are available\n  }\n\n  // Example metrics - adapt based on what `useChatLogic` provides in `metrics`\n  const totalMessages = metrics.totalMessages || 0;\n  const avgResponseTime = metrics.avgResponseTime?.toFixed(2) || 'N/A';\n  const totalTokens = metrics.totalTokens || 0;\n\n  return (\n    <div className={styles.metricsBar}>\n      {modelName && (\n        <span className={styles.metricItem} title=\"Current Model\"> \n          🧠 {modelName}\n        </span>\n      )}\n      <span className={styles.metricItem} title=\"Total Messages in Session\"> \n        💬 {totalMessages} \n      </span>\n      <span className={styles.metricItem} title=\"Average Response Time (seconds)\">\n        ⏱️ {avgResponseTime}s \n      </span>\n       <span className={styles.metricItem} title=\"Total Tokens Used in Session\"> \n        #️⃣ {totalTokens} \n      </span>\n       {/* Add more metrics as needed */}\n    </div>\n  );\n};\n\nGlobalMetricsBar.propTypes = {\n  /** Object containing global metrics data */\n  metrics: PropTypes.shape({\n    totalMessages: PropTypes.number,\n    avgResponseTime: PropTypes.number,\n    totalTokens: PropTypes.number,\n    // Add other expected metrics\n  }),\n  /** Name of the currently selected model */\n  modelName: PropTypes.string,\n};\n\nexport default GlobalMetricsBar; ","import { useState, useRef, useEffect } from 'react';\nimport { KebabHorizontalIcon } from '@primer/octicons-react';\nimport styles from './MoreActions.module.css';\n\n/**\n * More Actions component that shows/hides additional action buttons\n * @param {Object} props - Component props\n * @param {Array} props.actions - Array of action objects with { icon, label, onClick }\n * @returns {JSX.Element} - Rendered component\n */\nconst MoreActions = ({ actions = [] }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const menuRef = useRef(null);\n  \n  // Close menu when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (menuRef.current && !menuRef.current.contains(event.target)) {\n        setIsOpen(false);\n      }\n    };\n    \n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n  \n  const toggleMenu = () => {\n    setIsOpen(!isOpen);\n  };\n  \n  return (\n    <div className={styles.moreActionsContainer} ref={menuRef}>\n      <button \n        className={`${styles.moreButton} ${isOpen ? styles.active : ''}`}\n        onClick={toggleMenu}\n        aria-label={isOpen ? 'Close actions menu' : 'Open actions menu'}\n        aria-expanded={isOpen}\n      >\n        <KebabHorizontalIcon size={20} className={styles.icon} />\n      </button>\n      \n      <div className={`${styles.actionsMenu} ${isOpen ? styles.open : ''}`}>\n        {actions.map((action, index) => (\n          <button\n            key={index}\n            className={styles.actionButton}\n            onClick={() => {\n              action.onClick();\n              setIsOpen(false);\n            }}\n            aria-label={action.label}\n            style={{\n              // Add staggered animation delay for each button\n              transitionDelay: isOpen ? `${index * 50}ms` : '0ms'\n            }}\n          >\n            <span className={styles.actionIcon}>{action.icon}</span>\n            <span className={styles.actionLabel}>{action.label}</span>\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default MoreActions; "],"names":["StreamingMessage","lazy","formatTime","ms","toFixed","ChatMessage","_ref","message","isStreaming","onEditMessage","messageCopied","setMessageCopied","useState","icon","useMemo","role","_jsx","PersonIcon","size","className","styles","CopilotIcon","GearIcon","AlertIcon","messageClass","userMessage","assistantMessage","systemMessage","errorMessage","shouldShowMetrics","metrics","copyButtonJsx","copyMessageButton","copyButtonInMetrics","copyButtonBottomRight","onClick","handleCopyMessage","content","Array","isArray","filter","part","type","map","text","join","navigator","clipboard","writeText","then","setTimeout","title","children","CheckIcon","CopyIcon","editButtonJsx","editMessageButton","PencilIcon","_jsxs","avatar","messageContentWrapper","messageContent","processedContent","convertTeXToMathDollars","Suspense","fallback","LazyMarkdownRenderer","renderMarkdown","renderMetrics","isGenerating","elapsedTime","tokenCount","tokensPerSecond","timeToFirstToken","promptTokens","completionTokens","totalTokens","finishReason","metricsContainer","metric","ClockIcon","metricIcon","PulseIcon","generatingIndicator","generatingDot","userButtonContainer","memo","src","onClose","overlayContent","overlay","alt","overlayImage","e","stopPropagation","ReactDOM","document","body","MessageList","forwardRef","ref","messages","error","isWaitingForResponse","useChat","overlayImageSrc","setOverlayImageSrc","finalMessages","result","push","timestamp","Date","now","_Fragment","messageListContainer","index","_message$metrics","isLastMessage","length","isComplete","images","texts","forEach","url","image_url","processMessageContent","messageKey","messageRow","imageContainer","image","imgIndex","messageImage","handleImageClick","style","cursor","undefined","ImageOverlay","handleCloseOverlay","displayName","components","modules","setModules","useEffect","canceled","Promise","all","_ref2","md","gfm","emoji","math","katex","Markdown","default","remarkPlugins","rehypePlugins","catch","err","skipHtml","ThemeToggle","theme","toggleTheme","useTheme","themeToggle","SunIcon","MoonIcon","xmlns","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","cx","cy","r","x1","y1","x2","y2","d","width","height","fillRule","isDark","copiedCodeMap","setCopiedCodeMap","syntaxTheme","atomDark","prism","handleCopyCode","useCallback","code","prev","CodeBlock","_node$position$start$","_node$position","_node$position$start","node","inline","props","match","exec","language","codeContent","String","replace","codeBlockKey","position","start","offset","substring","isCopied","inlineCode","codeBlockContainer","codeHeader","copyButton","disabled","SyntaxHighlighter","PreTag","pre","wrapLines","markdownComponents","markdownClassName","markdown","streamingContent","streaming","actualContent","contentToRender","ReactMarkdown","remarkGfm","remarkEmoji","remarkMath","rehypeKatex","React","color","sizeClass","medium","spinnerStyle","borderTopColor","spinnerContainer","spinner","GlobalMetricsBar","_metrics$avgResponseT","modelName","totalMessages","avgResponseTime","metricsBar","metricItem","MoreActions","actions","isOpen","setIsOpen","menuRef","useRef","handleClickOutside","event","current","contains","target","addEventListener","removeEventListener","moreActionsContainer","moreButton","active","toggleMenu","KebabHorizontalIcon","actionsMenu","open","action","actionButton","label","transitionDelay","actionIcon","actionLabel"],"sourceRoot":""}