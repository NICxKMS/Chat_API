{"version":3,"file":"static/js/common-more-actions.3cabb19e20.chunk.v1_7_5.js","mappings":"0NAcA,MAmFA,EAnFoBA,IAAsE,IAArE,QAAEC,EAAU,GAAE,uBAAEC,EAAyB,sBAAsBF,EAClF,MAAOG,EAAQC,IAAaC,EAAAA,EAAAA,WAAS,GAC/BC,GAAUC,EAAAA,EAAAA,QAAO,OACjB,QAAEC,EAAO,UAAEC,EAAS,aAAEC,IAAiBC,EAAAA,EAAAA,MAG7CC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAsBC,IACtBR,EAAQS,UAAYT,EAAQS,QAAQC,SAASF,EAAMG,SACrDb,GAAU,EACZ,EAIF,OADAc,SAASC,iBAAiB,YAAaN,GAChC,KACLK,SAASE,oBAAoB,YAAaP,EAAmB,CAC9D,GACA,IAEH,MAKMQ,GAAaC,EAAAA,EAAAA,UAAQ,IAAM,CAE/B,CACEC,MAAMC,EAAAA,EAAAA,KAACC,EAAAA,IAAQ,CAACC,KAAM,KACtBC,MAAO,WACPC,QAASpB,GAEX,CACEe,MAAMC,EAAAA,EAAAA,KAACK,EAAAA,IAAS,CAACH,KAAM,KACvBC,MAAO,aACPC,QAASnB,GAEX,CACEc,MAAMC,EAAAA,EAAAA,KAACM,EAAAA,IAAY,CAACJ,KAAM,KAC1BC,MAAO,gBACPC,QAASlB,MAGRT,IACF,CAACO,EAASC,EAAWC,EAAcT,IAEtC,OACE8B,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAAA,EAAOC,qBAAsBC,IAAK7B,EAAQ8B,SAAA,EACxDZ,EAAAA,EAAAA,KAAA,UACEQ,UAAW,GAAG9B,KAA0BC,EAAS8B,EAAAA,EAAOI,KAAO,KAC/DT,QA9BaU,KACjBlC,GAAWD,EAAO,EA8Bd,aAAYA,EAAS,qBAAuB,oBAC5C,gBAAeA,EAAOiC,UAEtBZ,EAAAA,EAAAA,KAACe,EAAAA,IAAmB,CAACb,KAAM,GAAIc,MAAO,CAAEC,UAAW,sBAGrDjB,EAAAA,EAAAA,KAAA,OACEQ,UAAW,GAAGC,EAAAA,EAAOS,eAAevC,EAAS8B,EAAAA,EAAOI,KAAO,KAC3DM,KAAK,OAAMP,SAEVf,EAAWuB,KAAI,CAACC,EAAQC,KACvBf,EAAAA,EAAAA,MAAA,UAEEC,UAAWC,EAAAA,EAAOc,aAClBJ,KAAK,WACLf,QAASA,KACHiB,EAAOjB,SAASiB,EAAOjB,UAC3BxB,GAAU,EAAM,EAElB,aAAYyC,EAAOlB,MACnBa,MAAO,CACLQ,gBAAiB7C,EAAoB,GAAR2C,EAAH,KAAoB,OAC9CV,SAAA,EAEFZ,EAAAA,EAAAA,KAAA,QAAMQ,UAAWC,EAAAA,EAAOgB,WAAWb,SAAES,EAAOtB,QAC5CC,EAAAA,EAAAA,KAAA,QAAMQ,UAAWC,EAAAA,EAAOiB,YAAYd,SAAES,EAAOlB,UAbxCmB,SAiBP,C","sources":["components/common/MoreActions/index.js"],"sourcesContent":["import { useState, useRef, useEffect, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { KebabHorizontalIcon, PlusIcon, TrashIcon, DownloadIcon } from '@primer/octicons-react';\nimport { useChatControl } from '../../../contexts/ChatControlContext';\nimport '../../../styles/common/buttons.css';\nimport styles from './MoreActions.module.css';\n\n/**\n * More Actions component that shows/hides additional action buttons\n * @param {Object} props - Component props\n * @param {Array} props.actions - Array of action objects with { icon, label, onClick }\n * @param {string} [props.triggerButtonClassName='circleActionButton'] - Optional class for the trigger button\n * @returns {JSX.Element} - Rendered component\n */\nconst MoreActions = ({ actions = [], triggerButtonClassName = 'circleActionButton' }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const menuRef = useRef(null);\n  const { newChat, resetChat, downloadChat } = useChatControl();\n  \n  // Close menu when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (menuRef.current && !menuRef.current.contains(event.target)) {\n        setIsOpen(false);\n      }\n    };\n    \n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n  \n  const toggleMenu = () => {\n    setIsOpen(!isOpen);\n  };\n  \n  // Combine standard actions from context with custom actions from props\n  const allActions = useMemo(() => [\n    // Standard Actions\n    {\n      icon: <PlusIcon size={16} />,\n      label: 'New Chat',\n      onClick: newChat\n    },\n    {\n      icon: <TrashIcon size={16} />,\n      label: 'Reset Chat',\n      onClick: resetChat\n    },\n    {\n      icon: <DownloadIcon size={16} />,\n      label: 'Download Chat',\n      onClick: downloadChat\n    },\n    // Custom actions passed via props\n    ...actions\n  ], [newChat, resetChat, downloadChat, actions]);\n  \n  return (\n    <div className={styles.moreActionsContainer} ref={menuRef}>\n      <button\n        className={`${triggerButtonClassName} ${isOpen ? styles.open : ''}`}\n        onClick={toggleMenu}\n        aria-label={isOpen ? 'Close actions menu' : 'Open actions menu'}\n        aria-expanded={isOpen}\n      >\n        <KebabHorizontalIcon size={20} style={{ transform: 'rotate(90deg)' }} />\n      </button>\n      \n      <div \n        className={`${styles.actionsMenu} ${isOpen ? styles.open : ''}`}\n        role=\"menu\"\n      >\n        {allActions.map((action, index) => (\n          <button\n            key={index}\n            className={styles.actionButton}\n            role=\"menuitem\"\n            onClick={() => {\n              if (action.onClick) action.onClick();\n              setIsOpen(false);\n            }}\n            aria-label={action.label}\n            style={{\n              transitionDelay: isOpen ? `${index * 50}ms` : '0ms'\n            }}\n          >\n            <span className={styles.actionIcon}>{action.icon}</span>\n            <span className={styles.actionLabel}>{action.label}</span>\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default MoreActions;\n\n// Define PropTypes for the component\nMoreActions.propTypes = {\n  actions: PropTypes.arrayOf(PropTypes.shape({\n    icon: PropTypes.node.isRequired,\n    label: PropTypes.string.isRequired,\n    onClick: PropTypes.func.isRequired\n  })),\n  triggerButtonClassName: PropTypes.string\n};"],"names":["_ref","actions","triggerButtonClassName","isOpen","setIsOpen","useState","menuRef","useRef","newChat","resetChat","downloadChat","useChatControl","useEffect","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","allActions","useMemo","icon","_jsx","PlusIcon","size","label","onClick","TrashIcon","DownloadIcon","_jsxs","className","styles","moreActionsContainer","ref","children","open","toggleMenu","KebabHorizontalIcon","style","transform","actionsMenu","role","map","action","index","actionButton","transitionDelay","actionIcon","actionLabel"],"sourceRoot":""}