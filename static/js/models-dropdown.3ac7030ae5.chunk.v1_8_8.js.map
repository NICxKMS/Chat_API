{"version":3,"file":"static/js/models-dropdown.3ac7030ae5.chunk.v1_8_8.js","mappings":"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","sources":["components/models/ModelItem/index.js","components/models/ModelSearch/index.js","components/models/ModelDropdown/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js"],"sourcesContent":["import { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ModelItem.module.css';\n\n/**\n * Component for displaying a single model\n * @param {Object} props - Component props\n * @param {Object} props.model - Model data\n * @param {boolean} props.selected - Whether the model is currently selected\n * @param {Function} props.onClick - Function to handle model selection\n * @param {string} props.searchTerm - Current search term for highlighting\n * @returns {JSX.Element} - Rendered component\n */\nconst ModelItem = memo(({ \n  model, \n  selected, \n  onClick,\n  searchTerm\n}) => {\n  // Highlight matching text if searchTerm is provided\n  const highlightMatch = (text) => {\n    if (!searchTerm || !text) return text;\n    \n    const regex = new RegExp(`(${searchTerm})`, 'gi');\n    const parts = text.split(regex);\n    \n    return (\n      <>\n        {parts.map((part, i) => (\n          regex.test(part) ? (\n            <span key={i} className={styles.ModelItem__highlight}>{part}</span>\n          ) : (\n            <span key={i}>{part}</span>\n          )\n        ))}\n      </>\n    );\n  };\n  \n  return (\n    <div \n      className={`${styles.ModelItem} ${selected ? styles['ModelItem--selected'] : ''}`}\n      onClick={() => onClick(model)}\n      role=\"option\"\n      aria-selected={selected}\n    >\n      <div className={styles.ModelItem__icon}>\n        {model.series?.charAt(0) || model.name.charAt(0)}\n      </div>\n      \n      <div className={styles.ModelItem__details}>\n        <div className={styles.ModelItem__name}>\n          {highlightMatch(model.name)}\n        </div>\n        \n        {model.description && (\n          <div className={styles.ModelItem__description}>\n            {highlightMatch(model.description)}\n          </div>\n        )}\n        \n        {model.tags && model.tags.length > 0 && (\n          <div className={styles.ModelItem__tags}>\n            {model.tags.map(tag => (\n              <span \n                key={tag} \n                className={styles.ModelItem__tag}\n                style={{\n                  backgroundColor: \n                    searchTerm && \n                    tag.toLowerCase().includes(searchTerm.toLowerCase()) \n                      ? 'rgba(var(--button-bg-rgb), 0.2)' \n                      : undefined\n                }}\n              >\n                {highlightMatch(tag)}\n              </span>\n            ))}\n          </div>\n        )}\n      </div>\n      \n      {selected && (\n        <div className={styles.ModelItem__selectedIndicator} data-testid=\"check-icon\">\n          <CheckIcon className={styles.ModelItem__checkIcon} />\n        </div>\n      )}\n    </div>\n  );\n});\n\n// SVG Check icon as a component\nconst CheckIcon = ({ className }) => (\n  <svg \n    xmlns=\"http://www.w3.org/2000/svg\" \n    viewBox=\"0 0 24 24\" \n    fill=\"none\" \n    stroke=\"currentColor\" \n    strokeWidth=\"3\" \n    strokeLinecap=\"round\" \n    strokeLinejoin=\"round\" \n    className={className}\n    aria-hidden=\"true\"\n  >\n    <polyline points=\"20 6 9 17 4 12\" />\n  </svg>\n);\n\nModelItem.propTypes = {\n  model: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    description: PropTypes.string,\n    series: PropTypes.string,\n    providerName: PropTypes.string,\n    typeGroupName: PropTypes.string,\n    tags: PropTypes.arrayOf(PropTypes.string)\n  }).isRequired,\n  selected: PropTypes.bool.isRequired,\n  onClick: PropTypes.func.isRequired,\n  searchTerm: PropTypes.string\n};\n\n// Display name for debugging\nModelItem.displayName = 'ModelItem';\n\nexport default ModelItem; ","import { useCallback, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { SearchIcon, XIcon } from '@primer/octicons-react';\nimport styles from './ModelSearch.module.css';\n\n/**\n * Search input for filtering models\n * @param {Object} props - Component props\n * @param {string} props.searchTerm - Current search term\n * @param {Function} props.onSearchChange - Search term change handler\n * @param {number} props.resultCount - Number of search results\n * @returns {JSX.Element} - Rendered component\n */\nconst ModelSearch = ({ searchTerm, onSearchChange, resultCount }) => {\n  const inputRef = useRef(null);\n  \n  // Handle search input changes\n  const handleInputChange = useCallback((e) => {\n    // Pass the value directly instead of the event object\n    if (e && typeof e === 'object' && e.target) {\n      onSearchChange(e.target.value);\n    } else {\n      console.warn('Invalid event object in ModelSearch handleInputChange');\n    }\n  }, [onSearchChange]);\n  \n  // Clear search input\n  const handleClearSearch = useCallback(() => {\n    // Pass empty string directly\n    onSearchChange('');\n    \n    // Focus the input after clearing\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [onSearchChange]);\n  \n  return (\n    <div className={styles.ModelSearch}>\n      <div className={styles.ModelSearch__inputWrapper}>\n        <SearchIcon className={styles.ModelSearch__icon} size={16} />\n        \n        <input\n          ref={inputRef}\n          type=\"text\"\n          className={styles.ModelSearch__input}\n          placeholder=\"Search models...\"\n          value={searchTerm}\n          onChange={handleInputChange}\n          aria-label=\"Search models\"\n        />\n        \n        {searchTerm && (\n          <button \n            className={styles.ModelSearch__clearButton} \n            onClick={handleClearSearch}\n            aria-label=\"Clear search\"\n          >\n            <XIcon className={styles.ModelSearch__clearIcon} size={16} />\n          </button>\n        )}\n      </div>\n      \n      {searchTerm && (\n        <div className={styles.ModelSearch__results}>\n          {resultCount} {resultCount === 1 ? 'result' : 'results'}\n        </div>\n      )}\n    </div>\n  );\n};\n\nModelSearch.propTypes = {\n  searchTerm: PropTypes.string.isRequired,\n  onSearchChange: PropTypes.func.isRequired,\n  resultCount: PropTypes.number.isRequired\n};\n\nexport default ModelSearch; ","import React, { \n  useEffect, \n  useRef, \n  useCallback, \n  useMemo, \n  useState\n} from 'react';\nimport PropTypes from 'prop-types';\nimport { useModel, useModelFilter } from '../../../contexts/ModelContext';\nimport ModelItem from '../ModelItem';\nimport ModelSearch from '../ModelSearch';\nimport styles from './ModelDropdown.module.css';\n\n/**\n * SelectedModelDisplay component showing the currently selected model\n */\nconst SelectedModelDisplay = React.memo(({ selectedModel }) => (\n  <div className={styles.ModelDropdown__selectedModelContainer}>\n    <div className={styles.ModelDropdown__selectedModelLabel}>Current Model:</div>\n    <div className={styles.ModelDropdown__selectedModelInfo}>\n      <h3 className={styles.ModelDropdown__modelName}>\n        {selectedModel ? selectedModel.name : 'No model selected'}\n      </h3>\n      {selectedModel && (\n        <p className={styles.ModelDropdown__modelDescription}>\n          {selectedModel.provider ? `${selectedModel.provider} - ${selectedModel.type}` : 'Model details unavailable'}\n        </p>\n      )}\n    </div>\n  </div>\n));\n\nSelectedModelDisplay.propTypes = {\n  selectedModel: PropTypes.object\n};\n\n/**\n * CapabilityTabs component for selecting model categories\n */\nconst CapabilityTabs = React.memo(({ capabilities, activeCapability, onSelectCapability }) => {\n  const tabsRef = useRef(null);\n  \n  // Scroll the selected tab into view when it changes\n  useEffect(() => {\n    if (tabsRef.current) {\n      const activeTab = tabsRef.current.querySelector(`.${styles['ModelDropdown__capabilityTab--active']}`);\n      if (activeTab) {\n        // Calculate position to center the tab in the container\n        const container = tabsRef.current;\n        const containerWidth = container.offsetWidth;\n        const tabWidth = activeTab.offsetWidth;\n        const tabLeft = activeTab.offsetLeft;\n        \n        // Center the tab\n        const scrollPosition = tabLeft - (containerWidth / 2) + (tabWidth / 2);\n        container.scrollTo({\n          left: Math.max(0, scrollPosition),\n          behavior: 'smooth'\n        });\n      }\n    }\n  }, [activeCapability]);\n  \n  return (\n    <div className={styles.ModelDropdown__capabilityTabs} ref={tabsRef}>\n      {Object.keys(capabilities).map(capability => (\n        <button\n          key={capability}\n          className={`${styles.ModelDropdown__capabilityTab} ${activeCapability === capability ? styles['ModelDropdown__capabilityTab--active'] : ''}`}\n          onClick={() => onSelectCapability(capability)}\n        >\n          {capability}\n          <span> ({capabilities[capability]})</span>\n        </button>\n      ))}\n    </div>\n  );\n});\n\nCapabilityTabs.propTypes = {\n  capabilities: PropTypes.object.isRequired,\n  activeCapability: PropTypes.string.isRequired,\n  onSelectCapability: PropTypes.func.isRequired\n};\n\n/**\n * ModelList component showing the filtered and grouped models\n */\nconst ModelList = React.memo(({ isLoading, groupedModels, selectedModel, onSelectModel, searchTerm, totalCount, activeCapability, onClearSearch }) => (\n  <div className={styles.ModelDropdown__modelList} role=\"listbox\">\n    {isLoading ? (\n      <div className={styles.ModelDropdown__loading}>Loading models...</div>\n    ) : groupedModels && Object.keys(groupedModels).length > 0 ? (\n      groupedModels.map((group) => (\n        <div key={`${group.provider}-${group.type}`}>\n          <div className={styles.ModelDropdown__providerTypeHeader}>\n            <span className={styles.ModelDropdown__providerName}>{group.provider}</span>\n            <span className={styles.ModelDropdown__providerTypeSeparator}>→</span>\n            <span className={styles.ModelDropdown__typeLabel}>{group.type}</span>\n            <span className={styles.modelCount}>({group.models.length})</span>\n          </div>\n          \n          {group.models.map(model => (\n            <ModelItem\n              key={model.id}\n              model={model}\n              selected={selectedModel?.id === model.id}\n              onClick={onSelectModel}\n              searchTerm={searchTerm}\n            />\n          ))}\n        </div>\n      ))\n    ) : (\n      searchTerm && totalCount === 0 ? (\n        <div className={styles.ModelDropdown__noResults}>\n          No models found matching \"{searchTerm}\"\n          <button \n            className={styles.ModelDropdown__clearSearch}\n            onClick={onClearSearch}\n          >\n            Clear search\n          </button>\n        </div>\n      ) : (\n        <div className={styles.ModelDropdown__noResults}>\n          No {activeCapability.toLowerCase()} models available\n        </div>\n      )\n    )}\n  </div>\n));\n\nModelList.propTypes = {\n  isLoading: PropTypes.bool.isRequired,\n  groupedModels: PropTypes.array,\n  selectedModel: PropTypes.object,\n  onSelectModel: PropTypes.func.isRequired,\n  searchTerm: PropTypes.string,\n  totalCount: PropTypes.number,\n  activeCapability: PropTypes.string.isRequired,\n  onClearSearch: PropTypes.func.isRequired\n};\n\n/**\n * SearchContainer component for model searching\n */\nconst SearchContainer = React.memo(({ searchTerm, onSearchChange, totalCount }) => (\n  <div className={styles.ModelDropdown__searchContainer}>\n    <ModelSearch \n      searchTerm={searchTerm}\n      onSearchChange={onSearchChange}\n      resultCount={totalCount} \n    />\n  </div>\n));\n\nSearchContainer.propTypes = {\n  searchTerm: PropTypes.string,\n  onSearchChange: PropTypes.func.isRequired,\n  totalCount: PropTypes.number\n};\n\n/**\n * ModelSelectionPanel component for selecting models from a filterable list\n */\nconst ModelSelectionPanel = React.forwardRef(({ \n  isExperimentalModelsEnabled, \n  toggleExperimentalModels, \n  capabilitiesWithCounts, \n  activeCapability, \n  setActiveCapability,\n  isLoading,\n  groupedModels,\n  selectedModel,\n  handleSelectModel,\n  searchTerm,\n  totalCount,\n  handleClearSearch \n}, ref) => (\n  <div className={styles.ModelDropdown__modelsContainer} ref={ref}>\n    <div className={styles.ModelDropdown__fixedHeader}>\n      <CapabilityTabs \n        capabilities={capabilitiesWithCounts} \n        activeCapability={activeCapability} \n        onSelectCapability={setActiveCapability} \n      />\n    </div>\n    \n    <div className={styles.ModelDropdown__scrollableModelList}>\n      <ModelList \n        isLoading={isLoading}\n        groupedModels={groupedModels}\n        selectedModel={selectedModel}\n        onSelectModel={handleSelectModel}\n        searchTerm={searchTerm}\n        totalCount={totalCount}\n        activeCapability={activeCapability}\n        onClearSearch={handleClearSearch}\n      />\n    </div>\n  </div>\n));\n\nModelSelectionPanel.propTypes = {\n  isExperimentalModelsEnabled: PropTypes.bool,\n  toggleExperimentalModels: PropTypes.func,\n  capabilitiesWithCounts: PropTypes.object.isRequired,\n  activeCapability: PropTypes.string.isRequired,\n  setActiveCapability: PropTypes.func.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  groupedModels: PropTypes.array,\n  selectedModel: PropTypes.object,\n  handleSelectModel: PropTypes.func.isRequired,\n  searchTerm: PropTypes.string,\n  totalCount: PropTypes.number,\n  handleClearSearch: PropTypes.func.isRequired\n};\n\n// Helper function to format provider name\nconst formatProviderName = (provider) => {\n  if (!provider) return '';\n  // Simple title case, handle AI\n  return provider\n    .split(' ')\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n    .join(' ')\n    .replace(/ai/gi, 'AI');\n};\n\n// Helper function to check if model should be included\nconst shouldIncludeModel = (model, showExperimental, searchTerm, provider, formattedProvider, typeGroup) => {\n  if (!model) return false;\n  if (searchTerm) {\n    const searchLower = searchTerm.toLowerCase();\n    const nameMatch = model.name?.toLowerCase().includes(searchLower) || model.displayName?.toLowerCase().includes(searchLower);\n    const providerMatch = provider?.toLowerCase().includes(searchLower) || formattedProvider?.toLowerCase().includes(searchLower);\n    const typeMatch = typeGroup?.toLowerCase().includes(searchLower);\n    const tagMatch = model.tags && model.tags.some(tag => tag?.toLowerCase().includes(searchLower));\n\n    if (!(nameMatch || providerMatch || typeMatch || tagMatch)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// ExperimentalToggle component is not currently used, commented out\n// const ExperimentalToggle = React.memo(({ isEnabled, onToggle }) => (\n//   <div className={styles.experimentalToggle}>\n//     <label className={styles.toggleLabel}>\n//       <input\n//         type=\"checkbox\"\n//         checked={isEnabled}\n//         onChange={onToggle}\n//         className={styles.toggleInput}\n//       />\n//       <span className={styles.toggleTrack}>\n//         <span className={styles.toggleThumb} />\n//       </span>\n//       <span className={styles.toggleText}>Show experimental models</span>\n//     </label>\n//   </div>\n// ));\n\n/**\n * Main ModelSelection component that orchestrates all model selection UI\n * @returns {JSX.Element} - Rendered component\n */\nconst ModelSelection = () => {\n  const { \n    processedModels, \n    selectedModel, \n    isLoading, \n    selectModel, \n    showExperimental,\n    toggleExperimentalModels\n  } = useModel();\n  \n  const {\n    modelFilter,\n    updateSearchFilter\n  } = useModelFilter();\n  \n  const [activeCapability, setActiveCapability] = useState('Chat');\n  const panelRef = useRef(null);\n  \n  const handleSelectModel = useCallback((model) => {\n    selectModel(model);\n  }, [selectModel]);\n  \n  // Handle search input changes\n  const handleSearchChange = useCallback((searchValue) => {\n    if (typeof searchValue === 'string') {\n      updateSearchFilter(searchValue);\n    } else {\n      console.warn('Invalid search value in ModelDropdown handleSearchChange');\n    }\n  }, [updateSearchFilter]);\n\n  // Handle clearing search\n  const handleClearSearch = useCallback(() => {\n    updateSearchFilter('');\n  }, [updateSearchFilter]);\n  \n  const capabilitiesWithCounts = useMemo(() => {\n    const counts = {};\n    if (processedModels) {\n      Object.keys(processedModels).forEach(category => {\n        counts[category] = Object.values(processedModels[category])\n          .flatMap(providerGroups => Object.values(providerGroups))\n          .flat()\n          .filter(model => shouldIncludeModel(model, showExperimental, modelFilter.search, model.provider, formatProviderName(model.provider), model.type))\n          .length;\n      });\n    }\n    return counts;\n  }, [processedModels, showExperimental, modelFilter.search]);\n\n  const groupedModels = useMemo(() => {\n    if (!processedModels || !processedModels[activeCapability]) {\n      return [];\n    }\n    \n    const modelsInCategory = processedModels[activeCapability];\n    const groups = [];\n\n    Object.entries(modelsInCategory).forEach(([provider, typeGroups]) => {\n      const formattedProvider = formatProviderName(provider);\n      Object.entries(typeGroups).forEach(([type, models]) => {\n        const filteredGroupModels = models.filter(model =>\n          shouldIncludeModel(model, showExperimental, modelFilter.search, provider, formattedProvider, type)\n        );\n        if (filteredGroupModels.length > 0) {\n          groups.push({\n            provider: formattedProvider,\n            type: type,\n            models: filteredGroupModels\n          });\n        }\n      });\n    });\n\n    return groups;\n  }, [processedModels, activeCapability, showExperimental, modelFilter.search]);\n\n  const totalModelCount = useMemo(() => {\n    return groupedModels.reduce((count, group) => count + group.models.length, 0);\n  }, [groupedModels]);\n\n  return (\n    <div className={styles.modelSelectionContainer}>\n      <SelectedModelDisplay selectedModel={selectedModel} />\n      <SearchContainer \n        searchTerm={modelFilter.search}\n        onSearchChange={handleSearchChange}\n        totalCount={totalModelCount} \n      />\n      <ModelSelectionPanel\n        ref={panelRef}\n        isExperimentalModelsEnabled={showExperimental}\n        toggleExperimentalModels={toggleExperimentalModels}\n        capabilitiesWithCounts={capabilitiesWithCounts}\n        activeCapability={activeCapability}\n        setActiveCapability={setActiveCapability}\n        isLoading={isLoading}\n        groupedModels={groupedModels}\n        selectedModel={selectedModel}\n        handleSelectModel={handleSelectModel}\n        searchTerm={modelFilter.search}\n        totalCount={totalModelCount}\n        handleClearSearch={handleClearSearch}\n      />\n    </div>\n  );\n};\n\nexport default ModelSelection; ","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n"],"names":["ModelItem","memo","_ref","_model$series","model","selected","onClick","searchTerm","highlightMatch","text","regex","RegExp","parts","split","_jsx","_Fragment","children","map","part","i","test","className","styles","ModelItem__highlight","_jsxs","role","ModelItem__icon","series","charAt","name","ModelItem__details","ModelItem__name","description","ModelItem__description","tags","length","ModelItem__tags","tag","ModelItem__tag","style","backgroundColor","toLowerCase","includes","undefined","ModelItem__selectedIndicator","CheckIcon","ModelItem__checkIcon","_ref2","xmlns","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","points","displayName","onSearchChange","resultCount","inputRef","useRef","handleInputChange","useCallback","e","target","value","handleClearSearch","current","focus","ModelSearch","ModelSearch__inputWrapper","SearchIcon","ModelSearch__icon","size","ref","type","ModelSearch__input","placeholder","onChange","ModelSearch__clearButton","XIcon","ModelSearch__clearIcon","ModelSearch__results","SelectedModelDisplay","React","selectedModel","ModelDropdown__selectedModelContainer","ModelDropdown__selectedModelLabel","ModelDropdown__selectedModelInfo","ModelDropdown__modelName","ModelDropdown__modelDescription","provider","propTypes","PropTypes","CapabilityTabs","capabilities","activeCapability","onSelectCapability","tabsRef","useEffect","activeTab","querySelector","container","containerWidth","offsetWidth","tabWidth","scrollPosition","offsetLeft","scrollTo","left","Math","max","behavior","ModelDropdown__capabilityTabs","Object","keys","capability","ModelDropdown__capabilityTab","ModelList","_ref3","isLoading","groupedModels","onSelectModel","totalCount","onClearSearch","ModelDropdown__modelList","ModelDropdown__loading","group","ModelDropdown__providerTypeHeader","ModelDropdown__providerName","ModelDropdown__providerTypeSeparator","ModelDropdown__typeLabel","modelCount","models","id","ModelDropdown__noResults","ModelDropdown__clearSearch","isRequired","SearchContainer","_ref4","ModelDropdown__searchContainer","ModelSelectionPanel","_ref5","isExperimentalModelsEnabled","toggleExperimentalModels","capabilitiesWithCounts","setActiveCapability","handleSelectModel","ModelDropdown__modelsContainer","ModelDropdown__fixedHeader","ModelDropdown__scrollableModelList","formatProviderName","word","toUpperCase","slice","join","replace","shouldIncludeModel","showExperimental","formattedProvider","typeGroup","_model$name","_model$displayName","searchLower","nameMatch","providerMatch","typeMatch","tagMatch","some","ModelSelection","processedModels","selectModel","useModel","modelFilter","updateSearchFilter","useModelFilter","useState","panelRef","handleSearchChange","searchValue","useMemo","counts","forEach","category","values","flatMap","providerGroups","flat","filter","search","modelsInCategory","groups","entries","_ref6","typeGroups","_ref7","filteredGroupModels","push","totalModelCount","reduce","count","modelSelectionContainer","module","exports","ReactPropTypesSecret","require","emptyFunction","emptyFunctionWithReset","resetWarningCache","shim","props","propName","componentName","location","propFullName","secret","err","Error","getShim","ReactPropTypes","array","bigint","bool","func","number","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes"],"sourceRoot":""}