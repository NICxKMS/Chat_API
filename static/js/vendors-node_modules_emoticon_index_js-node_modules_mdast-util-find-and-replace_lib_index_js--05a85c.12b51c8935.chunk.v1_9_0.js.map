{"version":3,"file":"static/js/vendors-node_modules_emoticon_index_js-node_modules_mdast-util-find-and-replace_lib_index_js--05a85c.12b51c8935.chunk.v1_9_0.js","mappings":"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B,CACEF,YAAa,0BACbrE,MAAO,KACPsE,UAAW,CACT,MACA,MACA,MACA,OACA,OACA,OACA,MACA,MACA,MACA,OACA,OACA,QAEF/E,KAAM,cACNgF,KAAM,CAAC,QAAS,OAAQ,UAE1B,CACEF,YAAa,qBACbrE,MAAO,KACPsE,UAAW,CACT,OACA,OACA,QACA,QACA,OACA,OACA,QACA,QACA,OACA,OACA,QACA,QACA,OACA,OACA,QACA,SAEF/E,KAAM,MACNgF,KAAM,CAAC,MAAO,MAAO,YAEvB,CACEF,YAAa,mBACbrE,MAAO,KACPsE,UAAW,CACT,KACA,KACA,KACA,MACA,MACA,MACA,KACA,KACA,KACA,MACA,MACA,OAEF/E,KAAM,mBACNgF,KAAM,IAER,CACEF,YAAa,6BACbrE,MAAO,KACPsE,UAAW,CAAC,KAAM,MAAO,MAAO,MAAO,KAAM,KAAM,MAAO,MAAO,OACjE/E,KAAM,+BACNgF,KAAM,CAAC,UAET,CACEF,YAAa,2BACbrE,MAAO,KACPsE,UAAW,CAAC,KAAM,KAAM,KAAM,MAAO,MAAO,OAC5C/E,KAAM,+BACNgF,KAAM,CAAC,QAAS,UAElB,CACEF,YAAa,+BACbrE,MAAO,KACPsE,UAAW,CACT,KACA,KACA,KACA,MACA,MACA,MACA,KACA,KACA,MACA,MACA,OAEF/E,KAAM,aACNgF,KAAM,CAAC,SAET,CACEF,YAAa,2BACbrE,MAAO,KACPsE,UAAW,CACT,MACA,MACA,OACA,OACA,MACA,MACA,OACA,OACA,MACA,MACA,OACA,OACA,MACA,MACA,OACA,QAEF/E,KAAM,QACNgF,KAAM,IAER,CACEF,YAAa,2BACbrE,MAAO,KACPsE,UAAW,CACT,MACA,MACA,MACA,OACA,OACA,OACA,MACA,MACA,MACA,OACA,OACA,OACA,MACA,MACA,MACA,OACA,OACA,OACA,MACA,MACA,MACA,OACA,OACA,QAEF/E,KAAM,cACNgF,KAAM,CAAC,QAET,CACEF,YAAa,gBACbrE,MAAO,KACPsE,UAAW,CACT,KACA,KACA,KACA,KACA,KACA,MACA,MACA,MACA,MACA,MACA,KACA,KACA,KACA,KACA,KACA,MACA,MACA,MACA,MACA,OAEF/E,KAAM,WACNgF,KAAM,CAAC,QAET,CACEF,YAAa,eACbrE,MAAO,KACPsE,UAAW,CAAC,KAAM,KAAM,KAAM,MAAO,MAAO,OAC5C/E,KAAM,OACNgF,KAAM,CAAC,U","sources":["../node_modules/mdast-util-find-and-replace/lib/index.js","../node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","../node_modules/unicode-emoji-modifier-base/index.js","../node_modules/node-emoji/src/utils.ts","../node_modules/node-emoji/src/data.ts","../node_modules/node-emoji/src/get.ts","../node_modules/unist-util-visit-parents/lib/index.js","../node_modules/unist-util-is/lib/index.js","../node_modules/char-regex/index.js","../node_modules/skin-tone/index.js","../node_modules/emoticon/index.js"],"sourcesContent":["/**\n * @import {Nodes, Parents, PhrasingContent, Root, Text} from 'mdast'\n * @import {BuildVisitor, Test, VisitorResult} from 'unist-util-visit-parents'\n */\n\n/**\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[...Array<Parents>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @typedef {RegExp | string} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n *\n * @typedef {[Find, Replace?]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n *\n * @typedef {ReplaceFunction | string | null | undefined} Replace\n *   Thing to replace with.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | null | undefined}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n *\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore (optional).\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param {Nodes} tree\n *   Tree to change.\n * @param {FindAndReplaceList | FindAndReplaceTuple} list\n *   Patterns to find.\n * @param {Options | null | undefined} [options]\n *   Configuration (when `find` is not `Find`).\n * @returns {undefined}\n *   Nothing.\n */\nexport function findAndReplace(tree, list, options) {\n  const settings = options || {}\n  const ignored = convert(settings.ignore || [])\n  const pairs = toPairs(list)\n  let pairIndex = -1\n\n  while (++pairIndex < pairs.length) {\n    visitParents(tree, 'text', visitor)\n  }\n\n  /** @type {BuildVisitor<Root, 'text'>} */\n  function visitor(node, parents) {\n    let index = -1\n    /** @type {Parents | undefined} */\n    let grandparent\n\n    while (++index < parents.length) {\n      const parent = parents[index]\n      /** @type {Array<Nodes> | undefined} */\n      const siblings = grandparent ? grandparent.children : undefined\n\n      if (\n        ignored(\n          parent,\n          siblings ? siblings.indexOf(parent) : undefined,\n          grandparent\n        )\n      ) {\n        return\n      }\n\n      grandparent = parent\n    }\n\n    if (grandparent) {\n      return handler(node, parents)\n    }\n  }\n\n  /**\n   * Handle a text node which is not in an ignored parent.\n   *\n   * @param {Text} node\n   *   Text node.\n   * @param {Array<Parents>} parents\n   *   Parents.\n   * @returns {VisitorResult}\n   *   Result.\n   */\n  function handler(node, parents) {\n    const parent = parents[parents.length - 1]\n    const find = pairs[pairIndex][0]\n    const replace = pairs[pairIndex][1]\n    let start = 0\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    const index = siblings.indexOf(node)\n    let change = false\n    /** @type {Array<PhrasingContent>} */\n    let nodes = []\n\n    find.lastIndex = 0\n\n    let match = find.exec(node.value)\n\n    while (match) {\n      const position = match.index\n      /** @type {RegExpMatchObject} */\n      const matchObject = {\n        index: match.index,\n        input: match.input,\n        stack: [...parents, node]\n      }\n      let value = replace(...match, matchObject)\n\n      if (typeof value === 'string') {\n        value = value.length > 0 ? {type: 'text', value} : undefined\n      }\n\n      // It wasn’t a match after all.\n      if (value === false) {\n        // False acts as if there was no match.\n        // So we need to reset `lastIndex`, which currently being at the end of\n        // the current match, to the beginning.\n        find.lastIndex = position + 1\n      } else {\n        if (start !== position) {\n          nodes.push({\n            type: 'text',\n            value: node.value.slice(start, position)\n          })\n        }\n\n        if (Array.isArray(value)) {\n          nodes.push(...value)\n        } else if (value) {\n          nodes.push(value)\n        }\n\n        start = position + match[0].length\n        change = true\n      }\n\n      if (!find.global) {\n        break\n      }\n\n      match = find.exec(node.value)\n    }\n\n    if (change) {\n      if (start < node.value.length) {\n        nodes.push({type: 'text', value: node.value.slice(start)})\n      }\n\n      parent.children.splice(index, 1, ...nodes)\n    } else {\n      nodes = [node]\n    }\n\n    return index + nodes.length\n  }\n}\n\n/**\n * Turn a tuple or a list of tuples into pairs.\n *\n * @param {FindAndReplaceList | FindAndReplaceTuple} tupleOrList\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(tupleOrList) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (!Array.isArray(tupleOrList)) {\n    throw new TypeError('Expected find and replace tuple or list of tuples')\n  }\n\n  /** @type {FindAndReplaceList} */\n  // @ts-expect-error: correct.\n  const list =\n    !tupleOrList[0] || Array.isArray(tupleOrList[0])\n      ? tupleOrList\n      : [tupleOrList]\n\n  let index = -1\n\n  while (++index < list.length) {\n    const tuple = list[index]\n    result.push([toExpression(tuple[0]), toFunction(tuple[1])])\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function'\n    ? replace\n    : function () {\n        return replace\n      }\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","// Generated using `npm run build`. Do not edit!\nmodule.exports = new Set([\n\t0x261D,\n\t0x26F9,\n\t0x270A,\n\t0x270B,\n\t0x270C,\n\t0x270D,\n\t0x1F385,\n\t0x1F3C3,\n\t0x1F3C4,\n\t0x1F3CA,\n\t0x1F3CB,\n\t0x1F442,\n\t0x1F443,\n\t0x1F446,\n\t0x1F447,\n\t0x1F448,\n\t0x1F449,\n\t0x1F44A,\n\t0x1F44B,\n\t0x1F44C,\n\t0x1F44D,\n\t0x1F44E,\n\t0x1F44F,\n\t0x1F450,\n\t0x1F466,\n\t0x1F467,\n\t0x1F468,\n\t0x1F469,\n\t0x1F46E,\n\t0x1F470,\n\t0x1F471,\n\t0x1F472,\n\t0x1F473,\n\t0x1F474,\n\t0x1F475,\n\t0x1F476,\n\t0x1F477,\n\t0x1F478,\n\t0x1F47C,\n\t0x1F481,\n\t0x1F482,\n\t0x1F483,\n\t0x1F485,\n\t0x1F486,\n\t0x1F487,\n\t0x1F4AA,\n\t0x1F575,\n\t0x1F57A,\n\t0x1F590,\n\t0x1F595,\n\t0x1F596,\n\t0x1F645,\n\t0x1F646,\n\t0x1F647,\n\t0x1F64B,\n\t0x1F64C,\n\t0x1F64D,\n\t0x1F64E,\n\t0x1F64F,\n\t0x1F6A3,\n\t0x1F6B4,\n\t0x1F6B5,\n\t0x1F6B6,\n\t0x1F6C0,\n\t0x1F918,\n\t0x1F919,\n\t0x1F91A,\n\t0x1F91B,\n\t0x1F91C,\n\t0x1F91D,\n\t0x1F91E,\n\t0x1F926,\n\t0x1F930,\n\t0x1F933,\n\t0x1F934,\n\t0x1F935,\n\t0x1F936,\n\t0x1F937,\n\t0x1F938,\n\t0x1F939,\n\t0x1F93C,\n\t0x1F93D,\n\t0x1F93E\n]);\n","import charRegex from 'char-regex'\n\nexport const charRegexMatcher = charRegex()\n\nexport function asFunction<T extends PropertyKey, Args extends unknown[]>(\n  input: ((...args: Args) => T) | T,\n): (...args: Args) => T {\n  return typeof input === 'function' ? input : () => input\n}\n\n/**\n * Non spacing mark contained by some emoticons (65039 - '️' - 0xFE0F).\n *\n * It's the 'Variant Form', which provides more information so that emoticons\n * can be rendered as more colorful graphics. FE0E is a unicode text version\n * whereas FE0F should be rendered as a graphical version.\n * The code gracefully degrades.\n */\nconst NON_SPACING_MARK = String.fromCharCode(65039)\n\nconst nonSpacingRegex = new RegExp(NON_SPACING_MARK, 'g')\n\n/**\n * Removes the non-spacing-mark from the emoji code.\n *\n * Never send a stripped version to clients, as it kills graphical emoticons.\n */\nexport function normalizeCode(code: string) {\n  return code.replace(nonSpacingRegex, '')\n}\n\nexport function normalizeName(name: string) {\n  return /:.+:/.test(name) ? name.slice(1, -1) : name\n}\n\nexport function randomItem<T>(array: T[]) {\n  return array[Math.floor(Math.random() * array.length)]\n}\n","import emojilib from 'emojilib'\n\nimport { normalizeCode } from './utils.js'\n\nexport interface Emoji {\n  emoji: string\n  key: string\n}\n\nexport const emojiData = Object.entries(emojilib.lib).map(\n  ([name, { char: emoji }]) => [name, emoji] as const,\n)\n\nexport const emojiCodesByName = new Map(emojiData)\n\nexport const emojiNamesByCode = new Map(\n  emojiData.map(([name, emoji]) => [normalizeCode(emoji), name]),\n)\n","import { assert } from '@sindresorhus/is'\n\nimport { emojiCodesByName } from './data.js'\nimport { normalizeName } from './utils.js'\n\n/**\n * Get an emoji from an emoji name.\n */\nexport const get = (codeOrName: string) => {\n  assert.string(codeOrName)\n\n  return emojiCodesByName.get(normalizeName(codeOrName))\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","\"use strict\"\r\n\r\n// Based on: https://github.com/lodash/lodash/blob/6018350ac10d5ce6a5b7db625140b82aeab804df/.internal/unicodeSize.js\r\n\r\nmodule.exports = () => {\r\n\t// Used to compose unicode character classes.\r\n\tconst astralRange = \"\\\\ud800-\\\\udfff\"\r\n\tconst comboMarksRange = \"\\\\u0300-\\\\u036f\"\r\n\tconst comboHalfMarksRange = \"\\\\ufe20-\\\\ufe2f\"\r\n\tconst comboSymbolsRange = \"\\\\u20d0-\\\\u20ff\"\r\n\tconst comboMarksExtendedRange = \"\\\\u1ab0-\\\\u1aff\"\r\n\tconst comboMarksSupplementRange = \"\\\\u1dc0-\\\\u1dff\"\r\n\tconst comboRange = comboMarksRange + comboHalfMarksRange + comboSymbolsRange + comboMarksExtendedRange + comboMarksSupplementRange\r\n\tconst varRange = \"\\\\ufe0e\\\\ufe0f\"\r\n\tconst familyRange = \"\\\\uD83D\\\\uDC69\\\\uD83C\\\\uDFFB\\\\u200D\\\\uD83C\\\\uDF93\"\r\n\r\n\t// Used to compose unicode capture groups.\r\n\tconst astral = `[${astralRange}]`\r\n\tconst combo = `[${comboRange}]`\r\n\tconst fitz = \"\\\\ud83c[\\\\udffb-\\\\udfff]\"\r\n\tconst modifier = `(?:${combo}|${fitz})`\r\n\tconst nonAstral = `[^${astralRange}]`\r\n\tconst regional = \"(?:\\\\uD83C[\\\\uDDE6-\\\\uDDFF]){2}\"\r\n\tconst surrogatePair = \"[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]\"\r\n\tconst zwj = \"\\\\u200d\"\r\n\tconst blackFlag = \"(?:\\\\ud83c\\\\udff4\\\\udb40\\\\udc67\\\\udb40\\\\udc62\\\\udb40(?:\\\\udc65|\\\\udc73|\\\\udc77)\\\\udb40(?:\\\\udc6e|\\\\udc63|\\\\udc6c)\\\\udb40(?:\\\\udc67|\\\\udc74|\\\\udc73)\\\\udb40\\\\udc7f)\"\r\n\tconst family = `[${familyRange}]`\r\n\r\n\t// Used to compose unicode regexes.\r\n\tconst optModifier = `${modifier}?`\r\n\tconst optVar = `[${varRange}]?`\r\n\tconst optJoin = `(?:${zwj}(?:${[nonAstral, regional, surrogatePair].join(\"|\")})${optVar + optModifier})*`\r\n\tconst seq = optVar + optModifier + optJoin\r\n\tconst nonAstralCombo = `${nonAstral}${combo}?`\r\n\tconst symbol = `(?:${[nonAstralCombo, combo, regional, surrogatePair, astral, family].join(\"|\")})`\r\n\r\n\t// Used to match [String symbols](https://mathiasbynens.be/notes/javascript-unicode).\r\n\treturn new RegExp(`${blackFlag}|${fitz}(?=${fitz})|${symbol + seq}`, \"g\")\r\n}\r\n","'use strict';\nconst emojiModifierBase = require('unicode-emoji-modifier-base');\n\nconst skinTones = new Map([\n\t['none', ''],\n\t['white', '🏻'],\n\t['creamWhite', '🏼'],\n\t['lightBrown', '🏽'],\n\t['brown', '🏾'],\n\t['darkBrown', '🏿']\n]);\n\nmodule.exports = (emoji, tone) => {\n\tif (!skinTones.has(tone)) {\n\t\tthrow new TypeError(`Unexpected \\`skinTone\\` name: ${tone}`);\n\t}\n\n\temoji = emoji.replace(/[\\u{1f3fb}-\\u{1f3ff}]/u, '');\n\n\tif (emojiModifierBase.has(emoji.codePointAt(0)) && tone !== 'none') {\n\t\temoji += skinTones.get(tone);\n\t}\n\n\treturn emoji;\n};\n","/**\n * @typedef Emoticon\n *   Info on an emoticon.\n * @property {string} description\n *   Associated description (from `wooorm/gemoji`).\n * @property {string} emoji\n *   Corresponding emoji.\n * @property {Array<string>} emoticons\n *   ASCII emoticons.\n * @property {string} name\n *   Name of an emoticon (preferred name from `wooorm/gemoji`).\n * @property {Array<string>} tags\n *   Associated tags (from `wooorm/gemoji`).\n */\n\n/**\n * List of emoticons.\n *\n * @type {Array<Emoticon>}\n */\nexport const emoticon = [\n  {\n    description: 'angry face',\n    emoji: '😠',\n    emoticons: ['>:(', '>:[', '>:-(', '>:-[', '>=(', '>=[', '>=-(', '>=-['],\n    name: 'angry',\n    tags: ['mad', 'annoyed']\n  },\n  {\n    description: 'smiling face with smiling eyes',\n    emoji: '😊',\n    emoticons: [\n      ':\")',\n      ':\"]',\n      ':\"D',\n      ':-\")',\n      ':-\"]',\n      ':-\"D',\n      '=\")',\n      '=\"]',\n      '=\"D',\n      '=-\")',\n      '=-\"]',\n      '=-\"D'\n    ],\n    name: 'blush',\n    tags: ['proud']\n  },\n  {\n    description: 'broken heart',\n    emoji: '💔',\n    emoticons: ['<\\\\3', '</3'],\n    name: 'broken_heart',\n    tags: []\n  },\n  {\n    description: 'confused face',\n    emoji: '😕',\n    emoticons: [':/', ':\\\\', ':-/', ':-\\\\', '=/', '=\\\\', '=-/', '=-\\\\'],\n    name: 'confused',\n    tags: []\n  },\n  {\n    description: 'crying face',\n    emoji: '😢',\n    emoticons: [\n      ':,(',\n      ':,[',\n      ':,|',\n      ':,-(',\n      ':,-[',\n      ':,-|',\n      \":'(\",\n      \":'[\",\n      \":'|\",\n      \":'-(\",\n      \":'-[\",\n      \":'-|\",\n      '=,(',\n      '=,[',\n      '=,|',\n      '=,-(',\n      '=,-[',\n      '=,-|',\n      \"='(\",\n      \"='[\",\n      \"='|\",\n      \"='-(\",\n      \"='-[\",\n      \"='-|\",\n      'T-T'\n    ],\n    name: 'cry',\n    tags: ['sad', 'tear']\n  },\n  {\n    description: 'frowning face with open mouth',\n    emoji: '😦',\n    emoticons: [':(', ':[', ':-(', ':-[', '=(', '=[', '=-(', '=-['],\n    name: 'frowning',\n    tags: []\n  },\n  {\n    description: 'red heart',\n    emoji: '❤️',\n    emoticons: ['<3'],\n    name: 'heart',\n    tags: ['love']\n  },\n  {\n    description: 'angry face with horns',\n    emoji: '👿',\n    emoticons: [']:(', ']:[', ']:-(', ']:-[', ']=(', ']=[', ']=-(', ']=-['],\n    name: 'imp',\n    tags: ['angry', 'devil', 'evil', 'horns']\n  },\n  {\n    description: 'smiling face with halo',\n    emoji: '😇',\n    emoticons: [\n      'o:)',\n      'o:]',\n      'o:D',\n      'o:-)',\n      'o:-]',\n      'o:-D',\n      'o=)',\n      'o=]',\n      'o=D',\n      'o=-)',\n      'o=-]',\n      'o=-D',\n      'O:)',\n      'O:]',\n      'O:D',\n      'O:-)',\n      'O:-]',\n      'O:-D',\n      'O=)',\n      'O=]',\n      'O=D',\n      'O=-)',\n      'O=-]',\n      'O=-D',\n      '0:)',\n      '0:]',\n      '0:D',\n      '0:-)',\n      '0:-]',\n      '0:-D',\n      '0=)',\n      '0=]',\n      '0=D',\n      '0=-)',\n      '0=-]',\n      '0=-D'\n    ],\n    name: 'innocent',\n    tags: ['angel']\n  },\n  {\n    description: 'face with tears of joy',\n    emoji: '😂',\n    emoticons: [\n      ':,)',\n      ':,]',\n      ':,D',\n      ':,-)',\n      ':,-]',\n      ':,-D',\n      \":')\",\n      \":']\",\n      \":'D\",\n      \":'-)\",\n      \":'-]\",\n      \":'-D\",\n      '=,)',\n      '=,]',\n      '=,D',\n      '=,-)',\n      '=,-]',\n      '=,-D',\n      \"=')\",\n      \"=']\",\n      \"='D\",\n      \"='-)\",\n      \"='-]\",\n      \"='-D\"\n    ],\n    name: 'joy',\n    tags: ['tears']\n  },\n  {\n    description: 'kissing face',\n    emoji: '😗',\n    emoticons: [':*', ':-*', '=*', '=-*'],\n    name: 'kissing',\n    tags: []\n  },\n  {\n    description: 'grinning squinting face',\n    emoji: '😆',\n    emoticons: [\n      'x)',\n      'x]',\n      'xD',\n      'x-)',\n      'x-]',\n      'x-D',\n      'X)',\n      'X]',\n      'X-)',\n      'X-]',\n      'X-D'\n    ],\n    name: 'laughing',\n    tags: ['happy', 'haha']\n  },\n  {\n    description: 'man',\n    emoji: '👨',\n    emoticons: [\n      ':3',\n      ':-3',\n      '=3',\n      '=-3',\n      ';3',\n      ';-3',\n      'x3',\n      'x-3',\n      'X3',\n      'X-3'\n    ],\n    name: 'man',\n    tags: ['mustache', 'father', 'dad']\n  },\n  {\n    description: 'neutral face',\n    emoji: '😐',\n    emoticons: [':|', ':-|', '=|', '=-|'],\n    name: 'neutral_face',\n    tags: ['meh']\n  },\n  {\n    description: 'face without mouth',\n    emoji: '😶',\n    emoticons: [':-'],\n    name: 'no_mouth',\n    tags: ['mute', 'silence']\n  },\n  {\n    description: 'face with open mouth',\n    emoji: '😮',\n    emoticons: [\n      ':o',\n      ':O',\n      ':0',\n      ':-o',\n      ':-O',\n      ':-0',\n      '=o',\n      '=O',\n      '=0',\n      '=-o',\n      '=-O',\n      '=-0'\n    ],\n    name: 'open_mouth',\n    tags: ['surprise', 'impressed', 'wow']\n  },\n  {\n    description: 'enraged face',\n    emoji: '😡',\n    emoticons: [':@', ':-@', '=@', '=-@'],\n    name: 'rage',\n    tags: ['angry']\n  },\n  {\n    description: 'grinning face with smiling eyes',\n    emoji: '😄',\n    emoticons: [':D', ':-D', '=D', '=-D'],\n    name: 'smile',\n    tags: ['happy', 'joy', 'laugh', 'pleased']\n  },\n  {\n    description: 'grinning face with big eyes',\n    emoji: '😃',\n    emoticons: [':)', ':]', ':-)', ':-]', '=)', '=]', '=-)', '=-]'],\n    name: 'smiley',\n    tags: ['happy', 'joy', 'haha']\n  },\n  {\n    description: 'smiling face with horns',\n    emoji: '😈',\n    emoticons: [\n      ']:)',\n      ']:]',\n      ']:D',\n      ']:-)',\n      ']:-]',\n      ']:-D',\n      ']=)',\n      ']=]',\n      ']=D',\n      ']=-)',\n      ']=-]',\n      ']=-D'\n    ],\n    name: 'smiling_imp',\n    tags: ['devil', 'evil', 'horns']\n  },\n  {\n    description: 'loudly crying face',\n    emoji: '😭',\n    emoticons: [\n      \":,'(\",\n      \":,'[\",\n      \":,'-(\",\n      \":,'-[\",\n      \":',(\",\n      \":',[\",\n      \":',-(\",\n      \":',-[\",\n      \"=,'(\",\n      \"=,'[\",\n      \"=,'-(\",\n      \"=,'-[\",\n      \"=',(\",\n      \"=',[\",\n      \"=',-(\",\n      \"=',-[\"\n    ],\n    name: 'sob',\n    tags: ['sad', 'cry', 'bawling']\n  },\n  {\n    description: 'face with tongue',\n    emoji: '😛',\n    emoticons: [\n      ':p',\n      ':P',\n      ':d',\n      ':-p',\n      ':-P',\n      ':-d',\n      '=p',\n      '=P',\n      '=d',\n      '=-p',\n      '=-P',\n      '=-d'\n    ],\n    name: 'stuck_out_tongue',\n    tags: []\n  },\n  {\n    description: 'squinting face with tongue',\n    emoji: '😝',\n    emoticons: ['xP', 'x-p', 'x-P', 'x-d', 'Xp', 'Xd', 'X-p', 'X-P', 'X-d'],\n    name: 'stuck_out_tongue_closed_eyes',\n    tags: ['prank']\n  },\n  {\n    description: 'winking face with tongue',\n    emoji: '😜',\n    emoticons: [';p', ';P', ';d', ';-p', ';-P', ';-d'],\n    name: 'stuck_out_tongue_winking_eye',\n    tags: ['prank', 'silly']\n  },\n  {\n    description: 'smiling face with sunglasses',\n    emoji: '😎',\n    emoticons: [\n      '8)',\n      '8]',\n      '8D',\n      '8-)',\n      '8-]',\n      '8-D',\n      'B)',\n      'B]',\n      'B-)',\n      'B-]',\n      'B-D'\n    ],\n    name: 'sunglasses',\n    tags: ['cool']\n  },\n  {\n    description: 'downcast face with sweat',\n    emoji: '😓',\n    emoticons: [\n      ',:(',\n      ',:[',\n      ',:-(',\n      ',:-[',\n      ',=(',\n      ',=[',\n      ',=-(',\n      ',=-[',\n      \"':(\",\n      \"':[\",\n      \"':-(\",\n      \"':-[\",\n      \"'=(\",\n      \"'=[\",\n      \"'=-(\",\n      \"'=-[\"\n    ],\n    name: 'sweat',\n    tags: []\n  },\n  {\n    description: 'grinning face with sweat',\n    emoji: '😅',\n    emoticons: [\n      ',:)',\n      ',:]',\n      ',:D',\n      ',:-)',\n      ',:-]',\n      ',:-D',\n      ',=)',\n      ',=]',\n      ',=D',\n      ',=-)',\n      ',=-]',\n      ',=-D',\n      \"':)\",\n      \"':]\",\n      \"':D\",\n      \"':-)\",\n      \"':-]\",\n      \"':-D\",\n      \"'=)\",\n      \"'=]\",\n      \"'=D\",\n      \"'=-)\",\n      \"'=-]\",\n      \"'=-D\"\n    ],\n    name: 'sweat_smile',\n    tags: ['hot']\n  },\n  {\n    description: 'unamused face',\n    emoji: '😒',\n    emoticons: [\n      ':$',\n      ':s',\n      ':z',\n      ':S',\n      ':Z',\n      ':-$',\n      ':-s',\n      ':-z',\n      ':-S',\n      ':-Z',\n      '=$',\n      '=s',\n      '=z',\n      '=S',\n      '=Z',\n      '=-$',\n      '=-s',\n      '=-z',\n      '=-S',\n      '=-Z'\n    ],\n    name: 'unamused',\n    tags: ['meh']\n  },\n  {\n    description: 'winking face',\n    emoji: '😉',\n    emoticons: [';)', ';]', ';D', ';-)', ';-]', ';-D'],\n    name: 'wink',\n    tags: ['flirt']\n  }\n]\n"],"names":["findAndReplace","tree","list","options","settings","ignored","convert","ignore","pairs","tupleOrList","result","Array","isArray","TypeError","index","length","tuple","push","toExpression","toFunction","toPairs","pairIndex","visitParents","visitor","node","parents","grandparent","parent","siblings","children","undefined","indexOf","find","replace","start","change","nodes","lastIndex","match","exec","value","position","matchObject","input","stack","type","slice","global","splice","handler","RegExp","string","escape","module","exports","Set","charRegex","NON_SPACING_MARK","String","fromCharCode","nonSpacingRegex","normalizeCode","code","normalizeName","name","test","emojiData","Object","entries","emojilib","map","_ref","char","emoji","emojiCodesByName","Map","get","_ref2","codeOrName","assert3","empty","CONTINUE","EXIT","SKIP","reverse","check","is","step","factory","tagName","defineProperty","visit","subresult","offset","grandparents","toResult","nodeAsParent","concat","child","ok","castFactory","tests","checks","any","_len","arguments","parameters","_key","apply","this","anyFactory","checkAsRecord","all","nodeAsRecord","key","propsFactory","typeFactory","Error","testFunction","Boolean","looksLikeANode","call","astralRange","astral","combo","fitz","nonAstral","regional","surrogatePair","family","optModifier","optVar","seq","join","symbol","emojiModifierBase","require","skinTones","tone","has","codePointAt","emoticon","description","emoticons","tags"],"sourceRoot":""}