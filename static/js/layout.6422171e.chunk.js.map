{"version":3,"file":"static/js/layout.6422171e.chunk.js","mappings":"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","sources":["hooks/useMediaQuery.js","components/layout/Layout/index.js"],"sourcesContent":["import { useState, useEffect, useMemo } from 'react';\n\n// Define breakpoint constants in a single source of truth\nexport const BREAKPOINTS = {\n  mobile: '640px',\n  tablet: '1023px',\n  desktop: '1024px'\n};\n\n// Cached media query listeners\nconst mediaQueryListeners = new Map();\n\n/**\n * Custom hook that returns true if the current viewport matches the provided media query\n * @param {string} query - Media query string e.g., \"(max-width: 1024px)\"\n * @returns {boolean} - True if the media query matches\n */\nexport const useMediaQuery = (query) => {\n  // Initialize with the current match state\n  const [matches, setMatches] = useState(() => {\n    // Check for window to avoid SSR issues\n    if (typeof window !== 'undefined') {\n      return window.matchMedia(query).matches;\n    }\n    return false;\n  });\n\n  useEffect(() => {\n    // Avoid running in SSR context\n    if (typeof window === 'undefined') {\n      return undefined;\n    }\n\n    // Check if we already have a listener for this query\n    if (!mediaQueryListeners.has(query)) {\n      // Create media query list\n      const mediaQueryList = window.matchMedia(query);\n      \n      // Create listener registry for this query\n      mediaQueryListeners.set(query, {\n        mediaQueryList,\n        listeners: new Set()\n      });\n    }\n    \n    const queryData = mediaQueryListeners.get(query);\n    const { mediaQueryList, listeners } = queryData;\n\n    // Initial check\n    setMatches(mediaQueryList.matches);\n\n    // Define listener function\n    const listener = (event) => {\n      setMatches(event.matches);\n    };\n    \n    // Add listener to registry\n    listeners.add(listener);\n\n    // Modern browsers\n    if (mediaQueryList.addEventListener) {\n      mediaQueryList.addEventListener('change', listener);\n      return () => {\n        mediaQueryList.removeEventListener('change', listener);\n        listeners.delete(listener);\n        \n        // Clean up registry if no more listeners\n        if (listeners.size === 0) {\n          mediaQueryListeners.delete(query);\n        }\n      };\n    } \n    // Legacy support for older browsers (e.g., IE, older Safari)\n    else if (mediaQueryList.addListener) {\n      mediaQueryList.addListener(listener);\n      return () => {\n        mediaQueryList.removeListener(listener);\n        listeners.delete(listener);\n        \n        // Clean up registry if no more listeners\n        if (listeners.size === 0) {\n          mediaQueryListeners.delete(query);\n        }\n      };\n    }\n\n    return undefined;\n  }, [query]);\n\n  return matches;\n};\n\n/**\n * Pre-configured hooks for common breakpoints\n */\nexport const useIsMobile = () => {\n  const query = useMemo(() => `(max-width: ${BREAKPOINTS.mobile})`, []);\n  return useMediaQuery(query);\n};\n\nexport const useIsTablet = () => {\n  const query = useMemo(() => \n    `(min-width: calc(${BREAKPOINTS.mobile} + 1px)) and (max-width: ${BREAKPOINTS.tablet})`, []);\n  return useMediaQuery(query);\n};\n\nexport const useIsDesktop = () => {\n  const query = useMemo(() => `(min-width: ${BREAKPOINTS.desktop})`, []);\n  return useMediaQuery(query);\n};\n\n/**\n * Get a consistent breakpoint value across the app\n * @returns {{mobile: string, tablet: string, desktop: string}}\n */\nexport const useBreakpoints = () => {\n  return BREAKPOINTS;\n}; ","import { lazy, useState, useCallback, Suspense } from 'react';\nimport { useIsDesktop } from '../../../hooks/useMediaQuery';\nimport { useModel } from '../../../contexts/ModelContext';\nimport { useChatState } from '../../../contexts/ChatStateContext';\nimport { useChatControl } from '../../../contexts/ChatControlContext';\n// Import useApi if needed for apiUrl, but not for status\n// import { useApi } from '../../../contexts/ApiContext'; \nimport { useAuth } from '../../../contexts/AuthContext'; // Import useAuth\nimport { useTheme } from '../../../contexts/ThemeContext'; // Import ThemeContext\nimport { GearIcon, PlusIcon, TrashIcon, DownloadIcon } from '@primer/octicons-react';\nimport styles from './Layout.module.css';\n// Import icons using the correct paths\n// Import only the specific icons needed\n// const ApiStatus = lazy(() => import('../../common/ApiStatus')); // Removed\n// Assuming lazyLoad utility path\n\n// Lazily loaded components - Prefetch hints removed for manual loading\nconst Sidebar = lazy(() => import(/* webpackChunkName: \"layout-sidebar\" */ '../Sidebar'));\nconst MainContent = lazy(() => import(/* webpackPreload: true, webpackChunkName: \"layout-main\" */ '../MainContent'));\n// import ModelSelectorButton from '../../models/ModelSelectorButton'; // Remove this import\nconst ModelDropdown = lazy(() => import(/* webpackChunkName: \"models-dropdown\" */ '../../models/ModelDropdown'));\nconst Spinner = lazy(() => import(/* webpackChunkName: \"common-spinner\" */ '../../common/Spinner'));\nconst ThemeToggle = lazy(() => import(/* webpackChunkName: \"common-theme\" */ '../../common/ThemeToggle'));\n// Remove ApiStatus import\n// const ApiStatus = lazy(() => import('../../common/ApiStatus')); // Removed\nconst SettingsPanel = lazy(() => import(/* webpackChunkName: \"settings-panel\" */ '../../settings/SettingsPanel'));\nconst SidebarToggle = lazy(() => import(/* webpackChunkName: \"layout-sidebar-toggle\" */ '../SidebarToggle'));\nconst MoreActions = lazy(() => import(/* webpackChunkName: \"common-more-actions\" */ '../../common/MoreActions'));\nconst AuthButton = lazy(() => import(/* webpackChunkName: \"auth-button\" */ '../../auth/AuthButton'));\n\n// Loading fallback component\nconst LoadingFallback = () => (\n  <div className={styles.loadingFallback}>\n    <Spinner size=\"medium\" />\n  </div>\n);\n\n/**\n * Layout component that handles responsive design\n * @returns {JSX.Element} - Rendered layout\n */\nconst Layout = () => {\n  const isDesktop = useIsDesktop();\n  // Default sidebar to open on desktop, closed on mobile initially\n  const [isSidebarOpen, setIsSidebarOpen] = useState(isDesktop); \n  const [isSettingsOpen, setIsSettingsOpen] = useState(false); // State for settings panel\n  const [isModelSelectorOpen, setIsModelSelectorOpen] = useState(false); // State for model selector visibility\n  const { selectedModel, isLoadingModels } = useModel(); // Get model data\n  const { chatHistory } = useChatState();\n  const { clearChat, downloadChatHistory } = useChatControl();\n  const { currentUser, isAuthenticated, login, logout, loading: authLoading } = useAuth(); // Get auth context\n  const { theme, toggleTheme } = useTheme(); // Get theme context\n\n  const toggleSidebar = useCallback(() => {\n    setIsSidebarOpen(prev => !prev);\n  }, []);\n\n  // Toggle settings panel - passed down from MainContent originally, now managed here\n  const toggleSettings = useCallback(() => {\n    // console.log(\"Toggling settings panel...\"); // Add log\n    setIsSettingsOpen(prev => {\n      // console.log(\"Previous state:\", prev, \"New state:\", !prev); // Log state change\n      return !prev;\n    });\n  }, []);\n\n  const toggleModelSelector = useCallback(() => {\n    setIsModelSelectorOpen(prev => !prev);\n  }, []);\n\n  // Implement new chat functionality\n  const handleNewChat = useCallback(() => {\n    // Close sidebar on mobile after starting new chat\n    if (!isDesktop) {\n      setIsSidebarOpen(false);\n    }\n    \n    // Clear chat history if there are messages\n    if (chatHistory.length > 0) {\n      clearChat();\n    }\n  }, [isDesktop, chatHistory.length, clearChat]);\n\n  // Implement reset chat functionality\n  const handleResetChat = useCallback(() => {\n    if (chatHistory.length === 0) return;\n    \n    if (window.confirm('Are you sure you want to clear the current chat?')) {\n      clearChat();\n      \n      // Show confirmation to the user\n      const notification = document.createElement('div');\n      notification.style.position = 'fixed';\n      notification.style.bottom = '20px';\n      notification.style.left = '50%';\n      notification.style.transform = 'translateX(-50%)';\n      notification.style.backgroundColor = 'var(--hover)';\n      notification.style.color = 'var(--text)';\n      notification.style.padding = '10px 20px';\n      notification.style.borderRadius = '8px';\n      notification.style.zIndex = '9999';\n      notification.textContent = 'Chat has been cleared';\n      document.body.appendChild(notification);\n      \n      // Remove notification after 3 seconds\n      setTimeout(() => {\n        document.body.removeChild(notification);\n      }, 3000);\n    }\n  }, [chatHistory.length, clearChat]);\n\n  // Implement download chat functionality\n  const handleDownloadChat = useCallback(() => {\n    if (chatHistory.length === 0) return;\n    try {\n      downloadChatHistory();\n      \n      // Show confirmation to the user (especially useful for mobile)\n      const notification = document.createElement('div');\n      notification.style.position = 'fixed';\n      notification.style.bottom = '20px';\n      notification.style.left = '50%';\n      notification.style.transform = 'translateX(-50%)';\n      notification.style.backgroundColor = 'var(--hover)';\n      notification.style.color = 'var(--text)';\n      notification.style.padding = '10px 20px';\n      notification.style.borderRadius = '8px';\n      notification.style.zIndex = '9999';\n      notification.textContent = 'Chat downloaded successfully';\n      document.body.appendChild(notification);\n      \n      // Remove notification after 3 seconds\n      setTimeout(() => {\n        document.body.removeChild(notification);\n      }, 3000);\n    } catch (error) {\n      console.error(\"Error downloading chat:\", error);\n      alert(\"Failed to download chat. Please try again.\");\n    }\n  }, [chatHistory.length, downloadChatHistory]);\n  \n  // Determine layout classes based on state and viewport\n  const isSidebarEffectivelyHidden = isDesktop && !isSidebarOpen;\n  const layoutClasses = [\n    styles.layout,\n    isSidebarEffectivelyHidden ? styles.sidebarCompact : '', // Handles transform\n    !isDesktop && isSidebarOpen ? styles.sidebarOpenMobile : '', // Mobile slide-in\n    isSidebarEffectivelyHidden ? styles.sidebarHidden : '' // Controls floating icon visibility\n  ].filter(Boolean).join(' ');\n\n  return (\n    <div className={layoutClasses}>\n      {/* Mobile Actions Container (Top Right) */}\n      <div className={styles.mobileActionsContainer}>\n        <div className={styles.mobileActions}>\n          {/* Theme Toggle */}\n          <Suspense fallback={null}>\n            <ThemeToggle />\n          </Suspense>\n          \n          {/* Auth Button */}\n          <Suspense fallback={null}>\n            <AuthButton \n              isAuthenticated={isAuthenticated}\n              onLogin={login}\n              onLogout={logout}\n              userName={currentUser?.displayName || currentUser?.email || 'User'}\n              isLoading={authLoading}\n              currentUser={currentUser}\n            />\n          </Suspense>\n          \n          {/* Settings Button */}\n          <button \n            className={styles.mobileActionButton} \n            onClick={toggleSettings}\n            aria-label=\"Settings\"\n            title=\"Settings\"\n          >\n            <GearIcon size={20} />\n          </button>\n          \n          {/* More Actions Menu */}\n          <MoreActions \n            actions={[\n              // Always included actions\n              {\n                icon: <PlusIcon size={16} />,\n                label: 'New Chat',\n                onClick: handleNewChat\n              },\n              {\n                icon: <TrashIcon size={16} />,\n                label: 'Reset Chat',\n                onClick: handleResetChat\n              },\n              {\n                icon: <DownloadIcon size={16} />,\n                label: 'Download Chat',\n                onClick: handleDownloadChat\n              },\n              // Mobile-specific actions (will only be visible on mobile)\n              ...(isDesktop ? [] : [\n                // Theme toggle action\n                {\n                  icon: theme === 'dark' ? <span style={{ fontSize: '16px' }}>☀️</span> : <span style={{ fontSize: '16px' }}>🌙</span>,\n                  label: `Switch to ${theme === 'dark' ? 'light' : 'dark'} mode`,\n                  onClick: toggleTheme\n                },\n                // Settings action\n                {\n                  icon: <GearIcon size={16} />,\n                  label: 'Settings',\n                  onClick: toggleSettings\n                },\n                // Login/Logout action\n                {\n                  icon: isAuthenticated ? <span style={{ fontSize: '16px' }}>👤</span> : <span style={{ fontSize: '16px' }}>🔑</span>,\n                  label: isAuthenticated ? `Logout (${currentUser?.displayName || currentUser?.email || 'User'})` : 'Login',\n                  onClick: isAuthenticated ? logout : login\n                }\n              ])\n            ]}\n          />\n        </div>\n      </div>\n\n      {/* Sidebar Toggle */}\n      <Suspense fallback={<LoadingFallback />}>\n        <SidebarToggle\n          isOpen={isSidebarOpen}\n          onToggle={toggleSidebar}\n        />\n      </Suspense>\n\n      {/* Conditionally render the ModelDropdown as a modal/overlay */}\n      {isModelSelectorOpen && (\n        <Suspense fallback={\n          <div className={styles.modalOverlay}>\n            <Spinner size=\"large\" />\n          </div>\n        }>\n           <div className={styles.modalOverlay} onClick={toggleModelSelector}>\n            <div className={styles.modalContent} onClick={(e) => e.stopPropagation()}>\n              <ModelDropdown /> \n            </div>\n          </div>\n        </Suspense>\n      )}\n\n      {/* Sidebar container */}\n      <div className={styles.sidebarContainer}>\n        <Suspense fallback={<div className={styles.sidebarPlaceholder} />}>\n          <Sidebar \n            onNewChat={handleNewChat}\n            onToggleSettings={toggleSettings}\n          />\n        </Suspense>\n      </div>\n      \n      {/* Main content container */}\n      <div className={styles.mainContentContainer}>\n        <Suspense fallback={<div className={styles.contentPlaceholder} />}>\n          <MainContent \n            isSidebarOpen={isSidebarOpen} \n            toggleSidebar={toggleSidebar} \n            isSettingsOpen={isSettingsOpen} \n            toggleSettings={toggleSettings}\n            selectedModel={selectedModel}\n            isLoadingModels={isLoadingModels}\n            toggleModelSelector={toggleModelSelector}\n            isModelSelectorOpen={isModelSelectorOpen}\n            onNewChat={handleNewChat}\n            onToggleSettings={toggleSettings}\n            onResetChat={handleResetChat}\n            onDownloadChat={handleDownloadChat}\n          />\n        </Suspense>\n      </div>\n\n      {/* Mobile overlay */}\n      {!isDesktop && isSidebarOpen && (\n        <div \n          className={`${styles.overlay} ${styles.overlayVisible}`}\n          onClick={toggleSidebar}\n          aria-hidden=\"true\"\n        />\n      )}\n\n      {/* Conditionally render Settings Panel */} \n      {/* Always render Settings Panel for CSS transitions, control visibility via props/classes */}\n      <Suspense fallback={null}> {/* No visible fallback needed */}\n        <SettingsPanel \n          isOpen={isSettingsOpen} \n          onClose={toggleSettings} \n        /> \n      </Suspense>\n    </div>\n  );\n};\n\nexport default Layout; "],"names":["BREAKPOINTS","mobile","tablet","desktop","mediaQueryListeners","Map","useMediaQuery","query","matches","setMatches","useState","window","matchMedia","useEffect","has","mediaQueryList","set","listeners","Set","queryData","get","listener","event","add","addEventListener","removeEventListener","delete","size","addListener","removeListener","Sidebar","lazy","MainContent","ModelDropdown","Spinner","ThemeToggle","SettingsPanel","SidebarToggle","MoreActions","AuthButton","LoadingFallback","_jsx","className","styles","loadingFallback","children","Layout","isDesktop","useIsDesktop","useMemo","isSidebarOpen","setIsSidebarOpen","isSettingsOpen","setIsSettingsOpen","isModelSelectorOpen","setIsModelSelectorOpen","selectedModel","isLoadingModels","useModel","chatHistory","useChatState","clearChat","downloadChatHistory","useChatControl","currentUser","isAuthenticated","login","logout","loading","authLoading","useAuth","theme","toggleTheme","useTheme","toggleSidebar","useCallback","prev","toggleSettings","toggleModelSelector","handleNewChat","length","handleResetChat","confirm","notification","document","createElement","style","position","bottom","left","transform","backgroundColor","color","padding","borderRadius","zIndex","textContent","body","appendChild","setTimeout","removeChild","handleDownloadChat","error","alert","isSidebarEffectivelyHidden","layoutClasses","layout","sidebarCompact","sidebarOpenMobile","sidebarHidden","filter","Boolean","join","_jsxs","mobileActionsContainer","mobileActions","Suspense","fallback","onLogin","onLogout","userName","displayName","email","isLoading","mobileActionButton","onClick","title","GearIcon","actions","icon","PlusIcon","label","TrashIcon","DownloadIcon","fontSize","isOpen","onToggle","modalOverlay","modalContent","e","stopPropagation","sidebarContainer","sidebarPlaceholder","onNewChat","onToggleSettings","mainContentContainer","contentPlaceholder","onResetChat","onDownloadChat","overlay","overlayVisible","onClose"],"sourceRoot":""}