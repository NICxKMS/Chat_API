{"version":3,"file":"static/js/markdown-63b8257e.96c47a53d5.chunk.v1_9_5.js","mappings":"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","sources":["../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../node_modules/micromark-core-commonmark/lib/label-start-image.js","../node_modules/micromark-core-commonmark/lib/autolink.js","../node_modules/micromark-core-commonmark/lib/line-ending.js","../node_modules/micromark-core-commonmark/lib/character-reference.js","../node_modules/micromark-core-commonmark/lib/block-quote.js","../node_modules/micromark-core-commonmark/lib/setext-underline.js","../node_modules/micromark-core-commonmark/lib/content.js","../node_modules/micromark-core-commonmark/lib/blank-line.js","../node_modules/micromark-core-commonmark/lib/attention.js","../node_modules/micromark-core-commonmark/lib/label-end.js","../node_modules/micromark-core-commonmark/lib/character-escape.js","../node_modules/micromark-core-commonmark/node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","../node_modules/micromark-core-commonmark/node_modules/micromark-util-character/index.js","../node_modules/micromark-core-commonmark/lib/html-text.js","../node_modules/micromark-core-commonmark/lib/heading-atx.js","../node_modules/micromark-core-commonmark/lib/label-start-link.js","../node_modules/micromark-core-commonmark/lib/list.js","../node_modules/micromark-core-commonmark/lib/definition.js","../node_modules/micromark-core-commonmark/lib/code-fenced.js","../node_modules/micromark-core-commonmark/lib/html-flow.js","../node_modules/micromark-core-commonmark/lib/thematic-break.js","../node_modules/micromark-core-commonmark/lib/code-indented.js","../node_modules/micromark-core-commonmark/lib/code-text.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n"],"names":["hardBreakEscape","name","tokenize","effects","ok","nok","code","enter","consume","after","markdownLineEnding","exit","labelStartImage","self","this","open","parser","constructs","resolveAll","labelEnd","autolink","size","asciiAlpha","schemeOrEmailAtext","emailAtext","asciiAlphanumeric","schemeInsideOrEmailAtext","urlInside","asciiControl","emailAtSignOrDot","asciiAtext","emailLabel","type","emailValue","next","lineEnding","factorySpace","characterReference","max","test","numeric","value","asciiHexDigit","asciiDigit","token","decodeNamedCharacterReference","sliceSerialize","blockQuote","state","containerState","_container","markdownSpace","continuation","contBefore","disable","null","includes","undefined","attempt","setextUnderline","marker","paragraph","index","events","length","lazy","now","line","interrupt","inside","before","resolveTo","context","content","text","definition","splice","heading","start","Object","assign","end","push","previous","contentType","chunkInside","contentEnd","check","continuationConstruct","contentContinue","resolve","subtokenize","prefixed","tail","flow","partial","blankLine","attention","attentionMarkers","classifyCharacter","close","_open","Boolean","_close","group","openingSequence","closingSequence","use","nextEvents","offset","charCodeAt","movePoint","insideSpan","slice","point","column","_bufferIndex","labelStart","defined","_balanced","_inactive","labelEndNok","normalizeIdentifier","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","media","label","resourceBefore","markdownLineEndingOrSpace","factoryWhitespace","resourceOpen","resourceEnd","factoryDestination","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","factoryTitle","resourceTitleAfter","factoryLabel","call","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","characterEscape","asciiPunctuation","regexCheck","regex","String","fromCharCode","htmlText","returnState","declarationOpen","tagCloseStart","instruction","tagOpen","commentOpenInside","cdataOpenInside","declaration","commentEnd","comment","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","headingAtx","sequenceOpen","atBreak","sequenceFurther","data","contentStart","labelStartLink","list","initialSize","kind","thematicBreak","atMarker","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","_closeFlow","furtherBlankLines","notInCurrentItem","indentConstruct","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","beforeMarker","titleAfter","titleAfterOptionalWhitespace","nonLazyContinuation","lineStart","codeFenced","closeStart","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","info","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","concrete","htmlFlow","closingTag","buffer","markerB","continuationDeclarationInside","tagName","slash","toLowerCase","htmlRawNames","htmlBlockNames","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","sequence","codeIndented","afterPrefix","furtherStart","codeText","between","tailExitIndex","headEnterIndex"],"sourceRoot":""}