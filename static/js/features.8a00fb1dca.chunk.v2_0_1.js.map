{"version":3,"file":"static/js/features.8a00fb1dca.chunk.v2_0_1.js","mappings":"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","sources":["webpack://ai-chat-interface/./src/components/chat/PerformanceMetrics/PerformanceMetrics.module.css?a58d","components/chat/PerformanceMetrics/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"PerformanceMetrics\":\"PerformanceMetrics_PerformanceMetrics__kvDXY\",\"PerformanceMetrics__metric\":\"PerformanceMetrics_PerformanceMetrics__metric__+DYdn\",\"PerformanceMetrics__metric--time\":\"PerformanceMetrics_PerformanceMetrics__metric--time__IIDs1\",\"PerformanceMetrics__metric--tokens\":\"PerformanceMetrics_PerformanceMetrics__metric--tokens__ro+Qa\",\"PerformanceMetrics__metric--tps\":\"PerformanceMetrics_PerformanceMetrics__metric--tps__0XwpY\",\"PerformanceMetrics__metric--detailed\":\"PerformanceMetrics_PerformanceMetrics__metric--detailed__J+LIO\",\"PerformanceMetrics__icon\":\"PerformanceMetrics_PerformanceMetrics__icon__-Pp5i\"};","import { memo, useMemo, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './PerformanceMetrics.module.css';\n\n/**\n * Component to display performance metrics for AI responses\n * @param {Object} props - Component props\n * @param {Object} props.metrics - Metrics data including token counts and timing\n * @returns {JSX.Element|null} - Rendered component or null if no metrics\n */\nconst PerformanceMetrics = memo(({ metrics = null }) => {\n  const { \n    elapsedTime, \n    tokensPerSecond, \n    isComplete, \n    promptTokens, \n    completionTokens, \n    totalTokens,\n    finishReason\n  } = metrics || {};\n  \n  // Debug metrics data\n  useEffect(() => {\n    if (metrics) {\n      console.log('PerformanceMetrics received:', { \n        promptTokens, \n        completionTokens, \n        totalTokens,\n        finishReason,\n        allMetrics: metrics \n      });\n    }\n  }, [metrics, promptTokens, completionTokens, totalTokens, finishReason]);\n  \n  // Format elapsed time\n  const formattedTime = useMemo(() => {\n    if (!elapsedTime) return '';\n    return `${(elapsedTime / 1000).toFixed(2)}s`;\n  }, [elapsedTime]);\n  \n  // Format token count with detailed info when available\n  const formattedTokens = useMemo(() => {\n    // Only show completion token count\n    if (completionTokens) {\n      return `${completionTokens} tokens${isComplete ? '' : '...'}`;\n    }\n    return '';\n  }, [completionTokens, isComplete]);\n  \n  // Create tooltip with detailed token info\n  const tokenTooltip = useMemo(() => {\n    const parts = [];\n    \n    if (promptTokens) parts.push(`Prompt: ${promptTokens}`);\n    if (completionTokens) parts.push(`Completion: ${completionTokens}`);\n    if (totalTokens) parts.push(`Total: ${totalTokens}`);\n    if (finishReason) parts.push(`Finish: ${finishReason}`);\n    \n    if (parts.length > 0) {\n      return parts.join(' | ');\n    }\n    \n    return 'Token count';\n  }, [promptTokens, completionTokens, totalTokens, finishReason]);\n  \n  // Show detailed metrics when available\n  const showDetailedMetrics = useMemo(() => {\n    return !!(promptTokens && totalTokens);\n  }, [promptTokens, totalTokens]);\n  \n  // Only show TPS if we have token count, elapsed time > 0.5s, and calculated TPS\n  const showTps = useMemo(() => {\n    return completionTokens && elapsedTime > 500 && tokensPerSecond;\n  }, [completionTokens, elapsedTime, tokensPerSecond]);\n  \n  // Skip rendering if no metrics available\n  if (!elapsedTime || !completionTokens) {\n    return null;\n  }\n  \n  return (\n    <div className={styles.PerformanceMetrics}>\n      <span className={`${styles.PerformanceMetrics__metric} ${styles['PerformanceMetrics__metric--time']}`} title=\"Response time\">\n        <ClockIcon className={styles.PerformanceMetrics__icon} />\n        {formattedTime}\n      </span>\n      \n      <span className={`${styles.PerformanceMetrics__metric} ${styles['PerformanceMetrics__metric--tokens']}`} title={tokenTooltip}>\n        <TokenIcon className={styles.PerformanceMetrics__icon} />\n        {formattedTokens}\n      </span>\n      \n      {showTps && (\n        <span className={`${styles.PerformanceMetrics__metric} ${styles['PerformanceMetrics__metric--tps']}`} title=\"Tokens per second\">\n          <SpeedIcon className={styles.PerformanceMetrics__icon} />\n          {tokensPerSecond} TPS\n        </span>\n      )}\n      \n      {showDetailedMetrics && (\n        <span className={`${styles.PerformanceMetrics__metric} ${styles['PerformanceMetrics__metric--detailed']}`} title={tokenTooltip}>\n          <InfoIcon className={styles.PerformanceMetrics__icon} />\n          P:{promptTokens}/T:{totalTokens}\n        </span>\n      )}\n    </div>\n  );\n});\n\n// SVG icons as components for better performance\nconst ClockIcon = ({ className }) => (\n  <svg \n    xmlns=\"http://www.w3.org/2000/svg\" \n    viewBox=\"0 0 24 24\" \n    fill=\"none\" \n    stroke=\"currentColor\" \n    strokeWidth=\"2\" \n    strokeLinecap=\"round\" \n    strokeLinejoin=\"round\" \n    className={className}\n    aria-hidden=\"true\"\n  >\n    <circle cx=\"12\" cy=\"12\" r=\"10\" />\n    <polyline points=\"12 6 12 12 16 14\" />\n  </svg>\n);\n\nconst TokenIcon = ({ className }) => (\n  <svg \n    xmlns=\"http://www.w3.org/2000/svg\" \n    viewBox=\"0 0 24 24\" \n    fill=\"none\" \n    stroke=\"currentColor\" \n    strokeWidth=\"2\" \n    strokeLinecap=\"round\" \n    strokeLinejoin=\"round\" \n    className={className}\n    aria-hidden=\"true\"\n  >\n    <path d=\"M20.24 12.24a6 6 0 0 0-8.49-8.49L5 10.5V19h8.5z\" />\n    <line x1=\"16\" y1=\"8\" x2=\"2\" y2=\"22\" />\n    <line x1=\"17.5\" y1=\"15\" x2=\"9\" y2=\"15\" />\n  </svg>\n);\n\nconst SpeedIcon = ({ className }) => (\n  <svg \n    xmlns=\"http://www.w3.org/2000/svg\" \n    viewBox=\"0 0 24 24\" \n    fill=\"none\" \n    stroke=\"currentColor\" \n    strokeWidth=\"2\" \n    strokeLinecap=\"round\" \n    strokeLinejoin=\"round\" \n    className={className}\n    aria-hidden=\"true\"\n  >\n    <path d=\"M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z\" />\n    <path d=\"M3.22 12H9.5l.5-1 2 4.5 2-7 1.5 3.5h5.27\" />\n  </svg>\n);\n\nconst InfoIcon = ({ className }) => (\n  <svg \n    xmlns=\"http://www.w3.org/2000/svg\" \n    viewBox=\"0 0 24 24\" \n    fill=\"none\" \n    stroke=\"currentColor\" \n    strokeWidth=\"2\" \n    strokeLinecap=\"round\" \n    strokeLinejoin=\"round\" \n    className={className}\n    aria-hidden=\"true\"\n  >\n    <circle cx=\"12\" cy=\"12\" r=\"10\" />\n    <line x1=\"12\" y1=\"16\" x2=\"12\" y2=\"12\" />\n    <line x1=\"12\" y1=\"8\" x2=\"12.01\" y2=\"8\" />\n  </svg>\n);\n\n// Display name for debugging\nPerformanceMetrics.displayName = 'PerformanceMetrics';\n\n// PropTypes\nPerformanceMetrics.propTypes = {\n  metrics: PropTypes.shape({\n    elapsedTime: PropTypes.number,\n    tokensPerSecond: PropTypes.number,\n    isComplete: PropTypes.bool,\n    promptTokens: PropTypes.number,\n    completionTokens: PropTypes.number,\n    totalTokens: PropTypes.number,\n    finishReason: PropTypes.string\n  })\n};\n\n// Removed defaultProps; default parameter used instead\n\nexport default PerformanceMetrics; "],"names":["PerformanceMetrics","memo","_ref","metrics","elapsedTime","tokensPerSecond","isComplete","promptTokens","completionTokens","totalTokens","finishReason","useEffect","formattedTime","useMemo","toFixed","formattedTokens","tokenTooltip","parts","push","length","join","showDetailedMetrics","showTps","_jsxs","className","children","styles","title","_jsx","ClockIcon","TokenIcon","SpeedIcon","InfoIcon","_ref2","xmlns","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","cx","cy","r","points","_ref3","d","x1","y1","x2","y2","_ref4","_ref5","displayName"],"sourceRoot":""}