{"version":3,"file":"static/js/vendor-refractor-de6256ae.250578aacc.chunk.v1_9_5.js","mappings":"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","sources":["../node_modules/refractor/lang/systemd.js","../node_modules/refractor/lang/stan.js","../node_modules/refractor/lang/swift.js","../node_modules/refractor/lang/stylus.js","../node_modules/refractor/lang/squirrel.js"],"sourcesContent":["'use strict'\n\nmodule.exports = systemd\nsystemd.displayName = 'systemd'\nsystemd.aliases = []\nfunction systemd(Prism) {\n  // https://www.freedesktop.org/software/systemd/man/systemd.syntax.html\n  ;(function (Prism) {\n    var comment = {\n      pattern: /^[;#].*/m,\n      greedy: true\n    }\n    var quotesSource = /\"(?:[^\\r\\n\"\\\\]|\\\\(?:[^\\r]|\\r\\n?))*\"(?!\\S)/.source\n    Prism.languages.systemd = {\n      comment: comment,\n      section: {\n        pattern: /^\\[[^\\n\\r\\[\\]]*\\](?=[ \\t]*$)/m,\n        greedy: true,\n        inside: {\n          punctuation: /^\\[|\\]$/,\n          'section-name': {\n            pattern: /[\\s\\S]+/,\n            alias: 'selector'\n          }\n        }\n      },\n      key: {\n        pattern: /^[^\\s=]+(?=[ \\t]*=)/m,\n        greedy: true,\n        alias: 'attr-name'\n      },\n      value: {\n        // This pattern is quite complex because of two properties:\n        //  1) Quotes (strings) must be preceded by a space. Since we can't use lookbehinds, we have to \"resolve\"\n        //     the lookbehind. You will see this in the main loop where spaces are handled separately.\n        //  2) Line continuations.\n        //     After line continuations, empty lines and comments are ignored so we have to consume them.\n        pattern: RegExp(\n          /(=[ \\t]*(?!\\s))/.source + // the value either starts with quotes or not\n            '(?:' +\n            quotesSource +\n            '|(?=[^\"\\r\\n]))' + // main loop\n            '(?:' +\n            (/[^\\s\\\\]/.source + // handle spaces separately because of quotes\n              '|' +\n              '[ \\t]+(?:(?![ \\t\"])|' +\n              quotesSource +\n              ')' + // line continuation\n              '|' +\n              /\\\\[\\r\\n]+(?:[#;].*[\\r\\n]+)*(?![#;])/.source) +\n            ')*'\n        ),\n        lookbehind: true,\n        greedy: true,\n        alias: 'attr-value',\n        inside: {\n          comment: comment,\n          quoted: {\n            pattern: RegExp(/(^|\\s)/.source + quotesSource),\n            lookbehind: true,\n            greedy: true\n          },\n          punctuation: /\\\\$/m,\n          boolean: {\n            pattern: /^(?:false|no|off|on|true|yes)$/,\n            greedy: true\n          }\n        }\n      },\n      punctuation: /=/\n    }\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = stan\nstan.displayName = 'stan'\nstan.aliases = []\nfunction stan(Prism) {\n  ;(function (Prism) {\n    // https://mc-stan.org/docs/2_28/reference-manual/bnf-grammars.html\n    var higherOrderFunctions =\n      /\\b(?:algebra_solver|algebra_solver_newton|integrate_1d|integrate_ode|integrate_ode_bdf|integrate_ode_rk45|map_rect|ode_(?:adams|bdf|ckrk|rk45)(?:_tol)?|ode_adjoint_tol_ctl|reduce_sum|reduce_sum_static)\\b/\n    Prism.languages.stan = {\n      comment: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/|#(?!include).*/,\n      string: {\n        // String literals can contain spaces and any printable ASCII characters except for \" and \\\n        // https://mc-stan.org/docs/2_24/reference-manual/print-statements-section.html#string-literals\n        pattern: /\"[\\x20\\x21\\x23-\\x5B\\x5D-\\x7E]*\"/,\n        greedy: true\n      },\n      directive: {\n        pattern: /^([ \\t]*)#include\\b.*/m,\n        lookbehind: true,\n        alias: 'property'\n      },\n      'function-arg': {\n        pattern: RegExp(\n          '(' +\n            higherOrderFunctions.source +\n            /\\s*\\(\\s*/.source +\n            ')' +\n            /[a-zA-Z]\\w*/.source\n        ),\n        lookbehind: true,\n        alias: 'function'\n      },\n      constraint: {\n        pattern: /(\\b(?:int|matrix|real|row_vector|vector)\\s*)<[^<>]*>/,\n        lookbehind: true,\n        inside: {\n          expression: {\n            pattern: /(=\\s*)\\S(?:\\S|\\s+(?!\\s))*?(?=\\s*(?:>$|,\\s*\\w+\\s*=))/,\n            lookbehind: true,\n            inside: null // see below\n          },\n          property: /\\b[a-z]\\w*(?=\\s*=)/i,\n          operator: /=/,\n          punctuation: /^<|>$|,/\n        }\n      },\n      keyword: [\n        {\n          pattern:\n            /\\bdata(?=\\s*\\{)|\\b(?:functions|generated|model|parameters|quantities|transformed)\\b/,\n          alias: 'program-block'\n        },\n        /\\b(?:array|break|cholesky_factor_corr|cholesky_factor_cov|complex|continue|corr_matrix|cov_matrix|data|else|for|if|in|increment_log_prob|int|matrix|ordered|positive_ordered|print|real|reject|return|row_vector|simplex|target|unit_vector|vector|void|while)\\b/, // these are functions that are known to take another function as their first argument.\n        higherOrderFunctions\n      ],\n      function: /\\b[a-z]\\w*(?=\\s*\\()/i,\n      number:\n        /(?:\\b\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\B\\.\\d+(?:_\\d+)*)(?:E[+-]?\\d+(?:_\\d+)*)?i?(?!\\w)/i,\n      boolean: /\\b(?:false|true)\\b/,\n      operator: /<-|\\.[*/]=?|\\|\\|?|&&|[!=<>+\\-*/]=?|['^%~?:]/,\n      punctuation: /[()\\[\\]{},;]/\n    }\n    Prism.languages.stan.constraint.inside.expression.inside =\n      Prism.languages.stan\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = swift\nswift.displayName = 'swift'\nswift.aliases = []\nfunction swift(Prism) {\n  Prism.languages.swift = {\n    comment: {\n      // Nested comments are supported up to 2 levels\n      pattern:\n        /(^|[^\\\\:])(?:\\/\\/.*|\\/\\*(?:[^/*]|\\/(?!\\*)|\\*(?!\\/)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*\\*\\/)/,\n      lookbehind: true,\n      greedy: true\n    },\n    'string-literal': [\n      // https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html\n      {\n        pattern: RegExp(\n          /(^|[^\"#])/.source +\n            '(?:' + // single-line string\n            /\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^(])|[^\\\\\\r\\n\"])*\"/\n              .source +\n            '|' + // multi-line string\n            /\"\"\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|[^(])|[^\\\\\"]|\"(?!\"\"))*\"\"\"/\n              .source +\n            ')' +\n            /(?![\"#])/.source\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          interpolation: {\n            pattern: /(\\\\\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,\n            lookbehind: true,\n            inside: null // see below\n          },\n          'interpolation-punctuation': {\n            pattern: /^\\)|\\\\\\($/,\n            alias: 'punctuation'\n          },\n          punctuation: /\\\\(?=[\\r\\n])/,\n          string: /[\\s\\S]+/\n        }\n      },\n      {\n        pattern: RegExp(\n          /(^|[^\"#])(#+)/.source +\n            '(?:' + // single-line string\n            /\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^#])|[^\\\\\\r\\n])*?\"/\n              .source +\n            '|' + // multi-line string\n            /\"\"\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|[^#])|[^\\\\])*?\"\"\"/.source +\n            ')' +\n            '\\\\2'\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          interpolation: {\n            pattern: /(\\\\#+\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,\n            lookbehind: true,\n            inside: null // see below\n          },\n          'interpolation-punctuation': {\n            pattern: /^\\)|\\\\#+\\($/,\n            alias: 'punctuation'\n          },\n          string: /[\\s\\S]+/\n        }\n      }\n    ],\n    directive: {\n      // directives with conditions\n      pattern: RegExp(\n        /#/.source +\n          '(?:' +\n          (/(?:elseif|if)\\b/.source +\n            '(?:[ \\t]*' + // This regex is a little complex. It's equivalent to this:\n            //   (?:![ \\t]*)?(?:\\b\\w+\\b(?:[ \\t]*<round>)?|<round>)(?:[ \\t]*(?:&&|\\|\\|))?\n            // where <round> is a general parentheses expression.\n            /(?:![ \\t]*)?(?:\\b\\w+\\b(?:[ \\t]*\\((?:[^()]|\\([^()]*\\))*\\))?|\\((?:[^()]|\\([^()]*\\))*\\))(?:[ \\t]*(?:&&|\\|\\|))?/\n              .source +\n            ')+') +\n          '|' +\n          /(?:else|endif)\\b/.source +\n          ')'\n      ),\n      alias: 'property',\n      inside: {\n        'directive-name': /^#\\w+/,\n        boolean: /\\b(?:false|true)\\b/,\n        number: /\\b\\d+(?:\\.\\d+)*\\b/,\n        operator: /!|&&|\\|\\||[<>]=?/,\n        punctuation: /[(),]/\n      }\n    },\n    literal: {\n      pattern:\n        /#(?:colorLiteral|column|dsohandle|file(?:ID|Literal|Path)?|function|imageLiteral|line)\\b/,\n      alias: 'constant'\n    },\n    'other-directive': {\n      pattern: /#\\w+\\b/,\n      alias: 'property'\n    },\n    attribute: {\n      pattern: /@\\w+/,\n      alias: 'atrule'\n    },\n    'function-definition': {\n      pattern: /(\\bfunc\\s+)\\w+/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    label: {\n      // https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID141\n      pattern:\n        /\\b(break|continue)\\s+\\w+|\\b[a-zA-Z_]\\w*(?=\\s*:\\s*(?:for|repeat|while)\\b)/,\n      lookbehind: true,\n      alias: 'important'\n    },\n    keyword:\n      /\\b(?:Any|Protocol|Self|Type|actor|as|assignment|associatedtype|associativity|async|await|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|higherThan|if|import|in|indirect|infix|init|inout|internal|is|isolated|lazy|left|let|lowerThan|mutating|none|nonisolated|nonmutating|open|operator|optional|override|postfix|precedencegroup|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|set|some|static|struct|subscript|super|switch|throw|throws|try|typealias|unowned|unsafe|var|weak|where|while|willSet)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    nil: {\n      pattern: /\\bnil\\b/,\n      alias: 'constant'\n    },\n    'short-argument': /\\$\\d+\\b/,\n    omit: {\n      pattern: /\\b_\\b/,\n      alias: 'keyword'\n    },\n    number:\n      /\\b(?:[\\d_]+(?:\\.[\\de_]+)?|0x[a-f0-9_]+(?:\\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b/i,\n    // A class name must start with an upper-case letter and be either 1 letter long or contain a lower-case letter.\n    'class-name': /\\b[A-Z](?:[A-Z_\\d]*[a-z]\\w*)?\\b/,\n    function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    constant: /\\b(?:[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\\b/,\n    // Operators are generic in Swift. Developers can even create new operators (e.g. +++).\n    // https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html#ID481\n    // This regex only supports ASCII operators.\n    operator: /[-+*/%=!<>&|^~?]+|\\.[.\\-+*/%=!<>&|^~?]+/,\n    punctuation: /[{}[\\]();,.:\\\\]/\n  }\n  Prism.languages.swift['string-literal'].forEach(function (rule) {\n    rule.inside['interpolation'].inside = Prism.languages.swift\n  })\n}\n","'use strict'\n\nmodule.exports = stylus\nstylus.displayName = 'stylus'\nstylus.aliases = []\nfunction stylus(Prism) {\n  ;(function (Prism) {\n    var unit = {\n      pattern: /(\\b\\d+)(?:%|[a-z]+)/,\n      lookbehind: true\n    } // 123 -123 .123 -.123 12.3 -12.3\n    var number = {\n      pattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\n      lookbehind: true\n    }\n    var inside = {\n      comment: {\n        pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n        lookbehind: true\n      },\n      url: {\n        pattern: /\\burl\\(([\"']?).*?\\1\\)/i,\n        greedy: true\n      },\n      string: {\n        pattern: /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,\n        greedy: true\n      },\n      interpolation: null,\n      // See below\n      func: null,\n      // See below\n      important: /\\B!(?:important|optional)\\b/i,\n      keyword: {\n        pattern: /(^|\\s+)(?:(?:else|for|if|return|unless)(?=\\s|$)|@[\\w-]+)/,\n        lookbehind: true\n      },\n      hexcode: /#[\\da-f]{3,6}/i,\n      color: [\n        /\\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\\b/i,\n        {\n          pattern:\n            /\\b(?:hsl|rgb)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:hsl|rgb)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n          inside: {\n            unit: unit,\n            number: number,\n            function: /[\\w-]+(?=\\()/,\n            punctuation: /[(),]/\n          }\n        }\n      ],\n      entity: /\\\\[\\da-f]{1,8}/i,\n      unit: unit,\n      boolean: /\\b(?:false|true)\\b/,\n      operator: [\n        // We want non-word chars around \"-\" because it is\n        // accepted in property names.\n        /~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.{2,3}|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/\n      ],\n      number: number,\n      punctuation: /[{}()\\[\\];:,]/\n    }\n    inside['interpolation'] = {\n      pattern: /\\{[^\\r\\n}:]+\\}/,\n      alias: 'variable',\n      inside: {\n        delimiter: {\n          pattern: /^\\{|\\}$/,\n          alias: 'punctuation'\n        },\n        rest: inside\n      }\n    }\n    inside['func'] = {\n      pattern: /[\\w-]+\\([^)]*\\).*/,\n      inside: {\n        function: /^[^(]+/,\n        rest: inside\n      }\n    }\n    Prism.languages.stylus = {\n      'atrule-declaration': {\n        pattern: /(^[ \\t]*)@.+/m,\n        lookbehind: true,\n        inside: {\n          atrule: /^@[\\w-]+/,\n          rest: inside\n        }\n      },\n      'variable-declaration': {\n        pattern: /(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:\\{[^{}]*\\}|\\S.*|$)/m,\n        lookbehind: true,\n        inside: {\n          variable: /^\\S+/,\n          rest: inside\n        }\n      },\n      statement: {\n        pattern: /(^[ \\t]*)(?:else|for|if|return|unless)[ \\t].+/m,\n        lookbehind: true,\n        inside: {\n          keyword: /^\\S+/,\n          rest: inside\n        }\n      },\n      // A property/value pair cannot end with a comma or a brace\n      // It cannot have indented content unless it ended with a semicolon\n      'property-declaration': {\n        pattern:\n          /((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)(?!\\s)[^{\\r\\n]*(?:;|[^{\\r\\n,]$(?!(?:\\r?\\n|\\r)(?:\\{|\\2[ \\t])))/m,\n        lookbehind: true,\n        inside: {\n          property: {\n            pattern: /^[^\\s:]+/,\n            inside: {\n              interpolation: inside.interpolation\n            }\n          },\n          rest: inside\n        }\n      },\n      // A selector can contain parentheses only as part of a pseudo-element\n      // It can span multiple lines.\n      // It must end with a comma or an accolade or have indented content.\n      selector: {\n        pattern:\n          /(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t])))/m,\n        lookbehind: true,\n        inside: {\n          interpolation: inside.interpolation,\n          comment: inside.comment,\n          punctuation: /[{},]/\n        }\n      },\n      func: inside.func,\n      string: inside.string,\n      comment: {\n        pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n        lookbehind: true,\n        greedy: true\n      },\n      interpolation: inside.interpolation,\n      punctuation: /[{}()\\[\\];:.]/\n    }\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = squirrel\nsquirrel.displayName = 'squirrel'\nsquirrel.aliases = []\nfunction squirrel(Prism) {\n  Prism.languages.squirrel = Prism.languages.extend('clike', {\n    comment: [\n      Prism.languages.clike['comment'][0],\n      {\n        pattern: /(^|[^\\\\:])(?:\\/\\/|#).*/,\n        lookbehind: true,\n        greedy: true\n      }\n    ],\n    string: {\n      pattern: /(^|[^\\\\\"'@])(?:@\"(?:[^\"]|\"\")*\"(?!\")|\"(?:[^\\\\\\r\\n\"]|\\\\.)*\")/,\n      lookbehind: true,\n      greedy: true\n    },\n    'class-name': {\n      pattern: /(\\b(?:class|enum|extends|instanceof)\\s+)\\w+(?:\\.\\w+)*/,\n      lookbehind: true,\n      inside: {\n        punctuation: /\\./\n      }\n    },\n    keyword:\n      /\\b(?:__FILE__|__LINE__|base|break|case|catch|class|clone|const|constructor|continue|default|delete|else|enum|extends|for|foreach|function|if|in|instanceof|local|null|resume|return|static|switch|this|throw|try|typeof|while|yield)\\b/,\n    number: /\\b(?:0x[0-9a-fA-F]+|\\d+(?:\\.(?:\\d+|[eE][+-]?\\d+))?)\\b/,\n    operator: /\\+\\+|--|<=>|<[-<]|>>>?|&&?|\\|\\|?|[-+*/%!=<>]=?|[~^]|::?/,\n    punctuation: /[(){}\\[\\],;.]/\n  })\n  Prism.languages.insertBefore('squirrel', 'string', {\n    char: {\n      pattern: /(^|[^\\\\\"'])'(?:[^\\\\']|\\\\(?:[xuU][0-9a-fA-F]{0,8}|[\\s\\S]))'/,\n      lookbehind: true,\n      greedy: true\n    }\n  })\n  Prism.languages.insertBefore('squirrel', 'operator', {\n    'attribute-punctuation': {\n      pattern: /<\\/|\\/>/,\n      alias: 'important'\n    },\n    lambda: {\n      pattern: /@(?=\\()/,\n      alias: 'operator'\n    }\n  })\n}\n"],"names":["systemd","Prism","comment","pattern","greedy","quotesSource","source","languages","section","inside","punctuation","alias","key","value","RegExp","lookbehind","quoted","boolean","module","exports","displayName","aliases","stan","higherOrderFunctions","string","directive","constraint","expression","property","operator","keyword","function","number","swift","interpolation","literal","attribute","label","nil","omit","constant","forEach","rule","stylus","unit","url","func","important","hexcode","color","entity","delimiter","rest","atrule","variable","statement","selector","squirrel","extend","clike","insertBefore","char","lambda"],"sourceRoot":""}