{"version":3,"file":"static/js/vendor-refractor-2c300606.0683aec5a2.chunk.v1_9_0.js","mappings":"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","sources":["../node_modules/refractor/lang/solution-file.js","../node_modules/refractor/lang/smarty.js","../node_modules/refractor/lang/smalltalk.js","../node_modules/refractor/lang/smali.js","../node_modules/refractor/lang/sml.js","../node_modules/refractor/lang/shell-session.js","../node_modules/refractor/lang/solidity.js"],"sourcesContent":["'use strict'\n\nmodule.exports = solutionFile\nsolutionFile.displayName = 'solutionFile'\nsolutionFile.aliases = []\nfunction solutionFile(Prism) {\n  ;(function (Prism) {\n    var guid = {\n      // https://en.wikipedia.org/wiki/Universally_unique_identifier#Format\n      pattern: /\\{[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12}\\}/i,\n      alias: 'constant',\n      inside: {\n        punctuation: /[{}]/\n      }\n    }\n    Prism.languages['solution-file'] = {\n      comment: {\n        pattern: /#.*/,\n        greedy: true\n      },\n      string: {\n        pattern: /\"[^\"\\r\\n]*\"|'[^'\\r\\n]*'/,\n        greedy: true,\n        inside: {\n          guid: guid\n        }\n      },\n      object: {\n        // Foo\n        //   Bar(\"abs\") = 9\n        //   EndBar\n        //   Prop = TRUE\n        // EndFoo\n        pattern:\n          /^([ \\t]*)(?:([A-Z]\\w*)\\b(?=.*(?:\\r\\n?|\\n)(?:\\1[ \\t].*(?:\\r\\n?|\\n))*\\1End\\2(?=[ \\t]*$))|End[A-Z]\\w*(?=[ \\t]*$))/m,\n        lookbehind: true,\n        greedy: true,\n        alias: 'keyword'\n      },\n      property: {\n        pattern: /^([ \\t]*)(?!\\s)[^\\r\\n\"#=()]*[^\\s\"#=()](?=\\s*=)/m,\n        lookbehind: true,\n        inside: {\n          guid: guid\n        }\n      },\n      guid: guid,\n      number: /\\b\\d+(?:\\.\\d+)*\\b/,\n      boolean: /\\b(?:FALSE|TRUE)\\b/,\n      operator: /=/,\n      punctuation: /[(),]/\n    }\n    Prism.languages['sln'] = Prism.languages['solution-file']\n  })(Prism)\n}\n","'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = smarty\nsmarty.displayName = 'smarty'\nsmarty.aliases = []\nfunction smarty(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  ;(function (Prism) {\n    Prism.languages.smarty = {\n      comment: {\n        pattern: /^\\{\\*[\\s\\S]*?\\*\\}/,\n        greedy: true\n      },\n      'embedded-php': {\n        pattern: /^\\{php\\}[\\s\\S]*?\\{\\/php\\}/,\n        greedy: true,\n        inside: {\n          smarty: {\n            pattern: /^\\{php\\}|\\{\\/php\\}$/,\n            inside: null // see below\n          },\n          php: {\n            pattern: /[\\s\\S]+/,\n            alias: 'language-php',\n            inside: Prism.languages.php\n          }\n        }\n      },\n      string: [\n        {\n          pattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n          greedy: true,\n          inside: {\n            interpolation: {\n              pattern: /\\{[^{}]*\\}|`[^`]*`/,\n              inside: {\n                'interpolation-punctuation': {\n                  pattern: /^[{`]|[`}]$/,\n                  alias: 'punctuation'\n                },\n                expression: {\n                  pattern: /[\\s\\S]+/,\n                  inside: null // see below\n                }\n              }\n            },\n            variable: /\\$\\w+/\n          }\n        },\n        {\n          pattern: /'(?:\\\\.|[^'\\\\\\r\\n])*'/,\n          greedy: true\n        }\n      ],\n      keyword: {\n        pattern: /(^\\{\\/?)[a-z_]\\w*\\b(?!\\()/i,\n        lookbehind: true,\n        greedy: true\n      },\n      delimiter: {\n        pattern: /^\\{\\/?|\\}$/,\n        greedy: true,\n        alias: 'punctuation'\n      },\n      number: /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\n      variable: [\n        /\\$(?!\\d)\\w+/,\n        /#(?!\\d)\\w+#/,\n        {\n          pattern: /(\\.|->|\\w\\s*=)(?!\\d)\\w+\\b(?!\\()/,\n          lookbehind: true\n        },\n        {\n          pattern: /(\\[)(?!\\d)\\w+(?=\\])/,\n          lookbehind: true\n        }\n      ],\n      function: {\n        pattern: /(\\|\\s*)@?[a-z_]\\w*|\\b[a-z_]\\w*(?=\\()/i,\n        lookbehind: true\n      },\n      'attr-name': /\\b[a-z_]\\w*(?=\\s*=)/i,\n      boolean: /\\b(?:false|no|off|on|true|yes)\\b/,\n      punctuation: /[\\[\\](){}.,:`]|->/,\n      operator: [\n        /[+\\-*\\/%]|==?=?|[!<>]=?|&&|\\|\\|?/,\n        /\\bis\\s+(?:not\\s+)?(?:div|even|odd)(?:\\s+by)?\\b/,\n        /\\b(?:and|eq|gt?e|gt|lt?e|lt|mod|neq?|not|or)\\b/\n      ]\n    }\n    Prism.languages.smarty['embedded-php'].inside.smarty.inside =\n      Prism.languages.smarty\n    Prism.languages.smarty.string[0].inside.interpolation.inside.expression.inside =\n      Prism.languages.smarty\n    var string = /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|'(?:\\\\.|[^'\\\\\\r\\n])*'/\n    var smartyPattern = RegExp(\n      // comments\n      /\\{\\*[\\s\\S]*?\\*\\}/.source +\n        '|' + // php tags\n        /\\{php\\}[\\s\\S]*?\\{\\/php\\}/.source +\n        '|' + // smarty blocks\n        /\\{(?:[^{}\"']|<str>|\\{(?:[^{}\"']|<str>|\\{(?:[^{}\"']|<str>)*\\})*\\})*\\}/.source.replace(\n          /<str>/g,\n          function () {\n            return string.source\n          }\n        ),\n      'g'\n    ) // Tokenize all inline Smarty expressions\n    Prism.hooks.add('before-tokenize', function (env) {\n      var smartyLiteralStart = '{literal}'\n      var smartyLiteralEnd = '{/literal}'\n      var smartyLiteralMode = false\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'smarty',\n        smartyPattern,\n        function (match) {\n          // Smarty tags inside {literal} block are ignored\n          if (match === smartyLiteralEnd) {\n            smartyLiteralMode = false\n          }\n          if (!smartyLiteralMode) {\n            if (match === smartyLiteralStart) {\n              smartyLiteralMode = true\n            }\n            return true\n          }\n          return false\n        }\n      )\n    }) // Re-insert the tokens after tokenizing\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'smarty')\n    })\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = smalltalk\nsmalltalk.displayName = 'smalltalk'\nsmalltalk.aliases = []\nfunction smalltalk(Prism) {\n  Prism.languages.smalltalk = {\n    comment: {\n      pattern: /\"(?:\"\"|[^\"])*\"/,\n      greedy: true\n    },\n    char: {\n      pattern: /\\$./,\n      greedy: true\n    },\n    string: {\n      pattern: /'(?:''|[^'])*'/,\n      greedy: true\n    },\n    symbol: /#[\\da-z]+|#(?:-|([+\\/\\\\*~<>=@%|&?!])\\1?)|#(?=\\()/i,\n    'block-arguments': {\n      pattern: /(\\[\\s*):[^\\[|]*\\|/,\n      lookbehind: true,\n      inside: {\n        variable: /:[\\da-z]+/i,\n        punctuation: /\\|/\n      }\n    },\n    'temporary-variables': {\n      pattern: /\\|[^|]+\\|/,\n      inside: {\n        variable: /[\\da-z]+/i,\n        punctuation: /\\|/\n      }\n    },\n    keyword: /\\b(?:new|nil|self|super)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    number: [\n      /\\d+r-?[\\dA-Z]+(?:\\.[\\dA-Z]+)?(?:e-?\\d+)?/,\n      /\\b\\d+(?:\\.\\d+)?(?:e-?\\d+)?/\n    ],\n    operator: /[<=]=?|:=|~[~=]|\\/\\/?|\\\\\\\\|>[>=]?|[!^+\\-*&|,@]/,\n    punctuation: /[.;:?\\[\\](){}]/\n  }\n}\n","'use strict'\n\nmodule.exports = smali\nsmali.displayName = 'smali'\nsmali.aliases = []\nfunction smali(Prism) {\n  // Test files for the parser itself:\n  // https://github.com/JesusFreke/smali/tree/master/smali/src/test/resources/LexerTest\n  Prism.languages.smali = {\n    comment: /#.*/,\n    string: {\n      pattern: /\"(?:[^\\r\\n\\\\\"]|\\\\.)*\"|'(?:[^\\r\\n\\\\']|\\\\(?:.|u[\\da-fA-F]{4}))'/,\n      greedy: true\n    },\n    'class-name': {\n      pattern:\n        /(^|[^L])L(?:(?:\\w+|`[^`\\r\\n]*`)\\/)*(?:[\\w$]+|`[^`\\r\\n]*`)(?=\\s*;)/,\n      lookbehind: true,\n      inside: {\n        'class-name': {\n          pattern: /(^L|\\/)(?:[\\w$]+|`[^`\\r\\n]*`)$/,\n          lookbehind: true\n        },\n        namespace: {\n          pattern: /^(L)(?:(?:\\w+|`[^`\\r\\n]*`)\\/)+/,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\//\n          }\n        },\n        builtin: /^L/\n      }\n    },\n    builtin: [\n      {\n        // Reference: https://github.com/JesusFreke/smali/wiki/TypesMethodsAndFields#types\n        pattern: /([();\\[])[BCDFIJSVZ]+/,\n        lookbehind: true\n      },\n      {\n        // e.g. .field mWifiOnUid:I\n        pattern: /([\\w$>]:)[BCDFIJSVZ]/,\n        lookbehind: true\n      }\n    ],\n    keyword: [\n      {\n        pattern: /(\\.end\\s+)[\\w-]+/,\n        lookbehind: true\n      },\n      {\n        pattern: /(^|[^\\w.-])\\.(?!\\d)[\\w-]+/,\n        lookbehind: true\n      },\n      {\n        pattern:\n          /(^|[^\\w.-])(?:abstract|annotation|bridge|constructor|enum|final|interface|private|protected|public|runtime|static|synthetic|system|transient)(?![\\w.-])/,\n        lookbehind: true\n      }\n    ],\n    function: {\n      pattern: /(^|[^\\w.-])(?:\\w+|<[\\w$-]+>)(?=\\()/,\n      lookbehind: true\n    },\n    field: {\n      pattern: /[\\w$]+(?=:)/,\n      alias: 'variable'\n    },\n    register: {\n      pattern: /(^|[^\\w.-])[vp]\\d(?![\\w.-])/,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    boolean: {\n      pattern: /(^|[^\\w.-])(?:false|true)(?![\\w.-])/,\n      lookbehind: true\n    },\n    number: {\n      pattern:\n        /(^|[^/\\w.-])-?(?:NAN|INFINITY|0x(?:[\\dA-F]+(?:\\.[\\dA-F]*)?|\\.[\\dA-F]+)(?:p[+-]?[\\dA-F]+)?|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?)[dflst]?(?![\\w.-])/i,\n      lookbehind: true\n    },\n    label: {\n      pattern: /(:)\\w+/,\n      lookbehind: true,\n      alias: 'property'\n    },\n    operator: /->|\\.\\.|[\\[=]/,\n    punctuation: /[{}(),;:]/\n  }\n}\n","'use strict'\n\nmodule.exports = sml\nsml.displayName = 'sml'\nsml.aliases = ['smlnj']\nfunction sml(Prism) {\n  // https://smlfamily.github.io/sml97-defn.pdf\n  // https://people.mpi-sws.org/~rossberg/sml.html\n  ;(function (Prism) {\n    var keywords =\n      /\\b(?:abstype|and|andalso|as|case|datatype|do|else|end|eqtype|exception|fn|fun|functor|handle|if|in|include|infix|infixr|let|local|nonfix|of|op|open|orelse|raise|rec|sharing|sig|signature|struct|structure|then|type|val|where|while|with|withtype)\\b/i\n    Prism.languages.sml = {\n      // allow one level of nesting\n      comment:\n        /\\(\\*(?:[^*(]|\\*(?!\\))|\\((?!\\*)|\\(\\*(?:[^*(]|\\*(?!\\))|\\((?!\\*))*\\*\\))*\\*\\)/,\n      string: {\n        pattern: /#?\"(?:[^\"\\\\]|\\\\.)*\"/,\n        greedy: true\n      },\n      'class-name': [\n        {\n          // This is only an approximation since the real grammar is context-free\n          //\n          // Why the main loop so complex?\n          // The main loop is approximately the same as /(?:\\s*(?:[*,]|->)\\s*<TERMINAL>)*/ which is, obviously, a lot\n          // simpler. The difference is that if a comma is the last iteration of the loop, then the terminal must be\n          // followed by a long identifier.\n          pattern: RegExp(\n            /((?:^|[^:]):\\s*)<TERMINAL>(?:\\s*(?:(?:\\*|->)\\s*<TERMINAL>|,\\s*<TERMINAL>(?:(?=<NOT-LAST>)|(?!<NOT-LAST>)\\s+<LONG-ID>)))*/.source\n              .replace(/<NOT-LAST>/g, function () {\n                return /\\s*(?:[*,]|->)/.source\n              })\n              .replace(/<TERMINAL>/g, function () {\n                return /(?:'[\\w']*|<LONG-ID>|\\((?:[^()]|\\([^()]*\\))*\\)|\\{(?:[^{}]|\\{[^{}]*\\})*\\})(?:\\s+<LONG-ID>)*/\n                  .source\n              })\n              .replace(/<LONG-ID>/g, function () {\n                return /(?!<KEYWORD>)[a-z\\d_][\\w'.]*/.source\n              })\n              .replace(/<KEYWORD>/g, function () {\n                return keywords.source\n              }),\n            'i'\n          ),\n          lookbehind: true,\n          greedy: true,\n          inside: null // see below\n        },\n        {\n          pattern:\n            /((?:^|[^\\w'])(?:datatype|exception|functor|signature|structure|type)\\s+)[a-z_][\\w'.]*/i,\n          lookbehind: true\n        }\n      ],\n      function: {\n        pattern: /((?:^|[^\\w'])fun\\s+)[a-z_][\\w'.]*/i,\n        lookbehind: true\n      },\n      keyword: keywords,\n      variable: {\n        pattern: /(^|[^\\w'])'[\\w']*/,\n        lookbehind: true\n      },\n      number: /~?\\b(?:\\d+(?:\\.\\d+)?(?:e~?\\d+)?|0x[\\da-f]+)\\b/i,\n      word: {\n        pattern: /\\b0w(?:\\d+|x[\\da-f]+)\\b/i,\n        alias: 'constant'\n      },\n      boolean: /\\b(?:false|true)\\b/i,\n      operator: /\\.\\.\\.|:[>=:]|=>?|->|[<>]=?|[!+\\-*/^#|@~]/,\n      punctuation: /[(){}\\[\\].:,;]/\n    }\n    Prism.languages.sml['class-name'][0].inside = Prism.languages.sml\n    Prism.languages.smlnj = Prism.languages.sml\n  })(Prism)\n}\n","'use strict'\nvar refractorBash = require('./bash.js')\nmodule.exports = shellSession\nshellSession.displayName = 'shellSession'\nshellSession.aliases = []\nfunction shellSession(Prism) {\n  Prism.register(refractorBash)\n  ;(function (Prism) {\n    // CAREFUL!\n    // The following patterns are concatenated, so the group referenced by a back reference is non-obvious!\n    var strings = [\n      // normal string\n      /\"(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|\\$(?!\\()|`[^`]+`|[^\"\\\\`$])*\"/.source,\n      /'[^']*'/.source,\n      /\\$'(?:[^'\\\\]|\\\\[\\s\\S])*'/.source, // here doc\n      // 2 capturing groups\n      /<<-?\\s*([\"']?)(\\w+)\\1\\s[\\s\\S]*?[\\r\\n]\\2/.source\n    ].join('|')\n    Prism.languages['shell-session'] = {\n      command: {\n        pattern: RegExp(\n          // user info\n          /^/.source +\n            '(?:' + // <user> \":\" ( <path> )?\n            (/[^\\s@:$#%*!/\\\\]+@[^\\r\\n@:$#%*!/\\\\]+(?::[^\\0-\\x1F$#%*?\"<>:;|]+)?/\n              .source +\n              '|' + // <path>\n              // Since the path pattern is quite general, we will require it to start with a special character to\n              // prevent false positives.\n              /[/~.][^\\0-\\x1F$#%*?\"<>@:;|]*/.source) +\n            ')?' + // shell symbol\n            /[$#%](?=\\s)/.source + // bash command\n            /(?:[^\\\\\\r\\n \\t'\"<$]|[ \\t](?:(?!#)|#.*$)|\\\\(?:[^\\r]|\\r\\n?)|\\$(?!')|<(?!<)|<<str>>)+/.source.replace(\n              /<<str>>/g,\n              function () {\n                return strings\n              }\n            ),\n          'm'\n        ),\n        greedy: true,\n        inside: {\n          info: {\n            // foo@bar:~/files$ exit\n            // foo@bar$ exit\n            // ~/files$ exit\n            pattern: /^[^#$%]+/,\n            alias: 'punctuation',\n            inside: {\n              user: /^[^\\s@:$#%*!/\\\\]+@[^\\r\\n@:$#%*!/\\\\]+/,\n              punctuation: /:/,\n              path: /[\\s\\S]+/\n            }\n          },\n          bash: {\n            pattern: /(^[$#%]\\s*)\\S[\\s\\S]*/,\n            lookbehind: true,\n            alias: 'language-bash',\n            inside: Prism.languages.bash\n          },\n          'shell-symbol': {\n            pattern: /^[$#%]/,\n            alias: 'important'\n          }\n        }\n      },\n      output: /.(?:.*(?:[\\r\\n]|.$))*/\n    }\n    Prism.languages['sh-session'] = Prism.languages['shellsession'] =\n      Prism.languages['shell-session']\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = solidity\nsolidity.displayName = 'solidity'\nsolidity.aliases = ['sol']\nfunction solidity(Prism) {\n  Prism.languages.solidity = Prism.languages.extend('clike', {\n    'class-name': {\n      pattern:\n        /(\\b(?:contract|enum|interface|library|new|struct|using)\\s+)(?!\\d)[\\w$]+/,\n      lookbehind: true\n    },\n    keyword:\n      /\\b(?:_|anonymous|as|assembly|assert|break|calldata|case|constant|constructor|continue|contract|default|delete|do|else|emit|enum|event|external|for|from|function|if|import|indexed|inherited|interface|internal|is|let|library|mapping|memory|modifier|new|payable|pragma|private|public|pure|require|returns?|revert|selfdestruct|solidity|storage|struct|suicide|switch|this|throw|using|var|view|while)\\b/,\n    operator: /=>|->|:=|=:|\\*\\*|\\+\\+|--|\\|\\||&&|<<=?|>>=?|[-+*/%^&|<>!=]=?|[~?]/\n  })\n  Prism.languages.insertBefore('solidity', 'keyword', {\n    builtin:\n      /\\b(?:address|bool|byte|u?int(?:8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?|string|bytes(?:[1-9]|[12]\\d|3[0-2])?)\\b/\n  })\n  Prism.languages.insertBefore('solidity', 'number', {\n    version: {\n      pattern: /([<>]=?|\\^)\\d+\\.\\d+\\.\\d+\\b/,\n      lookbehind: true,\n      alias: 'number'\n    }\n  })\n  Prism.languages.sol = Prism.languages.solidity\n}\n"],"names":["solutionFile","Prism","guid","pattern","alias","inside","punctuation","languages","comment","greedy","string","object","lookbehind","property","number","boolean","operator","module","exports","displayName","aliases","refractorMarkupTemplating","require","smarty","register","php","interpolation","expression","variable","keyword","delimiter","function","smartyPattern","RegExp","source","replace","hooks","add","env","smartyLiteralMode","buildPlaceholders","match","tokenizePlaceholders","smalltalk","char","symbol","smali","namespace","builtin","field","label","sml","keywords","word","smlnj","refractorBash","shellSession","strings","join","command","info","user","path","bash","output","solidity","extend","insertBefore","version","sol"],"sourceRoot":""}