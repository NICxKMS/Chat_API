{"version":3,"file":"static/js/vendors-node_modules_micromark_lib_parse_js-node_modules_micromark_lib_postprocess_js-node_mo-6de913.7a6c64182b.chunk.v1_9_5.js","mappings":"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","sources":["../node_modules/micromark/lib/preprocess.js","../node_modules/micromark/lib/postprocess.js","../node_modules/micromark/node_modules/micromark-util-character/index.js","../node_modules/micromark/node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","../node_modules/micromark/lib/initialize/content.js","../node_modules/micromark/lib/initialize/document.js","../node_modules/micromark/lib/initialize/flow.js","../node_modules/micromark/lib/initialize/text.js","../node_modules/micromark/lib/create-tokenizer.js","../node_modules/micromark/lib/constructs.js","../node_modules/micromark/lib/parse.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n\n    // @ts-expect-error `Buffer` does allow an encoding.\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {void}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {void}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | void}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n"],"names":["search","preprocess","atCarriageReturn","column","buffer","start","value","encoding","end","chunks","match","next","startPosition","endPosition","code","toString","charCodeAt","undefined","length","lastIndex","exec","index","slice","push","Math","ceil","postprocess","events","subtokenize","markdownLineEnding","regexCheck","regex","test","String","fromCharCode","content","tokenize","effects","contentStart","attempt","this","parser","constructs","contentInitial","enter","consume","exit","factorySpace","lineStart","previous","token","contentType","data","document","self","stack","childFlow","childToken","lineStartOffset","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","point","indexBeforeFlow","type","exitContainers","Object","assign","splice","documentContinued","currentConstruct","concrete","flowStart","interrupt","Boolean","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","line","offset","containerContinue","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","size","entry","call","ok","nok","disable","null","includes","initial","blankLine","flowInitial","afterConstruct","resolver","resolveAll","createResolver","string","initializeFactory","text","field","notText","atBreak","list","resolveAllLineSuffixes","extraResolver","context","eventIndex","tabs","bufferIndex","chunk","_index","_bufferIndex","createTokenizer","initialize","from","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","pop","constructFactory","construct","info","addResult","onsuccessfulcheck","sliceSerialize","expandTabs","result","atTab","join","serializeChunks","chunkIndex","go","main","expectedCode","state","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","shift","sliceChunks","_","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","Array","isArray","handleListOfConstructs","map","def","all","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","partial","name","create","resolve","resolveTo","blockQuote","definition","codeIndented","headingAtx","thematicBreak","setextUnderline","htmlFlow","codeFenced","characterReference","characterEscape","lineEnding","labelStartImage","attention","autolink","htmlText","labelStartLink","hardBreakEscape","labelEnd","codeText","insideSpan","resolveText","attentionMarkers","parse","options","settings","defined","combineExtensions","defaultConstructs","extensions"],"sourceRoot":""}