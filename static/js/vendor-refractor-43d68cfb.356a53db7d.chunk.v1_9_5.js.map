{"version":3,"file":"static/js/vendor-refractor-43d68cfb.356a53db7d.chunk.v1_9_5.js","mappings":"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","sources":["../node_modules/refractor/lang/erb.js","../node_modules/refractor/lang/elixir.js","../node_modules/refractor/lang/etlua.js","../node_modules/refractor/lang/erlang.js","../node_modules/refractor/lang/elm.js","../node_modules/refractor/lang/eiffel.js","../node_modules/refractor/lang/ejs.js","../node_modules/refractor/lang/editorconfig.js"],"sourcesContent":["'use strict'\nvar refractorRuby = require('./ruby.js')\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = erb\nerb.displayName = 'erb'\nerb.aliases = []\nfunction erb(Prism) {\n  Prism.register(refractorRuby)\n  Prism.register(refractorMarkupTemplating)\n  ;(function (Prism) {\n    Prism.languages.erb = {\n      delimiter: {\n        pattern: /^(\\s*)<%=?|%>(?=\\s*$)/,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      ruby: {\n        pattern: /\\s*\\S[\\s\\S]*/,\n        alias: 'language-ruby',\n        inside: Prism.languages.ruby\n      }\n    }\n    Prism.hooks.add('before-tokenize', function (env) {\n      var erbPattern =\n        /<%=?(?:[^\\r\\n]|[\\r\\n](?!=begin)|[\\r\\n]=begin\\s(?:[^\\r\\n]|[\\r\\n](?!=end))*[\\r\\n]=end)+?%>/g\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'erb',\n        erbPattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'erb')\n    })\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = elixir\nelixir.displayName = 'elixir'\nelixir.aliases = []\nfunction elixir(Prism) {\n  Prism.languages.elixir = {\n    doc: {\n      pattern:\n        /@(?:doc|moduledoc)\\s+(?:(\"\"\"|''')[\\s\\S]*?\\1|(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2)/,\n      inside: {\n        attribute: /^@\\w+/,\n        string: /['\"][\\s\\S]+/\n      }\n    },\n    comment: {\n      pattern: /#.*/,\n      greedy: true\n    },\n    // ~r\"\"\"foo\"\"\" (multi-line), ~r'''foo''' (multi-line), ~r/foo/, ~r|foo|, ~r\"foo\", ~r'foo', ~r(foo), ~r[foo], ~r{foo}, ~r<foo>\n    regex: {\n      pattern:\n        /~[rR](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[uismxfr]*/,\n      greedy: true\n    },\n    string: [\n      {\n        // ~s\"\"\"foo\"\"\" (multi-line), ~s'''foo''' (multi-line), ~s/foo/, ~s|foo|, ~s\"foo\", ~s'foo', ~s(foo), ~s[foo], ~s{foo} (with interpolation care), ~s<foo>\n        pattern:\n          /~[cCsSwW](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|#\\{[^}]+\\}|#(?!\\{)|[^#\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[csa]?/,\n        greedy: true,\n        inside: {\n          // See interpolation below\n        }\n      },\n      {\n        pattern: /(\"\"\"|''')[\\s\\S]*?\\1/,\n        greedy: true,\n        inside: {\n          // See interpolation below\n        }\n      },\n      {\n        // Multi-line strings are allowed\n        pattern: /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: true,\n        inside: {\n          // See interpolation below\n        }\n      }\n    ],\n    atom: {\n      // Look-behind prevents bad highlighting of the :: operator\n      pattern: /(^|[^:]):\\w+/,\n      lookbehind: true,\n      alias: 'symbol'\n    },\n    module: {\n      pattern: /\\b[A-Z]\\w*\\b/,\n      alias: 'class-name'\n    },\n    // Look-ahead prevents bad highlighting of the :: operator\n    'attr-name': /\\b\\w+\\??:(?!:)/,\n    argument: {\n      // Look-behind prevents bad highlighting of the && operator\n      pattern: /(^|[^&])&\\d+/,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    attribute: {\n      pattern: /@\\w+/,\n      alias: 'variable'\n    },\n    function: /\\b[_a-zA-Z]\\w*[?!]?(?:(?=\\s*(?:\\.\\s*)?\\()|(?=\\/\\d))/,\n    number: /\\b(?:0[box][a-f\\d_]+|\\d[\\d_]*)(?:\\.[\\d_]+)?(?:e[+-]?[\\d_]+)?\\b/i,\n    keyword:\n      /\\b(?:after|alias|and|case|catch|cond|def(?:callback|delegate|exception|impl|macro|module|n|np|p|protocol|struct)?|do|else|end|fn|for|if|import|not|or|quote|raise|require|rescue|try|unless|unquote|use|when)\\b/,\n    boolean: /\\b(?:false|nil|true)\\b/,\n    operator: [\n      /\\bin\\b|&&?|\\|[|>]?|\\\\\\\\|::|\\.\\.\\.?|\\+\\+?|-[->]?|<[-=>]|>=|!==?|\\B!|=(?:==?|[>~])?|[*\\/^]/,\n      {\n        // We don't want to match <<\n        pattern: /([^<])<(?!<)/,\n        lookbehind: true\n      },\n      {\n        // We don't want to match >>\n        pattern: /([^>])>(?!>)/,\n        lookbehind: true\n      }\n    ],\n    punctuation: /<<|>>|[.,%\\[\\]{}()]/\n  }\n  Prism.languages.elixir.string.forEach(function (o) {\n    o.inside = {\n      interpolation: {\n        pattern: /#\\{[^}]+\\}/,\n        inside: {\n          delimiter: {\n            pattern: /^#\\{|\\}$/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.elixir\n        }\n      }\n    }\n  })\n}\n","'use strict'\nvar refractorLua = require('./lua.js')\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = etlua\netlua.displayName = 'etlua'\netlua.aliases = []\nfunction etlua(Prism) {\n  Prism.register(refractorLua)\n  Prism.register(refractorMarkupTemplating)\n  ;(function (Prism) {\n    Prism.languages.etlua = {\n      delimiter: {\n        pattern: /^<%[-=]?|-?%>$/,\n        alias: 'punctuation'\n      },\n      'language-lua': {\n        pattern: /[\\s\\S]+/,\n        inside: Prism.languages.lua\n      }\n    }\n    Prism.hooks.add('before-tokenize', function (env) {\n      var pattern = /<%[\\s\\S]+?%>/g\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'etlua',\n        pattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'etlua')\n    })\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = erlang\nerlang.displayName = 'erlang'\nerlang.aliases = []\nfunction erlang(Prism) {\n  Prism.languages.erlang = {\n    comment: /%.+/,\n    string: {\n      pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n      greedy: true\n    },\n    'quoted-function': {\n      pattern: /'(?:\\\\.|[^\\\\'\\r\\n])+'(?=\\()/,\n      alias: 'function'\n    },\n    'quoted-atom': {\n      pattern: /'(?:\\\\.|[^\\\\'\\r\\n])+'/,\n      alias: 'atom'\n    },\n    boolean: /\\b(?:false|true)\\b/,\n    keyword: /\\b(?:after|case|catch|end|fun|if|of|receive|try|when)\\b/,\n    number: [\n      /\\$\\\\?./,\n      /\\b\\d+#[a-z0-9]+/i,\n      /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i\n    ],\n    function: /\\b[a-z][\\w@]*(?=\\()/,\n    variable: {\n      // Look-behind is used to prevent wrong highlighting of atoms containing \"@\"\n      pattern: /(^|[^@])(?:\\b|\\?)[A-Z_][\\w@]*/,\n      lookbehind: true\n    },\n    operator: [\n      /[=\\/<>:]=|=[:\\/]=|\\+\\+?|--?|[=*\\/!]|\\b(?:and|andalso|band|bnot|bor|bsl|bsr|bxor|div|not|or|orelse|rem|xor)\\b/,\n      {\n        // We don't want to match <<\n        pattern: /(^|[^<])<(?!<)/,\n        lookbehind: true\n      },\n      {\n        // We don't want to match >>\n        pattern: /(^|[^>])>(?!>)/,\n        lookbehind: true\n      }\n    ],\n    atom: /\\b[a-z][\\w@]*/,\n    punctuation: /[()[\\]{}:;,.#|]|<<|>>/\n  }\n}\n","'use strict'\n\nmodule.exports = elm\nelm.displayName = 'elm'\nelm.aliases = []\nfunction elm(Prism) {\n  Prism.languages.elm = {\n    comment: /--.*|\\{-[\\s\\S]*?-\\}/,\n    char: {\n      pattern:\n        /'(?:[^\\\\'\\r\\n]|\\\\(?:[abfnrtv\\\\']|\\d+|x[0-9a-fA-F]+|u\\{[0-9a-fA-F]+\\}))'/,\n      greedy: true\n    },\n    string: [\n      {\n        // Multiline strings are wrapped in triple \". Quotes may appear unescaped.\n        pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n        greedy: true\n      },\n      {\n        pattern: /\"(?:[^\\\\\"\\r\\n]|\\\\.)*\"/,\n        greedy: true\n      }\n    ],\n    'import-statement': {\n      // The imported or hidden names are not included in this import\n      // statement. This is because we want to highlight those exactly like\n      // we do for the names in the program.\n      pattern:\n        /(^[\\t ]*)import\\s+[A-Z]\\w*(?:\\.[A-Z]\\w*)*(?:\\s+as\\s+(?:[A-Z]\\w*)(?:\\.[A-Z]\\w*)*)?(?:\\s+exposing\\s+)?/m,\n      lookbehind: true,\n      inside: {\n        keyword: /\\b(?:as|exposing|import)\\b/\n      }\n    },\n    keyword:\n      /\\b(?:alias|as|case|else|exposing|if|in|infixl|infixr|let|module|of|then|type)\\b/,\n    // These are builtin variables only. Constructors are highlighted later as a constant.\n    builtin:\n      /\\b(?:abs|acos|always|asin|atan|atan2|ceiling|clamp|compare|cos|curry|degrees|e|flip|floor|fromPolar|identity|isInfinite|isNaN|logBase|max|min|negate|never|not|pi|radians|rem|round|sin|sqrt|tan|toFloat|toPolar|toString|truncate|turns|uncurry|xor)\\b/,\n    // decimal integers and floating point numbers | hexadecimal integers\n    number: /\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0x[0-9a-f]+)\\b/i,\n    // Most of this is needed because of the meaning of a single '.'.\n    // If it stands alone freely, it is the function composition.\n    // It may also be a separator between a module name and an identifier => no\n    // operator. If it comes together with other special characters it is an\n    // operator too.\n    // Valid operator characters in 0.18: +-/*=.$<>:&|^?%#@~!\n    // Ref: https://groups.google.com/forum/#!msg/elm-dev/0AHSnDdkSkQ/E0SVU70JEQAJ\n    operator: /\\s\\.\\s|[+\\-/*=.$<>:&|^?%#@~!]{2,}|[+\\-/*=$<>:&|^?%#@~!]/,\n    // In Elm, nearly everything is a variable, do not highlight these.\n    hvariable: /\\b(?:[A-Z]\\w*\\.)*[a-z]\\w*\\b/,\n    constant: /\\b(?:[A-Z]\\w*\\.)*[A-Z]\\w*\\b/,\n    punctuation: /[{}[\\]|(),.:]/\n  }\n}\n","'use strict'\n\nmodule.exports = eiffel\neiffel.displayName = 'eiffel'\neiffel.aliases = []\nfunction eiffel(Prism) {\n  Prism.languages.eiffel = {\n    comment: /--.*/,\n    string: [\n      // Aligned-verbatim-strings\n      {\n        pattern: /\"([^[]*)\\[[\\s\\S]*?\\]\\1\"/,\n        greedy: true\n      }, // Non-aligned-verbatim-strings\n      {\n        pattern: /\"([^{]*)\\{[\\s\\S]*?\\}\\1\"/,\n        greedy: true\n      }, // Single-line string\n      {\n        pattern: /\"(?:%(?:(?!\\n)\\s)*\\n\\s*%|%\\S|[^%\"\\r\\n])*\"/,\n        greedy: true\n      }\n    ],\n    // normal char | special char | char code\n    char: /'(?:%.|[^%'\\r\\n])+'/,\n    keyword:\n      /\\b(?:across|agent|alias|all|and|as|assign|attached|attribute|check|class|convert|create|Current|debug|deferred|detachable|do|else|elseif|end|ensure|expanded|export|external|feature|from|frozen|if|implies|inherit|inspect|invariant|like|local|loop|not|note|obsolete|old|once|or|Precursor|redefine|rename|require|rescue|Result|retry|select|separate|some|then|undefine|until|variant|Void|when|xor)\\b/i,\n    boolean: /\\b(?:False|True)\\b/i,\n    // Convention: class-names are always all upper-case characters\n    'class-name': /\\b[A-Z][\\dA-Z_]*\\b/,\n    number: [\n      // hexa | octal | bin\n      /\\b0[xcb][\\da-f](?:_*[\\da-f])*\\b/i, // Decimal\n      /(?:\\b\\d(?:_*\\d)*)?\\.(?:(?:\\d(?:_*\\d)*)?e[+-]?)?\\d(?:_*\\d)*\\b|\\b\\d(?:_*\\d)*\\b\\.?/i\n    ],\n    punctuation: /:=|<<|>>|\\(\\||\\|\\)|->|\\.(?=\\w)|[{}[\\];(),:?]/,\n    operator: /\\\\\\\\|\\|\\.\\.\\||\\.\\.|\\/[~\\/=]?|[><]=?|[-+*^=~]/\n  }\n}\n","'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = ejs\nejs.displayName = 'ejs'\nejs.aliases = ['eta']\nfunction ejs(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  ;(function (Prism) {\n    Prism.languages.ejs = {\n      delimiter: {\n        pattern: /^<%[-_=]?|[-_]?%>$/,\n        alias: 'punctuation'\n      },\n      comment: /^#[\\s\\S]*/,\n      'language-javascript': {\n        pattern: /[\\s\\S]+/,\n        inside: Prism.languages.javascript\n      }\n    }\n    Prism.hooks.add('before-tokenize', function (env) {\n      var ejsPattern = /<%(?!%)[\\s\\S]+?%>/g\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'ejs',\n        ejsPattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'ejs')\n    })\n    Prism.languages.eta = Prism.languages.ejs\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = editorconfig\neditorconfig.displayName = 'editorconfig'\neditorconfig.aliases = []\nfunction editorconfig(Prism) {\n  Prism.languages.editorconfig = {\n    // https://editorconfig-specification.readthedocs.io\n    comment: /[;#].*/,\n    section: {\n      pattern: /(^[ \\t]*)\\[.+\\]/m,\n      lookbehind: true,\n      alias: 'selector',\n      inside: {\n        regex: /\\\\\\\\[\\[\\]{},!?.*]/,\n        // Escape special characters with '\\\\'\n        operator: /[!?]|\\.\\.|\\*{1,2}/,\n        punctuation: /[\\[\\]{},]/\n      }\n    },\n    key: {\n      pattern: /(^[ \\t]*)[^\\s=]+(?=[ \\t]*=)/m,\n      lookbehind: true,\n      alias: 'attr-name'\n    },\n    value: {\n      pattern: /=.*/,\n      alias: 'attr-value',\n      inside: {\n        punctuation: /^=/\n      }\n    }\n  }\n}\n"],"names":["refractorRuby","require","refractorMarkupTemplating","erb","Prism","register","languages","delimiter","pattern","lookbehind","alias","ruby","inside","hooks","add","env","buildPlaceholders","tokenizePlaceholders","module","exports","displayName","aliases","elixir","doc","attribute","string","comment","greedy","regex","atom","argument","function","number","keyword","boolean","operator","punctuation","forEach","o","interpolation","rest","refractorLua","etlua","lua","erlang","variable","elm","char","builtin","hvariable","constant","eiffel","ejs","javascript","eta","editorconfig","section","key","value"],"sourceRoot":""}