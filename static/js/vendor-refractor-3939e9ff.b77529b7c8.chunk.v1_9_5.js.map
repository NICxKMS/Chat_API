{"version":3,"file":"static/js/vendor-refractor-3939e9ff.b77529b7c8.chunk.v1_9_5.js","mappings":"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","sources":["../node_modules/refractor/lang/less.js","../node_modules/refractor/lang/kusto.js","../node_modules/refractor/lang/latex.js","../node_modules/refractor/lang/kumir.js","../node_modules/refractor/lang/latte.js"],"sourcesContent":["'use strict'\n\nmodule.exports = less\nless.displayName = 'less'\nless.aliases = []\nfunction less(Prism) {\n  /* FIXME :\n:extend() is not handled specifically : its highlighting is buggy.\nMixin usage must be inside a ruleset to be highlighted.\nAt-rules (e.g. import) containing interpolations are buggy.\nDetached rulesets are highlighted as at-rules.\nA comment before a mixin usage prevents the latter to be properly highlighted.\n*/\n  Prism.languages.less = Prism.languages.extend('css', {\n    comment: [\n      /\\/\\*[\\s\\S]*?\\*\\//,\n      {\n        pattern: /(^|[^\\\\])\\/\\/.*/,\n        lookbehind: true\n      }\n    ],\n    atrule: {\n      pattern:\n        /@[\\w-](?:\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n      inside: {\n        punctuation: /[:()]/\n      }\n    },\n    // selectors and mixins are considered the same\n    selector: {\n      pattern:\n        /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};@\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n      inside: {\n        // mixin parameters\n        variable: /@+[\\w-]+/\n      }\n    },\n    property: /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/,\n    operator: /[+\\-*\\/]/\n  })\n  Prism.languages.insertBefore('less', 'property', {\n    variable: [\n      // Variable declaration (the colon must be consumed!)\n      {\n        pattern: /@[\\w-]+\\s*:/,\n        inside: {\n          punctuation: /:/\n        }\n      }, // Variable usage\n      /@@?[\\w-]+/\n    ],\n    'mixin-usage': {\n      pattern: /([{;]\\s*)[.#](?!\\d)[\\w-].*?(?=[(;])/,\n      lookbehind: true,\n      alias: 'function'\n    }\n  })\n}\n","'use strict'\n\nmodule.exports = kusto\nkusto.displayName = 'kusto'\nkusto.aliases = []\nfunction kusto(Prism) {\n  Prism.languages.kusto = {\n    comment: {\n      pattern: /\\/\\/.*/,\n      greedy: true\n    },\n    string: {\n      pattern:\n        /```[\\s\\S]*?```|[hH]?(?:\"(?:[^\\r\\n\\\\\"]|\\\\.)*\"|'(?:[^\\r\\n\\\\']|\\\\.)*'|@(?:\"[^\\r\\n\"]*\"|'[^\\r\\n']*'))/,\n      greedy: true\n    },\n    verb: {\n      pattern: /(\\|\\s*)[a-z][\\w-]*/i,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    command: {\n      pattern: /\\.[a-z][a-z\\d-]*\\b/,\n      alias: 'keyword'\n    },\n    'class-name':\n      /\\b(?:bool|datetime|decimal|dynamic|guid|int|long|real|string|timespan)\\b/,\n    keyword:\n      /\\b(?:access|alias|and|anti|as|asc|auto|between|by|(?:contains|(?:ends|starts)with|has(?:perfix|suffix)?)(?:_cs)?|database|declare|desc|external|from|fullouter|has_all|in|ingestion|inline|inner|innerunique|into|(?:left|right)(?:anti(?:semi)?|inner|outer|semi)?|let|like|local|not|of|on|or|pattern|print|query_parameters|range|restrict|schema|set|step|table|tables|to|view|where|with|matches\\s+regex|nulls\\s+(?:first|last))(?![\\w-])/,\n    boolean: /\\b(?:false|null|true)\\b/,\n    function: /\\b[a-z_]\\w*(?=\\s*\\()/,\n    datetime: [\n      {\n        // RFC 822 + RFC 850\n        pattern:\n          /\\b(?:(?:Fri|Friday|Mon|Monday|Sat|Saturday|Sun|Sunday|Thu|Thursday|Tue|Tuesday|Wed|Wednesday)\\s*,\\s*)?\\d{1,2}(?:\\s+|-)(?:Apr|Aug|Dec|Feb|Jan|Jul|Jun|Mar|May|Nov|Oct|Sep)(?:\\s+|-)\\d{2}\\s+\\d{2}:\\d{2}(?::\\d{2})?(?:\\s*(?:\\b(?:[A-Z]|(?:[ECMT][DS]|GM|U)T)|[+-]\\d{4}))?\\b/,\n        alias: 'number'\n      },\n      {\n        // ISO 8601\n        pattern:\n          /[+-]?\\b(?:\\d{4}-\\d{2}-\\d{2}(?:[ T]\\d{2}:\\d{2}(?::\\d{2}(?:\\.\\d+)?)?)?|\\d{2}:\\d{2}(?::\\d{2}(?:\\.\\d+)?)?)Z?/,\n        alias: 'number'\n      }\n    ],\n    number:\n      /\\b(?:0x[0-9A-Fa-f]+|\\d+(?:\\.\\d+)?(?:[Ee][+-]?\\d+)?)(?:(?:min|sec|[mnÂµ]s|[dhms]|microsecond|tick)\\b)?|[+-]?\\binf\\b/,\n    operator: /=>|[!=]~|[!=<>]=?|[-+*/%|]|\\.\\./,\n    punctuation: /[()\\[\\]{},;.:]/\n  }\n}\n","'use strict'\n\nmodule.exports = latex\nlatex.displayName = 'latex'\nlatex.aliases = ['tex', 'context']\nfunction latex(Prism) {\n  ;(function (Prism) {\n    var funcPattern = /\\\\(?:[^a-z()[\\]]|[a-z*]+)/i\n    var insideEqu = {\n      'equation-command': {\n        pattern: funcPattern,\n        alias: 'regex'\n      }\n    }\n    Prism.languages.latex = {\n      comment: /%.*/,\n      // the verbatim environment prints whitespace to the document\n      cdata: {\n        pattern:\n          /(\\\\begin\\{((?:lstlisting|verbatim)\\*?)\\})[\\s\\S]*?(?=\\\\end\\{\\2\\})/,\n        lookbehind: true\n      },\n      /*\n       * equations can be between $$ $$ or $ $ or \\( \\) or \\[ \\]\n       * (all are multiline)\n       */\n      equation: [\n        {\n          pattern:\n            /\\$\\$(?:\\\\[\\s\\S]|[^\\\\$])+\\$\\$|\\$(?:\\\\[\\s\\S]|[^\\\\$])+\\$|\\\\\\([\\s\\S]*?\\\\\\)|\\\\\\[[\\s\\S]*?\\\\\\]/,\n          inside: insideEqu,\n          alias: 'string'\n        },\n        {\n          pattern:\n            /(\\\\begin\\{((?:align|eqnarray|equation|gather|math|multline)\\*?)\\})[\\s\\S]*?(?=\\\\end\\{\\2\\})/,\n          lookbehind: true,\n          inside: insideEqu,\n          alias: 'string'\n        }\n      ],\n      /*\n       * arguments which are keywords or references are highlighted\n       * as keywords\n       */\n      keyword: {\n        pattern:\n          /(\\\\(?:begin|cite|documentclass|end|label|ref|usepackage)(?:\\[[^\\]]+\\])?\\{)[^}]+(?=\\})/,\n        lookbehind: true\n      },\n      url: {\n        pattern: /(\\\\url\\{)[^}]+(?=\\})/,\n        lookbehind: true\n      },\n      /*\n       * section or chapter headlines are highlighted as bold so that\n       * they stand out more\n       */\n      headline: {\n        pattern:\n          /(\\\\(?:chapter|frametitle|paragraph|part|section|subparagraph|subsection|subsubparagraph|subsubsection|subsubsubparagraph)\\*?(?:\\[[^\\]]+\\])?\\{)[^}]+(?=\\})/,\n        lookbehind: true,\n        alias: 'class-name'\n      },\n      function: {\n        pattern: funcPattern,\n        alias: 'selector'\n      },\n      punctuation: /[[\\]{}&]/\n    }\n    Prism.languages.tex = Prism.languages.latex\n    Prism.languages.context = Prism.languages.latex\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = kumir\nkumir.displayName = 'kumir'\nkumir.aliases = ['kum']\nfunction kumir(Prism) {\n  /* eslint-disable regexp/no-dupe-characters-character-class */\n  ;(function (Prism) {\n    /**\n     * Regular expression for characters that are not allowed in identifiers.\n     *\n     * @type {string}\n     */\n    var nonId = /\\s\\x00-\\x1f\\x22-\\x2f\\x3a-\\x3f\\x5b-\\x5e\\x60\\x7b-\\x7e/.source\n    /**\n     * Surround a regular expression for IDs with patterns for non-ID sequences.\n     *\n     * @param {string} pattern A regular expression for identifiers.\n     * @param {string} [flags] The regular expression flags.\n     * @returns {RegExp} A wrapped regular expression for identifiers.\n     */\n    function wrapId(pattern, flags) {\n      return RegExp(pattern.replace(/<nonId>/g, nonId), flags)\n    }\n    Prism.languages.kumir = {\n      comment: {\n        pattern: /\\|.*/\n      },\n      prolog: {\n        pattern: /#.*/,\n        greedy: true\n      },\n      string: {\n        pattern: /\"[^\\n\\r\"]*\"|'[^\\n\\r']*'/,\n        greedy: true\n      },\n      boolean: {\n        pattern: wrapId(/(^|[<nonId>])(?:Ð´Ð°|Ð½ÐµÑ)(?=[<nonId>]|$)/.source),\n        lookbehind: true\n      },\n      'operator-word': {\n        pattern: wrapId(/(^|[<nonId>])(?:Ð¸|Ð¸Ð»Ð¸|Ð½Ðµ)(?=[<nonId>]|$)/.source),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      'system-variable': {\n        pattern: wrapId(/(^|[<nonId>])Ð·Ð½Ð°Ñ(?=[<nonId>]|$)/.source),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      type: [\n        {\n          pattern: wrapId(\n            /(^|[<nonId>])(?:Ð²ÐµÑ|Ð»Ð¸Ñ|Ð»Ð¾Ð³|ÑÐ¸Ð¼|ÑÐµÐ»)(?:\\x20*ÑÐ°Ð±)?(?=[<nonId>]|$)/\n              .source\n          ),\n          lookbehind: true,\n          alias: 'builtin'\n        },\n        {\n          pattern: wrapId(\n            /(^|[<nonId>])(?:ÐºÐ¾Ð¼Ð¿Ð»|ÑÐºÐ°Ð½ÐºÐ¾Ð´|ÑÐ°Ð¹Ð»|ÑÐ²ÐµÑ)(?=[<nonId>]|$)/.source\n          ),\n          lookbehind: true,\n          alias: 'important'\n        }\n      ],\n      /**\n       * Should be performed after searching for type names because of \"ÑÐ°Ð±\".\n       * \"ÑÐ°Ð±\" is a reserved word, but never used without a preceding type name.\n       * \"ÐÐÐÐÐÐ§ÐÐ¢Ð¬\", \"Ð¤Ð²Ð²Ð¾Ð´\", and \"Ð¤Ð²ÑÐ²Ð¾Ð´\" are not reserved words.\n       */\n      keyword: {\n        pattern: wrapId(\n          /(^|[<nonId>])(?:Ð°Ð»Ð³|Ð°ÑÐ³(?:\\x20*ÑÐµÐ·)?|Ð²Ð²Ð¾Ð´|ÐÐÐÐ®Ð§ÐÐ¢Ð¬|Ð²Ñ[ÐµÑ]|Ð²ÑÐ±Ð¾Ñ|Ð²ÑÐ²Ð¾Ð´|Ð²ÑÑÐ¾Ð´|Ð´Ð°Ð½Ð¾|Ð´Ð»Ñ|Ð´Ð¾|Ð´Ñ|ÐµÑÐ»Ð¸|Ð¸Ð½Ð°ÑÐµ|Ð¸ÑÐ¿|Ð¸ÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ|ÐºÐ¾Ð½(?:(?:\\x20+|_)Ð¸ÑÐ¿)?|ÐºÑ(?:(?:\\x20+|_)Ð¿ÑÐ¸)?|Ð½Ð°Ð´Ð¾|Ð½Ð°Ñ|Ð½Ñ|Ð½Ñ|Ð¾Ñ|Ð¿Ð°ÑÐ·Ð°|Ð¿Ð¾ÐºÐ°|Ð¿ÑÐ¸|ÑÐ°Ð·Ð°?|ÑÐµÐ·|ÑÑÐ¾Ð¿|ÑÐ°Ð±|ÑÐ¾|ÑÑÐ²|ÑÐ°Ð³)(?=[<nonId>]|$)/\n            .source\n        ),\n        lookbehind: true\n      },\n      /** Should be performed after searching for reserved words. */\n      name: {\n        // eslint-disable-next-line regexp/no-super-linear-backtracking\n        pattern: wrapId(\n          /(^|[<nonId>])[^\\d<nonId>][^<nonId>]*(?:\\x20+[^<nonId>]+)*(?=[<nonId>]|$)/\n            .source\n        ),\n        lookbehind: true\n      },\n      /** Should be performed after searching for names. */\n      number: {\n        pattern: wrapId(\n          /(^|[<nonId>])(?:\\B\\$[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)(?=[<nonId>]|$)/\n            .source,\n          'i'\n        ),\n        lookbehind: true\n      },\n      /** Should be performed after searching for words. */\n      punctuation: /:=|[(),:;\\[\\]]/,\n      /**\n       * Should be performed after searching for\n       * - numeric constants (because of \"+\" and \"-\");\n       * - punctuation marks (because of \":=\" and \"=\").\n       */\n      'operator-char': {\n        pattern: /\\*\\*?|<[=>]?|>=?|[-+/=]/,\n        alias: 'operator'\n      }\n    }\n    Prism.languages.kum = Prism.languages.kumir\n  })(Prism)\n}\n","'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nvar refractorPhp = require('./php.js')\nmodule.exports = latte\nlatte.displayName = 'latte'\nlatte.aliases = []\nfunction latte(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  Prism.register(refractorPhp)\n  ;(function (Prism) {\n    Prism.languages.latte = {\n      comment: /^\\{\\*[\\s\\S]*/,\n      'latte-tag': {\n        // https://latte.nette.org/en/tags\n        pattern: /(^\\{(?:\\/(?=[a-z]))?)(?:[=_]|[a-z]\\w*\\b(?!\\())/i,\n        lookbehind: true,\n        alias: 'important'\n      },\n      delimiter: {\n        pattern: /^\\{\\/?|\\}$/,\n        alias: 'punctuation'\n      },\n      php: {\n        pattern: /\\S(?:[\\s\\S]*\\S)?/,\n        alias: 'language-php',\n        inside: Prism.languages.php\n      }\n    }\n    var markupLatte = Prism.languages.extend('markup', {})\n    Prism.languages.insertBefore(\n      'inside',\n      'attr-value',\n      {\n        'n-attr': {\n          pattern: /n:[\\w-]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+))?/,\n          inside: {\n            'attr-name': {\n              pattern: /^[^\\s=]+/,\n              alias: 'important'\n            },\n            'attr-value': {\n              pattern: /=[\\s\\S]+/,\n              inside: {\n                punctuation: [\n                  /^=/,\n                  {\n                    pattern: /^(\\s*)[\"']|[\"']$/,\n                    lookbehind: true\n                  }\n                ],\n                php: {\n                  pattern: /\\S(?:[\\s\\S]*\\S)?/,\n                  inside: Prism.languages.php\n                }\n              }\n            }\n          }\n        }\n      },\n      markupLatte.tag\n    )\n    Prism.hooks.add('before-tokenize', function (env) {\n      if (env.language !== 'latte') {\n        return\n      }\n      var lattePattern =\n        /\\{\\*[\\s\\S]*?\\*\\}|\\{[^'\"\\s{}*](?:[^\"'/{}]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*\\}/g\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'latte',\n        lattePattern\n      )\n      env.grammar = markupLatte\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'latte')\n    })\n  })(Prism)\n}\n"],"names":["less","Prism","languages","extend","comment","pattern","lookbehind","atrule","inside","punctuation","selector","variable","property","operator","insertBefore","alias","module","exports","displayName","aliases","kusto","greedy","string","verb","command","keyword","boolean","function","datetime","number","latex","funcPattern","insideEqu","cdata","equation","url","headline","tex","context","kumir","nonId","source","wrapId","flags","RegExp","replace","prolog","type","name","kum","refractorMarkupTemplating","require","refractorPhp","latte","register","delimiter","php","markupLatte","tag","hooks","add","env","language","buildPlaceholders","grammar","tokenizePlaceholders"],"sourceRoot":""}