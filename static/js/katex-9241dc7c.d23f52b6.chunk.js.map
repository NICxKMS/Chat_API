{"version":3,"file":"static/js/katex-9241dc7c.d23f52b6.chunk.js","mappings":"wPAgBA,MAAMA,EAAe,CAAC,EAEhBC,EAAe,GAWN,SAASC,EAAYC,GAClC,MAAMC,EAAWD,GAAWH,EAY5B,OAAO,SAAUK,EAAMC,IACrBC,EAAAA,EAAAA,IAAaF,EAAM,WAAW,SAAUG,EAASC,GAC/C,MAAMC,EAAUC,MAAMC,QAAQJ,EAAQK,WAAWC,WAC7CN,EAAQK,WAAWC,UACnBb,EAEEc,EAAeL,EAAQM,SAAS,iBAEhCC,EAAcP,EAAQM,SAAS,gBAE/BE,EAAaR,EAAQM,SAAS,eACpC,IAAIG,EAAcF,EAGlB,IAAKF,IAAiBE,IAAgBC,EACpC,OAGF,IAAIE,EAASX,EAAQA,EAAQY,OAAS,GAClCC,EAAQd,EAiBZ,GAZsB,SAApBA,EAAQe,SACRR,GACAK,GACgB,YAAhBA,EAAOI,MACY,QAAnBJ,EAAOG,UAEPD,EAAQF,EACRA,EAASX,EAAQA,EAAQY,OAAS,GAClCF,GAAc,IAIXC,EAAQ,OAEb,MAAMK,GAAQC,EAAAA,EAAAA,GAAOJ,EAAO,CAACK,WAAY,QAGzC,IAAIC,EAEJ,IACEA,EAASC,EAAAA,GAAAA,eAAqBJ,EAAO,IAChCrB,EACHe,cACAW,cAAc,GAElB,CAAE,MAAOC,GACP,MAAMC,EAA8BD,EAC9BE,EAASD,EAAME,KAAKC,cAE1B7B,EAAK8B,QAAQ,mCAAoC,CAC/CC,UAAW,IAAI5B,EAASD,GACxBwB,QACAM,MAAO9B,EAAQ+B,SACfN,SACAO,OAAQ,iBAMV,IACEZ,EAASC,EAAAA,GAAAA,eAAqBJ,EAAO,IAChCrB,EACHe,cACAsB,OAAQ,SACRX,cAAc,GAElB,CAAE,MAGAF,EAAS,CACP,CACEJ,KAAM,UACND,QAAS,OACTV,WAAY,CACVC,UAAW,CAAC,eACZ4B,MAAO,UAAYtC,EAASuC,YAAc,WAC1CC,MAAOC,OAAOd,IAEhBe,SAAU,CAAC,CAACtB,KAAM,OAAQC,WAGhC,CACF,CAEA,GAAsB,iBAAXG,EAAqB,CAG9BA,GAFamB,EAAAA,EAAAA,GAAmBnB,EAAQ,CAACoB,UAAU,IAECF,QACtD,CAEA,MAAMG,EAAQ7B,EAAO0B,SAASI,QAAQ5B,GAEtC,OADAF,EAAO0B,SAASK,OAAOF,EAAO,KAAMrB,GAC7BwB,EAAAA,EACT,GACF,CACF,C,gDC7IA,SAAiB,C","sources":["../node_modules/rehype-katex/lib/index.js","webpack://ai-chat-interface/./node_modules/katex/dist/katex.min.css?309b"],"sourcesContent":["/**\n * @import {ElementContent, Root} from 'hast'\n * @import {KatexOptions} from 'katex'\n * @import {VFile} from 'vfile'\n */\n\n/**\n * @typedef {Omit<KatexOptions, 'displayMode' | 'throwOnError'>} Options\n */\n\nimport {fromHtmlIsomorphic} from 'hast-util-from-html-isomorphic'\nimport {toText} from 'hast-util-to-text'\nimport katex from 'katex'\nimport {SKIP, visitParents} from 'unist-util-visit-parents'\n\n/** @type {Readonly<Options>} */\nconst emptyOptions = {}\n/** @type {ReadonlyArray<unknown>} */\nconst emptyClasses = []\n\n/**\n * Render elements with a `language-math` (or `math-display`, `math-inline`)\n * class with KaTeX.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns\n *   Transform.\n */\nexport default function rehypeKatex(options) {\n  const settings = options || emptyOptions\n\n  /**\n   * Transform.\n   *\n   * @param {Root} tree\n   *   Tree.\n   * @param {VFile} file\n   *   File.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree, file) {\n    visitParents(tree, 'element', function (element, parents) {\n      const classes = Array.isArray(element.properties.className)\n        ? element.properties.className\n        : emptyClasses\n      // This class can be generated from markdown with ` ```math `.\n      const languageMath = classes.includes('language-math')\n      // This class is used by `remark-math` for flow math (block, `$$\\nmath\\n$$`).\n      const mathDisplay = classes.includes('math-display')\n      // This class is used by `remark-math` for text math (inline, `$math$`).\n      const mathInline = classes.includes('math-inline')\n      let displayMode = mathDisplay\n\n      // Any class is fine.\n      if (!languageMath && !mathDisplay && !mathInline) {\n        return\n      }\n\n      let parent = parents[parents.length - 1]\n      let scope = element\n\n      // If this was generated with ` ```math `, replace the `<pre>` and use\n      // display.\n      if (\n        element.tagName === 'code' &&\n        languageMath &&\n        parent &&\n        parent.type === 'element' &&\n        parent.tagName === 'pre'\n      ) {\n        scope = parent\n        parent = parents[parents.length - 2]\n        displayMode = true\n      }\n\n      /* c8 ignore next -- verbose to test. */\n      if (!parent) return\n\n      const value = toText(scope, {whitespace: 'pre'})\n\n      /** @type {Array<ElementContent> | string | undefined} */\n      let result\n\n      try {\n        result = katex.renderToString(value, {\n          ...settings,\n          displayMode,\n          throwOnError: true\n        })\n      } catch (error) {\n        const cause = /** @type {Error} */ (error)\n        const ruleId = cause.name.toLowerCase()\n\n        file.message('Could not render math with KaTeX', {\n          ancestors: [...parents, element],\n          cause,\n          place: element.position,\n          ruleId,\n          source: 'rehype-katex'\n        })\n\n        // KaTeX *should* handle `ParseError` itself, but not others.\n        // it doesn’t always:\n        // <https://github.com/remarkjs/react-markdown/issues/853>\n        try {\n          result = katex.renderToString(value, {\n            ...settings,\n            displayMode,\n            strict: 'ignore',\n            throwOnError: false\n          })\n        } catch {\n          // Generate similar markup if this is an other error.\n          // See: <https://github.com/KaTeX/KaTeX/blob/5dc7af0/docs/error.md>.\n          result = [\n            {\n              type: 'element',\n              tagName: 'span',\n              properties: {\n                className: ['katex-error'],\n                style: 'color:' + (settings.errorColor || '#cc0000'),\n                title: String(error)\n              },\n              children: [{type: 'text', value}]\n            }\n          ]\n        }\n      }\n\n      if (typeof result === 'string') {\n        const root = fromHtmlIsomorphic(result, {fragment: true})\n        // Cast as we don’t expect `doctypes` in KaTeX result.\n        result = /** @type {Array<ElementContent>} */ (root.children)\n      }\n\n      const index = parent.children.indexOf(scope)\n      parent.children.splice(index, 1, ...result)\n      return SKIP\n    })\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["emptyOptions","emptyClasses","rehypeKatex","options","settings","tree","file","visitParents","element","parents","classes","Array","isArray","properties","className","languageMath","includes","mathDisplay","mathInline","displayMode","parent","length","scope","tagName","type","value","toText","whitespace","result","katex","throwOnError","error","cause","ruleId","name","toLowerCase","message","ancestors","place","position","source","strict","style","errorColor","title","String","children","fromHtmlIsomorphic","fragment","index","indexOf","splice","SKIP"],"sourceRoot":""}