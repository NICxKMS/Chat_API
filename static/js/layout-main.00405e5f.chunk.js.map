{"version":3,"file":"static/js/layout-main.00405e5f.chunk.js","mappings":"qMAKA,MAAMA,GAAgBC,EAAAA,EAAAA,OAAK,IAAM,6JA8DjC,EA5CoBC,IAYb,IAZc,cACnBC,EAAa,cACbC,EAAa,cACbC,EAAa,gBACbC,EAAe,oBACfC,EAAmB,UACnBC,EAAS,YACTC,EAAW,eACXC,EAAc,iBACdC,EAAgB,eAChBC,EAAc,oBACdC,GACDX,EACC,OACEY,EAAAA,EAAAA,MAAA,QAAMC,UAAWC,EAAAA,EAAOC,YAAYC,SAAA,CAEjCZ,IACCa,EAAAA,EAAAA,KAAA,OAAKJ,UAAWC,EAAAA,EAAOI,oBAAoBF,UACzCJ,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAAA,EAAOK,oBAAoBH,SAAA,EACzCC,EAAAA,EAAAA,KAACG,EAAAA,QAAO,CAACC,KAAK,YACdJ,EAAAA,EAAAA,KAAA,OAAKJ,UAAWC,EAAAA,EAAOQ,iBAAiBN,SAAC,4BAM/CC,EAAAA,EAAAA,KAACM,EAAAA,SAAQ,CAACC,UAAUP,EAAAA,EAAAA,KAAA,OAAKJ,UAAWC,EAAAA,EAAOW,kBAAoBT,UAC7DC,EAAAA,EAAAA,KAACnB,EAAa,CACZK,cAAeA,EACfC,gBAAiBA,EACjBC,oBAAqBA,EACrBC,UAAWA,EACXC,YAAaA,EACbC,eAAgBA,EAChBC,iBAAkBA,EAClBR,cAAeA,EACfS,eAAgBA,EAChBC,oBAAqBA,QAGpB,C","sources":["components/layout/MainContent/index.js"],"sourcesContent":["import { lazy, Suspense } from 'react';\nimport styles from './MainContent.module.css';\nimport Spinner from '../../common/Spinner';\n\n// Lazily loaded components\nconst ChatContainer = lazy(() => import(/* webpackChunkName: \"chat-container\" */ '../../chat/ChatContainer'));\n\n/**\n * Main content area component containing chat interface and settings\n * @param {Object} props - Component props\n * @param {boolean} props.isSidebarOpen - Whether the sidebar is open (mobile)\n * @param {Function} props.toggleSidebar - Function to toggle the sidebar (mobile)\n * @param {Object} props.selectedModel - The currently selected model object\n * @param {boolean} props.isLoadingModels - Whether models are currently loading\n * @param {Function} props.toggleModelSelector - Function to toggle the model dropdown/modal\n * @param {Function} props.onNewChat - Function to handle new chat\n * @param {Function} props.onResetChat - Function to handle reset chat\n * @param {Function} props.onDownloadChat - Function to handle download chat\n * @param {Function} props.onToggleSettings - Function to handle settings toggle\n * @param {boolean} props.isSettingsOpen - Whether the settings panel is open\n * @param {boolean} props.isModelSelectorOpen - Whether the model selector is open\n * @returns {JSX.Element} - Rendered component\n */\nconst MainContent = ({ \n  isSidebarOpen, \n  toggleSidebar, \n  selectedModel,\n  isLoadingModels,\n  toggleModelSelector,\n  onNewChat,\n  onResetChat,\n  onDownloadChat,\n  onToggleSettings,\n  isSettingsOpen,\n  isModelSelectorOpen\n}) => {\n  return (\n    <main className={styles.mainContent}>\n      {/* Model Loading Indicator - shows only during initial model loading */}\n      {isLoadingModels && (\n        <div className={styles.modelLoadingOverlay}>\n          <div className={styles.modelLoadingContent}>\n            <Spinner size=\"medium\" />\n            <div className={styles.modelLoadingText}>Loading models...</div>\n          </div>\n        </div>\n      )}\n      \n      {/* Chat area - Pass all action handlers down */}\n      <Suspense fallback={<div className={styles.chatPlaceholder} />}>\n        <ChatContainer \n          selectedModel={selectedModel}\n          isLoadingModels={isLoadingModels}\n          toggleModelSelector={toggleModelSelector}\n          onNewChat={onNewChat}\n          onResetChat={onResetChat}\n          onDownloadChat={onDownloadChat}\n          onToggleSettings={onToggleSettings}\n          isSidebarOpen={isSidebarOpen}\n          isSettingsOpen={isSettingsOpen}\n          isModelSelectorOpen={isModelSelectorOpen}\n        />\n      </Suspense>\n    </main>\n  );\n};\n\nexport default MainContent; "],"names":["ChatContainer","lazy","_ref","isSidebarOpen","toggleSidebar","selectedModel","isLoadingModels","toggleModelSelector","onNewChat","onResetChat","onDownloadChat","onToggleSettings","isSettingsOpen","isModelSelectorOpen","_jsxs","className","styles","mainContent","children","_jsx","modelLoadingOverlay","modelLoadingContent","Spinner","size","modelLoadingText","Suspense","fallback","chatPlaceholder"],"sourceRoot":""}