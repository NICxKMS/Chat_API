{"version":3,"file":"static/js/auth-button.c50d18c519.chunk.v1_7.js","mappings":"yNAoBA,MAAMA,GAAaC,EAAAA,EAAAA,OAAKC,IAOjB,IAPkB,gBACvBC,EAAe,QACfC,EAAO,SACPC,EAAQ,SACRC,EAAW,OAAM,UACjBC,GAAY,EAAK,YACjBC,EAAc,MACfN,EACC,OACEO,EAAAA,EAAAA,KAAA,UACEC,UAAU,qBACVC,QAASR,EAAkBE,EAAWD,EACtCQ,SAAUL,EACVM,MAAON,EAAY,6BAA+BJ,EAAkB,gBAAgBG,sBAA+B,kBACnH,aAAYC,EAAY,yBAA2BJ,EAAkB,SAAW,mBAAmBW,SAElGP,GACCE,EAAAA,EAAAA,KAACM,EAAAA,QAAO,CAACC,KAAK,QAAQC,IAAI,SACxBd,EACFK,SAAAA,EAAaU,UACXT,EAAAA,EAAAA,KAAA,OACEU,IAAKX,EAAYU,SACjBE,IAAK,GAAGd,cACRI,UAAWW,EAAAA,EAAOC,mBAClBC,QAAQ,UAGVd,EAAAA,EAAAA,KAAA,OAAKC,UAAWW,EAAAA,EAAOG,oBAAoBV,SACxCR,EAASmB,OAAO,GAAGC,iBAIxBjB,EAAAA,EAAAA,KAACkB,EAAAA,IAAU,CAACX,KAAM,MAEb,IAKbhB,EAAW4B,YAAc,aAEzB,S","sources":["components/auth/AuthButton/index.js"],"sourcesContent":["import { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { SignInIcon} from '@primer/octicons-react';\n// Import icons using the correct paths\nimport '../../../styles/common/buttons.css';\n// import component-specific styles for avatar/initial only\nimport styles from './AuthButton.module.css';\nimport Spinner from '../../common/Spinner';\n\n/**\n * Auth button component for login/logout\n * @param {Object} props - Component props\n * @param {boolean} props.isAuthenticated - Whether the user is authenticated\n * @param {Function} props.onLogin - Function to handle login\n * @param {Function} props.onLogout - Function to handle logout\n * @param {string} props.userName - User's display name or email\n * @param {boolean} props.isLoading - Whether authentication is in progress\n * @param {Object} props.currentUser - Firebase user object with photoURL\n * @returns {JSX.Element} - Rendered component\n */\nconst AuthButton = memo(({ \n  isAuthenticated, \n  onLogin, \n  onLogout, \n  userName = 'User',\n  isLoading = false,\n  currentUser = null\n}) => {\n  return (\n    <button\n      className=\"circleActionButton\"\n      onClick={isAuthenticated ? onLogout : onLogin}\n      disabled={isLoading}\n      title={isLoading ? \"Checking authentication...\" : isAuthenticated ? `Logged in as ${userName}. Click to logout.` : \"Login / Sign Up\"}\n      aria-label={isLoading ? \"Loading Authentication\" : isAuthenticated ? \"Logout\" : \"Login or Sign Up\"}\n    >\n      {isLoading ? (\n        <Spinner size=\"small\" tag=\"auth\" />\n      ) : isAuthenticated ? (\n        currentUser?.photoURL ? (\n          <img \n            src={currentUser.photoURL} \n            alt={`${userName}'s profile`}\n            className={styles.AuthButton__avatar}\n            loading=\"lazy\"\n          />\n        ) : (\n          <div className={styles.AuthButton__initial}>\n            {userName.charAt(0).toUpperCase()}\n          </div>\n        )\n      ) : (\n        <SignInIcon size={20} />\n      )}\n    </button>\n  );\n});\n\n// Display name for debugging\nAuthButton.displayName = 'AuthButton';\n\nexport default AuthButton;\n\n// Define PropTypes\nAuthButton.propTypes = {\n  isAuthenticated: PropTypes.bool.isRequired,\n  onLogin: PropTypes.func.isRequired,\n  onLogout: PropTypes.func.isRequired,\n  userName: PropTypes.string,\n  isLoading: PropTypes.bool,\n  currentUser: PropTypes.shape({\n    displayName: PropTypes.string,\n    email: PropTypes.string,\n    photoURL: PropTypes.string\n  })\n};\n"],"names":["AuthButton","memo","_ref","isAuthenticated","onLogin","onLogout","userName","isLoading","currentUser","_jsx","className","onClick","disabled","title","children","Spinner","size","tag","photoURL","src","alt","styles","AuthButton__avatar","loading","AuthButton__initial","charAt","toUpperCase","SignInIcon","displayName"],"sourceRoot":""}