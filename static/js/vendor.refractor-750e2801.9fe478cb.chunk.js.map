{"version":3,"file":"static/js/vendor.refractor-750e2801.9fe478cb.chunk.js","mappings":"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","sources":["../node_modules/refractor/lang/csv.js","../node_modules/refractor/lang/dart.js","../node_modules/refractor/lang/csharp.js","../node_modules/refractor/lang/crystal.js","../node_modules/refractor/lang/csp.js","../node_modules/refractor/lang/dataweave.js","../node_modules/refractor/lang/css-extras.js","../node_modules/refractor/lang/dax.js","../node_modules/refractor/lang/cypher.js","../node_modules/refractor/lang/cshtml.js","../node_modules/refractor/lang/css.js","../node_modules/refractor/lang/d.js"],"sourcesContent":["'use strict'\n\nmodule.exports = csv\ncsv.displayName = 'csv'\ncsv.aliases = []\nfunction csv(Prism) {\n  // https://tools.ietf.org/html/rfc4180\n  Prism.languages.csv = {\n    value: /[^\\r\\n,\"]+|\"(?:[^\"]|\"\")*\"(?!\")/,\n    punctuation: /,/\n  }\n}\n","'use strict'\n\nmodule.exports = dart\ndart.displayName = 'dart'\ndart.aliases = []\nfunction dart(Prism) {\n  ;(function (Prism) {\n    var keywords = [\n      /\\b(?:async|sync|yield)\\*/,\n      /\\b(?:abstract|assert|async|await|break|case|catch|class|const|continue|covariant|default|deferred|do|dynamic|else|enum|export|extends|extension|external|factory|final|finally|for|get|hide|if|implements|import|in|interface|library|mixin|new|null|on|operator|part|rethrow|return|set|show|static|super|switch|sync|this|throw|try|typedef|var|void|while|with|yield)\\b/\n    ] // Handles named imports, such as http.Client\n    var packagePrefix = /(^|[^\\w.])(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/\n      .source // based on the dart naming conventions\n    var className = {\n      pattern: RegExp(packagePrefix + /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),\n      lookbehind: true,\n      inside: {\n        namespace: {\n          pattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\n          inside: {\n            punctuation: /\\./\n          }\n        }\n      }\n    }\n    Prism.languages.dart = Prism.languages.extend('clike', {\n      'class-name': [\n        className,\n        {\n          // variables and parameters\n          // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n          pattern: RegExp(\n            packagePrefix + /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()])/.source\n          ),\n          lookbehind: true,\n          inside: className.inside\n        }\n      ],\n      keyword: keywords,\n      operator:\n        /\\bis!|\\b(?:as|is)\\b|\\+\\+|--|&&|\\|\\||<<=?|>>=?|~(?:\\/=?)?|[+\\-*\\/%&^|=!<>]=?|\\?/\n    })\n    Prism.languages.insertBefore('dart', 'string', {\n      'string-literal': {\n        pattern:\n          /r?(?:(\"\"\"|''')[\\s\\S]*?\\1|([\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2(?!\\2))/,\n        greedy: true,\n        inside: {\n          interpolation: {\n            pattern:\n              /((?:^|[^\\\\])(?:\\\\{2})*)\\$(?:\\w+|\\{(?:[^{}]|\\{[^{}]*\\})*\\})/,\n            lookbehind: true,\n            inside: {\n              punctuation: /^\\$\\{?|\\}$/,\n              expression: {\n                pattern: /[\\s\\S]+/,\n                inside: Prism.languages.dart\n              }\n            }\n          },\n          string: /[\\s\\S]+/\n        }\n      },\n      string: undefined\n    })\n    Prism.languages.insertBefore('dart', 'class-name', {\n      metadata: {\n        pattern: /@\\w+/,\n        alias: 'function'\n      }\n    })\n    Prism.languages.insertBefore('dart', 'class-name', {\n      generics: {\n        pattern:\n          /<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<[\\w\\s,.&?]*>)*>)*>)*>/,\n        inside: {\n          'class-name': className,\n          keyword: keywords,\n          punctuation: /[<>(),.:]/,\n          operator: /[?&|]/\n        }\n      }\n    })\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = csharp\ncsharp.displayName = 'csharp'\ncsharp.aliases = ['dotnet', 'cs']\nfunction csharp(Prism) {\n  ;(function (Prism) {\n    /**\n     * Replaces all placeholders \"<<n>>\" of given pattern with the n-th replacement (zero based).\n     *\n     * Note: This is a simple text based replacement. Be careful when using backreferences!\n     *\n     * @param {string} pattern the given pattern.\n     * @param {string[]} replacements a list of replacement which can be inserted into the given pattern.\n     * @returns {string} the pattern with all placeholders replaced with their corresponding replacements.\n     * @example replace(/a<<0>>a/.source, [/b+/.source]) === /a(?:b+)a/.source\n     */\n    function replace(pattern, replacements) {\n      return pattern.replace(/<<(\\d+)>>/g, function (m, index) {\n        return '(?:' + replacements[+index] + ')'\n      })\n    }\n    /**\n     * @param {string} pattern\n     * @param {string[]} replacements\n     * @param {string} [flags]\n     * @returns {RegExp}\n     */\n    function re(pattern, replacements, flags) {\n      return RegExp(replace(pattern, replacements), flags || '')\n    }\n    /**\n     * Creates a nested pattern where all occurrences of the string `<<self>>` are replaced with the pattern itself.\n     *\n     * @param {string} pattern\n     * @param {number} depthLog2\n     * @returns {string}\n     */\n    function nested(pattern, depthLog2) {\n      for (var i = 0; i < depthLog2; i++) {\n        pattern = pattern.replace(/<<self>>/g, function () {\n          return '(?:' + pattern + ')'\n        })\n      }\n      return pattern.replace(/<<self>>/g, '[^\\\\s\\\\S]')\n    } // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/\n    var keywordKinds = {\n      // keywords which represent a return or variable type\n      type: 'bool byte char decimal double dynamic float int long object sbyte short string uint ulong ushort var void',\n      // keywords which are used to declare a type\n      typeDeclaration: 'class enum interface record struct',\n      // contextual keywords\n      // (\"var\" and \"dynamic\" are missing because they are used like types)\n      contextual:\n        'add alias and ascending async await by descending from(?=\\\\s*(?:\\\\w|$)) get global group into init(?=\\\\s*;) join let nameof not notnull on or orderby partial remove select set unmanaged value when where with(?=\\\\s*{)',\n      // all other keywords\n      other:\n        'abstract as base break case catch checked const continue default delegate do else event explicit extern finally fixed for foreach goto if implicit in internal is lock namespace new null operator out override params private protected public readonly ref return sealed sizeof stackalloc static switch this throw try typeof unchecked unsafe using virtual volatile while yield'\n    } // keywords\n    function keywordsToPattern(words) {\n      return '\\\\b(?:' + words.trim().replace(/ /g, '|') + ')\\\\b'\n    }\n    var typeDeclarationKeywords = keywordsToPattern(\n      keywordKinds.typeDeclaration\n    )\n    var keywords = RegExp(\n      keywordsToPattern(\n        keywordKinds.type +\n          ' ' +\n          keywordKinds.typeDeclaration +\n          ' ' +\n          keywordKinds.contextual +\n          ' ' +\n          keywordKinds.other\n      )\n    )\n    var nonTypeKeywords = keywordsToPattern(\n      keywordKinds.typeDeclaration +\n        ' ' +\n        keywordKinds.contextual +\n        ' ' +\n        keywordKinds.other\n    )\n    var nonContextualKeywords = keywordsToPattern(\n      keywordKinds.type +\n        ' ' +\n        keywordKinds.typeDeclaration +\n        ' ' +\n        keywordKinds.other\n    ) // types\n    var generic = nested(/<(?:[^<>;=+\\-*/%&|^]|<<self>>)*>/.source, 2) // the idea behind the other forbidden characters is to prevent false positives. Same for tupleElement.\n    var nestedRound = nested(/\\((?:[^()]|<<self>>)*\\)/.source, 2)\n    var name = /@?\\b[A-Za-z_]\\w*\\b/.source\n    var genericName = replace(/<<0>>(?:\\s*<<1>>)?/.source, [name, generic])\n    var identifier = replace(/(?!<<0>>)<<1>>(?:\\s*\\.\\s*<<1>>)*/.source, [\n      nonTypeKeywords,\n      genericName\n    ])\n    var array = /\\[\\s*(?:,\\s*)*\\]/.source\n    var typeExpressionWithoutTuple = replace(\n      /<<0>>(?:\\s*(?:\\?\\s*)?<<1>>)*(?:\\s*\\?)?/.source,\n      [identifier, array]\n    )\n    var tupleElement = replace(\n      /[^,()<>[\\];=+\\-*/%&|^]|<<0>>|<<1>>|<<2>>/.source,\n      [generic, nestedRound, array]\n    )\n    var tuple = replace(/\\(<<0>>+(?:,<<0>>+)+\\)/.source, [tupleElement])\n    var typeExpression = replace(\n      /(?:<<0>>|<<1>>)(?:\\s*(?:\\?\\s*)?<<2>>)*(?:\\s*\\?)?/.source,\n      [tuple, identifier, array]\n    )\n    var typeInside = {\n      keyword: keywords,\n      punctuation: /[<>()?,.:[\\]]/\n    } // strings & characters\n    // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#character-literals\n    // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#string-literals\n    var character = /'(?:[^\\r\\n'\\\\]|\\\\.|\\\\[Uux][\\da-fA-F]{1,8})'/.source // simplified pattern\n    var regularString = /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/.source\n    var verbatimString = /@\"(?:\"\"|\\\\[\\s\\S]|[^\\\\\"])*\"(?!\")/.source\n    Prism.languages.csharp = Prism.languages.extend('clike', {\n      string: [\n        {\n          pattern: re(/(^|[^$\\\\])<<0>>/.source, [verbatimString]),\n          lookbehind: true,\n          greedy: true\n        },\n        {\n          pattern: re(/(^|[^@$\\\\])<<0>>/.source, [regularString]),\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      'class-name': [\n        {\n          // Using static\n          // using static System.Math;\n          pattern: re(/(\\busing\\s+static\\s+)<<0>>(?=\\s*;)/.source, [\n            identifier\n          ]),\n          lookbehind: true,\n          inside: typeInside\n        },\n        {\n          // Using alias (type)\n          // using Project = PC.MyCompany.Project;\n          pattern: re(/(\\busing\\s+<<0>>\\s*=\\s*)<<1>>(?=\\s*;)/.source, [\n            name,\n            typeExpression\n          ]),\n          lookbehind: true,\n          inside: typeInside\n        },\n        {\n          // Using alias (alias)\n          // using Project = PC.MyCompany.Project;\n          pattern: re(/(\\busing\\s+)<<0>>(?=\\s*=)/.source, [name]),\n          lookbehind: true\n        },\n        {\n          // Type declarations\n          // class Foo<A, B>\n          // interface Foo<out A, B>\n          pattern: re(/(\\b<<0>>\\s+)<<1>>/.source, [\n            typeDeclarationKeywords,\n            genericName\n          ]),\n          lookbehind: true,\n          inside: typeInside\n        },\n        {\n          // Single catch exception declaration\n          // catch(Foo)\n          // (things like catch(Foo e) is covered by variable declaration)\n          pattern: re(/(\\bcatch\\s*\\(\\s*)<<0>>/.source, [identifier]),\n          lookbehind: true,\n          inside: typeInside\n        },\n        {\n          // Name of the type parameter of generic constraints\n          // where Foo : class\n          pattern: re(/(\\bwhere\\s+)<<0>>/.source, [name]),\n          lookbehind: true\n        },\n        {\n          // Casts and checks via as and is.\n          // as Foo<A>, is Bar<B>\n          // (things like if(a is Foo b) is covered by variable declaration)\n          pattern: re(/(\\b(?:is(?:\\s+not)?|as)\\s+)<<0>>/.source, [\n            typeExpressionWithoutTuple\n          ]),\n          lookbehind: true,\n          inside: typeInside\n        },\n        {\n          // Variable, field and parameter declaration\n          // (Foo bar, Bar baz, Foo[,,] bay, Foo<Bar, FooBar<Bar>> bax)\n          pattern: re(\n            /\\b<<0>>(?=\\s+(?!<<1>>|with\\s*\\{)<<2>>(?:\\s*[=,;:{)\\]]|\\s+(?:in|when)\\b))/\n              .source,\n            [typeExpression, nonContextualKeywords, name]\n          ),\n          inside: typeInside\n        }\n      ],\n      keyword: keywords,\n      // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#literals\n      number:\n        /(?:\\b0(?:x[\\da-f_]*[\\da-f]|b[01_]*[01])|(?:\\B\\.\\d+(?:_+\\d+)*|\\b\\d+(?:_+\\d+)*(?:\\.\\d+(?:_+\\d+)*)?)(?:e[-+]?\\d+(?:_+\\d+)*)?)(?:[dflmu]|lu|ul)?\\b/i,\n      operator: />>=?|<<=?|[-=]>|([-+&|])\\1|~|\\?\\?=?|[-+*/%&|^!=<>]=?/,\n      punctuation: /\\?\\.?|::|[{}[\\];(),.:]/\n    })\n    Prism.languages.insertBefore('csharp', 'number', {\n      range: {\n        pattern: /\\.\\./,\n        alias: 'operator'\n      }\n    })\n    Prism.languages.insertBefore('csharp', 'punctuation', {\n      'named-parameter': {\n        pattern: re(/([(,]\\s*)<<0>>(?=\\s*:)/.source, [name]),\n        lookbehind: true,\n        alias: 'punctuation'\n      }\n    })\n    Prism.languages.insertBefore('csharp', 'class-name', {\n      namespace: {\n        // namespace Foo.Bar {}\n        // using Foo.Bar;\n        pattern: re(\n          /(\\b(?:namespace|using)\\s+)<<0>>(?:\\s*\\.\\s*<<0>>)*(?=\\s*[;{])/.source,\n          [name]\n        ),\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      'type-expression': {\n        // default(Foo), typeof(Foo<Bar>), sizeof(int)\n        pattern: re(\n          /(\\b(?:default|sizeof|typeof)\\s*\\(\\s*(?!\\s))(?:[^()\\s]|\\s(?!\\s)|<<0>>)*(?=\\s*\\))/\n            .source,\n          [nestedRound]\n        ),\n        lookbehind: true,\n        alias: 'class-name',\n        inside: typeInside\n      },\n      'return-type': {\n        // Foo<Bar> ForBar(); Foo IFoo.Bar() => 0\n        // int this[int index] => 0; T IReadOnlyList<T>.this[int index] => this[index];\n        // int Foo => 0; int Foo { get; set } = 0;\n        pattern: re(\n          /<<0>>(?=\\s+(?:<<1>>\\s*(?:=>|[({]|\\.\\s*this\\s*\\[)|this\\s*\\[))/.source,\n          [typeExpression, identifier]\n        ),\n        inside: typeInside,\n        alias: 'class-name'\n      },\n      'constructor-invocation': {\n        // new List<Foo<Bar[]>> { }\n        pattern: re(/(\\bnew\\s+)<<0>>(?=\\s*[[({])/.source, [typeExpression]),\n        lookbehind: true,\n        inside: typeInside,\n        alias: 'class-name'\n      },\n      /*'explicit-implementation': {\n// int IFoo<Foo>.Bar => 0; void IFoo<Foo<Foo>>.Foo<T>();\npattern: replace(/\\b<<0>>(?=\\.<<1>>)/, className, methodOrPropertyDeclaration),\ninside: classNameInside,\nalias: 'class-name'\n},*/\n      'generic-method': {\n        // foo<Bar>()\n        pattern: re(/<<0>>\\s*<<1>>(?=\\s*\\()/.source, [name, generic]),\n        inside: {\n          function: re(/^<<0>>/.source, [name]),\n          generic: {\n            pattern: RegExp(generic),\n            alias: 'class-name',\n            inside: typeInside\n          }\n        }\n      },\n      'type-list': {\n        // The list of types inherited or of generic constraints\n        // class Foo<F> : Bar, IList<FooBar>\n        // where F : Bar, IList<int>\n        pattern: re(\n          /\\b((?:<<0>>\\s+<<1>>|record\\s+<<1>>\\s*<<5>>|where\\s+<<2>>)\\s*:\\s*)(?:<<3>>|<<4>>|<<1>>\\s*<<5>>|<<6>>)(?:\\s*,\\s*(?:<<3>>|<<4>>|<<6>>))*(?=\\s*(?:where|[{;]|=>|$))/\n            .source,\n          [\n            typeDeclarationKeywords,\n            genericName,\n            name,\n            typeExpression,\n            keywords.source,\n            nestedRound,\n            /\\bnew\\s*\\(\\s*\\)/.source\n          ]\n        ),\n        lookbehind: true,\n        inside: {\n          'record-arguments': {\n            pattern: re(/(^(?!new\\s*\\()<<0>>\\s*)<<1>>/.source, [\n              genericName,\n              nestedRound\n            ]),\n            lookbehind: true,\n            greedy: true,\n            inside: Prism.languages.csharp\n          },\n          keyword: keywords,\n          'class-name': {\n            pattern: RegExp(typeExpression),\n            greedy: true,\n            inside: typeInside\n          },\n          punctuation: /[,()]/\n        }\n      },\n      preprocessor: {\n        pattern: /(^[\\t ]*)#.*/m,\n        lookbehind: true,\n        alias: 'property',\n        inside: {\n          // highlight preprocessor directives as keywords\n          directive: {\n            pattern:\n              /(#)\\b(?:define|elif|else|endif|endregion|error|if|line|nullable|pragma|region|undef|warning)\\b/,\n            lookbehind: true,\n            alias: 'keyword'\n          }\n        }\n      }\n    }) // attributes\n    var regularStringOrCharacter = regularString + '|' + character\n    var regularStringCharacterOrComment = replace(\n      /\\/(?![*/])|\\/\\/[^\\r\\n]*[\\r\\n]|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|<<0>>/.source,\n      [regularStringOrCharacter]\n    )\n    var roundExpression = nested(\n      replace(/[^\"'/()]|<<0>>|\\(<<self>>*\\)/.source, [\n        regularStringCharacterOrComment\n      ]),\n      2\n    ) // https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/attributes/#attribute-targets\n    var attrTarget =\n      /\\b(?:assembly|event|field|method|module|param|property|return|type)\\b/\n        .source\n    var attr = replace(/<<0>>(?:\\s*\\(<<1>>*\\))?/.source, [\n      identifier,\n      roundExpression\n    ])\n    Prism.languages.insertBefore('csharp', 'class-name', {\n      attribute: {\n        // Attributes\n        // [Foo], [Foo(1), Bar(2, Prop = \"foo\")], [return: Foo(1), Bar(2)], [assembly: Foo(Bar)]\n        pattern: re(\n          /((?:^|[^\\s\\w>)?])\\s*\\[\\s*)(?:<<0>>\\s*:\\s*)?<<1>>(?:\\s*,\\s*<<1>>)*(?=\\s*\\])/\n            .source,\n          [attrTarget, attr]\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          target: {\n            pattern: re(/^<<0>>(?=\\s*:)/.source, [attrTarget]),\n            alias: 'keyword'\n          },\n          'attribute-arguments': {\n            pattern: re(/\\(<<0>>*\\)/.source, [roundExpression]),\n            inside: Prism.languages.csharp\n          },\n          'class-name': {\n            pattern: RegExp(identifier),\n            inside: {\n              punctuation: /\\./\n            }\n          },\n          punctuation: /[:,]/\n        }\n      }\n    }) // string interpolation\n    var formatString = /:[^}\\r\\n]+/.source // multi line\n    var mInterpolationRound = nested(\n      replace(/[^\"'/()]|<<0>>|\\(<<self>>*\\)/.source, [\n        regularStringCharacterOrComment\n      ]),\n      2\n    )\n    var mInterpolation = replace(/\\{(?!\\{)(?:(?![}:])<<0>>)*<<1>>?\\}/.source, [\n      mInterpolationRound,\n      formatString\n    ]) // single line\n    var sInterpolationRound = nested(\n      replace(\n        /[^\"'/()]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|<<0>>|\\(<<self>>*\\)/\n          .source,\n        [regularStringOrCharacter]\n      ),\n      2\n    )\n    var sInterpolation = replace(/\\{(?!\\{)(?:(?![}:])<<0>>)*<<1>>?\\}/.source, [\n      sInterpolationRound,\n      formatString\n    ])\n    function createInterpolationInside(interpolation, interpolationRound) {\n      return {\n        interpolation: {\n          pattern: re(/((?:^|[^{])(?:\\{\\{)*)<<0>>/.source, [interpolation]),\n          lookbehind: true,\n          inside: {\n            'format-string': {\n              pattern: re(/(^\\{(?:(?![}:])<<0>>)*)<<1>>(?=\\}$)/.source, [\n                interpolationRound,\n                formatString\n              ]),\n              lookbehind: true,\n              inside: {\n                punctuation: /^:/\n              }\n            },\n            punctuation: /^\\{|\\}$/,\n            expression: {\n              pattern: /[\\s\\S]+/,\n              alias: 'language-csharp',\n              inside: Prism.languages.csharp\n            }\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    }\n    Prism.languages.insertBefore('csharp', 'string', {\n      'interpolation-string': [\n        {\n          pattern: re(\n            /(^|[^\\\\])(?:\\$@|@\\$)\"(?:\"\"|\\\\[\\s\\S]|\\{\\{|<<0>>|[^\\\\{\"])*\"/.source,\n            [mInterpolation]\n          ),\n          lookbehind: true,\n          greedy: true,\n          inside: createInterpolationInside(mInterpolation, mInterpolationRound)\n        },\n        {\n          pattern: re(/(^|[^@\\\\])\\$\"(?:\\\\.|\\{\\{|<<0>>|[^\\\\\"{])*\"/.source, [\n            sInterpolation\n          ]),\n          lookbehind: true,\n          greedy: true,\n          inside: createInterpolationInside(sInterpolation, sInterpolationRound)\n        }\n      ],\n      char: {\n        pattern: RegExp(character),\n        greedy: true\n      }\n    })\n    Prism.languages.dotnet = Prism.languages.cs = Prism.languages.csharp\n  })(Prism)\n}\n","'use strict'\nvar refractorRuby = require('./ruby.js')\nmodule.exports = crystal\ncrystal.displayName = 'crystal'\ncrystal.aliases = []\nfunction crystal(Prism) {\n  Prism.register(refractorRuby)\n  ;(function (Prism) {\n    Prism.languages.crystal = Prism.languages.extend('ruby', {\n      keyword: [\n        /\\b(?:__DIR__|__END_LINE__|__FILE__|__LINE__|abstract|alias|annotation|as|asm|begin|break|case|class|def|do|else|elsif|end|ensure|enum|extend|for|fun|if|ifdef|include|instance_sizeof|lib|macro|module|next|of|out|pointerof|private|protected|ptr|require|rescue|return|select|self|sizeof|struct|super|then|type|typeof|undef|uninitialized|union|unless|until|when|while|with|yield)\\b/,\n        {\n          pattern: /(\\.\\s*)(?:is_a|responds_to)\\?/,\n          lookbehind: true\n        }\n      ],\n      number:\n        /\\b(?:0b[01_]*[01]|0o[0-7_]*[0-7]|0x[\\da-fA-F_]*[\\da-fA-F]|(?:\\d(?:[\\d_]*\\d)?)(?:\\.[\\d_]*\\d)?(?:[eE][+-]?[\\d_]*\\d)?)(?:_(?:[uif](?:8|16|32|64))?)?\\b/,\n      operator: [/->/, Prism.languages.ruby.operator],\n      punctuation: /[(){}[\\].,;\\\\]/\n    })\n    Prism.languages.insertBefore('crystal', 'string-literal', {\n      attribute: {\n        pattern: /@\\[.*?\\]/,\n        inside: {\n          delimiter: {\n            pattern: /^@\\[|\\]$/,\n            alias: 'punctuation'\n          },\n          attribute: {\n            pattern: /^(\\s*)\\w+/,\n            lookbehind: true,\n            alias: 'class-name'\n          },\n          args: {\n            pattern: /\\S(?:[\\s\\S]*\\S)?/,\n            inside: Prism.languages.crystal\n          }\n        }\n      },\n      expansion: {\n        pattern: /\\{(?:\\{.*?\\}|%.*?%)\\}/,\n        inside: {\n          content: {\n            pattern: /^(\\{.)[\\s\\S]+(?=.\\}$)/,\n            lookbehind: true,\n            inside: Prism.languages.crystal\n          },\n          delimiter: {\n            pattern: /^\\{[\\{%]|[\\}%]\\}$/,\n            alias: 'operator'\n          }\n        }\n      },\n      char: {\n        pattern:\n          /'(?:[^\\\\\\r\\n]{1,2}|\\\\(?:.|u(?:[A-Fa-f0-9]{1,4}|\\{[A-Fa-f0-9]{1,6}\\})))'/,\n        greedy: true\n      }\n    })\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = csp\ncsp.displayName = 'csp'\ncsp.aliases = []\nfunction csp(Prism) {\n  /**\n   * Original by Scott Helme.\n   *\n   * Reference: https://scotthelme.co.uk/csp-cheat-sheet/\n   *\n   * Supports the following:\n   *  - https://www.w3.org/TR/CSP1/\n   *  - https://www.w3.org/TR/CSP2/\n   *  - https://www.w3.org/TR/CSP3/\n   */\n  ;(function (Prism) {\n    /**\n     * @param {string} source\n     * @returns {RegExp}\n     */\n    function value(source) {\n      return RegExp(\n        /([ \\t])/.source + '(?:' + source + ')' + /(?=[\\s;]|$)/.source,\n        'i'\n      )\n    }\n    Prism.languages.csp = {\n      directive: {\n        pattern:\n          /(^|[\\s;])(?:base-uri|block-all-mixed-content|(?:child|connect|default|font|frame|img|manifest|media|object|prefetch|script|style|worker)-src|disown-opener|form-action|frame-(?:ancestors|options)|input-protection(?:-(?:clip|selectors))?|navigate-to|plugin-types|policy-uri|referrer|reflected-xss|report-(?:to|uri)|require-sri-for|sandbox|(?:script|style)-src-(?:attr|elem)|upgrade-insecure-requests)(?=[\\s;]|$)/i,\n        lookbehind: true,\n        alias: 'property'\n      },\n      scheme: {\n        pattern: value(/[a-z][a-z0-9.+-]*:/.source),\n        lookbehind: true\n      },\n      none: {\n        pattern: value(/'none'/.source),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      nonce: {\n        pattern: value(/'nonce-[-+/\\w=]+'/.source),\n        lookbehind: true,\n        alias: 'number'\n      },\n      hash: {\n        pattern: value(/'sha(?:256|384|512)-[-+/\\w=]+'/.source),\n        lookbehind: true,\n        alias: 'number'\n      },\n      host: {\n        pattern: value(\n          /[a-z][a-z0-9.+-]*:\\/\\/[^\\s;,']*/.source +\n            '|' +\n            /\\*[^\\s;,']*/.source +\n            '|' +\n            /[a-z0-9-]+(?:\\.[a-z0-9-]+)+(?::[\\d*]+)?(?:\\/[^\\s;,']*)?/.source\n        ),\n        lookbehind: true,\n        alias: 'url',\n        inside: {\n          important: /\\*/\n        }\n      },\n      keyword: [\n        {\n          pattern: value(/'unsafe-[a-z-]+'/.source),\n          lookbehind: true,\n          alias: 'unsafe'\n        },\n        {\n          pattern: value(/'[a-z-]+'/.source),\n          lookbehind: true,\n          alias: 'safe'\n        }\n      ],\n      punctuation: /;/\n    }\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = dataweave\ndataweave.displayName = 'dataweave'\ndataweave.aliases = []\nfunction dataweave(Prism) {\n  ;(function (Prism) {\n    Prism.languages.dataweave = {\n      url: /\\b[A-Za-z]+:\\/\\/[\\w/:.?=&-]+|\\burn:[\\w:.?=&-]+/,\n      property: {\n        pattern: /(?:\\b\\w+#)?(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|\\b\\w+)(?=\\s*[:@])/,\n        greedy: true\n      },\n      string: {\n        pattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n        greedy: true\n      },\n      'mime-type':\n        /\\b(?:application|audio|image|multipart|text|video)\\/[\\w+-]+/,\n      date: {\n        pattern: /\\|[\\w:+-]+\\|/,\n        greedy: true\n      },\n      comment: [\n        {\n          pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n          lookbehind: true,\n          greedy: true\n        },\n        {\n          pattern: /(^|[^\\\\:])\\/\\/.*/,\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      regex: {\n        pattern: /\\/(?:[^\\\\\\/\\r\\n]|\\\\[^\\r\\n])+\\//,\n        greedy: true\n      },\n      keyword:\n        /\\b(?:and|as|at|case|do|else|fun|if|input|is|match|not|ns|null|or|output|type|unless|update|using|var)\\b/,\n      function: /\\b[A-Z_]\\w*(?=\\s*\\()/i,\n      number: /-?\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n      punctuation: /[{}[\\];(),.:@]/,\n      operator: /<<|>>|->|[<>~=]=?|!=|--?-?|\\+\\+?|!|\\?/,\n      boolean: /\\b(?:false|true)\\b/\n    }\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = cssExtras\ncssExtras.displayName = 'cssExtras'\ncssExtras.aliases = []\nfunction cssExtras(Prism) {\n  ;(function (Prism) {\n    var string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/\n    var selectorInside\n    Prism.languages.css.selector = {\n      pattern: Prism.languages.css.selector.pattern,\n      lookbehind: true,\n      inside: (selectorInside = {\n        'pseudo-element':\n          /:(?:after|before|first-letter|first-line|selection)|::[-\\w]+/,\n        'pseudo-class': /:[-\\w]+/,\n        class: /\\.[-\\w]+/,\n        id: /#[-\\w]+/,\n        attribute: {\n          pattern: RegExp('\\\\[(?:[^[\\\\]\"\\']|' + string.source + ')*\\\\]'),\n          greedy: true,\n          inside: {\n            punctuation: /^\\[|\\]$/,\n            'case-sensitivity': {\n              pattern: /(\\s)[si]$/i,\n              lookbehind: true,\n              alias: 'keyword'\n            },\n            namespace: {\n              pattern: /^(\\s*)(?:(?!\\s)[-*\\w\\xA0-\\uFFFF])*\\|(?!=)/,\n              lookbehind: true,\n              inside: {\n                punctuation: /\\|$/\n              }\n            },\n            'attr-name': {\n              pattern: /^(\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+/,\n              lookbehind: true\n            },\n            'attr-value': [\n              string,\n              {\n                pattern: /(=\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+(?=\\s*$)/,\n                lookbehind: true\n              }\n            ],\n            operator: /[|~*^$]?=/\n          }\n        },\n        'n-th': [\n          {\n            pattern: /(\\(\\s*)[+-]?\\d*[\\dn](?:\\s*[+-]\\s*\\d+)?(?=\\s*\\))/,\n            lookbehind: true,\n            inside: {\n              number: /[\\dn]+/,\n              operator: /[+-]/\n            }\n          },\n          {\n            pattern: /(\\(\\s*)(?:even|odd)(?=\\s*\\))/i,\n            lookbehind: true\n          }\n        ],\n        combinator: />|\\+|~|\\|\\|/,\n        // the `tag` token has been existed and removed.\n        // because we can't find a perfect tokenize to match it.\n        // if you want to add it, please read https://github.com/PrismJS/prism/pull/2373 first.\n        punctuation: /[(),]/\n      })\n    }\n    Prism.languages.css['atrule'].inside['selector-function-argument'].inside =\n      selectorInside\n    Prism.languages.insertBefore('css', 'property', {\n      variable: {\n        pattern:\n          /(^|[^-\\w\\xA0-\\uFFFF])--(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*/i,\n        lookbehind: true\n      }\n    })\n    var unit = {\n      pattern: /(\\b\\d+)(?:%|[a-z]+(?![\\w-]))/,\n      lookbehind: true\n    } // 123 -123 .123 -.123 12.3 -12.3\n    var number = {\n      pattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\n      lookbehind: true\n    }\n    Prism.languages.insertBefore('css', 'function', {\n      operator: {\n        pattern: /(\\s)[+\\-*\\/](?=\\s)/,\n        lookbehind: true\n      },\n      // CAREFUL!\n      // Previewers and Inline color use hexcode and color.\n      hexcode: {\n        pattern: /\\B#[\\da-f]{3,8}\\b/i,\n        alias: 'color'\n      },\n      color: [\n        {\n          pattern:\n            /(^|[^\\w-])(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)(?![\\w-])/i,\n          lookbehind: true\n        },\n        {\n          pattern:\n            /\\b(?:hsl|rgb)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:hsl|rgb)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n          inside: {\n            unit: unit,\n            number: number,\n            function: /[\\w-]+(?=\\()/,\n            punctuation: /[(),]/\n          }\n        }\n      ],\n      // it's important that there is no boundary assertion after the hex digits\n      entity: /\\\\[\\da-f]{1,8}/i,\n      unit: unit,\n      number: number\n    })\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = dax\ndax.displayName = 'dax'\ndax.aliases = []\nfunction dax(Prism) {\n  Prism.languages.dax = {\n    comment: {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/).*)/,\n      lookbehind: true\n    },\n    'data-field': {\n      pattern:\n        /'(?:[^']|'')*'(?!')(?:\\[[ \\w\\xA0-\\uFFFF]+\\])?|\\w+\\[[ \\w\\xA0-\\uFFFF]+\\]/,\n      alias: 'symbol'\n    },\n    measure: {\n      pattern: /\\[[ \\w\\xA0-\\uFFFF]+\\]/,\n      alias: 'constant'\n    },\n    string: {\n      pattern: /\"(?:[^\"]|\"\")*\"(?!\")/,\n      greedy: true\n    },\n    function:\n      /\\b(?:ABS|ACOS|ACOSH|ACOT|ACOTH|ADDCOLUMNS|ADDMISSINGITEMS|ALL|ALLCROSSFILTERED|ALLEXCEPT|ALLNOBLANKROW|ALLSELECTED|AND|APPROXIMATEDISTINCTCOUNT|ASIN|ASINH|ATAN|ATANH|AVERAGE|AVERAGEA|AVERAGEX|BETA\\.DIST|BETA\\.INV|BLANK|CALCULATE|CALCULATETABLE|CALENDAR|CALENDARAUTO|CEILING|CHISQ\\.DIST|CHISQ\\.DIST\\.RT|CHISQ\\.INV|CHISQ\\.INV\\.RT|CLOSINGBALANCEMONTH|CLOSINGBALANCEQUARTER|CLOSINGBALANCEYEAR|COALESCE|COMBIN|COMBINA|COMBINEVALUES|CONCATENATE|CONCATENATEX|CONFIDENCE\\.NORM|CONFIDENCE\\.T|CONTAINS|CONTAINSROW|CONTAINSSTRING|CONTAINSSTRINGEXACT|CONVERT|COS|COSH|COT|COTH|COUNT|COUNTA|COUNTAX|COUNTBLANK|COUNTROWS|COUNTX|CROSSFILTER|CROSSJOIN|CURRENCY|CURRENTGROUP|CUSTOMDATA|DATATABLE|DATE|DATEADD|DATEDIFF|DATESBETWEEN|DATESINPERIOD|DATESMTD|DATESQTD|DATESYTD|DATEVALUE|DAY|DEGREES|DETAILROWS|DISTINCT|DISTINCTCOUNT|DISTINCTCOUNTNOBLANK|DIVIDE|EARLIER|EARLIEST|EDATE|ENDOFMONTH|ENDOFQUARTER|ENDOFYEAR|EOMONTH|ERROR|EVEN|EXACT|EXCEPT|EXP|EXPON\\.DIST|FACT|FALSE|FILTER|FILTERS|FIND|FIRSTDATE|FIRSTNONBLANK|FIRSTNONBLANKVALUE|FIXED|FLOOR|FORMAT|GCD|GENERATE|GENERATEALL|GENERATESERIES|GEOMEAN|GEOMEANX|GROUPBY|HASONEFILTER|HASONEVALUE|HOUR|IF|IF\\.EAGER|IFERROR|IGNORE|INT|INTERSECT|ISBLANK|ISCROSSFILTERED|ISEMPTY|ISERROR|ISEVEN|ISFILTERED|ISINSCOPE|ISLOGICAL|ISNONTEXT|ISNUMBER|ISO\\.CEILING|ISODD|ISONORAFTER|ISSELECTEDMEASURE|ISSUBTOTAL|ISTEXT|KEEPFILTERS|KEYWORDMATCH|LASTDATE|LASTNONBLANK|LASTNONBLANKVALUE|LCM|LEFT|LEN|LN|LOG|LOG10|LOOKUPVALUE|LOWER|MAX|MAXA|MAXX|MEDIAN|MEDIANX|MID|MIN|MINA|MINUTE|MINX|MOD|MONTH|MROUND|NATURALINNERJOIN|NATURALLEFTOUTERJOIN|NEXTDAY|NEXTMONTH|NEXTQUARTER|NEXTYEAR|NONVISUAL|NORM\\.DIST|NORM\\.INV|NORM\\.S\\.DIST|NORM\\.S\\.INV|NOT|NOW|ODD|OPENINGBALANCEMONTH|OPENINGBALANCEQUARTER|OPENINGBALANCEYEAR|OR|PARALLELPERIOD|PATH|PATHCONTAINS|PATHITEM|PATHITEMREVERSE|PATHLENGTH|PERCENTILE\\.EXC|PERCENTILE\\.INC|PERCENTILEX\\.EXC|PERCENTILEX\\.INC|PERMUT|PI|POISSON\\.DIST|POWER|PREVIOUSDAY|PREVIOUSMONTH|PREVIOUSQUARTER|PREVIOUSYEAR|PRODUCT|PRODUCTX|QUARTER|QUOTIENT|RADIANS|RAND|RANDBETWEEN|RANK\\.EQ|RANKX|RELATED|RELATEDTABLE|REMOVEFILTERS|REPLACE|REPT|RIGHT|ROLLUP|ROLLUPADDISSUBTOTAL|ROLLUPGROUP|ROLLUPISSUBTOTAL|ROUND|ROUNDDOWN|ROUNDUP|ROW|SAMEPERIODLASTYEAR|SAMPLE|SEARCH|SECOND|SELECTCOLUMNS|SELECTEDMEASURE|SELECTEDMEASUREFORMATSTRING|SELECTEDMEASURENAME|SELECTEDVALUE|SIGN|SIN|SINH|SQRT|SQRTPI|STARTOFMONTH|STARTOFQUARTER|STARTOFYEAR|STDEV\\.P|STDEV\\.S|STDEVX\\.P|STDEVX\\.S|SUBSTITUTE|SUBSTITUTEWITHINDEX|SUM|SUMMARIZE|SUMMARIZECOLUMNS|SUMX|SWITCH|T\\.DIST|T\\.DIST\\.2T|T\\.DIST\\.RT|T\\.INV|T\\.INV\\.2T|TAN|TANH|TIME|TIMEVALUE|TODAY|TOPN|TOPNPERLEVEL|TOPNSKIP|TOTALMTD|TOTALQTD|TOTALYTD|TREATAS|TRIM|TRUE|TRUNC|UNICHAR|UNICODE|UNION|UPPER|USERELATIONSHIP|USERNAME|USEROBJECTID|USERPRINCIPALNAME|UTCNOW|UTCTODAY|VALUE|VALUES|VAR\\.P|VAR\\.S|VARX\\.P|VARX\\.S|WEEKDAY|WEEKNUM|XIRR|XNPV|YEAR|YEARFRAC)(?=\\s*\\()/i,\n    keyword:\n      /\\b(?:DEFINE|EVALUATE|MEASURE|ORDER\\s+BY|RETURN|VAR|START\\s+AT|ASC|DESC)\\b/i,\n    boolean: {\n      pattern: /\\b(?:FALSE|NULL|TRUE)\\b/i,\n      alias: 'constant'\n    },\n    number: /\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+\\b/,\n    operator: /:=|[-+*\\/=^]|&&?|\\|\\||<(?:=>?|<|>)?|>[>=]?|\\b(?:IN|NOT)\\b/i,\n    punctuation: /[;\\[\\](){}`,.]/\n  }\n}\n","'use strict'\n\nmodule.exports = cypher\ncypher.displayName = 'cypher'\ncypher.aliases = []\nfunction cypher(Prism) {\n  Prism.languages.cypher = {\n    // https://neo4j.com/docs/cypher-manual/current/syntax/comments/\n    comment: /\\/\\/.*/,\n    string: {\n      pattern: /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\\\\\r\\n]|\\\\.)*'/,\n      greedy: true\n    },\n    'class-name': {\n      pattern: /(:\\s*)(?:\\w+|`(?:[^`\\\\\\r\\n])*`)(?=\\s*[{):])/,\n      lookbehind: true,\n      greedy: true\n    },\n    relationship: {\n      pattern:\n        /(-\\[\\s*(?:\\w+\\s*|`(?:[^`\\\\\\r\\n])*`\\s*)?:\\s*|\\|\\s*:\\s*)(?:\\w+|`(?:[^`\\\\\\r\\n])*`)/,\n      lookbehind: true,\n      greedy: true,\n      alias: 'property'\n    },\n    identifier: {\n      pattern: /`(?:[^`\\\\\\r\\n])*`/,\n      greedy: true\n    },\n    variable: /\\$\\w+/,\n    // https://neo4j.com/docs/cypher-manual/current/syntax/reserved/\n    keyword:\n      /\\b(?:ADD|ALL|AND|AS|ASC|ASCENDING|ASSERT|BY|CALL|CASE|COMMIT|CONSTRAINT|CONTAINS|CREATE|CSV|DELETE|DESC|DESCENDING|DETACH|DISTINCT|DO|DROP|ELSE|END|ENDS|EXISTS|FOR|FOREACH|IN|INDEX|IS|JOIN|KEY|LIMIT|LOAD|MANDATORY|MATCH|MERGE|NODE|NOT|OF|ON|OPTIONAL|OR|ORDER(?=\\s+BY)|PERIODIC|REMOVE|REQUIRE|RETURN|SCALAR|SCAN|SET|SKIP|START|STARTS|THEN|UNION|UNIQUE|UNWIND|USING|WHEN|WHERE|WITH|XOR|YIELD)\\b/i,\n    function: /\\b\\w+\\b(?=\\s*\\()/,\n    boolean: /\\b(?:false|null|true)\\b/i,\n    number: /\\b(?:0x[\\da-fA-F]+|\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)\\b/,\n    // https://neo4j.com/docs/cypher-manual/current/syntax/operators/\n    operator: /:|<--?|--?>?|<>|=~?|[<>]=?|[+*/%^|]|\\.\\.\\.?/,\n    punctuation: /[()[\\]{},;.]/\n  }\n}\n","'use strict'\nvar refractorCsharp = require('./csharp.js')\nmodule.exports = cshtml\ncshtml.displayName = 'cshtml'\ncshtml.aliases = ['razor']\nfunction cshtml(Prism) {\n  Prism.register(refractorCsharp)\n  // Docs:\n  // https://docs.microsoft.com/en-us/aspnet/core/razor-pages/?view=aspnetcore-5.0&tabs=visual-studio\n  // https://docs.microsoft.com/en-us/aspnet/core/mvc/views/razor?view=aspnetcore-5.0\n  ;(function (Prism) {\n    var commentLike = /\\/(?![/*])|\\/\\/.*[\\r\\n]|\\/\\*[^*]*(?:\\*(?!\\/)[^*]*)*\\*\\//\n      .source\n    var stringLike =\n      /@(?!\")|\"(?:[^\\r\\n\\\\\"]|\\\\.)*\"|@\"(?:[^\\\\\"]|\"\"|\\\\[\\s\\S])*\"(?!\")/.source +\n      '|' +\n      /'(?:(?:[^\\r\\n'\\\\]|\\\\.|\\\\[Uux][\\da-fA-F]{1,8})'|(?=[^\\\\](?!')))/.source\n    /**\n     * Creates a nested pattern where all occurrences of the string `<<self>>` are replaced with the pattern itself.\n     *\n     * @param {string} pattern\n     * @param {number} depthLog2\n     * @returns {string}\n     */\n    function nested(pattern, depthLog2) {\n      for (var i = 0; i < depthLog2; i++) {\n        pattern = pattern.replace(/<self>/g, function () {\n          return '(?:' + pattern + ')'\n        })\n      }\n      return pattern\n        .replace(/<self>/g, '[^\\\\s\\\\S]')\n        .replace(/<str>/g, '(?:' + stringLike + ')')\n        .replace(/<comment>/g, '(?:' + commentLike + ')')\n    }\n    var round = nested(/\\((?:[^()'\"@/]|<str>|<comment>|<self>)*\\)/.source, 2)\n    var square = nested(/\\[(?:[^\\[\\]'\"@/]|<str>|<comment>|<self>)*\\]/.source, 2)\n    var curly = nested(/\\{(?:[^{}'\"@/]|<str>|<comment>|<self>)*\\}/.source, 2)\n    var angle = nested(/<(?:[^<>'\"@/]|<str>|<comment>|<self>)*>/.source, 2) // Note about the above bracket patterns:\n    // They all ignore HTML expressions that might be in the C# code. This is a problem because HTML (like strings and\n    // comments) is parsed differently. This is a huge problem because HTML might contain brackets and quotes which\n    // messes up the bracket and string counting implemented by the above patterns.\n    //\n    // This problem is not fixable because 1) HTML expression are highly context sensitive and very difficult to detect\n    // and 2) they require one capturing group at every nested level. See the `tagRegion` pattern to admire the\n    // complexity of an HTML expression.\n    //\n    // To somewhat alleviate the problem a bit, the patterns for characters (e.g. 'a') is very permissive, it also\n    // allows invalid characters to support HTML expressions like this: <p>That's it!</p>.\n    var tagAttrs =\n      /(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?/\n        .source\n    var tagContent = /(?!\\d)[^\\s>\\/=$<%]+/.source + tagAttrs + /\\s*\\/?>/.source\n    var tagRegion =\n      /\\B@?/.source +\n      '(?:' +\n      /<([a-zA-Z][\\w:]*)/.source +\n      tagAttrs +\n      /\\s*>/.source +\n      '(?:' +\n      (/[^<]/.source +\n        '|' + // all tags that are not the start tag\n        // eslint-disable-next-line regexp/strict\n        /<\\/?(?!\\1\\b)/.source +\n        tagContent +\n        '|' + // nested start tag\n        nested(\n          // eslint-disable-next-line regexp/strict\n          /<\\1/.source +\n            tagAttrs +\n            /\\s*>/.source +\n            '(?:' +\n            (/[^<]/.source +\n              '|' + // all tags that are not the start tag\n              // eslint-disable-next-line regexp/strict\n              /<\\/?(?!\\1\\b)/.source +\n              tagContent +\n              '|' +\n              '<self>') +\n            ')*' + // eslint-disable-next-line regexp/strict\n            /<\\/\\1\\s*>/.source,\n          2\n        )) +\n      ')*' + // eslint-disable-next-line regexp/strict\n      /<\\/\\1\\s*>/.source +\n      '|' +\n      /</.source +\n      tagContent +\n      ')' // Now for the actual language definition(s):\n    //\n    // Razor as a language has 2 parts:\n    //  1) CSHTML: A markup-like language that has been extended with inline C# code expressions and blocks.\n    //  2) C#+HTML: A variant of C# that can contain CSHTML tags as expressions.\n    //\n    // In the below code, both CSHTML and C#+HTML will be create as separate language definitions that reference each\n    // other. However, only CSHTML will be exported via `Prism.languages`.\n    Prism.languages.cshtml = Prism.languages.extend('markup', {})\n    var csharpWithHtml = Prism.languages.insertBefore(\n      'csharp',\n      'string',\n      {\n        html: {\n          pattern: RegExp(tagRegion),\n          greedy: true,\n          inside: Prism.languages.cshtml\n        }\n      },\n      {\n        csharp: Prism.languages.extend('csharp', {})\n      }\n    )\n    var cs = {\n      pattern: /\\S[\\s\\S]*/,\n      alias: 'language-csharp',\n      inside: csharpWithHtml\n    }\n    Prism.languages.insertBefore('cshtml', 'prolog', {\n      'razor-comment': {\n        pattern: /@\\*[\\s\\S]*?\\*@/,\n        greedy: true,\n        alias: 'comment'\n      },\n      block: {\n        pattern: RegExp(\n          /(^|[^@])@/.source +\n            '(?:' +\n            [\n              // @{ ... }\n              curly, // @code{ ... }\n              /(?:code|functions)\\s*/.source + curly, // @for (...) { ... }\n              /(?:for|foreach|lock|switch|using|while)\\s*/.source +\n                round +\n                /\\s*/.source +\n                curly, // @do { ... } while (...);\n              /do\\s*/.source +\n                curly +\n                /\\s*while\\s*/.source +\n                round +\n                /(?:\\s*;)?/.source, // @try { ... } catch (...) { ... } finally { ... }\n              /try\\s*/.source +\n                curly +\n                /\\s*catch\\s*/.source +\n                round +\n                /\\s*/.source +\n                curly +\n                /\\s*finally\\s*/.source +\n                curly, // @if (...) {...} else if (...) {...} else {...}\n              /if\\s*/.source +\n                round +\n                /\\s*/.source +\n                curly +\n                '(?:' +\n                /\\s*else/.source +\n                '(?:' +\n                /\\s+if\\s*/.source +\n                round +\n                ')?' +\n                /\\s*/.source +\n                curly +\n                ')*'\n            ].join('|') +\n            ')'\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          keyword: /^@\\w*/,\n          csharp: cs\n        }\n      },\n      directive: {\n        pattern:\n          /^([ \\t]*)@(?:addTagHelper|attribute|implements|inherits|inject|layout|model|namespace|page|preservewhitespace|removeTagHelper|section|tagHelperPrefix|using)(?=\\s).*/m,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          keyword: /^@\\w+/,\n          csharp: cs\n        }\n      },\n      value: {\n        pattern: RegExp(\n          /(^|[^@])@/.source +\n            /(?:await\\b\\s*)?/.source +\n            '(?:' +\n            /\\w+\\b/.source +\n            '|' +\n            round +\n            ')' +\n            '(?:' +\n            /[?!]?\\.\\w+\\b/.source +\n            '|' +\n            round +\n            '|' +\n            square +\n            '|' +\n            angle +\n            round +\n            ')*'\n        ),\n        lookbehind: true,\n        greedy: true,\n        alias: 'variable',\n        inside: {\n          keyword: /^@/,\n          csharp: cs\n        }\n      },\n      'delegate-operator': {\n        pattern: /(^|[^@])@(?=<)/,\n        lookbehind: true,\n        alias: 'operator'\n      }\n    })\n    Prism.languages.razor = Prism.languages.cshtml\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = css\ncss.displayName = 'css'\ncss.aliases = []\nfunction css(Prism) {\n  ;(function (Prism) {\n    var string =\n      /(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/\n    Prism.languages.css = {\n      comment: /\\/\\*[\\s\\S]*?\\*\\//,\n      atrule: {\n        pattern: /@[\\w-](?:[^;{\\s]|\\s+(?![\\s{]))*(?:;|(?=\\s*\\{))/,\n        inside: {\n          rule: /^@[\\w-]+/,\n          'selector-function-argument': {\n            pattern:\n              /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\n            lookbehind: true,\n            alias: 'selector'\n          },\n          keyword: {\n            pattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\n            lookbehind: true\n          } // See rest below\n        }\n      },\n      url: {\n        // https://drafts.csswg.org/css-values-3/#urls\n        pattern: RegExp(\n          '\\\\burl\\\\((?:' +\n            string.source +\n            '|' +\n            /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source +\n            ')\\\\)',\n          'i'\n        ),\n        greedy: true,\n        inside: {\n          function: /^url/i,\n          punctuation: /^\\(|\\)$/,\n          string: {\n            pattern: RegExp('^' + string.source + '$'),\n            alias: 'url'\n          }\n        }\n      },\n      selector: {\n        pattern: RegExp(\n          '(^|[{}\\\\s])[^{}\\\\s](?:[^{};\"\\'\\\\s]|\\\\s+(?![\\\\s{])|' +\n            string.source +\n            ')*(?=\\\\s*\\\\{)'\n        ),\n        lookbehind: true\n      },\n      string: {\n        pattern: string,\n        greedy: true\n      },\n      property: {\n        pattern:\n          /(^|[^-\\w\\xA0-\\uFFFF])(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\n        lookbehind: true\n      },\n      important: /!important\\b/i,\n      function: {\n        pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\\()/i,\n        lookbehind: true\n      },\n      punctuation: /[(){};:,]/\n    }\n    Prism.languages.css['atrule'].inside.rest = Prism.languages.css\n    var markup = Prism.languages.markup\n    if (markup) {\n      markup.tag.addInlined('style', 'css')\n      markup.tag.addAttribute('style', 'css')\n    }\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = d\nd.displayName = 'd'\nd.aliases = []\nfunction d(Prism) {\n  Prism.languages.d = Prism.languages.extend('clike', {\n    comment: [\n      {\n        // Shebang\n        pattern: /^\\s*#!.+/,\n        greedy: true\n      },\n      {\n        pattern: RegExp(\n          /(^|[^\\\\])/.source +\n            '(?:' +\n            [\n              // /+ comment +/\n              // Allow one level of nesting\n              /\\/\\+(?:\\/\\+(?:[^+]|\\+(?!\\/))*\\+\\/|(?!\\/\\+)[\\s\\S])*?\\+\\//.source, // // comment\n              /\\/\\/.*/.source, // /* comment */\n              /\\/\\*[\\s\\S]*?\\*\\//.source\n            ].join('|') +\n            ')'\n        ),\n        lookbehind: true,\n        greedy: true\n      }\n    ],\n    string: [\n      {\n        pattern: RegExp(\n          [\n            // r\"\", x\"\"\n            /\\b[rx]\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"[cwd]?/.source, // q\"[]\", q\"()\", q\"<>\", q\"{}\"\n            /\\bq\"(?:\\[[\\s\\S]*?\\]|\\([\\s\\S]*?\\)|<[\\s\\S]*?>|\\{[\\s\\S]*?\\})\"/.source, // q\"IDENT\n            // ...\n            // IDENT\"\n            /\\bq\"((?!\\d)\\w+)$[\\s\\S]*?^\\1\"/.source, // q\"//\", q\"||\", etc.\n            // eslint-disable-next-line regexp/strict\n            /\\bq\"(.)[\\s\\S]*?\\2\"/.source, // eslint-disable-next-line regexp/strict\n            /([\"`])(?:\\\\[\\s\\S]|(?!\\3)[^\\\\])*\\3[cwd]?/.source\n          ].join('|'),\n          'm'\n        ),\n        greedy: true\n      },\n      {\n        pattern: /\\bq\\{(?:\\{[^{}]*\\}|[^{}])*\\}/,\n        greedy: true,\n        alias: 'token-string'\n      }\n    ],\n    // In order: $, keywords and special tokens, globally defined symbols\n    keyword:\n      /\\$|\\b(?:__(?:(?:DATE|EOF|FILE|FUNCTION|LINE|MODULE|PRETTY_FUNCTION|TIMESTAMP|TIME|VENDOR|VERSION)__|gshared|parameters|traits|vector)|abstract|alias|align|asm|assert|auto|body|bool|break|byte|case|cast|catch|cdouble|cent|cfloat|char|class|const|continue|creal|dchar|debug|default|delegate|delete|deprecated|do|double|dstring|else|enum|export|extern|false|final|finally|float|for|foreach|foreach_reverse|function|goto|idouble|if|ifloat|immutable|import|inout|int|interface|invariant|ireal|lazy|long|macro|mixin|module|new|nothrow|null|out|override|package|pragma|private|protected|ptrdiff_t|public|pure|real|ref|return|scope|shared|short|size_t|static|string|struct|super|switch|synchronized|template|this|throw|true|try|typedef|typeid|typeof|ubyte|ucent|uint|ulong|union|unittest|ushort|version|void|volatile|wchar|while|with|wstring)\\b/,\n    number: [\n      // The lookbehind and the negative look-ahead try to prevent bad highlighting of the .. operator\n      // Hexadecimal numbers must be handled separately to avoid problems with exponent \"e\"\n      /\\b0x\\.?[a-f\\d_]+(?:(?!\\.\\.)\\.[a-f\\d_]*)?(?:p[+-]?[a-f\\d_]+)?[ulfi]{0,4}/i,\n      {\n        pattern:\n          /((?:\\.\\.)?)(?:\\b0b\\.?|\\b|\\.)\\d[\\d_]*(?:(?!\\.\\.)\\.[\\d_]*)?(?:e[+-]?\\d[\\d_]*)?[ulfi]{0,4}/i,\n        lookbehind: true\n      }\n    ],\n    operator:\n      /\\|[|=]?|&[&=]?|\\+[+=]?|-[-=]?|\\.?\\.\\.|=[>=]?|!(?:i[ns]\\b|<>?=?|>=?|=)?|\\bi[ns]\\b|(?:<[<>]?|>>?>?|\\^\\^|[*\\/%^~])=?/\n  })\n  Prism.languages.insertBefore('d', 'string', {\n    // Characters\n    // 'a', '\\\\', '\\n', '\\xFF', '\\377', '\\uFFFF', '\\U0010FFFF', '\\quot'\n    char: /'(?:\\\\(?:\\W|\\w+)|[^\\\\])'/\n  })\n  Prism.languages.insertBefore('d', 'keyword', {\n    property: /\\B@\\w*/\n  })\n  Prism.languages.insertBefore('d', 'function', {\n    register: {\n      // Iasm registers\n      pattern:\n        /\\b(?:[ABCD][LHX]|E?(?:BP|DI|SI|SP)|[BS]PL|[ECSDGF]S|CR[0234]|[DS]IL|DR[012367]|E[ABCD]X|X?MM[0-7]|R(?:1[0-5]|[89])[BWD]?|R[ABCD]X|R[BS]P|R[DS]I|TR[3-7]|XMM(?:1[0-5]|[89])|YMM(?:1[0-5]|\\d))\\b|\\bST(?:\\([0-7]\\)|\\b)/,\n      alias: 'variable'\n    }\n  })\n}\n"],"names":["csv","Prism","languages","value","punctuation","module","exports","displayName","aliases","dart","keywords","packagePrefix","source","className","pattern","RegExp","lookbehind","inside","namespace","extend","keyword","operator","insertBefore","greedy","interpolation","expression","string","undefined","metadata","alias","generics","csharp","replace","replacements","m","index","re","flags","nested","depthLog2","i","keywordKinds","keywordsToPattern","words","trim","typeDeclarationKeywords","nonTypeKeywords","nonContextualKeywords","generic","nestedRound","name","genericName","identifier","array","typeExpressionWithoutTuple","tupleElement","tuple","typeExpression","typeInside","character","regularString","verbatimString","number","range","function","preprocessor","directive","regularStringOrCharacter","regularStringCharacterOrComment","roundExpression","attrTarget","attr","attribute","target","formatString","mInterpolationRound","mInterpolation","sInterpolationRound","sInterpolation","createInterpolationInside","interpolationRound","char","dotnet","cs","refractorRuby","require","crystal","register","ruby","delimiter","args","expansion","content","csp","scheme","none","nonce","hash","host","important","dataweave","url","property","date","comment","regex","boolean","cssExtras","selectorInside","css","selector","class","id","combinator","variable","unit","hexcode","color","entity","dax","measure","cypher","relationship","refractorCsharp","cshtml","commentLike","stringLike","round","square","curly","angle","tagAttrs","tagContent","tagRegion","html","block","join","razor","atrule","rule","rest","markup","tag","addInlined","addAttribute","d"],"sourceRoot":""}