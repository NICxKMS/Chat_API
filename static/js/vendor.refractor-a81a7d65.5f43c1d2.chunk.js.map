{"version":3,"file":"static/js/vendor.refractor-a81a7d65.5f43c1d2.chunk.js","mappings":"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","sources":["../node_modules/refractor/lang/etlua.js","../node_modules/refractor/lang/diff.js","../node_modules/refractor/lang/ejs.js","../node_modules/refractor/lang/editorconfig.js","../node_modules/refractor/lang/django.js","../node_modules/refractor/lang/ebnf.js","../node_modules/refractor/lang/docker.js","../node_modules/refractor/lang/dns-zone-file.js","../node_modules/refractor/lang/erb.js","../node_modules/refractor/lang/elm.js","../node_modules/refractor/lang/eiffel.js","../node_modules/refractor/lang/dot.js","../node_modules/refractor/lang/dhall.js","../node_modules/refractor/lang/erlang.js","../node_modules/refractor/lang/elixir.js"],"sourcesContent":["'use strict'\nvar refractorLua = require('./lua.js')\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = etlua\netlua.displayName = 'etlua'\netlua.aliases = []\nfunction etlua(Prism) {\n  Prism.register(refractorLua)\n  Prism.register(refractorMarkupTemplating)\n  ;(function (Prism) {\n    Prism.languages.etlua = {\n      delimiter: {\n        pattern: /^<%[-=]?|-?%>$/,\n        alias: 'punctuation'\n      },\n      'language-lua': {\n        pattern: /[\\s\\S]+/,\n        inside: Prism.languages.lua\n      }\n    }\n    Prism.hooks.add('before-tokenize', function (env) {\n      var pattern = /<%[\\s\\S]+?%>/g\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'etlua',\n        pattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'etlua')\n    })\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = diff\ndiff.displayName = 'diff'\ndiff.aliases = []\nfunction diff(Prism) {\n  ;(function (Prism) {\n    Prism.languages.diff = {\n      coord: [\n        // Match all kinds of coord lines (prefixed by \"+++\", \"---\" or \"***\").\n        /^(?:\\*{3}|-{3}|\\+{3}).*$/m, // Match \"@@ ... @@\" coord lines in unified diff.\n        /^@@.*@@$/m, // Match coord lines in normal diff (starts with a number).\n        /^\\d.*$/m\n      ] // deleted, inserted, unchanged, diff\n    }\n    /**\n     * A map from the name of a block to its line prefix.\n     *\n     * @type {Object<string, string>}\n     */\n    var PREFIXES = {\n      'deleted-sign': '-',\n      'deleted-arrow': '<',\n      'inserted-sign': '+',\n      'inserted-arrow': '>',\n      unchanged: ' ',\n      diff: '!'\n    } // add a token for each prefix\n    Object.keys(PREFIXES).forEach(function (name) {\n      var prefix = PREFIXES[name]\n      var alias = []\n      if (!/^\\w+$/.test(name)) {\n        // \"deleted-sign\" -> \"deleted\"\n        alias.push(/\\w+/.exec(name)[0])\n      }\n      if (name === 'diff') {\n        alias.push('bold')\n      }\n      Prism.languages.diff[name] = {\n        pattern: RegExp(\n          '^(?:[' + prefix + '].*(?:\\r\\n?|\\n|(?![\\\\s\\\\S])))+',\n          'm'\n        ),\n        alias: alias,\n        inside: {\n          line: {\n            pattern: /(.)(?=[\\s\\S]).*(?:\\r\\n?|\\n)?/,\n            lookbehind: true\n          },\n          prefix: {\n            pattern: /[\\s\\S]/,\n            alias: /\\w+/.exec(name)[0]\n          }\n        }\n      }\n    }) // make prefixes available to Diff plugin\n    Object.defineProperty(Prism.languages.diff, 'PREFIXES', {\n      value: PREFIXES\n    })\n  })(Prism)\n}\n","'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = ejs\nejs.displayName = 'ejs'\nejs.aliases = ['eta']\nfunction ejs(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  ;(function (Prism) {\n    Prism.languages.ejs = {\n      delimiter: {\n        pattern: /^<%[-_=]?|[-_]?%>$/,\n        alias: 'punctuation'\n      },\n      comment: /^#[\\s\\S]*/,\n      'language-javascript': {\n        pattern: /[\\s\\S]+/,\n        inside: Prism.languages.javascript\n      }\n    }\n    Prism.hooks.add('before-tokenize', function (env) {\n      var ejsPattern = /<%(?!%)[\\s\\S]+?%>/g\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'ejs',\n        ejsPattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'ejs')\n    })\n    Prism.languages.eta = Prism.languages.ejs\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = editorconfig\neditorconfig.displayName = 'editorconfig'\neditorconfig.aliases = []\nfunction editorconfig(Prism) {\n  Prism.languages.editorconfig = {\n    // https://editorconfig-specification.readthedocs.io\n    comment: /[;#].*/,\n    section: {\n      pattern: /(^[ \\t]*)\\[.+\\]/m,\n      lookbehind: true,\n      alias: 'selector',\n      inside: {\n        regex: /\\\\\\\\[\\[\\]{},!?.*]/,\n        // Escape special characters with '\\\\'\n        operator: /[!?]|\\.\\.|\\*{1,2}/,\n        punctuation: /[\\[\\]{},]/\n      }\n    },\n    key: {\n      pattern: /(^[ \\t]*)[^\\s=]+(?=[ \\t]*=)/m,\n      lookbehind: true,\n      alias: 'attr-name'\n    },\n    value: {\n      pattern: /=.*/,\n      alias: 'attr-value',\n      inside: {\n        punctuation: /^=/\n      }\n    }\n  }\n}\n","'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = django\ndjango.displayName = 'django'\ndjango.aliases = ['jinja2']\nfunction django(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  // Django/Jinja2 syntax definition for Prism.js <http://prismjs.com> syntax highlighter.\n  // Mostly it works OK but can paint code incorrectly on complex html/template tag combinations.\n  ;(function (Prism) {\n    Prism.languages.django = {\n      comment: /^\\{#[\\s\\S]*?#\\}$/,\n      tag: {\n        pattern: /(^\\{%[+-]?\\s*)\\w+/,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      delimiter: {\n        pattern: /^\\{[{%][+-]?|[+-]?[}%]\\}$/,\n        alias: 'punctuation'\n      },\n      string: {\n        pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: true\n      },\n      filter: {\n        pattern: /(\\|)\\w+/,\n        lookbehind: true,\n        alias: 'function'\n      },\n      test: {\n        pattern: /(\\bis\\s+(?:not\\s+)?)(?!not\\b)\\w+/,\n        lookbehind: true,\n        alias: 'function'\n      },\n      function: /\\b[a-z_]\\w+(?=\\s*\\()/i,\n      keyword:\n        /\\b(?:and|as|by|else|for|if|import|in|is|loop|not|or|recursive|with|without)\\b/,\n      operator: /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n      number: /\\b\\d+(?:\\.\\d+)?\\b/,\n      boolean: /[Ff]alse|[Nn]one|[Tt]rue/,\n      variable: /\\b\\w+\\b/,\n      punctuation: /[{}[\\](),.:;]/\n    }\n    var pattern = /\\{\\{[\\s\\S]*?\\}\\}|\\{%[\\s\\S]*?%\\}|\\{#[\\s\\S]*?#\\}/g\n    var markupTemplating = Prism.languages['markup-templating']\n    Prism.hooks.add('before-tokenize', function (env) {\n      markupTemplating.buildPlaceholders(env, 'django', pattern)\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      markupTemplating.tokenizePlaceholders(env, 'django')\n    }) // Add an Jinja2 alias\n    Prism.languages.jinja2 = Prism.languages.django\n    Prism.hooks.add('before-tokenize', function (env) {\n      markupTemplating.buildPlaceholders(env, 'jinja2', pattern)\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      markupTemplating.tokenizePlaceholders(env, 'jinja2')\n    })\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = ebnf\nebnf.displayName = 'ebnf'\nebnf.aliases = []\nfunction ebnf(Prism) {\n  Prism.languages.ebnf = {\n    comment: /\\(\\*[\\s\\S]*?\\*\\)/,\n    string: {\n      pattern: /\"[^\"\\r\\n]*\"|'[^'\\r\\n]*'/,\n      greedy: true\n    },\n    special: {\n      pattern: /\\?[^?\\r\\n]*\\?/,\n      greedy: true,\n      alias: 'class-name'\n    },\n    definition: {\n      pattern: /^([\\t ]*)[a-z]\\w*(?:[ \\t]+[a-z]\\w*)*(?=\\s*=)/im,\n      lookbehind: true,\n      alias: ['rule', 'keyword']\n    },\n    rule: /\\b[a-z]\\w*(?:[ \\t]+[a-z]\\w*)*\\b/i,\n    punctuation: /\\([:/]|[:/]\\)|[.,;()[\\]{}]/,\n    operator: /[-=|*/!]/\n  }\n}\n","'use strict'\n\nmodule.exports = docker\ndocker.displayName = 'docker'\ndocker.aliases = ['dockerfile']\nfunction docker(Prism) {\n  ;(function (Prism) {\n    // Many of the following regexes will contain negated lookaheads like `[ \\t]+(?![ \\t])`. This is a trick to ensure\n    // that quantifiers behave *atomically*. Atomic quantifiers are necessary to prevent exponential backtracking.\n    var spaceAfterBackSlash =\n      /\\\\[\\r\\n](?:\\s|\\\\[\\r\\n]|#.*(?!.))*(?![\\s#]|\\\\[\\r\\n])/.source // At least one space, comment, or line break\n    var space = /(?:[ \\t]+(?![ \\t])(?:<SP_BS>)?|<SP_BS>)/.source.replace(\n      /<SP_BS>/g,\n      function () {\n        return spaceAfterBackSlash\n      }\n    )\n    var string =\n      /\"(?:[^\"\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"|'(?:[^'\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*'/\n        .source\n    var option = /--[\\w-]+=(?:<STR>|(?![\"'])(?:[^\\s\\\\]|\\\\.)+)/.source.replace(\n      /<STR>/g,\n      function () {\n        return string\n      }\n    )\n    var stringRule = {\n      pattern: RegExp(string),\n      greedy: true\n    }\n    var commentRule = {\n      pattern: /(^[ \\t]*)#.*/m,\n      lookbehind: true,\n      greedy: true\n    }\n    /**\n     * @param {string} source\n     * @param {string} flags\n     * @returns {RegExp}\n     */\n    function re(source, flags) {\n      source = source\n        .replace(/<OPT>/g, function () {\n          return option\n        })\n        .replace(/<SP>/g, function () {\n          return space\n        })\n      return RegExp(source, flags)\n    }\n    Prism.languages.docker = {\n      instruction: {\n        pattern:\n          /(^[ \\t]*)(?:ADD|ARG|CMD|COPY|ENTRYPOINT|ENV|EXPOSE|FROM|HEALTHCHECK|LABEL|MAINTAINER|ONBUILD|RUN|SHELL|STOPSIGNAL|USER|VOLUME|WORKDIR)(?=\\s)(?:\\\\.|[^\\r\\n\\\\])*(?:\\\\$(?:\\s|#.*$)*(?![\\s#])(?:\\\\.|[^\\r\\n\\\\])*)*/im,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          options: {\n            pattern: re(\n              /(^(?:ONBUILD<SP>)?\\w+<SP>)<OPT>(?:<SP><OPT>)*/.source,\n              'i'\n            ),\n            lookbehind: true,\n            greedy: true,\n            inside: {\n              property: {\n                pattern: /(^|\\s)--[\\w-]+/,\n                lookbehind: true\n              },\n              string: [\n                stringRule,\n                {\n                  pattern: /(=)(?![\"'])(?:[^\\s\\\\]|\\\\.)+/,\n                  lookbehind: true\n                }\n              ],\n              operator: /\\\\$/m,\n              punctuation: /=/\n            }\n          },\n          keyword: [\n            {\n              // https://docs.docker.com/engine/reference/builder/#healthcheck\n              pattern: re(\n                /(^(?:ONBUILD<SP>)?HEALTHCHECK<SP>(?:<OPT><SP>)*)(?:CMD|NONE)\\b/\n                  .source,\n                'i'\n              ),\n              lookbehind: true,\n              greedy: true\n            },\n            {\n              // https://docs.docker.com/engine/reference/builder/#from\n              pattern: re(\n                /(^(?:ONBUILD<SP>)?FROM<SP>(?:<OPT><SP>)*(?!--)[^ \\t\\\\]+<SP>)AS/\n                  .source,\n                'i'\n              ),\n              lookbehind: true,\n              greedy: true\n            },\n            {\n              // https://docs.docker.com/engine/reference/builder/#onbuild\n              pattern: re(/(^ONBUILD<SP>)\\w+/.source, 'i'),\n              lookbehind: true,\n              greedy: true\n            },\n            {\n              pattern: /^\\w+/,\n              greedy: true\n            }\n          ],\n          comment: commentRule,\n          string: stringRule,\n          variable: /\\$(?:\\w+|\\{[^{}\"'\\\\]*\\})/,\n          operator: /\\\\$/m\n        }\n      },\n      comment: commentRule\n    }\n    Prism.languages.dockerfile = Prism.languages.docker\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = dnsZoneFile\ndnsZoneFile.displayName = 'dnsZoneFile'\ndnsZoneFile.aliases = []\nfunction dnsZoneFile(Prism) {\n  Prism.languages['dns-zone-file'] = {\n    comment: /;.*/,\n    string: {\n      pattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n      greedy: true\n    },\n    variable: [\n      {\n        pattern: /(^\\$ORIGIN[ \\t]+)\\S+/m,\n        lookbehind: true\n      },\n      {\n        pattern: /(^|\\s)@(?=\\s|$)/,\n        lookbehind: true\n      }\n    ],\n    keyword: /^\\$(?:INCLUDE|ORIGIN|TTL)(?=\\s|$)/m,\n    class: {\n      // https://tools.ietf.org/html/rfc1035#page-13\n      pattern: /(^|\\s)(?:CH|CS|HS|IN)(?=\\s|$)/,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    type: {\n      // https://en.wikipedia.org/wiki/List_of_DNS_record_types\n      pattern:\n        /(^|\\s)(?:A|A6|AAAA|AFSDB|APL|ATMA|CAA|CDNSKEY|CDS|CERT|CNAME|DHCID|DLV|DNAME|DNSKEY|DS|EID|GID|GPOS|HINFO|HIP|IPSECKEY|ISDN|KEY|KX|LOC|MAILA|MAILB|MB|MD|MF|MG|MINFO|MR|MX|NAPTR|NB|NBSTAT|NIMLOC|NINFO|NS|NSAP|NSAP-PTR|NSEC|NSEC3|NSEC3PARAM|NULL|NXT|OPENPGPKEY|PTR|PX|RKEY|RP|RRSIG|RT|SIG|SINK|SMIMEA|SOA|SPF|SRV|SSHFP|TA|TKEY|TLSA|TSIG|TXT|UID|UINFO|UNSPEC|URI|WKS|X25)(?=\\s|$)/,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    punctuation: /[()]/\n  }\n  Prism.languages['dns-zone'] = Prism.languages['dns-zone-file']\n}\n","'use strict'\nvar refractorRuby = require('./ruby.js')\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = erb\nerb.displayName = 'erb'\nerb.aliases = []\nfunction erb(Prism) {\n  Prism.register(refractorRuby)\n  Prism.register(refractorMarkupTemplating)\n  ;(function (Prism) {\n    Prism.languages.erb = {\n      delimiter: {\n        pattern: /^(\\s*)<%=?|%>(?=\\s*$)/,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      ruby: {\n        pattern: /\\s*\\S[\\s\\S]*/,\n        alias: 'language-ruby',\n        inside: Prism.languages.ruby\n      }\n    }\n    Prism.hooks.add('before-tokenize', function (env) {\n      var erbPattern =\n        /<%=?(?:[^\\r\\n]|[\\r\\n](?!=begin)|[\\r\\n]=begin\\s(?:[^\\r\\n]|[\\r\\n](?!=end))*[\\r\\n]=end)+?%>/g\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'erb',\n        erbPattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'erb')\n    })\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = elm\nelm.displayName = 'elm'\nelm.aliases = []\nfunction elm(Prism) {\n  Prism.languages.elm = {\n    comment: /--.*|\\{-[\\s\\S]*?-\\}/,\n    char: {\n      pattern:\n        /'(?:[^\\\\'\\r\\n]|\\\\(?:[abfnrtv\\\\']|\\d+|x[0-9a-fA-F]+|u\\{[0-9a-fA-F]+\\}))'/,\n      greedy: true\n    },\n    string: [\n      {\n        // Multiline strings are wrapped in triple \". Quotes may appear unescaped.\n        pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n        greedy: true\n      },\n      {\n        pattern: /\"(?:[^\\\\\"\\r\\n]|\\\\.)*\"/,\n        greedy: true\n      }\n    ],\n    'import-statement': {\n      // The imported or hidden names are not included in this import\n      // statement. This is because we want to highlight those exactly like\n      // we do for the names in the program.\n      pattern:\n        /(^[\\t ]*)import\\s+[A-Z]\\w*(?:\\.[A-Z]\\w*)*(?:\\s+as\\s+(?:[A-Z]\\w*)(?:\\.[A-Z]\\w*)*)?(?:\\s+exposing\\s+)?/m,\n      lookbehind: true,\n      inside: {\n        keyword: /\\b(?:as|exposing|import)\\b/\n      }\n    },\n    keyword:\n      /\\b(?:alias|as|case|else|exposing|if|in|infixl|infixr|let|module|of|then|type)\\b/,\n    // These are builtin variables only. Constructors are highlighted later as a constant.\n    builtin:\n      /\\b(?:abs|acos|always|asin|atan|atan2|ceiling|clamp|compare|cos|curry|degrees|e|flip|floor|fromPolar|identity|isInfinite|isNaN|logBase|max|min|negate|never|not|pi|radians|rem|round|sin|sqrt|tan|toFloat|toPolar|toString|truncate|turns|uncurry|xor)\\b/,\n    // decimal integers and floating point numbers | hexadecimal integers\n    number: /\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0x[0-9a-f]+)\\b/i,\n    // Most of this is needed because of the meaning of a single '.'.\n    // If it stands alone freely, it is the function composition.\n    // It may also be a separator between a module name and an identifier => no\n    // operator. If it comes together with other special characters it is an\n    // operator too.\n    // Valid operator characters in 0.18: +-/*=.$<>:&|^?%#@~!\n    // Ref: https://groups.google.com/forum/#!msg/elm-dev/0AHSnDdkSkQ/E0SVU70JEQAJ\n    operator: /\\s\\.\\s|[+\\-/*=.$<>:&|^?%#@~!]{2,}|[+\\-/*=$<>:&|^?%#@~!]/,\n    // In Elm, nearly everything is a variable, do not highlight these.\n    hvariable: /\\b(?:[A-Z]\\w*\\.)*[a-z]\\w*\\b/,\n    constant: /\\b(?:[A-Z]\\w*\\.)*[A-Z]\\w*\\b/,\n    punctuation: /[{}[\\]|(),.:]/\n  }\n}\n","'use strict'\n\nmodule.exports = eiffel\neiffel.displayName = 'eiffel'\neiffel.aliases = []\nfunction eiffel(Prism) {\n  Prism.languages.eiffel = {\n    comment: /--.*/,\n    string: [\n      // Aligned-verbatim-strings\n      {\n        pattern: /\"([^[]*)\\[[\\s\\S]*?\\]\\1\"/,\n        greedy: true\n      }, // Non-aligned-verbatim-strings\n      {\n        pattern: /\"([^{]*)\\{[\\s\\S]*?\\}\\1\"/,\n        greedy: true\n      }, // Single-line string\n      {\n        pattern: /\"(?:%(?:(?!\\n)\\s)*\\n\\s*%|%\\S|[^%\"\\r\\n])*\"/,\n        greedy: true\n      }\n    ],\n    // normal char | special char | char code\n    char: /'(?:%.|[^%'\\r\\n])+'/,\n    keyword:\n      /\\b(?:across|agent|alias|all|and|as|assign|attached|attribute|check|class|convert|create|Current|debug|deferred|detachable|do|else|elseif|end|ensure|expanded|export|external|feature|from|frozen|if|implies|inherit|inspect|invariant|like|local|loop|not|note|obsolete|old|once|or|Precursor|redefine|rename|require|rescue|Result|retry|select|separate|some|then|undefine|until|variant|Void|when|xor)\\b/i,\n    boolean: /\\b(?:False|True)\\b/i,\n    // Convention: class-names are always all upper-case characters\n    'class-name': /\\b[A-Z][\\dA-Z_]*\\b/,\n    number: [\n      // hexa | octal | bin\n      /\\b0[xcb][\\da-f](?:_*[\\da-f])*\\b/i, // Decimal\n      /(?:\\b\\d(?:_*\\d)*)?\\.(?:(?:\\d(?:_*\\d)*)?e[+-]?)?\\d(?:_*\\d)*\\b|\\b\\d(?:_*\\d)*\\b\\.?/i\n    ],\n    punctuation: /:=|<<|>>|\\(\\||\\|\\)|->|\\.(?=\\w)|[{}[\\];(),:?]/,\n    operator: /\\\\\\\\|\\|\\.\\.\\||\\.\\.|\\/[~\\/=]?|[><]=?|[-+*^=~]/\n  }\n}\n","'use strict'\n\nmodule.exports = dot\ndot.displayName = 'dot'\ndot.aliases = ['gv']\nfunction dot(Prism) {\n  // https://www.graphviz.org/doc/info/lang.html\n  ;(function (Prism) {\n    var ID =\n      '(?:' +\n      [\n        // an identifier\n        /[a-zA-Z_\\x80-\\uFFFF][\\w\\x80-\\uFFFF]*/.source, // a number\n        /-?(?:\\.\\d+|\\d+(?:\\.\\d*)?)/.source, // a double-quoted string\n        /\"[^\"\\\\]*(?:\\\\[\\s\\S][^\"\\\\]*)*\"/.source, // HTML-like string\n        /<(?:[^<>]|(?!<!--)<(?:[^<>\"']|\"[^\"]*\"|'[^']*')+>|<!--(?:[^-]|-(?!->))*-->)*>/\n          .source\n      ].join('|') +\n      ')'\n    var IDInside = {\n      markup: {\n        pattern: /(^<)[\\s\\S]+(?=>$)/,\n        lookbehind: true,\n        alias: ['language-markup', 'language-html', 'language-xml'],\n        inside: Prism.languages.markup\n      }\n    }\n    /**\n     * @param {string} source\n     * @param {string} flags\n     * @returns {RegExp}\n     */\n    function withID(source, flags) {\n      return RegExp(\n        source.replace(/<ID>/g, function () {\n          return ID\n        }),\n        flags\n      )\n    }\n    Prism.languages.dot = {\n      comment: {\n        pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/|^#.*/m,\n        greedy: true\n      },\n      'graph-name': {\n        pattern: withID(\n          /(\\b(?:digraph|graph|subgraph)[ \\t\\r\\n]+)<ID>/.source,\n          'i'\n        ),\n        lookbehind: true,\n        greedy: true,\n        alias: 'class-name',\n        inside: IDInside\n      },\n      'attr-value': {\n        pattern: withID(/(=[ \\t\\r\\n]*)<ID>/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: IDInside\n      },\n      'attr-name': {\n        pattern: withID(/([\\[;, \\t\\r\\n])<ID>(?=[ \\t\\r\\n]*=)/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: IDInside\n      },\n      keyword: /\\b(?:digraph|edge|graph|node|strict|subgraph)\\b/i,\n      'compass-point': {\n        pattern: /(:[ \\t\\r\\n]*)(?:[ewc_]|[ns][ew]?)(?![\\w\\x80-\\uFFFF])/,\n        lookbehind: true,\n        alias: 'builtin'\n      },\n      node: {\n        pattern: withID(/(^|[^-.\\w\\x80-\\uFFFF\\\\])<ID>/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: IDInside\n      },\n      operator: /[=:]|-[->]/,\n      punctuation: /[\\[\\]{};,]/\n    }\n    Prism.languages.gv = Prism.languages.dot\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = dhall\ndhall.displayName = 'dhall'\ndhall.aliases = []\nfunction dhall(Prism) {\n  // ABNF grammar:\n  // https://github.com/dhall-lang/dhall-lang/blob/master/standard/dhall.abnf\n  Prism.languages.dhall = {\n    // Multi-line comments can be nested. E.g. {- foo {- bar -} -}\n    // The multi-line pattern is essentially this:\n    //   \\{-(?:[^-{]|-(?!\\})|\\{(?!-)|<SELF>)*-\\}\n    comment:\n      /--.*|\\{-(?:[^-{]|-(?!\\})|\\{(?!-)|\\{-(?:[^-{]|-(?!\\})|\\{(?!-))*-\\})*-\\}/,\n    string: {\n      pattern: /\"(?:[^\"\\\\]|\\\\.)*\"|''(?:[^']|'(?!')|'''|''\\$\\{)*''(?!'|\\$)/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /\\$\\{[^{}]*\\}/,\n          inside: {\n            expression: {\n              pattern: /(^\\$\\{)[\\s\\S]+(?=\\}$)/,\n              lookbehind: true,\n              alias: 'language-dhall',\n              inside: null // see blow\n            },\n            punctuation: /\\$\\{|\\}/\n          }\n        }\n      }\n    },\n    label: {\n      pattern: /`[^`]*`/,\n      greedy: true\n    },\n    url: {\n      // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L596\n      pattern:\n        /\\bhttps?:\\/\\/[\\w.:%!$&'*+;=@~-]+(?:\\/[\\w.:%!$&'*+;=@~-]*)*(?:\\?[/?\\w.:%!$&'*+;=@~-]*)?/,\n      greedy: true\n    },\n    env: {\n      // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L661\n      pattern: /\\benv:(?:(?!\\d)\\w+|\"(?:[^\"\\\\=]|\\\\.)*\")/,\n      greedy: true,\n      inside: {\n        function: /^env/,\n        operator: /^:/,\n        variable: /[\\s\\S]+/\n      }\n    },\n    hash: {\n      // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L725\n      pattern: /\\bsha256:[\\da-fA-F]{64}\\b/,\n      inside: {\n        function: /sha256/,\n        operator: /:/,\n        number: /[\\da-fA-F]{64}/\n      }\n    },\n    // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L359\n    keyword:\n      /\\b(?:as|assert|else|forall|if|in|let|merge|missing|then|toMap|using|with)\\b|\\u2200/,\n    builtin: /\\b(?:None|Some)\\b/,\n    boolean: /\\b(?:False|True)\\b/,\n    number:\n      /\\bNaN\\b|-?\\bInfinity\\b|[+-]?\\b(?:0x[\\da-fA-F]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/,\n    operator:\n      /\\/\\\\|\\/\\/\\\\\\\\|&&|\\|\\||===|[!=]=|\\/\\/|->|\\+\\+|::|[+*#@=:?<>|\\\\\\u2227\\u2a53\\u2261\\u2afd\\u03bb\\u2192]/,\n    punctuation: /\\.\\.|[{}\\[\\](),./]/,\n    // we'll just assume that every capital word left is a type name\n    'class-name': /\\b[A-Z]\\w*\\b/\n  }\n  Prism.languages.dhall.string.inside.interpolation.inside.expression.inside =\n    Prism.languages.dhall\n}\n","'use strict'\n\nmodule.exports = erlang\nerlang.displayName = 'erlang'\nerlang.aliases = []\nfunction erlang(Prism) {\n  Prism.languages.erlang = {\n    comment: /%.+/,\n    string: {\n      pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n      greedy: true\n    },\n    'quoted-function': {\n      pattern: /'(?:\\\\.|[^\\\\'\\r\\n])+'(?=\\()/,\n      alias: 'function'\n    },\n    'quoted-atom': {\n      pattern: /'(?:\\\\.|[^\\\\'\\r\\n])+'/,\n      alias: 'atom'\n    },\n    boolean: /\\b(?:false|true)\\b/,\n    keyword: /\\b(?:after|case|catch|end|fun|if|of|receive|try|when)\\b/,\n    number: [\n      /\\$\\\\?./,\n      /\\b\\d+#[a-z0-9]+/i,\n      /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i\n    ],\n    function: /\\b[a-z][\\w@]*(?=\\()/,\n    variable: {\n      // Look-behind is used to prevent wrong highlighting of atoms containing \"@\"\n      pattern: /(^|[^@])(?:\\b|\\?)[A-Z_][\\w@]*/,\n      lookbehind: true\n    },\n    operator: [\n      /[=\\/<>:]=|=[:\\/]=|\\+\\+?|--?|[=*\\/!]|\\b(?:and|andalso|band|bnot|bor|bsl|bsr|bxor|div|not|or|orelse|rem|xor)\\b/,\n      {\n        // We don't want to match <<\n        pattern: /(^|[^<])<(?!<)/,\n        lookbehind: true\n      },\n      {\n        // We don't want to match >>\n        pattern: /(^|[^>])>(?!>)/,\n        lookbehind: true\n      }\n    ],\n    atom: /\\b[a-z][\\w@]*/,\n    punctuation: /[()[\\]{}:;,.#|]|<<|>>/\n  }\n}\n","'use strict'\n\nmodule.exports = elixir\nelixir.displayName = 'elixir'\nelixir.aliases = []\nfunction elixir(Prism) {\n  Prism.languages.elixir = {\n    doc: {\n      pattern:\n        /@(?:doc|moduledoc)\\s+(?:(\"\"\"|''')[\\s\\S]*?\\1|(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2)/,\n      inside: {\n        attribute: /^@\\w+/,\n        string: /['\"][\\s\\S]+/\n      }\n    },\n    comment: {\n      pattern: /#.*/,\n      greedy: true\n    },\n    // ~r\"\"\"foo\"\"\" (multi-line), ~r'''foo''' (multi-line), ~r/foo/, ~r|foo|, ~r\"foo\", ~r'foo', ~r(foo), ~r[foo], ~r{foo}, ~r<foo>\n    regex: {\n      pattern:\n        /~[rR](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[uismxfr]*/,\n      greedy: true\n    },\n    string: [\n      {\n        // ~s\"\"\"foo\"\"\" (multi-line), ~s'''foo''' (multi-line), ~s/foo/, ~s|foo|, ~s\"foo\", ~s'foo', ~s(foo), ~s[foo], ~s{foo} (with interpolation care), ~s<foo>\n        pattern:\n          /~[cCsSwW](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|#\\{[^}]+\\}|#(?!\\{)|[^#\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[csa]?/,\n        greedy: true,\n        inside: {\n          // See interpolation below\n        }\n      },\n      {\n        pattern: /(\"\"\"|''')[\\s\\S]*?\\1/,\n        greedy: true,\n        inside: {\n          // See interpolation below\n        }\n      },\n      {\n        // Multi-line strings are allowed\n        pattern: /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: true,\n        inside: {\n          // See interpolation below\n        }\n      }\n    ],\n    atom: {\n      // Look-behind prevents bad highlighting of the :: operator\n      pattern: /(^|[^:]):\\w+/,\n      lookbehind: true,\n      alias: 'symbol'\n    },\n    module: {\n      pattern: /\\b[A-Z]\\w*\\b/,\n      alias: 'class-name'\n    },\n    // Look-ahead prevents bad highlighting of the :: operator\n    'attr-name': /\\b\\w+\\??:(?!:)/,\n    argument: {\n      // Look-behind prevents bad highlighting of the && operator\n      pattern: /(^|[^&])&\\d+/,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    attribute: {\n      pattern: /@\\w+/,\n      alias: 'variable'\n    },\n    function: /\\b[_a-zA-Z]\\w*[?!]?(?:(?=\\s*(?:\\.\\s*)?\\()|(?=\\/\\d))/,\n    number: /\\b(?:0[box][a-f\\d_]+|\\d[\\d_]*)(?:\\.[\\d_]+)?(?:e[+-]?[\\d_]+)?\\b/i,\n    keyword:\n      /\\b(?:after|alias|and|case|catch|cond|def(?:callback|delegate|exception|impl|macro|module|n|np|p|protocol|struct)?|do|else|end|fn|for|if|import|not|or|quote|raise|require|rescue|try|unless|unquote|use|when)\\b/,\n    boolean: /\\b(?:false|nil|true)\\b/,\n    operator: [\n      /\\bin\\b|&&?|\\|[|>]?|\\\\\\\\|::|\\.\\.\\.?|\\+\\+?|-[->]?|<[-=>]|>=|!==?|\\B!|=(?:==?|[>~])?|[*\\/^]/,\n      {\n        // We don't want to match <<\n        pattern: /([^<])<(?!<)/,\n        lookbehind: true\n      },\n      {\n        // We don't want to match >>\n        pattern: /([^>])>(?!>)/,\n        lookbehind: true\n      }\n    ],\n    punctuation: /<<|>>|[.,%\\[\\]{}()]/\n  }\n  Prism.languages.elixir.string.forEach(function (o) {\n    o.inside = {\n      interpolation: {\n        pattern: /#\\{[^}]+\\}/,\n        inside: {\n          delimiter: {\n            pattern: /^#\\{|\\}$/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.elixir\n        }\n      }\n    }\n  })\n}\n"],"names":["refractorLua","require","refractorMarkupTemplating","etlua","Prism","register","languages","delimiter","pattern","alias","inside","lua","hooks","add","env","buildPlaceholders","tokenizePlaceholders","module","exports","displayName","aliases","diff","coord","PREFIXES","unchanged","Object","keys","forEach","name","prefix","test","push","exec","RegExp","line","lookbehind","defineProperty","value","ejs","comment","javascript","eta","editorconfig","section","regex","operator","punctuation","key","django","tag","string","greedy","filter","function","keyword","number","boolean","variable","markupTemplating","jinja2","ebnf","special","definition","rule","docker","spaceAfterBackSlash","source","space","replace","option","stringRule","commentRule","re","flags","instruction","options","property","dockerfile","dnsZoneFile","class","type","refractorRuby","erb","ruby","elm","char","builtin","hvariable","constant","eiffel","dot","ID","join","IDInside","markup","withID","node","gv","dhall","interpolation","expression","label","url","hash","erlang","atom","elixir","doc","attribute","argument","o","rest"],"sourceRoot":""}