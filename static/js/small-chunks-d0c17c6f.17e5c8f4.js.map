{"version":3,"file":"static/js/small-chunks-d0c17c6f.17e5c8f4.js","mappings":"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","sources":["components/settings/SettingsGroup/index.js","components/settings/icons.js","components/settings/SettingsSlider/index.js","components/settings/SettingsToggle/index.js","components/settings/TextAreaControl.js","components/settings/SettingsPanel.js"],"sourcesContent":["import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './SettingsGroup.module.css';\n\nconst SettingsGroup = ({\n  title,\n  description = '',\n  children,\n  defaultExpanded = true,\n  id\n}) => {\n  const [isExpanded, setIsExpanded] = useState(defaultExpanded);\n  \n  const toggleExpanded = () => {\n    setIsExpanded(!isExpanded);\n  };\n\n  return (\n    <div className={`${styles.group} ${isExpanded ? styles.expanded : ''}`} id={id}>\n      <div \n        className={styles.header}\n        onClick={toggleExpanded}\n        role=\"button\"\n        aria-expanded={isExpanded}\n        tabIndex={0}\n        onKeyDown={(e) => {\n          if (e.key === 'Enter' || e.key === ' ') {\n            e.preventDefault();\n            toggleExpanded();\n          }\n        }}\n      >\n        <div className={styles.titleContainer}>\n          <h3 className={styles.title}>{title}</h3>\n          <button \n            className={`${styles.expandButton} ${isExpanded ? styles.expanded : ''}`}\n            aria-label={isExpanded ? 'Collapse section' : 'Expand section'}\n            onClick={(e) => {\n              e.stopPropagation();\n              toggleExpanded();\n            }}\n          >\n            <svg \n              width=\"16\" \n              height=\"16\" \n              viewBox=\"0 0 16 16\" \n              xmlns=\"http://www.w3.org/2000/svg\"\n              className={styles.expandIcon}\n            >\n              <path \n                fillRule=\"evenodd\" \n                clipRule=\"evenodd\" \n                d=\"M8 10.5858L3.70711 6.29289C3.31658 5.90237 2.68342 5.90237 2.29289 6.29289C1.90237 6.68342 1.90237 7.31658 2.29289 7.70711L7.29289 12.7071C7.68342 13.0976 8.31658 13.0976 8.70711 12.7071L13.7071 7.70711C14.0976 7.31658 14.0976 6.68342 13.7071 6.29289C13.3166 5.90237 12.6834 5.90237 12.2929 6.29289L8 10.5858Z\" \n              />\n            </svg>\n          </button>\n        </div>\n        {description && <p className={styles.description}>{description}</p>}\n      </div>\n      \n      {isExpanded && (\n        <div className={styles.content}>\n          {children}\n        </div>\n      )}\n    </div>\n  );\n};\n\nSettingsGroup.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  children: PropTypes.node.isRequired,\n  defaultExpanded: PropTypes.bool,\n  id: PropTypes.string\n};\n\nexport default SettingsGroup; ","// SVG Icon factory\nconst createIcon = (width, height, path) => () => (\n  <svg width={width} height={height} viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    {typeof path === 'string' \n      ? <path d={path} stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/> \n      : path}\n  </svg>\n);\n\n// Icon components\nexport const IconSlider = createIcon(18, 18, \"M4 21V14M4 14C5.65685 14 7 12.6569 7 11C7 9.34315 5.65685 8 4 8C2.34315 8 1 9.34315 1 11C1 12.6569 2.34315 14 4 14ZM12 16V3M12 3C13.6569 3 15 4.34315 15 6C15 7.65685 13.6569 9 12 9C10.3431 9 9 7.65685 9 6C9 4.34315 10.3431 3 12 3ZM20 21V10M20 10C21.6569 10 23 8.65685 23 7C23 5.34315 21.6569 4 20 4C18.3431 4 17 5.34315 17 7C17 8.65685 18.3431 10 20 10Z\");\n\nexport const IconStream = createIcon(18, 18, \"M13 5C13 3.89543 12.1046 3 11 3C9.89543 3 9 3.89543 9 5M13 5C13 6.10457 12.1046 7 11 7C9.89543 7 9 6.10457 9 5M13 5H21M9 5H3M17 12C17 10.8954 16.1046 10 15 10C13.8954 10 13 10.8954 13 12M17 12C17 13.1046 16.1046 14 15 14C13.8954 14 13 13.1046 13 12M17 12H21M13 12H3M13 19C13 17.8954 12.1046 17 11 17C9.89543 17 9 17.8954 9 19M13 19C13 20.1046 12.1046 21 11 21C9.89543 21 9 20.1046 9 19M13 19H21M9 19H3\");\n\nexport const IconCache = createIcon(18, 18, [\n  <path key=\"1\" d=\"M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>,\n  <path key=\"2\" d=\"M12 7V12L15 15\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n]);\n\nexport const IconOutput = createIcon(18, 18, \"M3 7H21M9 12H21M3 17H21\");\n\nexport const IconRepeat = createIcon(18, 18, \"M17 2L21 6M21 6L17 10M21 6H7C4.79086 6 3 7.79086 3 10C3 12.2091 4.79086 14 7 14M7 22L3 18M3 18L7 14M3 18H17C19.2091 18 21 16.2091 21 14C21 11.7909 19.2091 10 17 10\");\n\nexport const IconClose = createIcon(20, 20, \"M18 6L6 18M6 6L18 18\");\n\nexport const IconRefresh = createIcon(14, 14, \"M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C15.3019 3 18.1885 4.77814 19.7545 7.42909M19.7545 7.42909L17 5M19.7545 7.42909L22 4.5\");\n\nexport const InfoIcon = ({ className }) => (\n  <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className={className} aria-hidden=\"true\">\n    <circle cx=\"12\" cy=\"12\" r=\"10\" />\n    <line x1=\"12\" y1=\"16\" x2=\"12\" y2=\"12\" />\n    <line x1=\"12\" y1=\"8\" x2=\"12.01\" y2=\"8\" />\n  </svg>\n);\n\n// System icon for settings\nexport const IconSystem = () => (\n  <svg \n    width=\"24\" \n    height=\"24\" \n    viewBox=\"0 0 24 24\" \n    fill=\"none\" \n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path \n      d=\"M12 15C13.6569 15 15 13.6569 15 12C15 10.3431 13.6569 9 12 9C10.3431 9 9 10.3431 9 12C9 13.6569 10.3431 15 12 15Z\" \n      stroke=\"currentColor\" \n      strokeWidth=\"2\" \n      strokeLinecap=\"round\" \n      strokeLinejoin=\"round\"\n    />\n    <path \n      d=\"M19.4 15C19.2669 15.3016 19.2272 15.6362 19.286 15.9606C19.3448 16.285 19.4995 16.5843 19.73 16.82L19.79 16.88C19.976 17.0657 20.1235 17.2863 20.2241 17.5291C20.3248 17.7719 20.3766 18.0322 20.3766 18.295C20.3766 18.5578 20.3248 18.8181 20.2241 19.0609C20.1235 19.3037 19.976 19.5243 19.79 19.71C19.6043 19.896 19.3837 20.0435 19.1409 20.1441C18.8981 20.2448 18.6378 20.2966 18.375 20.2966C18.1122 20.2966 17.8519 20.2448 17.6091 20.1441C17.3663 20.0435 17.1457 19.896 16.96 19.71L16.9 19.65C16.6643 19.4195 16.365 19.2648 16.0406 19.206C15.7162 19.1472 15.3816 19.1869 15.08 19.32C14.7842 19.4468 14.532 19.6572 14.3543 19.9255C14.1766 20.1938 14.0813 20.5082 14.08 20.83V21C14.08 21.5304 13.8693 22.0391 13.4942 22.4142C13.1191 22.7893 12.6104 23 12.08 23C11.5496 23 11.0409 22.7893 10.6658 22.4142C10.2907 22.0391 10.08 21.5304 10.08 21V20.91C10.0723 20.579 9.96512 20.258 9.77251 19.9887C9.5799 19.7194 9.31074 19.5143 9 19.4C8.69838 19.2669 8.36381 19.2272 8.03941 19.286C7.71502 19.3448 7.41568 19.4995 7.18 19.73L7.12 19.79C6.93425 19.976 6.71368 20.1235 6.47088 20.2241C6.22808 20.3248 5.96783 20.3766 5.705 20.3766C5.44217 20.3766 5.18192 20.3248 4.93912 20.2241C4.69632 20.1235 4.47575 19.976 4.29 19.79C4.10405 19.6043 3.95653 19.3837 3.85588 19.1409C3.75523 18.8981 3.70343 18.6378 3.70343 18.375C3.70343 18.1122 3.75523 17.8519 3.85588 17.6091C3.95653 17.3663 4.10405 17.1457 4.29 16.96L4.35 16.9C4.58054 16.6643 4.73519 16.365 4.794 16.0406C4.85282 15.7162 4.81312 15.3816 4.68 15.08C4.55324 14.7842 4.34276 14.532 4.07447 14.3543C3.80618 14.1766 3.49179 14.0813 3.17 14.08H3C2.46957 14.08 1.96086 13.8693 1.58579 13.4942C1.21071 13.1191 1 12.6104 1 12.08C1 11.5496 1.21071 11.0409 1.58579 10.6658C1.96086 10.2907 2.46957 10.08 3 10.08H3.09C3.42099 10.0723 3.742 9.96512 4.0113 9.77251C4.28059 9.5799 4.48572 9.31074 4.6 9C4.73312 8.69838 4.77282 8.36381 4.714 8.03941C4.65519 7.71502 4.50054 7.41568 4.27 7.18L4.21 7.12C4.02405 6.93425 3.87653 6.71368 3.77588 6.47088C3.67523 6.22808 3.62343 5.96783 3.62343 5.705C3.62343 5.44217 3.67523 5.18192 3.77588 4.93912C3.87653 4.69632 4.02405 4.47575 4.21 4.29C4.39575 4.10405 4.61632 3.95653 4.85912 3.85588C5.10192 3.75523 5.36217 3.70343 5.625 3.70343C5.88783 3.70343 6.14808 3.75523 6.39088 3.85588C6.63368 3.95653 6.85425 4.10405 7.04 4.29L7.1 4.35C7.33568 4.58054 7.63502 4.73519 7.95941 4.794C8.28381 4.85282 8.61838 4.81312 8.92 4.68H9C9.29577 4.55324 9.54802 4.34276 9.72569 4.07447C9.90337 3.80618 9.99872 3.49179 10 3.17V3C10 2.46957 10.2107 1.96086 10.5858 1.58579C10.9609 1.21071 11.4696 1 12 1C12.5304 1 13.0391 1.21071 13.4142 1.58579C13.7893 1.96086 14 2.46957 14 3V3.09C14.0013 3.41179 14.0966 3.72618 14.2743 3.99447C14.452 4.26276 14.7042 4.47324 15 4.6C15.3016 4.73312 15.6362 4.77282 15.9606 4.714C16.285 4.65519 16.5843 4.50054 16.82 4.27L16.88 4.21C17.0657 4.02405 17.2863 3.87653 17.5291 3.77588C17.7719 3.67523 18.0322 3.62343 18.295 3.62343C18.5578 3.62343 18.8181 3.67523 19.0609 3.77588C19.3037 3.87653 19.5243 4.02405 19.71 4.21C19.896 4.39575 20.0435 4.61632 20.1441 4.85912C20.2448 5.10192 20.2966 5.36217 20.2966 5.625C20.2966 5.88783 20.2448 6.14808 20.1441 6.39088C20.0435 6.63368 19.896 6.85425 19.71 7.04L19.65 7.1C19.4195 7.33568 19.2648 7.63502 19.206 7.95941C19.1472 8.28381 19.1869 8.61838 19.32 8.92V9C19.4468 9.29577 19.6572 9.54802 19.9255 9.72569C20.1938 9.90337 20.5082 9.99872 20.83 10H21C21.5304 10 22.0391 10.2107 22.4142 10.5858C22.7893 10.9609 23 11.4696 23 12C23 12.5304 22.7893 13.0391 22.4142 13.4142C22.0391 13.7893 21.5304 14 21 14H20.91C20.5882 14.0013 20.2738 14.0966 20.0055 14.2743C19.7372 14.452 19.5268 14.7042 19.4 15Z\" \n      stroke=\"currentColor\" \n      strokeWidth=\"2\" \n      strokeLinecap=\"round\" \n      strokeLinejoin=\"round\"\n    />\n  </svg>\n); ","import { memo, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { InfoIcon } from '../icons';\nimport styles from './SettingsSlider.module.css';\n\n/**\n * Slider control for numeric settings\n * @param {Object} props - Component props\n * @param {string} props.id - Unique identifier for the slider\n * @param {string} props.label - Label text\n * @param {number} props.value - Current value\n * @param {number} props.min - Minimum value\n * @param {number} props.max - Maximum value\n * @param {number} props.step - Step size\n * @param {Function} props.onChange - Change handler function\n * @param {boolean} [props.disabled=false] - Whether the slider is disabled\n * @param {string} [props.tooltip] - Tooltip text\n * @param {string} [props.size='medium'] - Size variant ('small', 'medium', or 'large')\n * @param {boolean} [props.allowDirectInput=false] - Whether to show a number input field\n * @returns {JSX.Element} - Rendered component\n */\nconst SettingsSlider = memo(({\n  id,\n  label,\n  value,\n  min,\n  max,\n  step,\n  onChange,\n  disabled = false,\n  tooltip,\n  size = 'medium',\n  allowDirectInput = false\n}) => {\n  // Add local state for input field\n  const [inputValue, setInputValue] = useState(value.toString());\n  \n  // Update input value when prop value changes\n  useEffect(() => {\n    setInputValue(value.toString());\n  }, [value]);\n  \n  // Calculate percentage for slider fill\n  const percentage = ((value - min) / (max - min)) * 100;\n  \n  // Format displayed value based on step size\n  const displayValue = Number(value).toFixed(step < 1 ? 2 : 0);\n  \n  // Apply size modifier CSS class\n  const sizeClass = size === 'small' \n    ? styles.small \n    : size === 'large' \n      ? styles.large \n      : '';\n  \n  // Handle slider change\n  const handleSliderChange = e => {\n    if (!disabled) onChange(parseFloat(e.target.value));\n  };\n  \n  // Handle input field change\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n  \n  // Handle input field blur (commit value)\n  const handleInputBlur = () => {\n    if (disabled) return;\n    \n    // Parse and validate input\n    let newValue = parseFloat(inputValue);\n    \n    // Handle NaN and enforce min/max bounds\n    if (isNaN(newValue)) {\n      setInputValue(value.toString());\n      return;\n    }\n    \n    // Enforce min/max bounds\n    newValue = Math.max(min, Math.min(max, newValue));\n    \n    // Update the value and input field\n    onChange(newValue);\n    setInputValue(newValue.toString());\n  };\n  \n  // Handle input field key press\n  const handleKeyDown = e => {\n    if (e.key === 'Enter') {\n      e.target.blur(); // Trigger blur to commit the value\n    }\n  };\n  \n  return (\n    <div className={`${styles.sliderContainer} ${disabled ? styles.disabled : ''} ${sizeClass}`}>\n      <div className={styles.labelContainer}>\n        <label htmlFor={id} className={styles.label}>\n          {label}\n          {tooltip && (\n            <span className={styles.tooltipWrapper}>\n              <InfoIcon className={styles.infoIcon} />\n              <span className={styles.tooltip}>{tooltip}</span>\n            </span>\n          )}\n        </label>\n        \n        {allowDirectInput ? (\n          <input\n            type=\"number\"\n            className={styles.numberInput}\n            value={inputValue}\n            onChange={handleInputChange}\n            onBlur={handleInputBlur}\n            onKeyDown={handleKeyDown}\n            min={min}\n            max={max}\n            step={step}\n            disabled={disabled}\n            aria-label={`${label} value`}\n          />\n        ) : (\n          <span className={styles.value}>{displayValue}</span>\n        )}\n      </div>\n      \n      <div className={styles.sliderTrack}>\n        <div \n          className={styles.sliderFill} \n          style={{ width: `${percentage}%` }}\n        />\n        \n        <input\n          id={id}\n          type=\"range\"\n          className={styles.slider}\n          value={value}\n          min={min}\n          max={max}\n          step={step}\n          onChange={handleSliderChange}\n          disabled={disabled}\n          aria-valuemin={min}\n          aria-valuemax={max}\n          aria-valuenow={value}\n          aria-label={label}\n        />\n      </div>\n    </div>\n  );\n});\n\nSettingsSlider.propTypes = {\n  id: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  value: PropTypes.number.isRequired,\n  min: PropTypes.number.isRequired,\n  max: PropTypes.number.isRequired,\n  step: PropTypes.number.isRequired,\n  onChange: PropTypes.func.isRequired,\n  disabled: PropTypes.bool,\n  tooltip: PropTypes.string,\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n  allowDirectInput: PropTypes.bool\n};\n\n// Display name for debugging\nSettingsSlider.displayName = 'SettingsSlider';\n\nexport default SettingsSlider; ","import PropTypes from 'prop-types';\nimport { InfoIcon } from '../icons';\nimport styles from './SettingsToggle.module.css';\n\n/**\n * Universal boolean control component (toggle/switch)\n */\nconst BooleanControl = ({ \n  id, \n  label, \n  isChecked, \n  onChange, \n  tooltip,\n  disabled = false,\n  variant = 'toggle',\n  size = 'medium'\n}) => {\n  const handleKeyDown = e => {\n    if ((e.key === 'Enter' || e.key === ' ') && !disabled) {\n      e.preventDefault();\n      onChange(!isChecked);\n    }\n  };\n\n  const containerClass = variant === 'switch' ? styles.switchContainer : styles.toggleContainer;\n  const trackClass = variant === 'switch' ? styles.switchTrack : styles.toggleTrack;\n  const thumbClass = variant === 'switch' ? styles.switchThumb : styles.toggleThumb;\n  const sizeClass = size === 'small' ? styles.small : size === 'large' ? styles.large : '';\n\n  return (\n    <div className={`${containerClass} ${disabled ? styles.disabled : ''} ${sizeClass}`}>\n      <label className={styles.toggleLabel} htmlFor={id}>\n        <span className={styles.labelText}>{label}</span>\n        {tooltip && (\n          <span className={styles.tooltip} data-tooltip={tooltip}>\n            <InfoIcon className={styles.infoIcon} />\n          </span>\n        )}\n      </label>\n      \n      <div \n        className={`${trackClass} ${isChecked ? styles.checked : ''}`}\n        onClick={() => !disabled && onChange(!isChecked)}\n        onKeyDown={handleKeyDown}\n        tabIndex={disabled ? -1 : 0}\n        role=\"switch\"\n        aria-checked={isChecked}\n        aria-disabled={disabled}\n      >\n        <span className={thumbClass} />\n        <input\n          id={id}\n          type=\"checkbox\"\n          checked={isChecked}\n          onChange={() => !disabled && onChange(!isChecked)}\n          disabled={disabled}\n          className={styles.hiddenInput}\n        />\n        <span className={styles.srOnly}>\n          {label} is {isChecked ? 'enabled' : 'disabled'}\n        </span>\n      </div>\n    </div>\n  );\n};\n\nBooleanControl.propTypes = {\n  id: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  isChecked: PropTypes.bool.isRequired,\n  onChange: PropTypes.func.isRequired,\n  tooltip: PropTypes.string,\n  disabled: PropTypes.bool,\n  variant: PropTypes.oneOf(['toggle', 'switch']),\n  size: PropTypes.oneOf(['small', 'medium', 'large'])\n};\n\nexport default BooleanControl; ","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './TextAreaControl.module.css';\n\n/**\n * TextArea control component for settings\n * \n * @param {Object} props Component props\n * @param {string} props.id Unique identifier\n * @param {string} props.label Label text\n * @param {string} props.value Current value\n * @param {Function} props.onChange Change handler\n * @param {string} props.tooltip Tooltip text\n * @param {string} props.placeholder Placeholder text\n * @param {number} props.rows Number of rows for the textarea\n * @returns {JSX.Element} Rendered component\n */\nconst TextAreaControl = ({ \n  id, \n  label, \n  value, \n  onChange, \n  tooltip, \n  placeholder = 'Enter text here...', \n  rows = 4 \n}) => {\n  const [localValue, setLocalValue] = useState(value);\n  \n  const handleChange = (e) => {\n    setLocalValue(e.target.value);\n  };\n  \n  const handleBlur = () => {\n    if (localValue !== value) {\n      onChange(localValue);\n    }\n  };\n\n  const handleKeyDown = (e) => {\n    if (e.key === 'Enter' && e.ctrlKey) {\n      e.preventDefault();\n      handleBlur();\n    }\n  };\n  \n  return (\n    <div className={styles.textAreaControl}>\n      <div className={styles.header}>\n        <label htmlFor={id} className={styles.label} title={tooltip}>\n          {label}\n        </label>\n      </div>\n      \n      <textarea\n        id={id}\n        className={styles.textarea}\n        value={localValue}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        onKeyDown={handleKeyDown}\n        placeholder={placeholder}\n        rows={rows}\n        aria-label={label}\n      />\n      \n      {tooltip && (\n        <div className={styles.description}>\n          {tooltip}\n        </div>\n      )}\n    </div>\n  );\n};\n\nTextAreaControl.propTypes = {\n  id: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  tooltip: PropTypes.string,\n  placeholder: PropTypes.string,\n  rows: PropTypes.number\n};\n\nexport default TextAreaControl; ","import { useState, useEffect, useMemo } from 'react';\nimport { useSettings } from '../../contexts/SettingsContext';\nimport { useCacheToggle } from '../../hooks/useCacheToggle';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { BooleanControl, SettingsSlider, SettingsGroup, TextAreaControl } from './index';\nimport { \n  IconSlider, \n  IconStream, \n  IconCache, \n  IconOutput, \n  IconRepeat, \n  IconClose, \n  IconRefresh\n} from './icons';\nimport { IconSystem } from './icons.js';\nimport styles from './SettingsPanel.module.css';\n\n/**\n * Main settings panel component \n * Provides UI for adjusting application settings\n * \n * @param {Object} props - Component props\n * @param {boolean} props.isOpen - Whether the panel is visible\n * @param {Function} props.onClose - Function to call to close the panel\n * @returns {JSX.Element} - Rendered component\n */\nconst SettingsPanel = ({ isOpen, onClose }) => {\n  const { settings, updateSetting, resetSettings } = useSettings();\n  const { cacheEnabled, toggleCache, refreshModels } = useCacheToggle();\n  const { currentUser } = useAuth();\n  const [activeTab, setActiveTab] = useState('general');\n  const [animateItems, setAnimateItems] = useState(false);\n  \n  // Get the default user name to use consistently throughout the app\n  const userName = currentUser?.displayName || currentUser?.email || 'Sir';\n  \n  // Animation handling\n  useEffect(() => {\n    if (isOpen) {\n      const timer = setTimeout(() => setAnimateItems(true), 300);\n      return () => clearTimeout(timer);\n    } else {\n      setAnimateItems(false);\n      setTimeout(() => setActiveTab('general'), 300);\n    }\n  }, [isOpen]);\n\n  // Setting configuration\n  const settingConfig = useMemo(() => ({\n    temperature: { \n      id: 'temperature',\n      label: 'Temperature',\n      type: 'slider', \n      min: 0, \n      max: 2, \n      step: 0.01,\n      allowDirectInput: true,\n      description: \"Controls text randomness. Lower values make responses more focused and deterministic, higher values more creative.\",\n      tab: 'generation'\n    },\n    top_p: { \n      id: 'top_p',\n      label: 'Top P',\n      type: 'slider', \n      min: 0, \n      max: 2, \n      step: 0.01,\n      allowDirectInput: true,\n      description: \"Nucleus sampling parameter. Higher values consider more token options, lower values focus on most likely tokens.\", \n      tab: 'generation'\n    },\n    max_tokens: { \n      id: 'max_tokens',\n      label: 'Maximum Length',\n      type: 'slider', \n      min: 1000, \n      max: 2000000, \n      step: 512,\n      allowDirectInput: true,\n      description: \"Maximum number of tokens in model responses. Higher values allow longer outputs.\",\n      tab: 'output'\n    },\n    frequency_penalty: { \n      id: 'frequency_penalty',\n      label: 'Frequency Penalty',\n      type: 'slider', \n      min: 0, \n      max: 2, \n      step: 0.1,\n      allowDirectInput: true,\n      description: \"Discourages repetition of the same words and phrases. Higher values produce more varied text.\",\n      tab: 'repetition'\n    },\n    presence_penalty: { \n      id: 'presence_penalty',\n      label: 'Presence Penalty',\n      type: 'slider', \n      min: 0, \n      max: 2, \n      step: 0.1,\n      allowDirectInput: true,\n      description: \"Encourages the model to talk about new topics. Higher values discourage repeating themes.\",\n      tab: 'repetition'\n    },\n    streaming: {\n      id: 'streaming',\n      label: 'Enable Streaming',\n      type: 'boolean',\n      description: \"Receive responses in real-time as they're generated instead of waiting for the complete reply.\",\n      tab: 'general'\n    },\n    systemPrompt: {\n      id: 'systemPrompt',\n      label: 'System Prompt',\n      type: 'textarea',\n      description: \"Default instructions given to the AI at the start of every conversation. Used to guide the AI's behavior and capabilities.\",\n      placeholder: \"You are a helpful AI assistant...\",\n      tab: 'system'\n    }\n  }), []);\n\n  // Tab definitions\n  const tabs = [\n    { id: 'general', label: 'General', icon: <IconStream /> },\n    { id: 'system', label: 'System', icon: <IconSystem /> },\n    { id: 'generation', label: 'Generation', icon: <IconSlider /> },\n    { id: 'output', label: 'Output', icon: <IconOutput /> },\n    { id: 'repetition', label: 'Repetition', icon: <IconRepeat /> }\n  ];\n\n  // Render a setting control based on its type\n  const renderSettingControl = (settingId) => {\n    const config = settingConfig[settingId];\n    if (!config) return null;\n    \n    let value = settings[settingId];\n    const itemClass = `${styles.settingItem} ${animateItems ? styles.animate : ''}`;\n    \n    // If this is the system prompt, customize it with the user's name\n    if (settingId === 'systemPrompt') {\n      // Don't modify the actual stored settings, just what's displayed\n      value = value.replace(/Nikhil/g, userName);\n    }\n    \n    switch (config.type) {\n      case 'boolean':\n        return (\n          <div key={config.id} className={itemClass}>\n            <BooleanControl\n              id={config.id}\n              label={config.label}\n              isChecked={value}\n              onChange={val => updateSetting(config.id, val)}\n              tooltip={config.description}\n            />\n          </div>\n        );\n        \n      case 'slider':\n        return (\n          <div key={config.id} className={itemClass}>\n            <SettingsSlider\n              id={config.id}\n              label={config.label}\n              value={value}\n              min={config.min}\n              max={config.max}\n              step={config.step}\n              onChange={val => updateSetting(config.id, val)}\n              tooltip={config.description}\n              allowDirectInput={config.allowDirectInput}\n            />\n          </div>\n        );\n        \n      case 'textarea':\n        return (\n          <div key={config.id} className={itemClass}>\n            <TextAreaControl\n              id={config.id}\n              label={config.label}\n              value={value}\n              onChange={(val) => {\n                // Special handling for systemPrompt to preserve \"Nikhil\" in storage\n                if (config.id === 'systemPrompt') {\n                  // If user has changed something other than the name, we need to make sure\n                  // we save with \"Nikhil\" always used in the storage\n                  const standardizedVal = val.replace(new RegExp(userName, 'g'), 'Nikhil');\n                  updateSetting(config.id, standardizedVal);\n                } else {\n                  updateSetting(config.id, val);\n                }\n              }}\n              tooltip={config.description}\n              placeholder={config.placeholder}\n            />\n          </div>\n        );\n        \n      default:\n        return null;\n    }\n  };\n  \n  // Get settings for the active tab\n  const activeSettings = Object.keys(settingConfig).filter(\n    key => settingConfig[key].tab === activeTab\n  );\n\n  return (\n    <>\n      {/* Backdrop overlay */}\n      <div \n        className={`${styles.overlay} ${isOpen ? styles.overlayOpen : ''}`}\n        onClick={onClose}\n        aria-hidden=\"true\"\n      />\n      \n      {/* Settings panel */}\n      <div \n        className={`${styles.settingsPanel} ${isOpen ? styles.open : ''}`}\n        onClick={(e) => e.stopPropagation()}\n        role=\"dialog\"\n        aria-modal=\"true\"\n        aria-labelledby=\"settings-title\"\n      >\n        {/* Header */}\n        <div className={styles.header}>\n          <h2 id=\"settings-title\" className={styles.title}>Settings</h2>\n          \n          {/* User Profile Section */}\n          {currentUser && (\n            <div className={styles.userProfile}>\n              {currentUser.photoURL ? (\n                <img \n                  src={currentUser.photoURL} \n                  alt={`${userName}'s profile`}\n                  className={styles.userAvatar}\n                />\n              ) : (\n                <div className={styles.userInitial}>\n                  {userName.charAt(0).toUpperCase()}\n                </div>\n              )}\n              <span className={styles.userName}>{userName}</span>\n            </div>\n          )}\n          \n          <button \n            onClick={onClose} \n            className={styles.closeButton} \n            aria-label=\"Close settings\"\n            title=\"Close settings\"\n          >\n            <IconClose />\n          </button>\n        </div>\n        \n        {/* Tab navigation */}\n        <div className={styles.tabsContainer}>\n          {tabs.map(tab => (\n            <button\n              key={tab.id}\n              className={`${styles.tabButton} ${activeTab === tab.id ? styles.activeTab : ''}`}\n              onClick={() => setActiveTab(tab.id)}\n              aria-selected={activeTab === tab.id}\n              role=\"tab\"\n              title={tab.label}\n            >\n              <span className={styles.tabIcon}>{tab.icon}</span>\n              <span className={styles.tabLabel}>{tab.label}</span>\n            </button>\n          ))}\n        </div>\n        \n        {/* Content area */}\n        <div className={styles.content}>\n          {/* Conditional rendering based on active tab */}\n          {activeTab === 'general' && (\n            <SettingsGroup title=\"General Settings\">\n              {/* Custom toggle for streaming */}\n              {renderSettingControl('streaming')}\n              \n              {/* Model cache section */}\n              <div className={`${styles.settingItem} ${animateItems ? styles.animate : ''}`} style={{ animationDelay: '100ms' }}>\n                <div className={styles.settingHeader}>\n                  <div className={styles.headingWithIcon}>\n                    <IconCache />\n                    <label className={styles.settingLabel}>Model Caching</label>\n                  </div>\n                </div>\n                <BooleanControl\n                  id=\"modelCache\"\n                  label=\"Enable Model Cache\"\n                  isChecked={cacheEnabled}\n                  onChange={toggleCache}\n                  tooltip=\"Store model data in your browser to reduce API calls and improve loading times.\"\n                />\n                <button \n                  onClick={refreshModels} \n                  className={styles.refreshButton}\n                  disabled={!cacheEnabled}\n                >\n                  <IconRefresh /> Refresh Model Data\n                </button>\n              </div>\n            </SettingsGroup>\n          )}\n          \n          {/* Other tabs */}\n          {activeTab !== 'general' && (\n            <SettingsGroup title={`${tabs.find(t => t.id === activeTab)?.label} Settings`}>\n              {activeSettings.map((settingId, index) => (\n                <div key={settingId} style={{ animationDelay: `${index * 50}ms` }}>\n                  {renderSettingControl(settingId)}\n                </div>\n              ))}\n            </SettingsGroup>\n          )}\n        </div>\n        \n        {/* Footer */}\n        <div className={styles.footer}>\n          <button \n            onClick={resetSettings} \n            className={styles.resetButton}\n            aria-label=\"Reset all settings to default values\"\n          >\n            Reset to Defaults\n          </button>\n          <button \n            onClick={onClose} \n            className={styles.applyButton}\n            aria-label=\"Save settings and close panel\"\n          >\n            Done\n          </button>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default SettingsPanel; "],"names":["SettingsGroup","_ref","title","description","children","defaultExpanded","id","isExpanded","setIsExpanded","useState","toggleExpanded","_jsxs","className","styles","group","expanded","header","onClick","role","tabIndex","onKeyDown","e","key","preventDefault","titleContainer","_jsx","expandButton","stopPropagation","width","height","viewBox","xmlns","expandIcon","fillRule","clipRule","d","content","createIcon","path","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","IconSlider","IconStream","IconCache","IconOutput","IconRepeat","IconClose","IconRefresh","InfoIcon","cx","cy","r","x1","y1","x2","y2","IconSystem","SettingsSlider","memo","label","value","min","max","step","onChange","disabled","tooltip","size","allowDirectInput","inputValue","setInputValue","toString","useEffect","percentage","displayValue","Number","toFixed","sizeClass","small","large","sliderContainer","labelContainer","htmlFor","tooltipWrapper","infoIcon","type","numberInput","target","onBlur","handleInputBlur","newValue","parseFloat","isNaN","Math","blur","sliderTrack","sliderFill","style","slider","displayName","BooleanControl","isChecked","variant","containerClass","switchContainer","toggleContainer","trackClass","switchTrack","toggleTrack","thumbClass","switchThumb","toggleThumb","toggleLabel","labelText","checked","hiddenInput","srOnly","TextAreaControl","placeholder","rows","localValue","setLocalValue","handleBlur","textAreaControl","textarea","ctrlKey","SettingsPanel","_tabs$find","isOpen","onClose","settings","updateSetting","resetSettings","useSettings","cacheEnabled","toggleCache","refreshModels","useCacheToggle","currentUser","useAuth","activeTab","setActiveTab","animateItems","setAnimateItems","userName","email","timer","setTimeout","clearTimeout","settingConfig","useMemo","temperature","tab","top_p","max_tokens","frequency_penalty","presence_penalty","streaming","systemPrompt","tabs","icon","renderSettingControl","settingId","config","itemClass","settingItem","animate","replace","val","standardizedVal","RegExp","activeSettings","Object","keys","filter","_Fragment","overlay","overlayOpen","settingsPanel","open","userProfile","photoURL","src","alt","userAvatar","userInitial","charAt","toUpperCase","closeButton","tabsContainer","map","tabButton","tabIcon","tabLabel","animationDelay","settingHeader","headingWithIcon","settingLabel","refreshButton","find","t","index","footer","resetButton","applyButton"],"sourceRoot":""}