{"version":3,"file":"static/js/vendor.firebase-1b4271fd.0242e489d8.chunk.v1_7_5.js","mappings":"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","sources":["../node_modules/@firebase/logger/src/logger.ts","../node_modules/@firebase/component/src/component.ts","../node_modules/@firebase/component/src/constants.ts","../node_modules/@firebase/component/src/provider.ts","../node_modules/@firebase/component/src/component_container.ts","../node_modules/@firebase/util/dist/postinstall.mjs"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type LogLevelString =\n  | 'debug'\n  | 'verbose'\n  | 'info'\n  | 'warn'\n  | 'error'\n  | 'silent';\n\nexport interface LogOptions {\n  level: LogLevelString;\n}\n\nexport type LogCallback = (callbackParams: LogCallbackParams) => void;\n\nexport interface LogCallbackParams {\n  level: LogLevelString;\n  message: string;\n  args: unknown[];\n  type: string;\n}\n\n/**\n * A container for all of the Logger instances\n */\nexport const instances: Logger[] = [];\n\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\nexport enum LogLevel {\n  DEBUG,\n  VERBOSE,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\nconst levelStringToEnum: { [key in LogLevelString]: LogLevel } = {\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n\n/**\n * The default log level\n */\nconst defaultLogLevel: LogLevel = LogLevel.INFO;\n\n/**\n * We allow users the ability to pass their own log handler. We will pass the\n * type of log, the current log level, and any other arguments passed (i.e. the\n * messages that the user wants to log) to this function.\n */\nexport type LogHandler = (\n  loggerInstance: Logger,\n  logType: LogLevel,\n  ...args: unknown[]\n) => void;\n\n/**\n * By default, `console.debug` is not displayed in the developer console (in\n * chrome). To avoid forcing users to have to opt-in to these logs twice\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n * logs to the `console.log` function.\n */\nconst ConsoleMethod = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.VERBOSE]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\n\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\nconst defaultLogHandler: LogHandler = (instance, logType, ...args): void => {\n  if (logType < instance.logLevel) {\n    return;\n  }\n  const now = new Date().toISOString();\n  const method = ConsoleMethod[logType as keyof typeof ConsoleMethod];\n  if (method) {\n    console[method as 'log' | 'info' | 'warn' | 'error'](\n      `[${now}]  ${instance.name}:`,\n      ...args\n    );\n  } else {\n    throw new Error(\n      `Attempted to log a message with an invalid logType (value: ${logType})`\n    );\n  }\n};\n\nexport class Logger {\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  constructor(public name: string) {\n    /**\n     * Capture the current instance for later use\n     */\n    instances.push(this);\n  }\n\n  /**\n   * The log level of the given Logger instance.\n   */\n  private _logLevel = defaultLogLevel;\n\n  get logLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  set logLevel(val: LogLevel) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n    this._logLevel = val;\n  }\n\n  // Workaround for setter/getter having to be the same type.\n  setLogLevel(val: LogLevel | LogLevelString): void {\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n  }\n\n  /**\n   * The main (internal) log handler for the Logger instance.\n   * Can be set to a new function in internal package code but not by user.\n   */\n  private _logHandler: LogHandler = defaultLogHandler;\n  get logHandler(): LogHandler {\n    return this._logHandler;\n  }\n  set logHandler(val: LogHandler) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n    this._logHandler = val;\n  }\n\n  /**\n   * The optional, additional, user-defined log handler for the Logger instance.\n   */\n  private _userLogHandler: LogHandler | null = null;\n  get userLogHandler(): LogHandler | null {\n    return this._userLogHandler;\n  }\n  set userLogHandler(val: LogHandler | null) {\n    this._userLogHandler = val;\n  }\n\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  debug(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n  log(...args: unknown[]): void {\n    this._userLogHandler &&\n      this._userLogHandler(this, LogLevel.VERBOSE, ...args);\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n  info(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n  warn(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n  error(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n}\n\nexport function setLogLevel(level: LogLevelString | LogLevel): void {\n  instances.forEach(inst => {\n    inst.setLogLevel(level);\n  });\n}\n\nexport function setUserLogHandler(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  for (const instance of instances) {\n    let customLogLevel: LogLevel | null = null;\n    if (options && options.level) {\n      customLogLevel = levelStringToEnum[options.level];\n    }\n    if (logCallback === null) {\n      instance.userLogHandler = null;\n    } else {\n      instance.userLogHandler = (\n        instance: Logger,\n        level: LogLevel,\n        ...args: unknown[]\n      ) => {\n        const message = args\n          .map(arg => {\n            if (arg == null) {\n              return null;\n            } else if (typeof arg === 'string') {\n              return arg;\n            } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n              return arg.toString();\n            } else if (arg instanceof Error) {\n              return arg.message;\n            } else {\n              try {\n                return JSON.stringify(arg);\n              } catch (ignored) {\n                return null;\n              }\n            }\n          })\n          .filter(arg => arg)\n          .join(' ');\n        if (level >= (customLogLevel ?? instance.logLevel)) {\n          logCallback({\n            level: LogLevel[level].toLowerCase() as LogLevelString,\n            message,\n            args,\n            type: instance.name\n          });\n        }\n      };\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name,\n  onInstanceCreatedCallback\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> {\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = {};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  onInstanceCreated: onInstanceCreatedCallback<T> | null = null;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) {}\n\n  setInstantiationMode(mode: InstantiationMode): this {\n    this.instantiationMode = mode;\n    return this;\n  }\n\n  setMultipleInstances(multipleInstances: boolean): this {\n    this.multipleInstances = multipleInstances;\n    return this;\n  }\n\n  setServiceProps(props: Dictionary): this {\n    this.serviceProps = props;\n    return this;\n  }\n\n  setInstanceCreatedCallback(callback: onInstanceCreatedCallback<T>): this {\n    this.onInstanceCreated = callback;\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\nimport { ComponentContainer } from './component_container';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport {\n  InitializeOptions,\n  InstantiationMode,\n  Name,\n  NameServiceMapping,\n  OnInitCallBack\n} from './types';\nimport { Component } from './component';\n\n/**\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\n * NameServiceMapping[T] is an alias for the type of the instance\n */\nexport class Provider<T extends Name> {\n  private component: Component<T> | null = null;\n  private readonly instances: Map<string, NameServiceMapping[T]> = new Map();\n  private readonly instancesDeferred: Map<\n    string,\n    Deferred<NameServiceMapping[T]>\n  > = new Map();\n  private readonly instancesOptions: Map<string, Record<string, unknown>> =\n    new Map();\n  private onInitCallbacks: Map<string, Set<OnInitCallBack<T>>> = new Map();\n\n  constructor(\n    private readonly name: T,\n    private readonly container: ComponentContainer\n  ) {}\n\n  /**\n   * @param identifier A provider can provide multiple instances of a service\n   * if this.component.multipleInstances is true.\n   */\n  get(identifier?: string): Promise<NameServiceMapping[T]> {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      const deferred = new Deferred<NameServiceMapping[T]>();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n\n      if (\n        this.isInitialized(normalizedIdentifier) ||\n        this.shouldAutoInitialize()\n      ) {\n        // initialize the service if it can be auto-initialized\n        try {\n          const instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n          if (instance) {\n            deferred.resolve(instance);\n          }\n        } catch (e) {\n          // when the instance factory throws an exception during get(), it should not cause\n          // a fatal error. We just return the unresolved promise in this case.\n        }\n      }\n    }\n\n    return this.instancesDeferred.get(normalizedIdentifier)!.promise;\n  }\n\n  /**\n   *\n   * @param options.identifier A provider can provide multiple instances of a service\n   * if this.component.multipleInstances is true.\n   * @param options.optional If optional is false or not provided, the method throws an error when\n   * the service is not immediately available.\n   * If optional is true, the method returns null if the service is not immediately available.\n   */\n  getImmediate(options: {\n    identifier?: string;\n    optional: true;\n  }): NameServiceMapping[T] | null;\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: false;\n  }): NameServiceMapping[T];\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: boolean;\n  }): NameServiceMapping[T] | null {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      options?.identifier\n    );\n    const optional = options?.optional ?? false;\n\n    if (\n      this.isInitialized(normalizedIdentifier) ||\n      this.shouldAutoInitialize()\n    ) {\n      try {\n        return this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        });\n      } catch (e) {\n        if (optional) {\n          return null;\n        } else {\n          throw e;\n        }\n      }\n    } else {\n      // In case a component is not initialized and should/cannot be auto-initialized at the moment, return null if the optional flag is set, or throw\n      if (optional) {\n        return null;\n      } else {\n        throw Error(`Service ${this.name} is not available`);\n      }\n    }\n  }\n\n  getComponent(): Component<T> | null {\n    return this.component;\n  }\n\n  setComponent(component: Component<T>): void {\n    if (component.name !== this.name) {\n      throw Error(\n        `Mismatching Component ${component.name} for Provider ${this.name}.`\n      );\n    }\n\n    if (this.component) {\n      throw Error(`Component for ${this.name} has already been provided`);\n    }\n\n    this.component = component;\n\n    // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n    if (!this.shouldAutoInitialize()) {\n      return;\n    }\n\n    // if the service is eager, initialize the default instance\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\n      } catch (e) {\n        // when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n\n    // Create service instances for the pending promises and resolve them\n    // NOTE: if this.multipleInstances is false, only the default instance will be created\n    // and all promises with resolve with it regardless of the identifier.\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n\n      try {\n        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n        const instance = this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        })!;\n        instanceDeferred.resolve(instance);\n      } catch (e) {\n        // when the instance factory throws an exception, it should not cause\n        // a fatal error. We just leave the promise unresolved.\n      }\n    }\n  }\n\n  clearInstance(identifier: string = DEFAULT_ENTRY_NAME): void {\n    this.instancesDeferred.delete(identifier);\n    this.instancesOptions.delete(identifier);\n    this.instances.delete(identifier);\n  }\n\n  // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n  async delete(): Promise<void> {\n    const services = Array.from(this.instances.values());\n\n    await Promise.all([\n      ...services\n        .filter(service => 'INTERNAL' in service) // legacy services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any).INTERNAL!.delete()),\n      ...services\n        .filter(service => '_delete' in service) // modularized services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any)._delete())\n    ]);\n  }\n\n  isComponentSet(): boolean {\n    return this.component != null;\n  }\n\n  isInitialized(identifier: string = DEFAULT_ENTRY_NAME): boolean {\n    return this.instances.has(identifier);\n  }\n\n  getOptions(identifier: string = DEFAULT_ENTRY_NAME): Record<string, unknown> {\n    return this.instancesOptions.get(identifier) || {};\n  }\n\n  initialize(opts: InitializeOptions = {}): NameServiceMapping[T] {\n    const { options = {} } = opts;\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      opts.instanceIdentifier\n    );\n    if (this.isInitialized(normalizedIdentifier)) {\n      throw Error(\n        `${this.name}(${normalizedIdentifier}) has already been initialized`\n      );\n    }\n\n    if (!this.isComponentSet()) {\n      throw Error(`Component ${this.name} has not been registered yet`);\n    }\n\n    const instance = this.getOrInitializeService({\n      instanceIdentifier: normalizedIdentifier,\n      options\n    })!;\n\n    // resolve any pending promise waiting for the service instance\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedDeferredIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n      if (normalizedIdentifier === normalizedDeferredIdentifier) {\n        instanceDeferred.resolve(instance);\n      }\n    }\n\n    return instance;\n  }\n\n  /**\n   *\n   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\n   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\n   *\n   * @param identifier An optional instance identifier\n   * @returns a function to unregister the callback\n   */\n  onInit(callback: OnInitCallBack<T>, identifier?: string): () => void {\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    const existingCallbacks =\n      this.onInitCallbacks.get(normalizedIdentifier) ??\n      new Set<OnInitCallBack<T>>();\n    existingCallbacks.add(callback);\n    this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\n\n    const existingInstance = this.instances.get(normalizedIdentifier);\n    if (existingInstance) {\n      callback(existingInstance, normalizedIdentifier);\n    }\n\n    return () => {\n      existingCallbacks.delete(callback);\n    };\n  }\n\n  /**\n   * Invoke onInit callbacks synchronously\n   * @param instance the service instance`\n   */\n  private invokeOnInitCallbacks(\n    instance: NameServiceMapping[T],\n    identifier: string\n  ): void {\n    const callbacks = this.onInitCallbacks.get(identifier);\n    if (!callbacks) {\n      return;\n    }\n    for (const callback of callbacks) {\n      try {\n        callback(instance, identifier);\n      } catch {\n        // ignore errors in the onInit callback\n      }\n    }\n  }\n\n  private getOrInitializeService({\n    instanceIdentifier,\n    options = {}\n  }: {\n    instanceIdentifier: string;\n    options?: Record<string, unknown>;\n  }): NameServiceMapping[T] | null {\n    let instance = this.instances.get(instanceIdentifier);\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(this.container, {\n        instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n        options\n      });\n      this.instances.set(instanceIdentifier, instance!);\n      this.instancesOptions.set(instanceIdentifier, options);\n\n      /**\n       * Invoke onInit listeners.\n       * Note this.component.onInstanceCreated is different, which is used by the component creator,\n       * while onInit listeners are registered by consumers of the provider.\n       */\n      this.invokeOnInitCallbacks(instance!, instanceIdentifier);\n\n      /**\n       * Order is important\n       * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\n       * makes `isInitialized()` return true.\n       */\n      if (this.component.onInstanceCreated) {\n        try {\n          this.component.onInstanceCreated(\n            this.container,\n            instanceIdentifier,\n            instance!\n          );\n        } catch {\n          // ignore errors in the onInstanceCreatedCallback\n        }\n      }\n    }\n\n    return instance || null;\n  }\n\n  private normalizeInstanceIdentifier(\n    identifier: string = DEFAULT_ENTRY_NAME\n  ): string {\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  }\n\n  private shouldAutoInitialize(): boolean {\n    return (\n      !!this.component &&\n      this.component.instantiationMode !== InstantiationMode.EXPLICIT\n    );\n  }\n}\n\n// undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier: string): string | undefined {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\n\nfunction isComponentEager<T extends Name>(component: Component<T>): boolean {\n  return component.instantiationMode === InstantiationMode.EAGER;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Provider } from './provider';\nimport { Component } from './component';\nimport { Name } from './types';\n\n/**\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\n */\nexport class ComponentContainer {\n  private readonly providers = new Map<string, Provider<Name>>();\n\n  constructor(private readonly name: string) {}\n\n  /**\n   *\n   * @param component Component being added\n   * @param overwrite When a component with the same name has already been registered,\n   * if overwrite is true: overwrite the existing component with the new component and create a new\n   * provider with the new component. It can be useful in tests where you want to use different mocks\n   * for different tests.\n   * if overwrite is false: throw an exception\n   */\n  addComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      throw new Error(\n        `Component ${component.name} has already been registered with ${this.name}`\n      );\n    }\n\n    provider.setComponent(component);\n  }\n\n  addOrOverwriteComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n\n    this.addComponent(component);\n  }\n\n  /**\n   * getProvider provides a type safe interface where it can only be called with a field name\n   * present in NameServiceMapping interface.\n   *\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\n   * themselves.\n   */\n  getProvider<T extends Name>(name: T): Provider<T> {\n    if (this.providers.has(name)) {\n      return this.providers.get(name) as unknown as Provider<T>;\n    }\n\n    // create a Provider for a service that hasn't registered with Firebase\n    const provider = new Provider<T>(name, this);\n    this.providers.set(name, provider as unknown as Provider<Name>);\n\n    return provider as Provider<T>;\n  }\n\n  getProviders(): Array<Provider<Name>> {\n    return Array.from(this.providers.values());\n  }\n}\n","const getDefaultsFromPostinstall = () => (undefined);\nexport { getDefaultsFromPostinstall };"],"names":["instances","LogLevel","levelStringToEnum","DEBUG","VERBOSE","INFO","WARN","ERROR","SILENT","defaultLogLevel","ConsoleMethod","defaultLogHandler","instance","logType","logLevel","Date","toISOString","Error","_len","arguments","length","args","Array","_key","Logger","constructor","name","_logLevel","_logHandler","_userLogHandler","push","this","val","TypeError","setLogLevel","logHandler","userLogHandler","debug","_len2","_key2","log","_len3","_key3","info","_len4","_key4","warn","_len5","_key5","error","_len6","_key6","Component","instanceFactory","type","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","setInstantiationMode","mode","setMultipleInstances","setServiceProps","props","setInstanceCreatedCallback","callback","DEFAULT_ENTRY_NAME","Provider","container","component","Map","instancesDeferred","instancesOptions","onInitCallbacks","get","identifier","normalizedIdentifier","normalizeInstanceIdentifier","has","deferred","Deferred","set","isInitialized","shouldAutoInitialize","getOrInitializeService","instanceIdentifier","resolve","e","promise","getImmediate","options","optional","_a","getComponent","setComponent","isComponentEager","instanceDeferred","entries","clearInstance","undefined","delete","services","from","values","Promise","all","filter","service","map","INTERNAL","_delete","isComponentSet","getOptions","initialize","opts","onInit","existingCallbacks","Set","add","existingInstance","invokeOnInitCallbacks","callbacks","_ref","ComponentContainer","providers","addComponent","provider","getProvider","addOrOverwriteComponent","getProviders","getDefaultsFromPostinstall"],"sourceRoot":""}