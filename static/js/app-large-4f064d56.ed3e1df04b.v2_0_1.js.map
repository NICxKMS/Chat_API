{"version":3,"file":"static/js/app-large-4f064d56.ed3e1df04b.v2_0_1.js","mappings":"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","sources":["contexts/LoadingContext.js","contexts/AuthContext.js","contexts/SettingsContext.js","contexts/ChatStateContext.js","contexts/ModelContext.js","contexts/ContextManager.js","App.js","contexts/ChatControlContext.js","contexts/ChatStatusContext.js","contexts/ChatHistoryContext.js","contexts/ApiContext.js","contexts/PerformanceMetricsContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback } from 'react';\n\n// Context to track multiple loading tags\nconst LoadingContext = createContext(null);\n\n/**\n * Provider to wrap application and manage loading states by tags\n */\nexport const LoadingProvider = ({ children }) => {\n  const [loadingMap, setLoadingMap] = useState({});\n\n  const setLoading = useCallback((tag, isLoading) => {\n    setLoadingMap(prev => ({ ...prev, [tag]: isLoading }));\n  }, []);\n\n  const isLoading = useCallback(tag => !!loadingMap[tag], [loadingMap]);\n  const anyLoading = Object.values(loadingMap).some(val => val);\n\n  return (\n    <LoadingContext.Provider value={{ setLoading, isLoading, anyLoading }}>\n      {children}\n    </LoadingContext.Provider>\n  );\n};\n\n/**\n * Hook to control loading for a specific tag\n * @param {string} tag - Unique identifier for loading scope\n * @returns {[boolean, function, function]} [isLoading, startLoading, stopLoading]\n */\nexport const useLoading = (tag) => {\n  const context = useContext(LoadingContext);\n  if (!context) throw new Error('useLoading must be used within LoadingProvider');\n  const { setLoading, isLoading } = context;\n  const startLoading = useCallback(() => setLoading(tag, true), [setLoading, tag]);\n  const stopLoading = useCallback(() => setLoading(tag, false), [setLoading, tag]);\n  return [isLoading(tag), startLoading, stopLoading];\n};\n\n/**\n * Hook to check if any loading is active globally\n * @returns {boolean}\n */\nexport const useGlobalLoading = () => {\n  const context = useContext(LoadingContext);\n  if (!context) throw new Error('useGlobalLoading must be used within LoadingProvider');\n  return context.anyLoading;\n}; ","import { createContext, useContext, useState, useEffect, useCallback, useMemo } from 'react';\nimport { useToast } from './ToastContext';\nimport { useLoading } from './LoadingContext';\n// Firebase is dynamically imported to avoid blocking\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [idToken, setIdToken] = useState(null);\n  const [loading, setLoading] = useState(false); // Changed to false initially - we're proceeding anonymously\n  // Sync with global loading context for auth\n  const [, startAuthLoading, stopAuthLoading] = useLoading('auth');\n  const [error, setError] = useState(null);\n  const [isLoggingIn, setIsLoggingIn] = useState(false); // State to trigger login UI\n  const [isFirebaseReady, setIsFirebaseReady] = useState(false); \n  const { showToast } = useToast();\n\n  useEffect(() => {\n    if (loading) startAuthLoading(); else stopAuthLoading();\n  }, [loading, startAuthLoading, stopAuthLoading]);\n\n  const ensureFirebaseReady = useCallback(async () => {\n    if (isFirebaseReady) return true;\n    try {\n      const { getFirebaseAuth } = await import(/* webpackChunkName: \"firebase-config\" */ '../firebaseConfig');\n      const auth = getFirebaseAuth(); // This ensures initialization via firebaseConfig.js\n      if (auth) {\n        console.log(\"Firebase is ready through ensureFirebaseReady.\");\n        setIsFirebaseReady(true);\n        return true;\n      }\n      throw new Error(\"Firebase Auth could not be initialized by ensureFirebaseReady\");\n    } catch (e) {\n      console.error(\"Failed to ensure Firebase readiness:\", e);\n      setError(e.message || \"Failed to initialize authentication service.\");\n      setIsFirebaseReady(false);\n      showToast({ type: 'error', message: e.message || \"Failed to initialize auth service.\" });\n      return false;\n    }\n  }, [isFirebaseReady, showToast]);\n\n  const login = useCallback(async () => {\n    console.log(\"Login button clicked, setting isLoggingIn to true.\");\n    setIsLoggingIn(true);\n    // Ensure Firebase is ready when login process starts, LoginModal might need it soon.\n    await ensureFirebaseReady(); \n  }, [setIsLoggingIn, ensureFirebaseReady]);\n\n  const logout = useCallback(async () => {\n    const ready = await ensureFirebaseReady();\n    if (!ready) {\n      console.log(\"Firebase not ready, cannot logout.\");\n      showToast({ type: 'error', message: 'Authentication service not ready for logout.' });\n      return;\n    }\n    const { getFirebaseAuth } = await import(/* webpackChunkName: \"firebase-config\" */ '../firebaseConfig');\n    const { signOut: firebaseSignOut } = await import(/* webpackChunkName: \"firebase-auth\" */ 'firebase/auth');\n    const auth = getFirebaseAuth();\n    if (!auth) {\n      const msg = \"Firebase not initialized for logout.\";\n      setError(msg);\n      showToast({ type: 'error', message: msg });\n      return;\n    }\n    try {\n      await firebaseSignOut(auth);\n      console.log(\"Sign out successful.\");\n    } catch (err) {\n      console.error(\"Logout failed:\", err);\n      const msg = err.message || 'Failed to logout.';\n      setError(msg);\n      showToast({ type: 'error', message: msg });\n    }\n  }, [ensureFirebaseReady, setError, showToast]);\n\n  useEffect(() => {\n    let unsubscribe = null;\n\n    const initializeAuthListener = async () => {\n      // Attempt to make Firebase ready if not already, e.g., for existing sessions\n      const ready = await ensureFirebaseReady();\n      if (!ready) {\n        console.log(\"Firebase not ready, skipping auth listener setup.\");\n        return; // If still not ready, abort.\n      }\n      \n      setLoading(true);\n      // Dynamically import Firebase auth\n      const { getFirebaseAuth } = await import(/* webpackChunkName: \"firebase-config\" */ '../firebaseConfig');\n      const { onAuthStateChanged: firebaseOnAuthStateChanged } = await import(/* webpackChunkName: \"firebase-auth\" */ 'firebase/auth');\n      \n      const auth = getFirebaseAuth();\n      if (!auth) {\n        console.warn(\"Auth service not available for onAuthStateChanged listener.\");\n        setLoading(false);\n        return;\n      }\n      \n      console.log(\"Setting up Firebase onAuthStateChanged listener.\");\n      unsubscribe = firebaseOnAuthStateChanged(auth, async (user) => {\n        setCurrentUser(user);\n        if (user) {\n          try {\n            const token = await user.getIdToken();\n            setIdToken(token);\n            try { localStorage.setItem('idToken', token); } catch (e) { console.warn('Failed to cache idToken', e); }\n            setError(null); \n            setIsLoggingIn(false); \n            console.log(\"User signed in, token obtained.\");\n          } catch (err) {\n            console.error(\"Failed to get ID token:\", err);\n            const msg = \"Failed to get authentication token.\";\n            setError(msg);\n            showToast({ type: 'error', message: msg });\n            setIdToken(null);\n            try {\n                const { signOut: firebaseSignOutFallback } = await import(/* webpackChunkName: \"firebase-auth\" */ 'firebase/auth');\n                await firebaseSignOutFallback(auth);\n            } catch (signOutError) {\n                console.error(\"Fallback sign out failed:\", signOutError);\n            }\n          }\n        } else {\n          setIdToken(null);\n          try { localStorage.removeItem('idToken'); } catch (e) { console.warn('Failed to remove cached idToken', e); }\n          setIsLoggingIn(false); \n          console.log(\"User signed out.\");\n        }\n        setLoading(false); \n      });\n    };\n\n    initializeAuthListener();\n\n    return () => {\n      if (typeof unsubscribe === 'function') {\n        console.log(\"Cleaning up Firebase onAuthStateChanged listener.\");\n        unsubscribe();\n      }\n    };\n  }, [showToast, ensureFirebaseReady]); // ensureFirebaseReady is a dependency\n\n  const value = useMemo(() => ({\n    currentUser,\n    idToken,\n    loading,\n    error,\n    login,\n    logout,\n    isAuthenticated: !!currentUser && !!idToken,\n    isLoggingIn,\n    setIsLoggingIn,\n    isFirebaseReady, // expose this if LoginModal needs to check it\n    ensureFirebaseReady // Expose this if LoginModal needs to trigger/wait for it\n  }), [currentUser, idToken, loading, error, login, logout, isLoggingIn, setIsLoggingIn, isFirebaseReady, ensureFirebaseReady]);\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}; ","import { createContext, useContext, useCallback, useMemo } from 'react';\nimport { useLocalStorage } from '../hooks/useLocalStorage';\n\n// Default settings values\nconst DEFAULT_SETTINGS = {\n  temperature: 0.7,\n  top_p: 1.0,\n  max_tokens: 8191,\n  frequency_penalty: 0,\n  presence_penalty: 0,\n  streaming: true,\n  systemPrompt: `# 🧠 System Instruction: University-Level AI Assistant Guide\n\n**You are a knowledgeable, friendly, and supportive university-level assistant.**\nYour mission is to help students understand complex topics with clarity, encouragement, and structure—like a brilliant but approachable mentor or senior student.\n\n---\n\n## ✨ Core Principles for Every Response\n\nTo ensure clarity, efficiency, and student comprehension, adhere to these fundamental principles in **every response**:\n\n*   **📊 Prioritize Visuals over Dense Text:** **Always try to use tabular or other visual information in place of text if possible.** Use tables, structured lists, and simplified diagrams (described in text) to convey maximum information in minimal words, making concepts immediately graspable.\n*   **🎯 Direct, Concise & Focused:** **Only answer what is directly asked for, and do not explain in detail unless explicitly requested** (e.g., \"explain in detail,\" \"tell me more\"). Always strive for **concise and compact** explanations, avoiding extraneous information. Provide comprehensive content or deeper dives only when prompted or when the topic's inherent complexity *for the specific question* absolutely necessitates it for foundational understanding.\n*   **📐 Mandatory Math & Code Formatting:** Correct markdown formatting for **mathematical formulas ($ $$)** and **code blocks** is strictly required whenever they are included.\n\n---\n\n## 📝 Response Structure & Content Guidelines\n\nWhile highly adaptable to the specific query, aim to incorporate these elements for optimal learning:\n\n### ✅ 1. Welcoming Introduction\n\nStart every response with a **positive, encouraging, and supportive intro** to set a friendly and helpful tone.\n\n> *Examples:*\n> *   \"Alright! Let's break this down together—I'll explain everything step by step with clear examples and helpful tips!\"\n> *   \"You've got this! Here's a structured and easy-to-follow explanation tailored just for you.\"\n\n### 2. Adaptive Content Organization\n\nOrganize your content clearly using markdown headings and visual aids. The specific headings, their order, and their depth should **adapt to best suit the query's complexity and the required level of detail.**\n\n*   **Heading Hierarchy:** Use markdown heading levels ('##', '###', '####', etc.) to create a clear, logical, and multi-level hierarchy. **Maintain an appropriate level/depth for both headings and the content they introduce.** Avoid unnecessary deep nesting; only use more multi-level answering if explicitly requested or inherently necessary for clarity.\n*   **Emoji Usage:** Use emojis **mildly and thoughtfully**, primarily at the start of headings or to highlight key points. They should be **relevant and contextually appropriate**, subtly enhancing clarity and engagement without being overwhelming or purely decorative.\n*   **Whitespace & Readability:** Ensure generous whitespace between sections, paragraphs, and list items. Consistently use bullet points, numbered lists, and clear spacing to enhance readability.\n\n### 3. Core Explanation Elements (Flexible)\n\nIntegrate the following elements as needed, choosing their inclusion, order, and depth based on the user's request and the topic's demands:\n\n*   **Concept Definition:** What is it? Why does it matter? Define jargon.\n*   **Operational Details:** How does it work? Practical applications.\n*   **Examples:** Concrete instances, including formulas or code.\n*   **Key Insights:** Tips, best practices, common pitfalls, comparisons.\n\n### 4. Math & Code Formatting\n\n*   **📐 Math:**\n    *   Inline: '$E = mc^2$'\n    *   Block:\n        '\n        $$\n        E = mc^2\n        $$\n        '\n\n### 5. Clear Concluding Sections\n\nConclude each response with **one** summary section, using bold headers and bullets:\n\n*   '# ✅ Key Takeaways' — *Concise summary for revision.*\n*   '# 🔍 Next Steps / Related Topics' — *Suggestions for deeper exploration or application.*\n\n### 6. Offer Optional Extras\n\nAlways conclude by offering further resources or different learning formats to empower the student:\n\n> \"Would you like me to share any of these optional extras to help you even more?\"\n> *   📋 A summary table\n> *   💻 Specific code snippets\n> *   🧠 Quick revision notes\n> *   📘 Further reading suggestions\n\n---\n\n## 🗣️ Tone & Formatting Principles\n\n*   **🧑‍🏫 Tone:** Friendly, motivating, and peer-like—never robotic or dry. Aim for an approachable, expert voice.\n*   **💡 Accuracy:** Ensure all information is academically sound and precise.\n*   **🧼 Formatting Details:**\n    *   **Bold** for emphasis.\n    *   *Italics* for subtle notes or definitions.\n    *   Tables, structured lists, and simplified diagrams for dense or comparative info.\n    *   Emojis used thoughtfully to enhance context.\n\n---\n## 🌟 The Golden Rule\n\n**Prioritize clarity, accuracy, and student comprehension above all else.** Every element of your response should be directly relevant to the student's query, making learning effective and enjoyable while maintaining a high standard of presentation.`\n//   `You are a knowledgeable, friendly, and supportive university-level assistant.\n\n// For every question or topic, provide a clear, engaging, and well-structured answer, styled like an expert mentor or senior student.\n\n// Style and Structure:\n\n// Begin with a welcoming, positive intro (e.g., \"Alright! I'll break this down for you in detail section by section, with clear explanations and important points.\").\n// Organize your response into numbered sections, each with a descriptive header and an emoji (e.g., # 📚 1. Core Concept).\n// In each section, explain:\n// Core ideas and definitions\n// How things work (step-by-step, or process overview)\n// Any relevant formulas, code, or examples\n// Key points, tips, or comparisons\n// Use subheadings, bullet points, tables, and diagrams (ASCII or LaTeX) for clarity when helpful.\n// At the end, summarize with a \"Key Takeaways\" or \"Next Steps/Related Topics\" section, with quick revision notes, further reading, or suggestions for deeper exploration if relevant.\n// Always offer to provide summary tables, code snippets, or quick revision notes if the user wants them.\n// Tone: Friendly, supportive, and approachable—like a helpful peer or mentor. Formatting: Use bold, italics, emojis, markdown headers, and tables to maximize clarity.\n\n// Use emojis befitting the context\n\n// Your goal: Make complex ideas easy to understand, memorable, and actionable for the student—whether for study, projects, or curiosity.`\n//  systemPrompt: \"You are ChatGPT, a helpful and knowledgeable AI assistant. Your primary role is to assist Nikhil, a university engineering student, by providing clear, concise, and technically accurate information. Adopt a friendly and approachable tone, akin to a knowledgeable peer or mentor. Enhance your responses with relevant emojis to convey tone and emotion, making interactions more engaging. Structure your answers logically, using bullet points or numbered lists where appropriate to enhance clarity. When applicable, incorporate interactive elements such as code snippets or diagrams to facilitate deeper understanding. Encourage curiosity by suggesting related topics or questions that Nikhil might explore further. Always tailor your assistance to support Nikhil's academic and personal growth in the field of engineering\"\n};\n\n// Create settings context\nconst SettingsContext = createContext();\n\n// Custom hook for using settings\nexport const useSettings = () => {\n  const context = useContext(SettingsContext);\n  if (context === undefined) {\n    throw new Error('useSettings must be used within a SettingsProvider');\n  }\n  return context;\n};\n\n// Settings provider component\nexport const SettingsProvider = ({ children }) => {\n  // Initialize settings state with defaults, persisted to localStorage\n  const [settings, setSettings] = useLocalStorage('appSettings', DEFAULT_SETTINGS);\n  \n  // Handle individual setting updates\n  const updateSetting = useCallback((key, value) => {\n    // Ensure the key is a valid setting we manage\n    if (key in DEFAULT_SETTINGS) {\n      setSettings(prev => ({\n        ...prev,\n        [key]: value\n      }));\n    }\n  }, [setSettings]);\n  \n  // Reset settings to defaults\n  const resetSettings = useCallback(() => {\n    setSettings(DEFAULT_SETTINGS);\n  }, [setSettings]);\n  \n  // Check if temperature should be restricted based on model name/series\n  const shouldRestrictTemperature = useCallback((model) => {\n    if (!model) return false;\n    \n    // More explicit flag checking for temperature restriction\n    // Check for specific model properties that indicate temperature restriction\n    return (\n      model.requiresFixedTemperature === true || \n      (model.properties && model.properties.includes('fixed_temperature')) ||\n      (model.id && model.id.toLowerCase().startsWith('o')) ||\n      (model.series && model.series.toLowerCase() === 'o-series')\n    );\n  }, []);\n  \n  // Get current settings with potential model-specific overrides\n  const getModelAdjustedSettings = useCallback((model) => {\n    if (shouldRestrictTemperature(model)) {\n      return {\n        ...settings,\n        temperature: 1.0\n      };\n    }\n    return settings;\n  }, [settings, shouldRestrictTemperature]);\n  \n  // Memoize context value to prevent unnecessary re-renders\n  const value = useMemo(() => ({\n    settings,\n    updateSetting,\n    resetSettings,\n    shouldRestrictTemperature,\n    getModelAdjustedSettings\n  }), [\n    settings,\n    updateSetting, \n    resetSettings, \n    shouldRestrictTemperature, \n    getModelAdjustedSettings\n  ]);\n  \n  return (\n    <SettingsContext.Provider value={value}>\n      {children}\n    </SettingsContext.Provider>\n  );\n}; ","import React, { createContext, useContext, useMemo } from 'react';\nimport { useChatHistory } from './ChatHistoryContext';\nimport { useChatStatus } from './ChatStatusContext';\n\n// Context for read-only chat state\nconst ChatStateContext = createContext();\n\n// Hook to consume chat state\nexport const useChatState = () => {\n  const context = useContext(ChatStateContext);\n  if (context === undefined) {\n    throw new Error('useChatState must be used within a ChatStateProvider');\n  }\n  return context;\n};\n\n// Provider component for chat state\nexport const ChatStateProvider = ({ children }) => {\n  const { chatHistory, chatHistoryRef } = useChatHistory();\n  const { isWaitingForResponse, error } = useChatStatus();\n\n  const value = useMemo(() => ({\n    chatHistory,\n    chatHistoryRef,\n    isWaitingForResponse,\n    error\n  }), [chatHistory, chatHistoryRef, isWaitingForResponse, error]);\n\n  return (\n    <ChatStateContext.Provider value={value}>\n      {children}\n    </ChatStateContext.Provider>\n  );\n}; ","import { createContext, useContext, useState, useEffect, useCallback, useMemo, useRef } from 'react';\nimport { useApi } from './ApiContext';\nimport { useLocalStorage } from '../hooks/useLocalStorage';\nimport { useAuth } from './AuthContext';\nimport { useCacheToggle } from '../hooks/useCacheToggle';\nimport { useToast } from './ToastContext';\nimport { useLoading } from './LoadingContext';\n// Inline model processing worker via worker-loader to avoid chunk loading issues\nimport ModelProcessorWorker from '../workers/modelProcessor.js';\n// Cache expiry time in milliseconds (5 days)\nconst CACHE_EXPIRY_TIME = 5 * 24 * 60 * 60 * 1000;\n\n// Create separate contexts for models and filtering\nconst ModelContext = createContext();\nconst ModelFilterContext = createContext();\n\n// Custom hook for using model context\nexport const useModel = () => {\n  const context = useContext(ModelContext);\n  if (context === undefined) {\n    throw new Error('useModel must be used within a ModelProvider');\n  }\n  return context;\n};\n\n// Custom hook for using model filter context\nexport const useModelFilter = () => {\n  const context = useContext(ModelFilterContext);\n  if (context === undefined) {\n    throw new Error('useModelFilter must be used within a ModelProvider');\n  }\n  return context;\n};\n\n// Model provider component\nexport const ModelProvider = ({ children }) => {\n  const { cacheEnabled } = useCacheToggle();\n  const { apiUrl } = useApi();\n  const { idToken } = useAuth();\n  const { showToast } = useToast();\n  \n  // State for model data\n  const [allModels, setAllModels] = useState([]);\n  const [processedModels, setProcessedModels] = useState({});\n  const [experimentalModels, setExperimentalModels] = useState([]);\n  const [selectedModel, setSelectedModel] = useLocalStorage('selectedModel', null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  \n  // Filter state - moved to separate context\n  const [showExperimental, setShowExperimental] = useLocalStorage('showExperimental', false);\n  const [modelFilter, setModelFilter] = useState({\n    search: '',\n    categories: {\n      'Chat': true,\n      'Image': true,\n      'Embedding': true\n    }\n  });\n  \n  // Sync with global loading context\n  const [, startModelsLoading, stopModelsLoading] = useLoading('models');\n  useEffect(() => {\n    if (isLoading) startModelsLoading();\n    else stopModelsLoading();\n  }, [isLoading, startModelsLoading, stopModelsLoading]);\n  \n  // Check if cache is valid\n  const isCacheValid = useCallback((cache) => {\n    return (\n      cache &&\n      cache.timestamp &&\n      Date.now() - cache.timestamp < CACHE_EXPIRY_TIME &&\n      cache.allModels &&\n      cache.processedModels &&\n      cache.experimentalModels\n    );\n  }, []);\n  \n  // Expose isCacheValid function for external access\n  useEffect(() => {\n    // Skip during server-side rendering\n    if (typeof window === 'undefined') return;\n    window.isCacheValid = isCacheValid;\n    \n    return () => {\n      delete window.isCacheValid;\n    };\n  }, [isCacheValid]);\n  \n  // Cache models to localStorage\n  const cacheModels = useCallback((data) => {\n    try {\n      const cache = {\n        allModels: data.allModels,\n        processedModels: data.processedModels,\n        experimentalModels: data.experimentalModels,\n        timestamp: Date.now()\n      };\n      \n      localStorage.setItem('modelDropdownCache', JSON.stringify(cache));\n    } catch (error) {\n      console.error('Error caching models:', error);\n    }\n  }, []);\n  \n  // Update category filter\n  const updateCategoryFilter = useCallback((category, isChecked) => {\n    setModelFilter(prev => ({\n      ...prev,\n      categories: {\n        ...prev.categories,\n        [category]: isChecked\n      }\n    }));\n  }, []);\n  \n  // Update search filter\n  const updateSearchFilter = useCallback((searchText) => {\n    setModelFilter(prev => ({\n      ...prev,\n      search: searchText\n    }));\n  }, []);\n  \n  // Select a model\n  const selectModel = useCallback((model) => {\n    // Check if the model is actually different to prevent unnecessary updates\n    if (selectedModel?.id !== model?.id) { \n      setSelectedModel(model);\n    }\n  }, [selectedModel, setSelectedModel]);\n  \n  // Fetch models from API, optionally using auth token or override token\n  const fetchModels = useCallback(async (authRequired = false, overrideToken = null) => {\n    setIsLoading(true);\n    setError(null);\n    \n    console.log(`Fetching models from API (auth: ${authRequired})...`);\n    try {\n      const headers = { 'Accept': 'application/json' };\n      if (authRequired) {\n        // Prefer overrideToken (cached) over current idToken\n        const tokenToUse = overrideToken || idToken;\n        if (tokenToUse) {\n          headers['Authorization'] = `Bearer ${tokenToUse}`;\n        }\n      }\n      const modelsUrl = new URL('/api/models/classified', apiUrl).toString();\n      const response = await fetch(modelsUrl, { headers });\n      console.log('Models response:', response);\n      \n      if (!response.ok) {\n        let errorMsg = `Error fetching models: ${response.status}`;\n        console.error(errorMsg);\n        throw new Error(errorMsg);\n      }\n      \n      const rawData = await response.json();\n      console.log(\"[ModelContext] Raw data:\", rawData);\n      console.log(\"[ModelContext] Spawning worker for model processing...\");\n      // Offload model processing to Web Worker via inline blob\n      const worker = new ModelProcessorWorker();\n      \n      // Set up event handlers BEFORE posting the message\n      worker.onmessage = ({ data: msg }) => {\n        console.log(\"[ModelContext] Worker message received:\", msg);\n        if (msg.error) {\n          console.error('[ModelContext] Worker error:', msg.error);\n          setError(msg.error);\n          showToast({ type: 'error', message: msg.error });\n        } else {\n          const {\n            allModels: fetchedAllModels,\n            processedModels: fetchedProcessedModels,\n            experimentalModels: fetchedExperimentalModels\n          } = msg;\n          if (cacheEnabled) {\n            const rawPrev = localStorage.getItem('modelDropdownCache');\n            let prevCache;\n            try { prevCache = JSON.parse(rawPrev); } catch { prevCache = null; }\n            const changed = !prevCache ||\n              JSON.stringify(prevCache.allModels) !== JSON.stringify(fetchedAllModels) ||\n              JSON.stringify(prevCache.processedModels) !== JSON.stringify(fetchedProcessedModels) ||\n              JSON.stringify(prevCache.experimentalModels) !== JSON.stringify(fetchedExperimentalModels);\n            if (changed) {\n              setAllModels(fetchedAllModels);\n              setProcessedModels(fetchedProcessedModels);\n              setExperimentalModels(fetchedExperimentalModels);\n              cacheModels({ allModels: fetchedAllModels, processedModels: fetchedProcessedModels, experimentalModels: fetchedExperimentalModels });\n            }\n          } else {\n            setAllModels(fetchedAllModels);\n            setProcessedModels(fetchedProcessedModels);\n            setExperimentalModels(fetchedExperimentalModels);\n          }\n          // Initial model selection moved to a separate useEffect\n        }\n        setIsLoading(false);\n        worker.terminate();\n      };\n      worker.onerror = (err) => {\n        console.error('[ModelContext] Worker unexpected error:', err);\n        setError(err.message);\n        showToast({ type: 'error', message: err.message });\n        setIsLoading(false);\n        worker.terminate();\n      };\n      \n      // Now post the message to the worker\n      worker.postMessage(rawData);\n      console.log(\"[ModelContext] Message posted to worker, worker object:\", worker);\n\n    } catch (err) {\n      console.error('Failed to fetch or process models:', err);\n      setError(err.message || 'Failed to load model data');\n      showToast({ type: 'error', message: err.message || 'Failed to load model data' });\n      // Attempt to load from potentially expired cache as a last resort?\n    }\n  }, [apiUrl, cacheModels, idToken, cacheEnabled, showToast]);\n  \n  // Initial fetch once on mount\n  const initialFetchDoneRef = useRef(false);\n  // track if we've already fetched models with authentication\n  const didAuthFetchRef = useRef(false);\n\n  useEffect(() => {\n    if (!initialFetchDoneRef.current) {\n      if (cacheEnabled) {\n        const rawCache = localStorage.getItem('modelDropdownCache');\n        let parsedCache;\n        try { parsedCache = JSON.parse(rawCache); } catch { parsedCache = null; }\n        if (parsedCache && window.isCacheValid(parsedCache)) {\n          setAllModels(parsedCache.allModels);\n          setProcessedModels(parsedCache.processedModels);\n          setExperimentalModels(parsedCache.experimentalModels);\n          setIsLoading(false);\n        }\n      }\n      let cachedToken = null;\n      try { cachedToken = localStorage.getItem('idToken'); } catch {}\n      if (cachedToken) {\n        // initial authenticated fetch\n        didAuthFetchRef.current = true;\n        fetchModels(true, cachedToken);\n      } else {\n        // initial unauthenticated fetch\n        fetchModels(false);\n      }\n      initialFetchDoneRef.current = true;\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // After login, fetch authenticated models\n  useEffect(() => {\n    // only fetch once after obtaining idToken if not already done\n    if (initialFetchDoneRef.current && idToken && !didAuthFetchRef.current) {\n      didAuthFetchRef.current = true;\n      fetchModels(true);\n    }\n  }, [idToken, fetchModels]);\n  \n  // Set initial model after models are loaded\n  useEffect(() => {\n    // Select first model if none selected and models are loaded\n    if (!selectedModel && allModels.length > 0) {\n      setSelectedModel(allModels[0]);\n    }\n  }, [allModels, selectedModel, setSelectedModel]);\n  \n  // Create toggleExperimentalModels callback at the top level\n  const toggleExperimentalModels = useCallback(() => {\n    setShowExperimental(prev => !prev);\n  }, [setShowExperimental]);\n  \n  // Main model context value - no filter state\n  const modelValue = useMemo(() => ({\n    allModels,\n    processedModels,\n    experimentalModels,\n    selectedModel,\n    isLoading,\n    error,\n    showExperimental,\n    isExperimentalModelsEnabled: showExperimental,\n    toggleExperimentalModels,\n    setShowExperimental,\n    selectModel,\n    refreshModels: fetchModels\n  }), [\n    allModels,\n    processedModels,\n    experimentalModels,\n    selectedModel,\n    isLoading,\n    error,\n    showExperimental,\n    toggleExperimentalModels,\n    setShowExperimental,\n    selectModel,\n    fetchModels\n  ]);\n  \n  // Filter context value - only filter-related state\n  const filterValue = useMemo(() => ({\n    modelFilter,\n    updateCategoryFilter,\n    updateSearchFilter\n  }), [\n    modelFilter,\n    updateCategoryFilter,\n    updateSearchFilter\n  ]);\n  \n  return (\n    <ModelContext.Provider value={modelValue}>\n      <ModelFilterContext.Provider value={filterValue}>\n        {children}\n      </ModelFilterContext.Provider>\n    </ModelContext.Provider>\n  );\n}; ","import { createContext, useContext, useMemo, useEffect } from 'react';\nimport { ThemeProvider } from './ThemeContext';\nimport { ApiProvider } from './ApiContext';\nimport { ModelProvider } from './ModelContext';\nimport { SettingsProvider } from './SettingsContext';\nimport { ChatStatusProvider } from './ChatStatusContext';\nimport { ChatHistoryProvider } from './ChatHistoryContext';\nimport { PerformanceMetricsProvider } from './PerformanceMetricsContext';\nimport { StreamingEventsProvider } from './StreamingEventsContext';\nimport { ChatStateProvider } from './ChatStateContext';\nimport { ChatControlProvider } from './ChatControlContext';\n\n// Create a context for managing initialization state\nconst InitializationContext = createContext(null);\n\nexport const useInitialization = () => {\n  const context = useContext(InitializationContext);\n  if (!context) {\n    throw new Error('useInitialization must be used within an InitializationProvider');\n  }\n  return context;\n};\n\n/**\n * ContextManager component that handles all context providers\n * and their initialization states\n */\nexport const ContextManager = ({ children }) => {\n  // Memoize the initialization state to prevent unnecessary re-renders\n  const initializationState = useMemo(() => ({\n    isInitialized: false,\n    setInitialized: (value) => {\n      initializationState.isInitialized = value;\n    }\n  }), []);\n  // Mark as initialized once on mount\n  useEffect(() => {\n    initializationState.setInitialized(true);\n  }, [initializationState]);\n\n  return (\n    <InitializationContext.Provider value={initializationState}>\n      <ThemeProvider>\n        <ApiProvider>\n          <ModelProvider>\n            <SettingsProvider>\n              <ChatStatusProvider>\n                <ChatHistoryProvider>\n                  <PerformanceMetricsProvider>\n                    <StreamingEventsProvider>\n                      <ChatStateProvider>\n                        <ChatControlProvider>\n                          {children}\n                        </ChatControlProvider>\n                      </ChatStateProvider>\n                    </StreamingEventsProvider>\n                  </PerformanceMetricsProvider>\n                </ChatHistoryProvider>\n              </ChatStatusProvider>\n            </SettingsProvider>\n          </ModelProvider>\n        </ApiProvider>\n      </ThemeProvider>\n    </InitializationContext.Provider>\n  );\n}; ","/* eslint-disable no-unused-vars */\nimport React, { lazy, Suspense, useEffect, useState } from \"react\";\nimport { AuthProvider, useAuth } from \"./contexts/AuthContext\";\nimport { ContextManager } from \"./contexts/ContextManager\";\nimport Spinner from \"./components/common/Spinner\";\nimport {\n  performanceMonitor,\n  PERFORMANCE_MARKS,\n  PERFORMANCE_MEASURES,\n} from \"./utils/performance\";\nimport {\n  loadChunkGroup,\n  idlePreloadChunks,\n  createChunkMonitor,\n  createAdaptiveLoader,\n  createSmallChunkBundle,\n} from \"./utils/chunkOptimizer\";\n// (Formatting preloads removed - we rely on on-demand loading)\n\n// === Enhanced Lazy Loading Strategy with Chunk Optimization ===\n// Group related components into micro-chunks for better caching and loading\n\n// Core Layout Components (Critical - Load First)\nconst CORE_IMPORTS = {\n  layout: () =>\n    import(/* webpackChunkName: \"core-layout\" */ \"./components/layout/Layout\"),\n  spinner: () =>\n    import(\n      /* webpackChunkName: \"core-spinner\" */ \"./components/common/Spinner\"\n    ),\n};\n\n// Essential UI Components (Load Second)\nconst ESSENTIAL_IMPORTS = {\n  chatContainer: () =>\n    import(\n      /* webpackChunkName: \"chat-container\" */ \"./components/chat/ChatContainer\"\n    ),\n  chatInput: () =>\n    import(/* webpackChunkName: \"chat-input\" */ \"./components/chat/ChatInput\"),\n  messageList: () =>\n    import(\n      /* webpackChunkName: \"chat-messages\" */ \"./components/chat/MessageList\"\n    ),\n  sidebar: () =>\n    import(\n      /* webpackChunkName: \"layout-sidebar\" */ \"./components/layout/Sidebar\"\n    ),\n  mainContent: () =>\n    import(\n      /* webpackChunkName: \"layout-main\" */ \"./components/layout/MainContent\"\n    ),\n};\n\n// UI Controls (Load Third) - Group small controls together\nconst loginModalImport = () => import(/* webpackChunkName: \"login-modal\" */ \"./components/auth/LoginModal\");\n\nconst UI_CONTROLS_IMPORTS = createSmallChunkBundle(\n  [\n    () =>\n      import(\n        /* webpackChunkName: \"ui-controls\" */ \"./components/models/ModelDropdown\"\n      ),\n    () =>\n      import(\n        /* webpackChunkName: \"ui-controls\" */ \"./components/common/ThemeToggle\"\n      ),\n    () =>\n      import(\n        /* webpackChunkName: \"ui-controls\" */ \"./components/layout/SidebarToggle\"\n      ),\n    () =>\n      import(\n        /* webpackChunkName: \"ui-controls\" */ \"./components/auth/AuthButton\"\n      ),\n    () =>\n      import(\n        /* webpackChunkName: \"ui-controls\" */ \"./components/common/MoreActions\"\n      ),\n  ],\n  \"ui-controls\"\n);\n\n// Secondary Features (Load Fourth) - Group feature components\nconst SECONDARY_IMPORTS = createSmallChunkBundle(\n  [\n    () =>\n      import(\n        /* webpackChunkName: \"features\" */ \"./components/chat/GlobalMetricsBar\"\n      ),\n    () =>\n      import(\n        /* webpackChunkName: \"features\" */ \"./components/chat/PerformanceMetrics\"\n      ),\n    () =>\n      import(\n        /* webpackChunkName: \"features\" */ \"./components/settings/SettingsPanel\"\n      ),\n  ],\n  \"features\"\n);\n\n// Heavy/Optional Components (Load on Idle)\nconst HEAVY_IMPORTS = {\n  markdownRenderer: () =>\n    import(\n      /* webpackChunkName: \"heavy-markdown\" */ \"./components/common/LazyMarkdownRenderer/MarkdownRenderer\"\n    ),\n  streamingMessage: () =>\n    import(\n      /* webpackChunkName: \"streaming-message\" */ \"./components/chat/ChatMessage/StreamingMessage\"\n    ),\n  imageOverlay: () =>\n    import(\n      /* webpackChunkName: \"heavy-image-overlay\" */ \"./components/common/ImageOverlay\"\n    ),\n  typingIndicator: () =>\n    import(\n      /* webpackChunkName: \"heavy-typing\" */ \"./components/common/TypingIndicator\"\n    ),\n};\n\n// Micro-components bundled together for efficiency\nconst MICRO_IMPORTS = createSmallChunkBundle(\n  [\n    () => import(/* webpackChunkName: \"micro-bundle\" */ \"react-icons\"),\n    () => import(/* webpackChunkName: \"micro-bundle\" */ \"lodash.debounce\"),\n    () => import(/* webpackChunkName: \"micro-bundle\" */ \"lodash.throttle\"),\n    () => import(/* webpackChunkName: \"micro-bundle\" */ \"clsx\"),\n  ],\n  \"micro-bundle\"\n);\n\n// Lazy-load the layout using the shared import\nconst Layout = lazy(CORE_IMPORTS.layout);\nconst LoginModal = lazy(loginModalImport);\n\n// Initialize performance monitoring and adaptive loading\nconst chunkMonitor = createChunkMonitor();\nconst adaptiveLoader = createAdaptiveLoader();\n\n/**\n * Enhanced AppShell with intelligent chunk loading and network awareness\n */\nfunction AppShell() {\n  const [loadingPhase, setLoadingPhase] = useState(\"initializing\");\n  const [loadedPhases, setLoadedPhases] = useState(new Set());\n  const [networkStrategy, setNetworkStrategy] = useState(null);\n  const { isLoggingIn, setIsLoggingIn } = useAuth();\n\n  useEffect(() => {\n    let canceled = false;\n\n    async function runEnhancedPhases() {\n      performanceMonitor.mark(PERFORMANCE_MARKS.APP_START);\n\n      // Get network-aware loading strategy\n      const strategy = adaptiveLoader.getStrategy();\n      setNetworkStrategy(strategy);\n\n      console.log(\"🌐 Network strategy:\", strategy);\n\n      try {\n        // Phase 1: Core Components (Critical Path)\n        setLoadingPhase(\"core\");\n        chunkMonitor.startLoad(\"core\");\n\n        await loadChunkGroup(CORE_IMPORTS, {\n          groupName: \"core\",\n          timeout: strategy.timeout,\n          retries: strategy.skipNonEssential ? 1 : 2,\n        });\n\n        if (canceled) return;\n\n        chunkMonitor.endLoad(\"core\", true);\n        performanceMonitor.mark(PERFORMANCE_MARKS.IMPORTANT_COMPONENTS_LOADED);\n        setLoadedPhases((prev) => new Set([...prev, \"core\"]));\n\n        // Phase 2: Essential UI (Main Interface)\n        setLoadingPhase(\"essential\");\n        chunkMonitor.startLoad(\"essential\");\n\n        await loadChunkGroup(ESSENTIAL_IMPORTS, {\n          groupName: \"essential\",\n          timeout: strategy.timeout,\n          retries: strategy.skipNonEssential ? 1 : 2,\n        });\n\n        if (canceled) return;\n\n        chunkMonitor.endLoad(\"essential\", true);\n        setLoadedPhases((prev) => new Set([...prev, \"essential\"]));\n\n        // Phase 3: UI Controls (Interactive Elements) - Load as bundled group\n        setLoadingPhase(\"controls\");\n        chunkMonitor.startLoad(\"ui-controls\");\n\n        await loadChunkGroup(UI_CONTROLS_IMPORTS, {\n          groupName: \"ui-controls\",\n          timeout: strategy.timeout,\n          retries: 1,\n        });\n\n        if (canceled) return;\n\n        chunkMonitor.endLoad(\"ui-controls\", true);\n        performanceMonitor.mark(PERFORMANCE_MARKS.COMPONENT_LOAD);\n        performanceMonitor.measure(\n          PERFORMANCE_MEASURES.COMPONENT_LOAD,\n          PERFORMANCE_MARKS.APP_START,\n          PERFORMANCE_MARKS.COMPONENT_LOAD\n        );\n\n        setLoadedPhases((prev) => new Set([...prev, \"ui-controls\"]));\n        setLoadingPhase(\"ready\");\n\n        // Show app as interactive\n        requestAnimationFrame(() => {\n          if (canceled) return;\n\n          performanceMonitor.mark(PERFORMANCE_MARKS.APP_INTERACTIVE);\n          performanceMonitor.measure(\n            PERFORMANCE_MEASURES.TIME_TO_INTERACTIVE,\n            PERFORMANCE_MARKS.APP_START,\n            PERFORMANCE_MARKS.APP_INTERACTIVE\n          );\n\n          console.log(\n            \"[Enhanced] App is interactive; starting intelligent preloading\"\n          );\n\n          // Phase 4+: Intelligent idle loading based on network conditions\n          if (!strategy.skipNonEssential) {\n            // Delay idle preload start by at least 1.5 seconds after interactive\n            setTimeout(() => {\n              performanceMonitor.mark(PERFORMANCE_MARKS.POST_INTERACTIVE_PRELOAD_START);\n              const chunkGroups = {\n                \"secondary-features\": {\n                  imports: SECONDARY_IMPORTS,\n                  priority: 0,\n                  options: { timeout: strategy.timeout },\n                },\n                \"heavy-components\": {\n                  imports: {\n                    streamingMessage: HEAVY_IMPORTS.streamingMessage,\n                    imageOverlay: HEAVY_IMPORTS.imageOverlay,\n                    typingIndicator: HEAVY_IMPORTS.typingIndicator,\n                  },\n                  priority: 1,\n                  options: { timeout: strategy.timeout * 1.5 },\n                },\n                \"micro-components\": {\n                  imports: MICRO_IMPORTS,\n                  priority: 3,\n                  options: { timeout: strategy.timeout },\n                },\n              };\n\n              idlePreloadChunks(chunkGroups, {\n                maxConcurrent: strategy.maxConcurrent * 2,\n                priorityDelay: strategy.priorityDelay,\n                idleTimeout: strategy.timeout,\n              });\n\n              // Monitor chunk loading\n              Object.keys(chunkGroups).forEach((groupName) => {\n                chunkMonitor.startLoad(groupName);\n              });\n\n              // Update loaded phases as chunks complete\n              const originalOnComplete = (groupName) => {\n                chunkMonitor.endLoad(groupName, true);\n                setLoadedPhases(\n                  (prev) =>\n                    new Set([...prev, groupName.toLowerCase().replace(\" \", \"-\")])\n                );\n              };\n            }, 250);\n          } else {\n            console.log(\n              \"🚫 Skipping non-essential chunks due to network conditions\"\n            );\n          }\n        });\n      } catch (error) {\n        console.error(\"[Enhanced] Error in loading phases:\", error);\n        chunkMonitor.endLoad(loadingPhase, false);\n        setLoadingPhase(\"error\");\n      }\n    }\n\n    runEnhancedPhases();\n\n    return () => {\n      canceled = true;\n      performanceMonitor.clear();\n    };\n  }, []);\n\n  // Enhanced loading states with network awareness\n  const isReady = loadingPhase === \"ready\" || loadedPhases.has(\"ui-controls\");\n  const showSpinner =\n    loadingPhase === \"initializing\" || loadingPhase === \"core\";\n\n  if (showSpinner) {\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          height: \"100vh\",\n          flexDirection: \"column\",\n          gap: \"1rem\",\n        }}\n      >\n        <Spinner size=\"medium\" />\n        <div style={{ fontSize: \"0.875rem\", opacity: 0.7 }}>\n          Loading {loadingPhase}...\n          {networkStrategy && (\n            <div style={{ fontSize: \"0.75rem\", marginTop: \"0.5rem\" }}>\n              Network: {networkStrategy.effectiveType || \"detecting...\"}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  if (loadingPhase === \"error\") {\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          height: \"100vh\",\n          flexDirection: \"column\",\n          gap: \"1rem\",\n        }}\n      >\n        <div>⚠️ Loading Error</div>\n        <button onClick={() => window.location.reload()}>Reload App</button>\n        {process.env.NODE_ENV === \"development\" && (\n          <details style={{ marginTop: \"1rem\", fontSize: \"0.875rem\" }}>\n            <summary>Performance Metrics</summary>\n            <pre style={{ textAlign: \"left\", fontSize: \"0.75rem\" }}>\n              {JSON.stringify(chunkMonitor.getMetrics(), null, 2)}\n            </pre>\n          </details>\n        )}\n      </div>\n    );\n  }\n\n  // App ready: render layout + chat UI\n  return (\n    <>\n      <Suspense\n        fallback={\n          <div\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              height: \"100vh\",\n            }}\n          >\n            <Spinner size=\"small\" />\n          </div>\n        }\n      >\n        <Layout />\n      </Suspense>\n\n      {isLoggingIn && loadedPhases.has(\"ui-controls\") && (\n        <Suspense fallback={<Spinner size=\"small\" />}>\n          <LoginModal onClose={() => setIsLoggingIn(false)} />\n        </Suspense>\n      )}\n\n      {/* Enhanced debug info in development */}\n      {process.env.NODE_ENV === \"development\" && (\n        <div\n          style={{\n            position: \"fixed\",\n            bottom: \"10px\",\n            right: \"10px\",\n            background: \"rgba(0,0,0,0.9)\",\n            color: \"white\",\n            padding: \"12px\",\n            borderRadius: \"8px\",\n            fontSize: \"11px\",\n            zIndex: 9999,\n            maxWidth: \"300px\",\n            fontFamily: \"monospace\",\n          }}\n        >\n          <div>\n            <strong>Phase:</strong> {loadingPhase}\n          </div>\n          <div>\n            <strong>Loaded:</strong> {Array.from(loadedPhases).join(\", \")}\n          </div>\n          {networkStrategy && (\n            <>\n              <div>\n                <strong>Network:</strong>{\" \"}\n                {adaptiveLoader.getNetworkInfo().effectiveType}\n              </div>\n              <div>\n                <strong>Strategy:</strong> {networkStrategy.maxConcurrent}x\n                concurrent\n              </div>\n            </>\n          )}\n          <div>\n            <strong>Chunks:</strong> {chunkMonitor.getMetrics().totalLoaded}{\" \"}\n            loaded, {chunkMonitor.getMetrics().totalFailed} failed\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n\n/** Root App with providers **/\nexport default function App() {\n  return (\n    <AuthProvider>\n      <ContextManager>\n        <AppShell />\n      </ContextManager>\n    </AuthProvider>\n  );\n}\n","import React, { createContext, useContext, useMemo, useCallback, useRef } from 'react';\nimport { useApi } from './ApiContext';\nimport { useModel } from './ModelContext';\nimport { useSettings } from './SettingsContext';\nimport { useAuth } from './AuthContext';\nimport { useChatHistory } from './ChatHistoryContext';\nimport { useChatStatus } from './ChatStatusContext';\nimport { usePerformanceMetrics } from './PerformanceMetricsContext';\nimport { useStreamingEvents } from './StreamingEventsContext';\nimport { fetchWithRetry } from '../utils/network';\nimport { useToast } from './ToastContext';\n\n// Context for chat actions (controls)\nconst ChatControlContext = createContext();\n\n// Hook to consume chat controls\nexport const useChatControl = () => {\n  const context = useContext(ChatControlContext);\n  if (context === undefined) {\n    throw new Error('useChatControl must be used within a ChatControlProvider');\n  }\n  return context;\n};\n\n// Provider component for chat controls\nexport const ChatControlProvider = ({ children }) => {\n  // Ref to track client-generated request ID for non-streaming\n  const currentRequestIdRef = useRef(null);\n  const { apiUrl } = useApi();\n  const { selectedModel } = useModel();\n  const { settings, getModelAdjustedSettings } = useSettings();\n  const { idToken } = useAuth();\n  const { chatHistoryRef, setChatHistory, addMessageToHistory } = useChatHistory();\n  const { setIsWaitingForResponse, setError } = useChatStatus();\n  const { resetPerformanceMetrics, startPerformanceTimer, setTokenMetricsForLastMessage } = usePerformanceMetrics();\n  const { streamMessageWithFetch, stopStreaming } = useStreamingEvents();\n  const { showToast } = useToast();\n\n  // Helpers\n  const formatModelIdentifier = useCallback((model) => {\n    if (!model || !model.provider || !model.id) return null;\n    return `${model.provider}/${model.id}`;\n  }, []);\n\n  // Action: sendMessage\n  const sendMessage = useCallback(async (message, editIndex = null) => {\n    // Generate unique client-side requestId\n    const clientRequestId = (typeof crypto !== 'undefined' && crypto.randomUUID)\n      ? crypto.randomUUID()\n      : Math.random().toString(36).substring(2) + Date.now().toString(36);\n    currentRequestIdRef.current = clientRequestId;\n    const isEditing = editIndex !== null && Number.isInteger(editIndex) && editIndex >= 0;\n    if (settings.streaming) {\n      return streamMessageWithFetch(message, isEditing ? editIndex : null);\n    }\n    if (!message || !selectedModel) {\n      setError('Please enter a message and select a model');\n      return null;\n    }\n    const modelId = formatModelIdentifier(selectedModel);\n    if (!modelId) {\n      setError('Invalid model selection');\n      return null;\n    }\n    let userMessage;\n    if (isEditing) {\n      setChatHistory(prev => {\n        const truncated = prev.slice(0, editIndex);\n        const original = prev[editIndex];\n        // Preserve original id/timestamp, only update content\n        userMessage = { ...original, content: message };\n        return [...truncated, userMessage];\n      });\n    } else {\n      userMessage = addMessageToHistory('user', message);\n    }\n    const requestStartTime = Date.now();\n    setIsWaitingForResponse(true);\n    setError(null);\n    try {\n      const adjusted = getModelAdjustedSettings(selectedModel);\n      const historyForApi = chatHistoryRef.current.map(({ metrics, ...m }) => m);\n      if (adjusted.systemPrompt && (!historyForApi.length || historyForApi[0].role !== 'system')) {\n        historyForApi.unshift({ role: 'system', content: adjusted.systemPrompt, timestamp: Date.now()-1 });\n      }\n      historyForApi.push(userMessage);\n      const payload = { \n        requestId: clientRequestId,\n        model: modelId, messages: historyForApi,\n        temperature: adjusted.temperature,\n        max_tokens: adjusted.max_tokens,\n        top_p: adjusted.top_p,\n        frequency_penalty: adjusted.frequency_penalty,\n        presence_penalty: adjusted.presence_penalty\n      };\n      resetPerformanceMetrics();\n      startPerformanceTimer();\n      const headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' };\n      if (idToken) headers['Authorization'] = `Bearer ${idToken}`;\n      const response = await fetchWithRetry(new URL('/api/chat/completions', apiUrl).toString(), {\n        method: 'POST', headers, body: JSON.stringify(payload)\n      });\n      if (!response.ok) {\n        let errMsg = `API error: ${response.status}`;\n        try { const errData = await response.json(); errMsg = errData?.error?.message || errData?.message || errMsg; } catch {};\n        throw new Error(errMsg);\n      }\n      const data = await response.json();\n      console.log('Received non-streaming chat data:', data);\n\n      // Handle server-sent error in response payload\n      if (data.error?.message || data.finishReason === 'error') {\n        const errMsg = data.error?.message || 'Error occurred during generation';\n        console.error('Error in API response:', errMsg);\n        setError(errMsg);\n        const rawUsage = data.usage || {};\n        const promptTokens = rawUsage.promptTokens ?? rawUsage.prompt_tokens ?? 0;\n        const completionTokens = rawUsage.completionTokens ?? rawUsage.completion_tokens ?? 0;\n        const totalTokens = rawUsage.totalTokens ?? rawUsage.total_tokens ?? completionTokens;\n        const requestEndTime = Date.now();\n        const elapsed = requestEndTime - requestStartTime;\n        const tokensPerSecond = elapsed ? Math.round((completionTokens / (elapsed / 1000)) * 10) / 10 : null;\n        const errorMetrics = {\n          startTime: requestStartTime,\n          endTime: requestEndTime,\n          elapsedTime: elapsed,\n          tokenCount: completionTokens,\n          tokensPerSecond,\n          isComplete: true,\n          timeToFirstToken: null,\n          promptTokens,\n          completionTokens,\n          totalTokens,\n          finishReason: data.finishReason || 'error',\n          error: true\n        };\n        addMessageToHistory('assistant', errMsg, errorMetrics);\n        return null;\n      }\n      const content = data.content || 'No Response returned';\n      // Use server-provided usage tokens directly\n      const rawUsage = data.usage || {};\n      const promptTokens = rawUsage.promptTokens ?? rawUsage.prompt_tokens ?? 0;\n      const completionTokens = rawUsage.completionTokens ?? rawUsage.completion_tokens ?? 0;\n      const totalTokens = rawUsage.totalTokens ?? rawUsage.total_tokens ?? completionTokens;\n      // Compute timing and rates\n      const requestEndTime = Date.now();\n      const elapsed = requestEndTime - requestStartTime;\n      const tokensForMetrics = completionTokens > 0 ? completionTokens : 0;\n      const tokensPerSecond = elapsed\n        ? Math.round((tokensForMetrics / (elapsed / 1000)) * 10) / 10\n        : null;\n      const finalMetrics = {\n        startTime: requestStartTime,\n        endTime: requestEndTime,\n        elapsedTime: elapsed,\n        tokenCount: tokensForMetrics,\n        tokensPerSecond,\n        isComplete: true,\n        timeToFirstToken: null,\n        promptTokens,\n        completionTokens,\n        totalTokens,\n        finishReason: data.finishReason\n      };\n      addMessageToHistory('assistant', content, finalMetrics);\n      return content;\n    } catch (err) {\n      console.error('Error sending message:', err);\n      setError(err.message);\n      // Show the server error as an assistant reply\n      addMessageToHistory('assistant', err.message || 'An error occurred');\n      return null;\n    } finally {\n      // Clear the clientRequestId after completion\n      currentRequestIdRef.current = null;\n      setIsWaitingForResponse(false);\n    }\n  }, [\n    apiUrl,\n    selectedModel,\n    settings.streaming,\n    getModelAdjustedSettings,\n    idToken,\n    chatHistoryRef,\n    setChatHistory,\n    addMessageToHistory,\n    streamMessageWithFetch,\n    formatModelIdentifier,\n    resetPerformanceMetrics,\n    startPerformanceTimer,\n    setError,\n    setIsWaitingForResponse,\n  ]);\n\n  // Action: stopGeneration\n  const stopGenerationAction = useCallback(async () => {\n    stopStreaming();\n    return true;\n  }, [stopStreaming]);\n\n  // Action: clearChat\n  const clearChat = useCallback(() => {\n    setChatHistory([]);\n    resetPerformanceMetrics();\n  }, [setChatHistory, resetPerformanceMetrics]);\n\n  // Action: newChat\n  const newChat = useCallback(() => {\n    if (chatHistoryRef.current.length > 0) {\n      clearChat();\n    }\n  }, [chatHistoryRef, clearChat]);\n\n  // Action: resetChat\n  const resetChat = useCallback(() => {\n    if (chatHistoryRef.current.length === 0) return;\n    \n    if (window.confirm('Are you sure you want to clear the current chat?')) {\n      clearChat();\n      showToast({ type: 'info', message: 'Chat has been cleared' });\n    }\n  }, [chatHistoryRef, clearChat, showToast]);\n\n  // Action: downloadChat\n  const downloadChat = useCallback(() => {\n    const history = chatHistoryRef.current;\n    if (!history.length) return;\n    try {\n      const formatted = history.map(msg => {\n        const role = msg.role === 'user'\n          ? 'You'\n          : msg.role === 'assistant'\n            ? selectedModel?.name || 'Assistant'\n            : msg.role;\n        let contentText = '';\n        if (typeof msg.content === 'string') {\n          contentText = msg.content;\n        } else if (Array.isArray(msg.content)) {\n          contentText = msg.content\n            .map(part => part.type === 'text' ? part.text : '[Image]')\n            .join('\\n');\n        }\n        return `${role}: ${contentText}\\n`;\n      }).join('');\n      const blob = new Blob([formatted], { type: 'text/plain' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `chat_${new Date().toISOString().replace(/:/g, '-')}.txt`;\n      document.body.appendChild(a);\n      a.click();\n      showToast({ type: 'success', message: 'Chat downloaded successfully' });\n      // Clean up anchor and URL\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n    } catch (error) {\n      console.error(\"Error downloading chat:\", error);\n      showToast({ type: 'error', message: 'Failed to download chat. Please try again.' });\n    }\n  }, [chatHistoryRef, selectedModel, showToast]);\n\n  // Action: getOrCreateConversation (stub)\n  const getOrCreateConversation = useCallback((conversationId) => {\n    // implement or delegate\n  }, []);\n\n  // Value\n  const value = useMemo(() => ({\n    sendMessage,\n    stopGeneration: stopGenerationAction,\n    addMessageToHistory,\n    clearChat,\n    newChat,\n    resetChat,\n    downloadChat,\n    getOrCreateConversation,\n    setTokenMetricsForLastMessage\n  }), [\n    sendMessage,\n    stopGenerationAction,\n    addMessageToHistory,\n    clearChat,\n    newChat,\n    resetChat,\n    downloadChat,\n    getOrCreateConversation,\n    setTokenMetricsForLastMessage\n  ]);\n\n  return (\n    <ChatControlContext.Provider value={value}>\n      {children}\n    </ChatControlContext.Provider>\n  );\n}; ","import { createContext, useContext, useState, useMemo, useEffect } from 'react';\nimport { useLoading } from './LoadingContext';\n\n// Create chat status context\nconst ChatStatusContext = createContext();\n\n// Hook to use chat status context\nexport const useChatStatus = () => {\n  const context = useContext(ChatStatusContext);\n  if (context === undefined) {\n    throw new Error('useChatStatus must be used within a ChatStatusProvider');\n  }\n  return context;\n};\n\n// Provider component for chat status\nexport const ChatStatusProvider = ({ children }) => {\n  const [isWaitingForResponse, setIsWaitingForResponse] = useState(false);\n  const [error, setError] = useState(null);\n  // Sync with global loading context for chat\n  const [, startChatLoading, stopChatLoading] = useLoading('chat');\n  useEffect(() => {\n    if (isWaitingForResponse) startChatLoading();\n    else stopChatLoading();\n  }, [isWaitingForResponse, startChatLoading, stopChatLoading]);\n\n  const value = useMemo(() => ({\n    isWaitingForResponse,\n    setIsWaitingForResponse,\n    error,\n    setError,\n  }), [isWaitingForResponse, error]);\n\n  return (\n    <ChatStatusContext.Provider value={value}>\n      {children}\n    </ChatStatusContext.Provider>\n  );\n}; ","import React, { createContext, useContext, useState, useRef,  useCallback, useMemo } from 'react';\n\n// Create chat history context\nconst ChatHistoryContext = createContext();\n\n// Hook to use chat history context\nexport const useChatHistory = () => {\n  const context = useContext(ChatHistoryContext);\n  if (context === undefined) {\n    throw new Error('useChatHistory must be used within a ChatHistoryProvider');\n  }\n  return context;\n};\n\n// Provider component for chat history\nexport const ChatHistoryProvider = ({ children }) => {\n  // State and ref for chat history, with custom setter to sync ref immediately\n  const [chatHistory, internalSetChatHistory] = useState([]);\n  const chatHistoryRef = useRef([]);\n\n  // Wrap setter to sync ref and state in one step\n  const setChatHistory = useCallback((update) => {\n    internalSetChatHistory(prev => {\n      const newHistory = typeof update === 'function' ? update(prev) : update;\n      chatHistoryRef.current = newHistory;\n      return newHistory;\n    });\n  }, []);\n\n  // Add message, stable callback\n  const addMessageToHistory = useCallback((role, content, metrics) => {\n    const timestamp = Date.now();\n    const message = { id: timestamp, role, content, timestamp, ...(metrics && { metrics }) };\n    setChatHistory(prev => [...prev, message]);\n    return message;\n  }, [setChatHistory]);\n\n  // Function to update content of the most recent assistant message (avoiding user replacements)\n  const updateChatWithContent = useCallback((content) => {\n    setChatHistory(prev => {\n      const lastIndex = prev.length - 1;\n      if (lastIndex < 0) return prev;\n      const lastMsg = prev[lastIndex];\n      // No-op if not assistant or same content\n      if (lastMsg.role !== 'assistant' || lastMsg.content === content) {\n        return prev;\n      }\n      // Otherwise clone and update\n      const newHistory = [...prev];\n      newHistory[lastIndex] = { ...lastMsg, content };\n      return newHistory;\n    });\n  }, [setChatHistory]);\n\n  // Memoize context value to avoid re-renders\n  const value = useMemo(() => ({\n    chatHistory,\n    chatHistoryRef,\n    setChatHistory,\n    addMessageToHistory,\n    updateChatWithContent\n  }), [chatHistory, setChatHistory, addMessageToHistory, updateChatWithContent]);\n\n  return (\n    <ChatHistoryContext.Provider value={value}>\n      {children}\n    </ChatHistoryContext.Provider>\n  );\n}; ","import { createContext, useContext, useState, useMemo } from 'react';\n\n// Create API context\nconst ApiContext = createContext();\n\n// Custom hook for using API context\nexport const useApi = () => {\n  const context = useContext(ApiContext);\n  if (context === undefined) {\n    throw new Error('useApi must be used within an ApiProvider');\n  }\n  return context;\n};\n\n// API provider component\nexport const ApiProvider = ({ children }) => {\n  const [apiUrl] = useState(process.env.REACT_APP_API_URL || 'http://localhost:3000/api'); // Base API URL\n\n  // Memoize context value to prevent unnecessary re-renders\n  const value = useMemo(() => ({\n    apiUrl,\n  }), [apiUrl]);\n\n  return (\n    <ApiContext.Provider value={value}>\n      {children}\n    </ApiContext.Provider>\n  );\n}; ","import React, { createContext, useContext, useState, useCallback, useMemo, useEffect } from 'react';\nimport { useChatHistory } from './ChatHistoryContext';\n\n// Create performance metrics context\nconst PerformanceMetricsContext = createContext();\n\n// Hook to use performance metrics context\nexport const usePerformanceMetrics = () => {\n  const context = useContext(PerformanceMetricsContext);\n  if (context === undefined) {\n    throw new Error('usePerformanceMetrics must be used within a PerformanceMetricsProvider');\n  }\n  return context;\n};\n\n// Provider component for performance metrics\nexport const PerformanceMetricsProvider = ({ children }) => {\n  const { setChatHistory } = useChatHistory();\n  const [currentMessageMetrics, setCurrentMessageMetrics] = useState({\n    startTime: null,\n    endTime: null,\n    elapsedTime: null,\n    generationTime: null,\n    tokenCount: null,\n    tokensPerSecond: null,\n    generationSpeed: null,\n    isComplete: false,\n    timeToFirstToken: null,\n    promptTokens: null,\n    completionTokens: null,\n    totalTokens: null,\n    finishReason: null\n  });\n\n  const resetPerformanceMetrics = useCallback(() => {\n    setCurrentMessageMetrics({\n      startTime: null,\n      endTime: null,\n      elapsedTime: null,\n      generationTime: null,\n      tokenCount: null,\n      tokensPerSecond: null,\n      generationSpeed: null,\n      isComplete: false,\n      timeToFirstToken: null,\n      promptTokens: null,\n      completionTokens: null,\n      totalTokens: null,\n      finishReason: null\n    });\n  }, []);\n\n  const startPerformanceTimer = useCallback(() => {\n    setCurrentMessageMetrics(prev => ({\n      ...prev,\n      startTime: Date.now(),\n      isComplete: false\n    }));\n  }, []);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const updatePerformanceMetrics = useCallback((newTokenCount, isComplete = false, tokenInfo = null, finishReason = null) => {\n    setCurrentMessageMetrics(prev => {\n      const endTime = Date.now();\n      const elapsedTime = prev.startTime ? endTime - prev.startTime : 0;\n      const timeToFirstToken = prev.timeToFirstToken || (newTokenCount > 0 ? elapsedTime : null);\n      const generationTime = timeToFirstToken != null ? Math.max(0, elapsedTime - timeToFirstToken) : 0;\n\n      const nextPromptTokens = tokenInfo?.promptTokens ?? prev.promptTokens;\n      const nextCompletionTokens = tokenInfo?.completionTokens ?? prev.completionTokens ?? newTokenCount ?? 0;\n      const nextTotalTokens = tokenInfo?.totalTokens ?? prev.totalTokens;\n\n      const generationSpeed = generationTime > 0\n        ? Math.round((nextCompletionTokens / (generationTime / 1000)) * 10) / 10\n        : prev.generationSpeed;\n\n      const newMetrics = {\n        startTime: prev.startTime,\n        endTime,\n        elapsedTime,\n        generationTime,\n        tokenCount: newTokenCount,\n        tokensPerSecond: generationSpeed, // backward compat\n        generationSpeed,\n        isComplete,\n        timeToFirstToken,\n        promptTokens: nextPromptTokens,\n        completionTokens: nextCompletionTokens,\n        totalTokens: nextTotalTokens,\n        finishReason: finishReason || prev.finishReason\n      };\n\n      return newMetrics;\n    });\n  }, []);\n\n  // Sync performance metrics into chat history after a metrics update\n  useEffect(() => {\n    if (currentMessageMetrics.endTime != null) {\n      setChatHistory(prevHistory => {\n        const newHistory = [...prevHistory];\n        const lastMsg = newHistory[newHistory.length - 1];\n        if (lastMsg && lastMsg.role === 'assistant') {\n          lastMsg.metrics = { ...currentMessageMetrics };\n        }\n        return newHistory;\n      });\n    }\n  }, [currentMessageMetrics, setChatHistory]);\n\n  // Direct function to set token metrics for the last message - for debugging/testing\n  const setTokenMetricsForLastMessage = useCallback((metrics) => {\n    setChatHistory(prevHistory => {\n      const newHistory = [...prevHistory];\n      const lastMsg = newHistory[newHistory.length - 1];\n      if (lastMsg && lastMsg.role === 'assistant') {\n        lastMsg.metrics = {\n          ...(lastMsg.metrics || {}),\n          ...metrics,\n          isComplete: true\n        };\n      }\n      return newHistory;\n    });\n  }, [setChatHistory]);\n\n  const value = useMemo(() => ({\n    currentMessageMetrics,\n    resetPerformanceMetrics,\n    startPerformanceTimer,\n    updatePerformanceMetrics,\n    setTokenMetricsForLastMessage\n  }), [currentMessageMetrics, resetPerformanceMetrics, startPerformanceTimer, updatePerformanceMetrics, setTokenMetricsForLastMessage]);\n\n  return (\n    <PerformanceMetricsContext.Provider value={value}>\n      {children}\n    </PerformanceMetricsContext.Provider>\n  );\n}; "],"names":["LoadingContext","createContext","LoadingProvider","_ref","children","loadingMap","setLoadingMap","useState","setLoading","useCallback","tag","isLoading","prev","anyLoading","Object","values","some","val","_jsx","Provider","value","useLoading","context","useContext","Error","startLoading","stopLoading","AuthContext","useAuth","undefined","AuthProvider","currentUser","setCurrentUser","idToken","setIdToken","loading","startAuthLoading","stopAuthLoading","error","setError","isLoggingIn","setIsLoggingIn","isFirebaseReady","setIsFirebaseReady","showToast","useToast","useEffect","ensureFirebaseReady","async","getFirebaseAuth","e","message","type","login","logout","signOut","firebaseSignOut","auth","msg","err","unsubscribe","onAuthStateChanged","firebaseOnAuthStateChanged","user","token","getIdToken","localStorage","setItem","firebaseSignOutFallback","signOutError","removeItem","initializeAuthListener","useMemo","isAuthenticated","DEFAULT_SETTINGS","temperature","top_p","max_tokens","frequency_penalty","presence_penalty","streaming","systemPrompt","SettingsContext","useSettings","SettingsProvider","settings","setSettings","useLocalStorage","updateSetting","key","resetSettings","shouldRestrictTemperature","model","requiresFixedTemperature","properties","includes","id","toLowerCase","startsWith","series","getModelAdjustedSettings","ChatStateContext","useChatState","ChatStateProvider","chatHistory","chatHistoryRef","useChatHistory","isWaitingForResponse","useChatStatus","ModelContext","ModelFilterContext","useModel","useModelFilter","ModelProvider","cacheEnabled","useCacheToggle","apiUrl","useApi","allModels","setAllModels","processedModels","setProcessedModels","experimentalModels","setExperimentalModels","selectedModel","setSelectedModel","setIsLoading","showExperimental","setShowExperimental","modelFilter","setModelFilter","search","categories","startModelsLoading","stopModelsLoading","isCacheValid","cache","timestamp","Date","now","window","cacheModels","data","JSON","stringify","updateCategoryFilter","category","isChecked","updateSearchFilter","searchText","selectModel","fetchModels","authRequired","arguments","length","overrideToken","headers","tokenToUse","modelsUrl","URL","toString","response","fetch","ok","errorMsg","status","rawData","json","worker","ModelProcessorWorker","onmessage","_ref2","fetchedAllModels","fetchedProcessedModels","fetchedExperimentalModels","rawPrev","getItem","prevCache","parse","terminate","onerror","postMessage","initialFetchDoneRef","useRef","didAuthFetchRef","current","rawCache","parsedCache","cachedToken","toggleExperimentalModels","modelValue","isExperimentalModelsEnabled","refreshModels","filterValue","InitializationContext","ContextManager","initializationState","isInitialized","setInitialized","ThemeProvider","ApiProvider","ChatStatusProvider","ChatHistoryProvider","PerformanceMetricsProvider","StreamingEventsProvider","ChatControlProvider","CORE_IMPORTS","layout","spinner","ESSENTIAL_IMPORTS","chatContainer","chatInput","messageList","sidebar","mainContent","loginModalImport","UI_CONTROLS_IMPORTS","createSmallChunkBundle","SECONDARY_IMPORTS","HEAVY_IMPORTS","markdownRenderer","streamingMessage","imageOverlay","typingIndicator","MICRO_IMPORTS","Layout","lazy","LoginModal","chunkMonitor","createChunkMonitor","adaptiveLoader","createAdaptiveLoader","AppShell","loadingPhase","setLoadingPhase","loadedPhases","setLoadedPhases","Set","networkStrategy","setNetworkStrategy","canceled","performanceMonitor","mark","PERFORMANCE_MARKS","APP_START","strategy","getStrategy","startLoad","loadChunkGroup","groupName","timeout","retries","skipNonEssential","endLoad","IMPORTANT_COMPONENTS_LOADED","COMPONENT_LOAD","measure","PERFORMANCE_MEASURES","requestAnimationFrame","APP_INTERACTIVE","TIME_TO_INTERACTIVE","setTimeout","POST_INTERACTIVE_PRELOAD_START","chunkGroups","imports","priority","options","idlePreloadChunks","maxConcurrent","priorityDelay","idleTimeout","keys","forEach","runEnhancedPhases","clear","has","_jsxs","style","display","alignItems","justifyContent","height","flexDirection","gap","Spinner","size","fontSize","opacity","marginTop","effectiveType","onClick","location","reload","process","_Fragment","Suspense","fallback","onClose","App","ChatControlContext","useChatControl","currentRequestIdRef","setChatHistory","addMessageToHistory","setIsWaitingForResponse","resetPerformanceMetrics","startPerformanceTimer","setTokenMetricsForLastMessage","usePerformanceMetrics","streamMessageWithFetch","stopStreaming","useStreamingEvents","formatModelIdentifier","provider","sendMessage","editIndex","clientRequestId","crypto","randomUUID","Math","random","substring","isEditing","Number","isInteger","modelId","userMessage","truncated","slice","original","content","requestStartTime","_data$error","_ref6","_rawUsage$promptToken2","_ref7","_rawUsage$completionT2","_ref8","_rawUsage$totalTokens2","adjusted","historyForApi","map","metrics","m","role","unshift","push","payload","requestId","messages","fetchWithRetry","method","body","errMsg","_errData$error","errData","finishReason","_data$error2","_ref3","_rawUsage$promptToken","_ref4","_rawUsage$completionT","_ref5","_rawUsage$totalTokens","rawUsage","usage","promptTokens","prompt_tokens","completionTokens","completion_tokens","totalTokens","total_tokens","requestEndTime","elapsed","errorMetrics","startTime","endTime","elapsedTime","tokenCount","tokensPerSecond","round","isComplete","timeToFirstToken","tokensForMetrics","finalMetrics","stopGenerationAction","clearChat","newChat","resetChat","confirm","downloadChat","history","formatted","name","contentText","Array","isArray","part","text","join","blob","Blob","url","createObjectURL","a","document","createElement","href","download","toISOString","replace","appendChild","click","removeChild","revokeObjectURL","getOrCreateConversation","conversationId","stopGeneration","ChatStatusContext","startChatLoading","stopChatLoading","ChatHistoryContext","internalSetChatHistory","update","newHistory","updateChatWithContent","lastIndex","lastMsg","ApiContext","PerformanceMetricsContext","currentMessageMetrics","setCurrentMessageMetrics","generationTime","generationSpeed","updatePerformanceMetrics","newTokenCount","tokenInfo","_tokenInfo$promptToke","_tokenInfo$completion","_tokenInfo$totalToken","max","nextPromptTokens","nextCompletionTokens","nextTotalTokens","prevHistory"],"sourceRoot":""}