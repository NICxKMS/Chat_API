{"version":3,"file":"static/js/5796.0decefcf23.chunk.v1_7.js","mappings":"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","sources":["../node_modules/mdast-util-to-markdown/lib/util/association.js","../node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","../node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","../node_modules/mdast-util-to-markdown/lib/util/safe.js","../node_modules/mdast-util-to-markdown/lib/util/pattern-compile.js","../node_modules/mdast-util-to-markdown/lib/util/track.js","../node_modules/mdast-util-find-and-replace/lib/index.js","../node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","../node_modules/mdast-util-to-markdown/lib/handle/list-item.js","../node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","../node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","../node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js","../node_modules/mdast-util-to-markdown/lib/util/container-flow.js","../node_modules/mdast-util-to-markdown/lib/util/indent-lines.js"],"sourcesContent":["/**\n * @typedef {import('../types.js').AssociationId} AssociationId\n */\n\nimport {decodeString} from 'micromark-util-decode-string'\n\n/**\n * Get an identifier from an association to match it to others.\n *\n * Associations are nodes that match to something else through an ID:\n * <https://github.com/syntax-tree/mdast#association>.\n *\n * The `label` of an association is the string value: character escapes and\n * references work, and casing is intact.\n * The `identifier` is used to match one association to another:\n * controversially, character escapes and references don’t work in this\n * matching: `&copy;` does not match `©`, and `\\+` does not match `+`.\n *\n * But casing is ignored (and whitespace) is trimmed and collapsed: ` A\\nb`\n * matches `a b`.\n * So, we do prefer the label when figuring out how we’re going to serialize:\n * it has whitespace, casing, and we can ignore most useless character\n * escapes and all character references.\n *\n * @type {AssociationId}\n */\nexport function association(node) {\n  if (node.label || !node.identifier) {\n    return node.label || ''\n  }\n\n  return decodeString(node.identifier)\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n */\n\nimport {patternCompile} from '../util/pattern-compile.js'\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n * @typedef {import('../types.js').ConstructName} ConstructName\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').SafeConfig} SafeConfig\n */\n\nimport {patternCompile} from './pattern-compile.js'\nimport {patternInScope} from './pattern-in-scope.js'\n\n/**\n * Make a string safe for embedding in markdown constructs.\n *\n * In markdown, almost all punctuation characters can, in certain cases,\n * result in something.\n * Whether they do is highly subjective to where they happen and in what\n * they happen.\n *\n * To solve this, `mdast-util-to-markdown` tracks:\n *\n * * Characters before and after something;\n * * What “constructs” we are in.\n *\n * This information is then used by this function to escape or encode\n * special characters.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {string | null | undefined} input\n *   Raw value to make safe.\n * @param {SafeConfig} config\n *   Configuration.\n * @returns {string}\n *   Serialized markdown safe for embedding.\n */\nexport function safe(state, input, config) {\n  const value = (config.before || '') + (input || '') + (config.after || '')\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {Record<number, {before: boolean, after: boolean}>} */\n  const infos = {}\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n\n    if (!patternInScope(state.stack, pattern)) {\n      continue\n    }\n\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    while ((match = expression.exec(value))) {\n      const before = 'before' in pattern || Boolean(pattern.atBreak)\n      const after = 'after' in pattern\n      const position = match.index + (before ? match[1].length : 0)\n\n      if (positions.includes(position)) {\n        if (infos[position].before && !before) {\n          infos[position].before = false\n        }\n\n        if (infos[position].after && !after) {\n          infos[position].after = false\n        }\n      } else {\n        positions.push(position)\n        infos[position] = {before, after}\n      }\n    }\n  }\n\n  positions.sort(numerical)\n\n  let start = config.before ? config.before.length : 0\n  const end = value.length - (config.after ? config.after.length : 0)\n  index = -1\n\n  while (++index < positions.length) {\n    const position = positions[index]\n\n    // Character before or after matched:\n    if (position < start || position >= end) {\n      continue\n    }\n\n    // If this character is supposed to be escaped because it has a condition on\n    // the next character, and the next character is definitly being escaped,\n    // then skip this escape.\n    if (\n      (position + 1 < end &&\n        positions[index + 1] === position + 1 &&\n        infos[position].after &&\n        !infos[position + 1].before &&\n        !infos[position + 1].after) ||\n      (positions[index - 1] === position - 1 &&\n        infos[position].before &&\n        !infos[position - 1].before &&\n        !infos[position - 1].after)\n    ) {\n      continue\n    }\n\n    if (start !== position) {\n      // If we have to use a character reference, an ampersand would be more\n      // correct, but as backslashes only care about punctuation, either will\n      // do the trick\n      result.push(escapeBackslashes(value.slice(start, position), '\\\\'))\n    }\n\n    start = position\n\n    if (\n      /[!-/:-@[-`{-~]/.test(value.charAt(position)) &&\n      (!config.encode || !config.encode.includes(value.charAt(position)))\n    ) {\n      // Character escape.\n      result.push('\\\\')\n    } else {\n      // Character reference.\n      result.push(\n        '&#x' + value.charCodeAt(position).toString(16).toUpperCase() + ';'\n      )\n      start++\n    }\n  }\n\n  result.push(escapeBackslashes(value.slice(start, end), config.after))\n\n  return result.join('')\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nfunction numerical(a, b) {\n  return a - b\n}\n\n/**\n * @param {string} value\n * @param {string} after\n * @returns {string}\n */\nfunction escapeBackslashes(value, after) {\n  const expression = /\\\\(?=[!-/:-@[-`{-~])/g\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const results = []\n  const whole = value + after\n  let index = -1\n  let start = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = expression.exec(whole))) {\n    positions.push(match.index)\n  }\n\n  while (++index < positions.length) {\n    if (start !== positions[index]) {\n      results.push(value.slice(start, positions[index]))\n    }\n\n    results.push('\\\\')\n    start = positions[index]\n  }\n\n  results.push(value.slice(start))\n\n  return results.join('')\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Unsafe} pattern\n * @returns {RegExp}\n */\nexport function patternCompile(pattern) {\n  if (!pattern._compiled) {\n    const before =\n      (pattern.atBreak ? '[\\\\r\\\\n][\\\\t ]*' : '') +\n      (pattern.before ? '(?:' + pattern.before + ')' : '')\n\n    pattern._compiled = new RegExp(\n      (before ? '(' + before + ')' : '') +\n        (/[|\\\\{}()[\\]^$+*?.-]/.test(pattern.character) ? '\\\\' : '') +\n        pattern.character +\n        (pattern.after ? '(?:' + pattern.after + ')' : ''),\n      'g'\n    )\n  }\n\n  return pattern._compiled\n}\n","/**\n * @typedef {import('../types.js').CreateTracker} CreateTracker\n * @typedef {import('../types.js').TrackCurrent} TrackCurrent\n * @typedef {import('../types.js').TrackMove} TrackMove\n * @typedef {import('../types.js').TrackShift} TrackShift\n */\n\n/**\n * Track positional info in the output.\n *\n * @type {CreateTracker}\n */\nexport function track(config) {\n  // Defaults are used to prevent crashes when older utilities somehow activate\n  // this code.\n  /* c8 ignore next 5 */\n  const options = config || {}\n  const now = options.now || {}\n  let lineShift = options.lineShift || 0\n  let line = now.line || 1\n  let column = now.column || 1\n\n  return {move, current, shift}\n\n  /**\n   * Get the current tracked info.\n   *\n   * @type {TrackCurrent}\n   */\n  function current() {\n    return {now: {line, column}, lineShift}\n  }\n\n  /**\n   * Define an increased line shift (the typical indent for lines).\n   *\n   * @type {TrackShift}\n   */\n  function shift(value) {\n    lineShift += value\n  }\n\n  /**\n   * Move past some generated markdown.\n   *\n   * @type {TrackMove}\n   */\n  function move(input) {\n    // eslint-disable-next-line unicorn/prefer-default-parameters\n    const value = input || ''\n    const chunks = value.split(/\\r?\\n|\\r/g)\n    const tail = chunks[chunks.length - 1]\n    line += chunks.length - 1\n    column =\n      chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift\n    return value\n  }\n}\n","/**\n * @import {Nodes, Parents, PhrasingContent, Root, Text} from 'mdast'\n * @import {BuildVisitor, Test, VisitorResult} from 'unist-util-visit-parents'\n */\n\n/**\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[...Array<Parents>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @typedef {RegExp | string} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n *\n * @typedef {[Find, Replace?]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n *\n * @typedef {ReplaceFunction | string | null | undefined} Replace\n *   Thing to replace with.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | null | undefined}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n *\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore (optional).\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param {Nodes} tree\n *   Tree to change.\n * @param {FindAndReplaceList | FindAndReplaceTuple} list\n *   Patterns to find.\n * @param {Options | null | undefined} [options]\n *   Configuration (when `find` is not `Find`).\n * @returns {undefined}\n *   Nothing.\n */\nexport function findAndReplace(tree, list, options) {\n  const settings = options || {}\n  const ignored = convert(settings.ignore || [])\n  const pairs = toPairs(list)\n  let pairIndex = -1\n\n  while (++pairIndex < pairs.length) {\n    visitParents(tree, 'text', visitor)\n  }\n\n  /** @type {BuildVisitor<Root, 'text'>} */\n  function visitor(node, parents) {\n    let index = -1\n    /** @type {Parents | undefined} */\n    let grandparent\n\n    while (++index < parents.length) {\n      const parent = parents[index]\n      /** @type {Array<Nodes> | undefined} */\n      const siblings = grandparent ? grandparent.children : undefined\n\n      if (\n        ignored(\n          parent,\n          siblings ? siblings.indexOf(parent) : undefined,\n          grandparent\n        )\n      ) {\n        return\n      }\n\n      grandparent = parent\n    }\n\n    if (grandparent) {\n      return handler(node, parents)\n    }\n  }\n\n  /**\n   * Handle a text node which is not in an ignored parent.\n   *\n   * @param {Text} node\n   *   Text node.\n   * @param {Array<Parents>} parents\n   *   Parents.\n   * @returns {VisitorResult}\n   *   Result.\n   */\n  function handler(node, parents) {\n    const parent = parents[parents.length - 1]\n    const find = pairs[pairIndex][0]\n    const replace = pairs[pairIndex][1]\n    let start = 0\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    const index = siblings.indexOf(node)\n    let change = false\n    /** @type {Array<PhrasingContent>} */\n    let nodes = []\n\n    find.lastIndex = 0\n\n    let match = find.exec(node.value)\n\n    while (match) {\n      const position = match.index\n      /** @type {RegExpMatchObject} */\n      const matchObject = {\n        index: match.index,\n        input: match.input,\n        stack: [...parents, node]\n      }\n      let value = replace(...match, matchObject)\n\n      if (typeof value === 'string') {\n        value = value.length > 0 ? {type: 'text', value} : undefined\n      }\n\n      // It wasn’t a match after all.\n      if (value === false) {\n        // False acts as if there was no match.\n        // So we need to reset `lastIndex`, which currently being at the end of\n        // the current match, to the beginning.\n        find.lastIndex = position + 1\n      } else {\n        if (start !== position) {\n          nodes.push({\n            type: 'text',\n            value: node.value.slice(start, position)\n          })\n        }\n\n        if (Array.isArray(value)) {\n          nodes.push(...value)\n        } else if (value) {\n          nodes.push(value)\n        }\n\n        start = position + match[0].length\n        change = true\n      }\n\n      if (!find.global) {\n        break\n      }\n\n      match = find.exec(node.value)\n    }\n\n    if (change) {\n      if (start < node.value.length) {\n        nodes.push({type: 'text', value: node.value.slice(start)})\n      }\n\n      parent.children.splice(index, 1, ...nodes)\n    } else {\n      nodes = [node]\n    }\n\n    return index + nodes.length\n  }\n}\n\n/**\n * Turn a tuple or a list of tuples into pairs.\n *\n * @param {FindAndReplaceList | FindAndReplaceTuple} tupleOrList\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(tupleOrList) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (!Array.isArray(tupleOrList)) {\n    throw new TypeError('Expected find and replace tuple or list of tuples')\n  }\n\n  /** @type {FindAndReplaceList} */\n  // @ts-expect-error: correct.\n  const list =\n    !tupleOrList[0] || Array.isArray(tupleOrList[0])\n      ? tupleOrList\n      : [tupleOrList]\n\n  let index = -1\n\n  while (++index < list.length) {\n    const tuple = list[index]\n    result.push([toExpression(tuple[0]), toFunction(tuple[1])])\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function'\n    ? replace\n    : function () {\n        return replace\n      }\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parent | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'tab'\n\n  // To do: remove in a major.\n  // @ts-expect-error: deprecated.\n  if (style === 1 || style === '1') {\n    return 'one'\n  }\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').PhrasingContent} PhrasingContent\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * Serialize the children of a parent that contains phrasing children.\n *\n * These children will be joined flush together.\n *\n * @param {Parent & {children: Array<PhrasingContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Info} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined together.\n */\nexport function containerPhrasing(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n  let before = info.before\n\n  indexStack.push(-1)\n  let tracker = state.createTracker(info)\n\n  while (++index < children.length) {\n    const child = children[index]\n    /** @type {string} */\n    let after\n\n    indexStack[indexStack.length - 1] = index\n\n    if (index + 1 < children.length) {\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      let handle = state.handle.handlers[children[index + 1].type]\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      if (handle && handle.peek) handle = handle.peek\n      after = handle\n        ? handle(children[index + 1], parent, state, {\n            before: '',\n            after: '',\n            ...tracker.current()\n          }).charAt(0)\n        : ''\n    } else {\n      after = info.after\n    }\n\n    // In some cases, html (text) can be found in phrasing right after an eol.\n    // When we’d serialize that, in most cases that would be seen as html\n    // (flow).\n    // As we can’t escape or so to prevent it from happening, we take a somewhat\n    // reasonable approach: replace that eol with a space.\n    // See: <https://github.com/syntax-tree/mdast-util-to-markdown/issues/15>\n    if (\n      results.length > 0 &&\n      (before === '\\r' || before === '\\n') &&\n      child.type === 'html'\n    ) {\n      results[results.length - 1] = results[results.length - 1].replace(\n        /(\\r?\\n|\\r)$/,\n        ' '\n      )\n      before = ' '\n\n      // To do: does this work to reset tracker?\n      tracker = state.createTracker(info)\n      tracker.move(results.join(''))\n    }\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          ...tracker.current(),\n          before,\n          after\n        })\n      )\n    )\n\n    before = results[results.length - 1].slice(-1)\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n","/**\n * @typedef {import('../types.js').FlowContent} FlowContent\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').TrackFields} TrackFields\n */\n\n/**\n * @param {Parent & {children: Array<FlowContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {TrackFields} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined by (blank) lines.\n */\nexport function containerFlow(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  const tracker = state.createTracker(info)\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n\n  indexStack.push(-1)\n\n  while (++index < children.length) {\n    const child = children[index]\n\n    indexStack[indexStack.length - 1] = index\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          before: '\\n',\n          after: '\\n',\n          ...tracker.current()\n        })\n      )\n    )\n\n    if (child.type !== 'list') {\n      state.bulletLastUsed = undefined\n    }\n\n    if (index < children.length - 1) {\n      results.push(\n        tracker.move(between(child, children[index + 1], parent, state))\n      )\n    }\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n\n/**\n * @param {Node} left\n * @param {Node} right\n * @param {Parent} parent\n * @param {State} state\n * @returns {string}\n */\nfunction between(left, right, parent, state) {\n  let index = state.join.length\n\n  while (index--) {\n    const result = state.join[index](left, right, parent, state)\n\n    if (result === true || result === 1) {\n      break\n    }\n\n    if (typeof result === 'number') {\n      return '\\n'.repeat(1 + result)\n    }\n\n    if (result === false) {\n      return '\\n\\n<!---->\\n\\n'\n    }\n  }\n\n  return '\\n\\n'\n}\n","/**\n * @typedef {import('../types.js').IndentLines} IndentLines\n */\n\nconst eol = /\\r?\\n|\\r/g\n\n/**\n * @type {IndentLines}\n */\nexport function indentLines(value, map) {\n  /** @type {Array<string>} */\n  const result = []\n  let start = 0\n  let line = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = eol.exec(value))) {\n    one(value.slice(start, match.index))\n    result.push(match[0])\n    start = match.index + match[0].length\n    line++\n  }\n\n  one(value.slice(start))\n\n  return result.join('')\n\n  /**\n   * @param {string} value\n   */\n  function one(value) {\n    result.push(map(value, line, !value))\n  }\n}\n"],"names":["association","node","label","identifier","decodeString","inlineCode","_","state","value","sequence","index","RegExp","test","unsafe","length","pattern","expression","patternCompile","match","atBreak","exec","position","charCodeAt","slice","peek","patternInScope","stack","listInScope","inConstruct","notInConstruct","list","none","includes","safe","input","config","before","after","positions","result","infos","Boolean","push","sort","numerical","start","end","escapeBackslashes","charAt","encode","toString","toUpperCase","join","a","b","results","whole","_compiled","character","track","options","now","lineShift","line","column","move","chunks","split","tail","current","shift","findAndReplace","tree","settings","ignored","convert","ignore","pairs","tupleOrList","Array","isArray","TypeError","tuple","toExpression","toFunction","toPairs","pairIndex","visitParents","visitor","parents","grandparent","parent","siblings","children","undefined","indexOf","find","replace","change","nodes","lastIndex","matchObject","type","global","splice","handler","string","escape","listItem","info","listItemIndent","style","Error","checkListItemIndent","bullet","bulletCurrent","marker","checkBullet","ordered","incrementListMarker","size","spread","Math","ceil","tracker","createTracker","repeat","exit","enter","indentLines","containerFlow","blank","containerPhrasing","indexStack","child","handle","handlers","pop","bulletLastUsed","between","left","right","eol","map","one"],"sourceRoot":""}