{"version":3,"file":"static/js/chat-input.9f7fad6e.chunk.js","mappings":"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","sources":["components/chat/ChatInput/index.js"],"sourcesContent":["import { useState, useRef, useEffect, useCallback, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { PlusIcon, PaperAirplaneIcon, XIcon, CheckIcon,  KebabHorizontalIcon, ImageIcon,  SearchIcon, LightBulbIcon } from '@primer/octicons-react';\nimport styles from './ChatInput.module.css';\nimport { useChatState } from '../../../contexts/ChatStateContext';\nimport { useChatControl } from '../../../contexts/ChatControlContext';\n\n/**\n * Reads a file and returns its base64 representation.\n * @param {File} file - The file to read.\n * @returns {Promise<string>} A promise resolving with the base64 data URL.\n */\nconst readFileAsBase64 = (file) => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = (error) => reject(error);\n    reader.readAsDataURL(file);\n  });\n};\n\n/**\n * Auto-resizing chat input component with image upload support\n * @param {Object} props - Component props\n * @param {Function} props.onSendMessage - Function to handle message sending\n * @param {Function} props.onNewChat - Function to trigger a new chat\n * @param {boolean} [props.disabled=false] - Whether the input is disabled\n * @param {Object} [props.selectedModel] - Currently selected model\n * @param {boolean} [props.isStaticLayout=false] - Flag indicating if the layout is static (empty chat)\n * @param {Object} [props.editingMessage=null] - Message being edited, or null if not in edit mode\n * @param {Function} [props.onCancelEdit] - Function to cancel edit mode\n * @param {boolean} [props.isStreaming=false] - Flag indicating if the input is in streaming mode\n * @param {Function} [props.toggleModelSelector] - Function to toggle model selector\n * @param {Function} [props.onFocus] - Function to call when input is focused\n * @returns {JSX.Element} - Rendered component\n */\nconst ChatInput = memo(({ \n  onSendMessage, \n  onNewChat, \n  disabled = false, \n  selectedModel, \n  isStaticLayout = false,\n  editingMessage = null,\n  onCancelEdit,\n  isStreaming = false,\n  toggleModelSelector,\n  onFocus\n}) => {\n  const [message, setMessage] = useState('');\n  const [selectedImages, setSelectedImages] = useState([]);\n  const textareaRef = useRef(null);\n  const fileInputRef = useRef(null);\n  const isEditing = !!editingMessage;\n  const [isMobile, setIsMobile] = useState(window.innerWidth <= 600);\n  const { isWaitingForResponse } = useChatState();\n  const { stopGeneration } = useChatControl();\n  \n  // Set up window resize listener to detect mobile view\n  useEffect(() => {\n    const handleResize = () => {\n      setIsMobile(window.innerWidth <= 600);\n    };\n    \n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  \n  // Focus input on mount\n  useEffect(() => {\n    if (textareaRef.current) {\n      textareaRef.current.focus();\n    }\n  }, []);\n  \n  // Set message content when entering edit mode\n  useEffect(() => {\n    if (editingMessage) {\n      // Extract text and images for edit mode\n      let textContent = '';\n      const images = [];\n      if (typeof editingMessage.content === 'string') {\n        textContent = editingMessage.content;\n      } else if (Array.isArray(editingMessage.content)) {\n        editingMessage.content.forEach(part => {\n          if (part.type === 'text') textContent += part.text || '';\n          if (part.type === 'image_url' && part.image_url?.url) {\n            images.push({ name: '', url: part.image_url.url });\n          }\n        });\n      }\n      setMessage(textContent);\n      setSelectedImages(images);\n      // Focus on textarea after render\n      setTimeout(() => textareaRef.current?.focus(), 0);\n    }\n  }, [editingMessage]);\n  \n  // Auto-resize the textarea as content changes\n  const adjustTextareaHeight = useCallback(() => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n    \n    // Reset height to auto to get proper scrollHeight\n    textarea.style.height = 'auto';\n    \n    // Set height to scrollHeight (content height) + some padding\n    const newHeight = Math.min(textarea.scrollHeight + 2, 200);\n    textarea.style.height = `${newHeight}px`;\n\n    // Update the parent container\n    const inputContainer = textarea.closest('.inputContainer') || textarea.closest(`.${styles.inputContainer}`);\n    if (inputContainer) {\n      // The ResizeObserver in ChatContainer will detect this height change\n      inputContainer.style.height = 'auto';\n    }\n  }, []);\n  \n  // Update height when message changes\n  useEffect(() => {\n    adjustTextareaHeight();\n  }, [message, adjustTextareaHeight]);\n  \n  // Handle message change\n  const handleChange = (e) => {\n    setMessage(e.target.value);\n  };\n  \n  // Handle keydown events (Enter without Shift to send, Escape to cancel edit)\n  const handleKeyDown = (e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      // Only process if there is text and not waiting for a response\n      if (!isWaitingForResponse && (message.trim() || selectedImages.length > 0)) {\n        if (!selectedModel && toggleModelSelector) {\n          // If no model is selected, show the model selector\n          toggleModelSelector();\n        } else {\n          handleSend();\n        }\n      }\n      // No action for Enter key while waiting for response\n    } else if (isEditing && e.key === 'Escape') {\n      e.preventDefault();\n      handleCancelEdit();\n    }\n  };\n  \n  // Function to handle image selection\n  const handleImageSelection = async (event) => {\n    const files = Array.from(event.target.files);\n    if (!files.length) return;\n\n    // Limit the number of images (e.g., to 5)\n    const MAX_IMAGES = 5;\n    if (selectedImages.length + files.length > MAX_IMAGES) {\n      alert(`You can upload a maximum of ${MAX_IMAGES} images.`);\n      // Clear the file input value to allow re-selection of the same file if needed\n      if (fileInputRef.current) {\n         fileInputRef.current.value = \"\";\n      }\n      return;\n    }\n\n    try {\n      const imagePromises = files.map(async (file) => {\n        // Basic validation (type and size)\n        if (!file.type.startsWith('image/')) {\n            throw new Error(`File ${file.name} is not a valid image type.`);\n        }\n        const MAX_SIZE_MB = 5; // Example: 5MB limit per image\n        if (file.size > MAX_SIZE_MB * 1024 * 1024) {\n             throw new Error(`File ${file.name} exceeds the ${MAX_SIZE_MB}MB size limit.`);\n        }\n\n        const base64 = await readFileAsBase64(file);\n        return { name: file.name, url: base64 }; // Store name and base64 URL\n      });\n\n      const newImages = await Promise.all(imagePromises);\n      setSelectedImages((prevImages) => [...prevImages, ...newImages]);\n    } catch (error) {\n      console.error(\"Error processing images:\", error);\n      alert(`Error processing images: ${error.message}`);\n    }\n\n    // Clear the file input value to allow re-selection of the same file if needed\n     if (fileInputRef.current) {\n         fileInputRef.current.value = \"\";\n     }\n  };\n\n  // Handle clipboard paste events for images\n  const handlePaste = async (e) => {\n    if (isEditing) return; // Don't handle paste in edit mode\n    \n    const items = e.clipboardData?.items;\n    if (!items) return;\n    \n    // Find image items in the clipboard\n    const imageItems = Array.from(items).filter(item => item.type.startsWith('image/'));\n    if (imageItems.length === 0) return;\n    \n    // Limit the number of images (e.g., to 5)\n    const MAX_IMAGES = 5;\n    if (selectedImages.length + imageItems.length > MAX_IMAGES) {\n      alert(`You can upload a maximum of ${MAX_IMAGES} images.`);\n      return;\n    }\n    \n    try {\n      const imagePromises = imageItems.map(async (item) => {\n        const file = item.getAsFile();\n        // Basic validation (size)\n        const MAX_SIZE_MB = 5; // Example: 5MB limit per image\n        if (file.size > MAX_SIZE_MB * 1024 * 1024) {\n          throw new Error(`Pasted image exceeds the ${MAX_SIZE_MB}MB size limit.`);\n        }\n        \n        const base64 = await readFileAsBase64(file);\n        return { name: 'pasted-image-' + Date.now(), url: base64 };\n      });\n      \n      const newImages = await Promise.all(imagePromises);\n      setSelectedImages((prevImages) => [...prevImages, ...newImages]);\n      \n      // If a paste event is detected and handled as an image, prevent the default behavior\n      // to avoid also pasting the image as text\n      if (newImages.length > 0) {\n        e.preventDefault();\n      }\n    } catch (error) {\n      console.error(\"Error processing pasted images:\", error);\n      alert(`Error processing pasted images: ${error.message}`);\n    }\n  };\n\n  // Function to remove an image\n  const removeImage = (indexToRemove) => {\n    setSelectedImages((prevImages) => prevImages.filter((_, index) => index !== indexToRemove));\n  };\n\n  // Trigger hidden file input click\n  const triggerFileInput = () => {\n    fileInputRef.current?.click();\n  };\n\n  // Cancel edit mode\n  const handleCancelEdit = () => {\n    if (onCancelEdit) onCancelEdit();\n    setMessage('');\n    setSelectedImages([]);\n  };\n\n  // Stop the response generation\n  const handleStop = () => {\n    stopGeneration();\n  };\n\n  // Send message and reset input\n  const handleSend = () => {\n    // Ensure there's either text or images to send, and not disabled\n    const hasText = message.trim().length > 0;\n    const hasImages = selectedImages.length > 0;\n    \n    // If no model is selected but there's something to send, show model selector\n    if ((!hasText && !hasImages) || disabled) return;\n    \n    // If no model is selected, show model selector\n    if (!selectedModel && toggleModelSelector) {\n      toggleModelSelector();\n      return;\n    }\n\n    // ALWAYS construct payload as an array of parts\n    const contentPayload = [];\n\n    if (hasText) {\n      contentPayload.push({ type: 'text', text: message.trim() });\n    }\n\n    if (hasImages) {\n      selectedImages.forEach(img => {\n        contentPayload.push({ type: 'image_url', image_url: { url: img.url } });\n      });\n    }\n\n    // Only call onSendMessage if payload is not empty\n    if (contentPayload.length > 0) {\n      // If editing, pass the editing message as the second parameter  \n      onSendMessage(contentPayload, isEditing ? editingMessage : null);\n    }\n\n    // Reset state AFTER sending\n    setMessage('');\n    setSelectedImages([]);\n    \n    // Exit edit mode if we were editing\n    if (isEditing && onCancelEdit) {\n      onCancelEdit();\n    }\n\n    // Reset textarea height and focus\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      setTimeout(() => textareaRef.current?.focus(), 0);\n    }\n  };\n  \n  // Handle button click for send or stop\n  const handleButtonClick = (e) => {\n    // Prevent event bubbling\n    e.preventDefault();\n    e.stopPropagation();\n    \n    if (isWaitingForResponse) {\n      handleStop();\n    } else if (!selectedModel && (message.trim() || selectedImages.length > 0)) {\n      // If no model is selected but there's content to send, show model selector\n      if (toggleModelSelector) {\n        toggleModelSelector();\n      }\n    } else {\n      handleSend();\n    }\n    \n    // On mobile, blur the input to hide the keyboard after sending\n    if (isMobile && textareaRef.current) {\n      textareaRef.current.blur();\n    }\n  };\n  \n  // Determine placeholder text based on editing state\n  const placeholderText = isEditing \n    ? 'Edit your message...' \n    : isWaitingForResponse\n      ? 'Type your next message while waiting...'\n      : 'Ask anything';\n  \n  // Focus textarea and handle keyboard detection\n  useEffect(() => {\n    // This effect is for mobile keyboard detection\n    if (!isMobile) return;\n    \n    // Set up event listeners for detecting virtual keyboard\n    const detectKeyboard = () => {\n      // Consider keyboard open if window height significantly decreases\n      const isKeyboard = window.innerHeight < window.outerHeight * 0.75;\n      \n      // Add a class to the body element when keyboard is open\n      if (isKeyboard) {\n        document.body.classList.add('keyboard-open');\n      } else {\n        document.body.classList.remove('keyboard-open');\n      }\n    };\n    \n    const handleFocus = () => {\n      if (isMobile) {\n        document.body.classList.add('keyboard-open');\n        \n        // On some devices, we need to detect keyboard using window resizing\n        window.addEventListener('resize', detectKeyboard);\n      }\n      \n      // Call onFocus prop if provided\n      if (onFocus) {\n        onFocus();\n      }\n    };\n    \n    const handleBlur = () => {\n      if (isMobile) {\n        document.body.classList.remove('keyboard-open');\n        window.removeEventListener('resize', detectKeyboard);\n      }\n    };\n    \n    // Capture ref value in closure to avoid stale ref in cleanup function\n    const textarea = textareaRef.current;\n    \n    if (textarea) {\n      textarea.addEventListener('focus', handleFocus);\n      textarea.addEventListener('blur', handleBlur);\n    }\n    \n    return () => {\n      if (textarea) {\n        textarea.removeEventListener('focus', handleFocus);\n        textarea.removeEventListener('blur', handleBlur);\n      }\n      window.removeEventListener('resize', detectKeyboard);\n    };\n  }, [isMobile, textareaRef, onFocus]);\n  \n  // Auto-focus textarea when component mounts or app state changes\n  useEffect(() => {\n    // Focus the textarea when the component mounts\n    if (textareaRef.current) {\n      textareaRef.current.focus();\n    }\n  }, []);\n  \n  return (\n    <>\n      {/* Image Previews Container - Moved outside inputContainer */}\n      {selectedImages.length > 0 && (\n        <div className={styles.imagePreviewContainer}>\n          {selectedImages.map((image, index) => (\n            <div key={index} className={styles.imagePreviewWrapper}>\n              <img \n                src={image.url} \n                alt={`preview ${index}`} \n                className={styles.imagePreview} \n              />\n              <button \n                className={styles.removeImageButton} \n                onClick={() => removeImage(index)}\n                aria-label={`Remove image ${index + 1}`}\n                title={`Remove image ${index + 1}`}\n              >\n                <XIcon size={12} />\n              </button>\n            </div>\n          ))}\n        </div>\n      )}\n\n      <div className={`${styles.inputContainer} ${isEditing ? styles.editing : ''} ${isWaitingForResponse ? styles.waitingForResponse : ''} ${isMobile ? styles.mobileView : ''}`}>\n        {/* Hidden file input */}\n        <input\n          type=\"file\"\n          ref={fileInputRef}\n          style={{ display: 'none' }}\n          accept=\"image/jpeg, image/png, image/gif, image/webp\"\n          multiple\n          onChange={handleImageSelection}\n        />\n\n        {/* Text input area with send button inside */}\n        <div className={`${styles.inputWrapper} ${!selectedModel ? styles.noModelSelected : ''}`}>\n          <textarea\n            ref={textareaRef}\n            className={styles.chatInput}\n            placeholder={placeholderText}\n            value={message}\n            onChange={handleChange}\n            onKeyDown={handleKeyDown}\n            onPaste={handlePaste}\n            disabled={disabled}\n            rows={1}\n            aria-label=\"Chat message input\"\n          />\n          \n          {/* Send/Stop button positioned inside the textarea */}\n          <button\n            className={`${styles.sendButtonInline} ${isWaitingForResponse ? styles.stopButton : ''} ${!selectedModel ? styles.noModelSelected : ''}`}\n            onClick={handleButtonClick}\n            disabled={(!isWaitingForResponse && ((!message.trim() && selectedImages.length === 0) || disabled))}\n            aria-label={isWaitingForResponse ? \"Stop generation\" : !selectedModel ? \"Select model\" : isEditing ? \"Save edit\" : \"Send message\"}\n            title={isWaitingForResponse ? \"Stop generation\" : !selectedModel ? \"Select a model\" : isEditing ? \"Save edit (Enter)\" : \"Send message (Enter)\"}\n            type=\"button\"\n          >\n            {isWaitingForResponse ? (\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"21\" height=\"21\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\n              </svg>\n            ) : !selectedModel ? (\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <rect x=\"3\" y=\"3\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n                <rect x=\"7\" y=\"3\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n                <rect x=\"11\" y=\"3\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n                <rect x=\"3\" y=\"7\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n                <rect x=\"7\" y=\"7\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n                <rect x=\"11\" y=\"7\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n                <rect x=\"3\" y=\"11\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n                <rect x=\"7\" y=\"11\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n                <rect x=\"11\" y=\"11\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n              </svg>\n            ) : isEditing ? (\n              <CheckIcon size={21} />\n            ) : (\n              <PaperAirplaneIcon size={21} />\n            )}\n          </button>\n        </div>\n        \n        {/* Buttons in a single row */}\n        <div className={styles.actionRow}>\n          {/* Left side buttons */}\n          <div className={styles.leftButtons}>\n            {/* Upload button - moved to left side */}\n            <button\n              className={styles.uploadButton}\n              onClick={toggleModelSelector ? (selectedModel ? triggerFileInput : toggleModelSelector) : triggerFileInput}\n              disabled={disabled}\n              aria-label={selectedModel?.capabilities?.includes('vision') ? \"Upload images\" : \"Select model for image upload\"}\n              title={selectedModel?.capabilities?.includes('vision') ? \"Upload images\" : \"Select model for image upload\"}\n              type=\"button\"\n            >\n              <ImageIcon size={16} />\n            </button>\n            \n            <button\n              className={`${styles.textButton} ${isMobile ? styles.iconOnlyButton : ''}`}\n              aria-label=\"Search\"\n              title=\"Search\"\n              type=\"button\"\n            >\n              <SearchIcon size={16} />\n              {!isMobile && <span className={styles.buttonText}>Search</span>}\n            </button>\n            \n            <button\n              className={`${styles.textButton} ${isMobile ? styles.iconOnlyButton : ''}`}\n              aria-label=\"Reason mode\"\n              title=\"Reason mode\"\n              type=\"button\"\n            >\n              <LightBulbIcon size={16} />\n              {!isMobile && <span className={styles.buttonText}>Reason</span>}\n            </button>\n            \n            <button\n              className={styles.actionButton}\n              aria-label=\"More options\"\n              title=\"More options\"\n              type=\"button\"\n            >\n              <KebabHorizontalIcon size={16} />\n            </button>\n          </div>\n          \n          {/* Right side buttons */}\n          <div className={styles.rightButtons}>\n            {/* New chat button - moved to right side */}\n            <button \n              className={styles.actionButton}\n              onClick={onNewChat}\n              aria-label=\"New chat\"\n              title=\"New chat\"\n              type=\"button\"\n            >\n              <PlusIcon size={16} />\n            </button>\n            \n            {/* Cancel edit button (Only when editing) */}\n            {isEditing && (\n              <button\n                className={styles.uploadButton}\n                onClick={handleCancelEdit}\n                aria-label=\"Cancel edit\"\n                title=\"Cancel edit (Esc)\"\n                type=\"button\"\n              >\n                <XIcon size={16} />\n              </button>\n            )}\n            \n            {/* AI model button */}\n            <button\n              className={styles.modelButton}\n              onClick={toggleModelSelector}\n              aria-label=\"Select AI model\"\n              title=\"Select AI model\"\n              type=\"button\"\n            >\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <rect x=\"3\" y=\"3\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n                <rect x=\"7\" y=\"3\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n                <rect x=\"11\" y=\"3\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n                <rect x=\"3\" y=\"7\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n                <rect x=\"7\" y=\"7\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n                <rect x=\"11\" y=\"7\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n                <rect x=\"3\" y=\"11\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n                <rect x=\"7\" y=\"11\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n                <rect x=\"11\" y=\"11\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n              </svg>\n            </button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n});\n\n// PropTypes for documentation and type checking\nChatInput.propTypes = {\n  onSendMessage: PropTypes.func.isRequired,\n  onNewChat: PropTypes.func.isRequired,\n  disabled: PropTypes.bool,\n  selectedModel: PropTypes.object,\n  isStaticLayout: PropTypes.bool,\n  editingMessage: PropTypes.object,\n  onCancelEdit: PropTypes.func,\n  isStreaming: PropTypes.bool,\n  toggleModelSelector: PropTypes.func,\n  onFocus: PropTypes.func\n};\n\nexport default ChatInput; "],"names":["readFileAsBase64","file","Promise","resolve","reject","reader","FileReader","onload","result","onerror","error","readAsDataURL","memo","_ref","_selectedModel$capabi","_selectedModel$capabi2","onSendMessage","onNewChat","disabled","selectedModel","isStaticLayout","editingMessage","onCancelEdit","isStreaming","toggleModelSelector","onFocus","message","setMessage","useState","selectedImages","setSelectedImages","textareaRef","useRef","fileInputRef","isEditing","isMobile","setIsMobile","window","innerWidth","isWaitingForResponse","useChatState","stopGeneration","useChatControl","useEffect","handleResize","addEventListener","removeEventListener","current","focus","textContent","images","content","Array","isArray","forEach","part","_part$image_url","type","text","image_url","url","push","name","setTimeout","_textareaRef$current","adjustTextareaHeight","useCallback","textarea","style","height","newHeight","Math","min","scrollHeight","inputContainer","closest","styles","triggerFileInput","_fileInputRef$current","click","handleCancelEdit","handleSend","hasText","trim","length","hasImages","contentPayload","img","_textareaRef$current2","placeholderText","detectKeyboard","innerHeight","outerHeight","document","body","classList","add","remove","handleFocus","handleBlur","_jsxs","_Fragment","children","_jsx","className","imagePreviewContainer","map","image","index","imagePreviewWrapper","src","alt","imagePreview","removeImageButton","onClick","removeImage","indexToRemove","prevImages","filter","_","title","XIcon","size","editing","waitingForResponse","mobileView","ref","display","accept","multiple","onChange","async","files","from","event","target","alert","value","imagePromises","startsWith","Error","MAX_SIZE_MB","base64","newImages","all","inputWrapper","noModelSelected","chatInput","placeholder","e","onKeyDown","key","shiftKey","preventDefault","onPaste","_e$clipboardData","items","clipboardData","imageItems","item","getAsFile","Date","now","rows","sendButtonInline","stopButton","stopPropagation","blur","xmlns","width","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","x","y","rx","ry","CheckIcon","PaperAirplaneIcon","actionRow","leftButtons","uploadButton","capabilities","includes","ImageIcon","textButton","iconOnlyButton","SearchIcon","buttonText","LightBulbIcon","actionButton","KebabHorizontalIcon","rightButtons","PlusIcon","modelButton"],"sourceRoot":""}