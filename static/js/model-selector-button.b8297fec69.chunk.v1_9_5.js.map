{"version":3,"file":"static/js/model-selector-button.b8297fec69.chunk.v1_9_5.js","mappings":"4NASA,MAyHA,EAzH4BA,IAKrB,IALsB,kBAC3BC,EAAoB,KAAI,aACxBC,EAAe,KAAI,QACnBC,EAAO,SACPC,GAAW,GACZJ,EAEC,MAAOK,EAAUC,IAAeC,EAAAA,EAAAA,IAASC,OAAOC,YAAc,MACvDC,EAAcC,IAAmBJ,EAAAA,EAAAA,KAAS,GAC3CK,GAAYC,EAAAA,EAAAA,IAAO,MACnBC,GAAUD,EAAAA,EAAAA,IAAO,OAChBE,EAAaC,IAAkBT,EAAAA,EAAAA,IAAS,IACxCU,EAAWC,IAAgBX,EAAAA,EAAAA,KAAS,IACpCY,EAAaC,IAAkBb,EAAAA,EAAAA,KAAS,GAuE/C,OApEAc,EAAAA,EAAAA,KAAU,KACR,MAAMC,EAAeA,KACnBhB,EAAYE,OAAOC,YAAc,IAAI,EAIvC,OADAD,OAAOe,iBAAiB,SAAUD,GAC3B,IAAMd,OAAOgB,oBAAoB,SAAUF,EAAa,GAC9D,KAGHD,EAAAA,EAAAA,KAAU,KACR,GAAIT,EAAUa,SAAWxB,IAAsBgB,EAAW,CACxD,MAAMS,EAAQd,EAAUa,QAAQE,YAChCX,EAAeU,GACfR,GAAa,EACf,IACC,CAACjB,EAAmBgB,KAGvBI,EAAAA,EAAAA,KAAU,KACJN,EAAc,GAAKH,EAAUa,UAC/Bb,EAAUa,QAAQG,MAAMF,MAAQ,GAAGX,EAAY,OACjD,GACC,CAACA,KAGJM,EAAAA,EAAAA,KAAU,KACR,IAAKpB,IAAsBC,EAAc,OAEzC,MAAM2B,EAAWC,aAAY,KAC3BnB,GAAgBoB,IAASA,GAAK,GAC7B,KAEH,MAAO,IAAMC,cAAcH,EAAS,GACnC,CAAC5B,EAAmBC,KAGvBmB,EAAAA,EAAAA,KAAU,KACR,GAAIP,EAAQW,QAAS,CACnB,MAAMQ,EAAgBnB,EAAQW,QAAQS,YAAcpB,EAAQW,QAAQU,YACpEf,EAAea,EACjB,IACC,CAACvB,EAAcT,EAAmBC,EAAcG,KA2BjD+B,EAAAA,EAAAA,GAAA,UACEC,IAAKzB,EACL0B,UC/FgC,iDDgGhCnC,QAASA,EACTC,SAAUA,EACV,gBAAc,OACd,aAAY,0BAA0BH,GAAqB,UAAUsC,SAEpEnC,IAAaH,GACZmC,EAAAA,EAAAA,GAACI,EAAAA,QAAO,CAACC,KAAK,QAAQH,UCtGiW,6DDwGvXI,EAAAA,EAAAA,IAAA,OAAKJ,UCxG8G,+DDwG1DC,SAAA,EACvDH,EAAAA,EAAAA,GAAA,QACEC,IAAKvB,EACLwB,UAAW,wDAAuC5B,EC3Gqa,qED2GlW,MAAMS,GAAeT,EC3Gue,mED2Gta,KAAK6B,SA1BnNtC,EAIAC,GAAiBQ,EAfjBR,EAEEA,EACJyC,MAAM,KACNC,KAAIC,GAAQA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,GAAGC,gBACzDC,KAAK,KACLC,QAAQ,QAAS,MANM,GAgBjBlD,EAJAI,EAAW,eAAiB,oBA6B/B+B,EAAAA,EAAAA,GAACgB,EAAAA,IAAe,CAACX,KAAM,GAAIH,UC/GoQ,6DDkH5R,C","sources":["components/models/ModelSelectorButton/index.js","webpack://ai-chat-interface/./src/components/models/ModelSelectorButton/ModelSelectorButton.module.css?dc46"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { useState, useEffect, useRef } from 'react';\nimport { ChevronDownIcon } from '@primer/octicons-react';\nimport styles from './ModelSelectorButton.module.css';\nimport Spinner from '../../common/Spinner';\n\n/**\n * Button to trigger the model selection UI (Dropdown/Modal)\n */\nconst ModelSelectorButton = ({ \n  selectedModelName = null, \n  providerName = null,\n  onClick, \n  disabled = false \n}) => {\n  // State to track window width for responsive text\n  const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);\n  const [showProvider, setShowProvider] = useState(false);\n  const buttonRef = useRef(null);\n  const textRef = useRef(null);\n  const [buttonWidth, setButtonWidth] = useState(0);\n  const [buttonSet, setButtonSet] = useState(false);\n  const [hasOverflow, setHasOverflow] = useState(false);\n\n  // Update mobile state on window resize\n  useEffect(() => {\n    const handleResize = () => {\n      setIsMobile(window.innerWidth <= 768);\n    };\n    \n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  \n  // Measure button width once it's rendered with the model name\n  useEffect(() => {\n    if (buttonRef.current && selectedModelName && !buttonSet) {\n      const width = buttonRef.current.offsetWidth;\n      setButtonWidth(width);\n      setButtonSet(true);\n    }\n  }, [selectedModelName, buttonSet]);\n  \n  // Apply width to button when width is determined\n  useEffect(() => {\n    if (buttonWidth > 0 && buttonRef.current) {\n      buttonRef.current.style.width = `${buttonWidth+10}px`;\n    }\n  }, [buttonWidth]);\n  \n  // Animation to toggle between model and provider\n  useEffect(() => {\n    if (!selectedModelName || !providerName) return;\n    \n    const interval = setInterval(() => {\n      setShowProvider(prev => !prev);\n    }, 5000);\n    \n    return () => clearInterval(interval);\n  }, [selectedModelName, providerName]);\n  \n  // Check if text is overflowing\n  useEffect(() => {\n    if (textRef.current) {\n      const isOverflowing = textRef.current.scrollWidth > textRef.current.clientWidth;\n      setHasOverflow(isOverflowing);\n    }\n  }, [showProvider, selectedModelName, providerName, isMobile]);\n  \n  // Format provider name to title case\n  const getFormattedProvider = () => {\n    if (!providerName) return '';\n    \n    return providerName\n      .split(' ')\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n      .join(' ')\n      .replace(/Ai\\b/g, 'AI');\n  };\n  \n  // Get display text based on current state\n  const displayText = () => {\n    if (!selectedModelName) {\n      return isMobile ? 'Select Model' : 'Select a Model';\n    }\n    \n    if (!providerName || !showProvider) {\n      return selectedModelName;\n    } else {\n      return getFormattedProvider();\n    }\n  };\n  \n  return (\n    <button \n      ref={buttonRef}\n      className={styles.ModelSelectorButton}\n      onClick={onClick}\n      disabled={disabled}\n      aria-haspopup=\"true\"\n      aria-label={`Select Model (Current: ${selectedModelName || 'None'})`}\n    >\n      {disabled && !selectedModelName ? (\n        <Spinner size=\"small\" className={styles.ModelSelectorButton__spinner} />\n      ) : (\n        <div className={styles.ModelSelectorButton__innerContent}>\n          <span \n            ref={textRef}\n            className={`${styles.ModelSelectorButton__text} ${showProvider ? styles['ModelSelectorButton__text--showProvider'] : ''} ${hasOverflow && showProvider ? styles['ModelSelectorButton__text--scrollText'] : ''}`}\n          >\n            {displayText()}\n          </span>\n          <ChevronDownIcon size={16} className={styles.ModelSelectorButton__icon} />\n        </div>\n      )}\n    </button>\n  );\n};\n\nModelSelectorButton.propTypes = {\n  /** Currently selected model name to display */\n  selectedModelName: PropTypes.string,\n  /** Provider name of the selected model */\n  providerName: PropTypes.string,\n  /** Function to call when the button is clicked */\n  onClick: PropTypes.func.isRequired,\n  /** Whether the button should be disabled */\n  disabled: PropTypes.bool,\n};\n\nexport default ModelSelectorButton;","// extracted by mini-css-extract-plugin\nexport default {\"ModelSelectorButton\":\"ModelSelectorButton_ModelSelectorButton__6GaK1\",\"ModelSelectorButton__innerContent\":\"ModelSelectorButton_ModelSelectorButton__innerContent__594Yl\",\"ModelSelectorButton__text\":\"ModelSelectorButton_ModelSelectorButton__text__828LY\",\"ModelSelectorButton__icon\":\"ModelSelectorButton_ModelSelectorButton__icon__zKAt-\",\"ModelSelectorButton__spinner\":\"ModelSelectorButton_ModelSelectorButton__spinner__1OfGv\",\"ModelSelectorButton__text--showProvider\":\"ModelSelectorButton_ModelSelectorButton__text--showProvider__cYhWx\",\"fadeIn\":\"ModelSelectorButton_fadeIn__bc4cH\",\"ModelSelectorButton__text--scrollText\":\"ModelSelectorButton_ModelSelectorButton__text--scrollText__JZYVN\",\"scrollText\":\"ModelSelectorButton_scrollText__ItidS\"};"],"names":["_ref","selectedModelName","providerName","onClick","disabled","isMobile","setIsMobile","useState","window","innerWidth","showProvider","setShowProvider","buttonRef","useRef","textRef","buttonWidth","setButtonWidth","buttonSet","setButtonSet","hasOverflow","setHasOverflow","useEffect","handleResize","addEventListener","removeEventListener","current","width","offsetWidth","style","interval","setInterval","prev","clearInterval","isOverflowing","scrollWidth","clientWidth","_jsx","ref","className","children","Spinner","size","_jsxs","split","map","word","charAt","toUpperCase","slice","toLowerCase","join","replace","ChevronDownIcon"],"sourceRoot":""}