{"version":3,"file":"static/js/vendors-node_modules_remark-rehype_lib_index_js.e9c1859570.chunk.v1_9_0.js","mappings":"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","sources":["../node_modules/remark-rehype/node_modules/micromark-util-character/index.js","../node_modules/remark-rehype/node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","../node_modules/remark-rehype/node_modules/micromark-util-sanitize-uri/index.js","../node_modules/remark-rehype/node_modules/unist-util-position/lib/index.js","../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/revert.js","../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/index.js","../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/break.js","../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/code.js","../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/delete.js","../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/footnote.js","../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/heading.js","../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/html.js","../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/image.js","../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/link.js","../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/list.js","../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/root.js","../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/strong.js","../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/table.js","../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/text.js","../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/state.js","../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/index.js","../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/footer.js","../node_modules/remark-rehype/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n  if (!protocol) {\n    return value\n  }\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55295 && code < 57344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {NodeLike | Node | null | undefined} [node]\n *   Node.\n * @returns {Position}\n *   Position.\n */\nexport function position(node) {\n  return {start: pointStart(node), end: pointEnd(node)}\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'start' | 'end'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {NodeLike | Node | null | undefined} [node]\n   * @returns {Point}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    // To do: next major: don’t return points when invalid.\n    return {\n      // @ts-expect-error: in practice, null is allowed.\n      line: point.line || null,\n      // @ts-expect-error: in practice, null is allowed.\n      column: point.column || null,\n      // @ts-expect-error: in practice, null is allowed.\n      offset: point.offset > -1 ? point.offset : null\n    }\n  }\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('hast').Element} Element\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  if (index === -1) {\n    state.footnoteOrder.push(id)\n    state.footnoteCounts[id] = 1\n    counter = state.footnoteOrder.length\n  } else {\n    state.footnoteCounts[id]++\n    counter = index + 1\n  }\n\n  const reuseCounter = state.footnoteCounts[id]\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + state.clobberPrefix + 'fn-' + safeId,\n      id:\n        state.clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Reference} Reference\n * @typedef {import('mdast').Root} Root\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Reference>} References\n */\n\n// To do: next major: always return array.\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {References} node\n *   Reference node (image, link).\n * @returns {ElementContent | Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return {type: 'text', value: '![' + node.alt + suffix}\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === undefined || spread === null\n    ? node.children.length > 1\n    : spread\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {footnote} from './footnote.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  footnote,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  // To do: next major, use `node.lang` w/o regex, the splitting’s been going\n  // on for years in remark now.\n  const lang = node.lang ? node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/) : null\n  /** @type {Properties} */\n  const properties = {}\n\n  if (lang) {\n    properties.className = ['language-' + lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../state.js').State} State\n */\n\nimport {footnoteReference} from './footnote-reference.js'\n\n// To do: when both:\n// * <https://github.com/micromark/micromark-extension-footnote>\n// * <https://github.com/syntax-tree/mdast-util-footnote>\n// …are archived, remove this (also from mdast).\n// These inline notes are not used in GFM.\n\n/**\n * Turn an mdast `footnote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Footnote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnote(state, node) {\n  const footnoteById = state.footnoteById\n  let no = 1\n\n  while (no in footnoteById) no++\n\n  const identifier = String(no)\n\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier,\n    children: [{type: 'paragraph', children: node.children}],\n    position: node.position\n  }\n\n  return footnoteReference(state, {\n    type: 'footnoteReference',\n    identifier,\n    position: node.position\n  })\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').HTML} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Raw | Element | null}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.dangerous) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastRoot | HastElement}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointStart, pointEnd} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start.line && end.line) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(node, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastText | HastElement}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} MdastRoot\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n * @typedef {Extract<MdastNodes, MdastParent>} MdastParents\n *\n * @typedef EmbeddedHastFields\n *   hast fields.\n * @property {string | null | undefined} [hName]\n *   Generate a specific element with this tag name instead.\n * @property {HastProperties | null | undefined} [hProperties]\n *   Generate an element with these properties instead.\n * @property {Array<HastElementContent> | null | undefined} [hChildren]\n *   Generate an element with this content instead.\n *\n * @typedef {Record<string, unknown> & EmbeddedHastFields} MdastData\n *   mdast data with embedded hast fields.\n *\n * @typedef {MdastNodes & {data?: MdastData | null | undefined}} MdastNodeWithData\n *   mdast node with embedded hast data.\n *\n * @typedef PointLike\n *   Point-like value.\n * @property {number | null | undefined} [line]\n *   Line.\n * @property {number | null | undefined} [column]\n *   Column.\n * @property {number | null | undefined} [offset]\n *   Offset.\n *\n * @typedef PositionLike\n *   Position-like value.\n * @property {PointLike | null | undefined} [start]\n *   Point-like value.\n * @property {PointLike | null | undefined} [end]\n *   Point-like value.\n *\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | null | undefined} parent\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   hast node.\n *\n * @callback HFunctionProps\n *   Signature of `state` for when props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {HastProperties} props\n *   Properties.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @callback HFunctionNoProps\n *   Signature of `state` for when no props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @typedef HFields\n *   Info on `state`.\n * @property {boolean} dangerous\n *   Whether HTML is allowed.\n * @property {string} clobberPrefix\n *   Prefix to use to prevent DOM clobbering.\n * @property {string} footnoteLabel\n *   Label to use to introduce the footnote section.\n * @property {string} footnoteLabelTagName\n *   HTML used for the footnote label.\n * @property {HastProperties} footnoteLabelProperties\n *   Properties on the HTML tag used for the footnote label.\n * @property {string} footnoteBackLabel\n *   Label to use from backreferences back to their footnote call.\n * @property {(identifier: string) => MdastDefinition | null} definition\n *   Definition cache.\n * @property {Record<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Record<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {Handler} unknownHandler\n *   Handler for any none not in `passThrough` or otherwise handled.\n * @property {(from: MdastNodes, node: HastNodes) => void} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => Type | HastElement} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {(node: MdastNodes, parent: MdastParents | null | undefined) => HastElementContent | Array<HastElementContent> | null | undefined} one\n *   Transform an mdast node to hast.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastContent>(nodes: Array<Type>, loose?: boolean | null | undefined) => Array<Type | HastText>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n * @property {(left: MdastNodeWithData | PositionLike | null | undefined, right: HastElementContent) => HastElementContent} augment\n *   Like `state` but lower-level and usable on non-elements.\n *   Deprecated: use `patch` and `applyData`.\n * @property {Array<string>} passThrough\n *   List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree.\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute on footnotes to prevent it from\n *   *clobbering*.\n * @property {string | null | undefined} [footnoteBackLabel='Back to content']\n *   Label to use from backreferences back to their footnote call (affects\n *   screen readers).\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Label to use for the footnotes section (affects screen readers).\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (note that `id: 'footnote-label'`\n *   is always added as footnote calls use it with `aria-describedby` to\n *   provide an accessible label).\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   Tag name to use for the footnote label.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes.\n * @property {Array<string> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes.\n *\n * @typedef {Record<string, Handler>} Handlers\n *   Handle nodes.\n *\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} State\n *   Info passed around.\n */\n\nimport {visit} from 'unist-util-visit'\nimport {position, pointStart, pointEnd} from 'unist-util-position'\nimport {generated} from 'unist-util-generated'\nimport {definitions} from 'mdast-util-definitions'\nimport {handlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || {}\n  const dangerous = settings.allowDangerousHtml || false\n  /** @type {Record<string, MdastFootnoteDefinition>} */\n  const footnoteById = {}\n\n  // To do: next major: add `options` to state, remove:\n  // `dangerous`, `clobberPrefix`, `footnoteLabel`, `footnoteLabelTagName`,\n  // `footnoteLabelProperties`, `footnoteBackLabel`, `passThrough`,\n  // `unknownHandler`.\n\n  // To do: next major: move to `state.options.allowDangerousHtml`.\n  state.dangerous = dangerous\n  // To do: next major: move to `state.options`.\n  state.clobberPrefix =\n    settings.clobberPrefix === undefined || settings.clobberPrefix === null\n      ? 'user-content-'\n      : settings.clobberPrefix\n  // To do: next major: move to `state.options`.\n  state.footnoteLabel = settings.footnoteLabel || 'Footnotes'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelTagName = settings.footnoteLabelTagName || 'h2'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelProperties = settings.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  // To do: next major: move to `state.options`.\n  state.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content'\n  // To do: next major: move to `state.options`.\n  state.unknownHandler = settings.unknownHandler\n  // To do: next major: move to `state.options`.\n  state.passThrough = settings.passThrough\n\n  state.handlers = {...handlers, ...settings.handlers}\n\n  // To do: next major: replace utility with `definitionById` object, so we\n  // only walk once (as we need footnotes too).\n  state.definition = definitions(tree)\n  state.footnoteById = footnoteById\n  /** @type {Array<string>} */\n  state.footnoteOrder = []\n  /** @type {Record<string, number>} */\n  state.footnoteCounts = {}\n\n  state.patch = patch\n  state.applyData = applyData\n  state.one = oneBound\n  state.all = allBound\n  state.wrap = wrap\n  // To do: next major: remove `augment`.\n  state.augment = augment\n\n  visit(tree, 'footnoteDefinition', (definition) => {\n    const id = String(definition.identifier).toUpperCase()\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition\n    }\n  })\n\n  // @ts-expect-error Hush, it’s fine!\n  return state\n\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   *\n   * @param {MdastNodeWithData | PositionLike | null | undefined} left\n   * @param {HastElementContent} right\n   * @returns {HastElementContent}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {MdastData} */\n      const data = left.data\n\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          }\n        }\n\n        right.tagName = data.hName\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = {...right.properties, ...data.hProperties}\n      }\n\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren\n      }\n    }\n\n    if (left) {\n      const ctx = 'type' in left ? left : {position: left}\n\n      if (!generated(ctx)) {\n        // @ts-expect-error: fine.\n        right.position = {start: pointStart(ctx), end: pointEnd(ctx)}\n      }\n    }\n\n    return right\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function state(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props\n      props = {}\n    }\n\n    // @ts-expect-error augmenting an element yields an element.\n    return augment(node, {\n      type: 'element',\n      tagName,\n      properties: props || {},\n      children: children || []\n    })\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | null | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n   *   Resulting hast node.\n   */\n  function oneBound(node, parent) {\n    // @ts-expect-error: that’s a state :)\n    return one(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function allBound(parent) {\n    // @ts-expect-error: that’s a state :)\n    return all(state, parent)\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {void}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {Type | HastElement}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {Type | HastElement} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent is likely to keep the content around (otherwise: pass\n      // `hChildren`).\n      else {\n        result = {\n          type: 'element',\n          tagName: hName,\n          properties: {},\n          children: []\n        }\n\n        // To do: next major: take the children from the `root`, or inject the\n        // raw/text/comment or so into the element?\n        // if ('children' in node) {\n        //   // @ts-expect-error: assume `children` are allowed in elements.\n        //   result.children = node.children\n        // } else {\n        //   // @ts-expect-error: assume `node` is allowed in elements.\n        //   result.children.push(node)\n        // }\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      result.properties = {...result.properties, ...hProperties}\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      // @ts-expect-error: assume valid children are defined.\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an mdast node into a hast node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   mdast node.\n * @param {MdastParents | null | undefined} [parent]\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   Resulting hast node.\n */\n// To do: next major: do not expose, keep bound.\nexport function one(state, node, parent) {\n  const type = node && node.type\n\n  // Fail on non-nodes.\n  if (!type) {\n    throw new Error('Expected node, got `' + node + '`')\n  }\n\n  if (own.call(state.handlers, type)) {\n    return state.handlers[type](state, node, parent)\n  }\n\n  if (state.passThrough && state.passThrough.includes(type)) {\n    // To do: next major: deep clone.\n    // @ts-expect-error: types of passed through nodes are expected to be added manually.\n    return 'children' in node ? {...node, children: all(state, node)} : node\n  }\n\n  if (state.unknownHandler) {\n    return state.unknownHandler(state, node, parent)\n  }\n\n  return defaultUnknownHandler(state, node)\n}\n\n/**\n * Transform the children of an mdast node into hast nodes.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} parent\n *   mdast node to compile\n * @returns {Array<HastElementContent>}\n *   Resulting hast nodes.\n */\n// To do: next major: do not expose, keep bound.\nexport function all(state, parent) {\n  /** @type {Array<HastElementContent>} */\n  const values = []\n\n  if ('children' in parent) {\n    const nodes = parent.children\n    let index = -1\n    while (++index < nodes.length) {\n      const result = one(state, nodes[index], parent)\n\n      // To do: see if we van clean this? Can we merge texts?\n      if (result) {\n        if (index && nodes[index - 1].type === 'break') {\n          if (!Array.isArray(result) && result.type === 'text') {\n            result.value = result.value.replace(/^\\s+/, '')\n          }\n\n          if (!Array.isArray(result) && result.type === 'element') {\n            const head = result.children[0]\n\n            if (head && head.type === 'text') {\n              head.value = head.value.replace(/^\\s+/, '')\n            }\n          }\n        }\n\n        if (Array.isArray(result)) {\n          values.push(...result)\n        } else {\n          values.push(result)\n        }\n      }\n    }\n  }\n\n  return values\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastText | HastElement}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastText | HastElement} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: all(state, node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | null | undefined} [loose=false]\n *   Whether to add line endings at start and end.\n * @returns {Array<Type | HastText>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<Type | HastText>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Root} HastRoot\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Root} MdastRoot\n *\n * @typedef {import('./state.js').Options} Options\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n */\n\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {HastNodes | null | undefined}\n *   hast tree.\n */\n// To do: next major: always return a single `root`.\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, null)\n  const foot = footer(state)\n\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  // To do: next major: always return root?\n  return Array.isArray(node) ? {type: 'root', children: node} : node\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\nexport function footer(state) {\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let index = -1\n\n  while (++index < state.footnoteOrder.length) {\n    const def = state.footnoteById[state.footnoteOrder[index]]\n\n    if (!def) {\n      continue\n    }\n\n    const content = state.all(def)\n    const id = String(def.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let referenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n\n    while (++referenceIndex <= state.footnoteCounts[id]) {\n      /** @type {Element} */\n      const backReference = {\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            state.clobberPrefix +\n            'fnref-' +\n            safeId +\n            (referenceIndex > 1 ? '-' + referenceIndex : ''),\n          dataFootnoteBackref: true,\n          className: ['data-footnote-backref'],\n          ariaLabel: state.footnoteBackLabel\n        },\n        children: [{type: 'text', value: '↩'}]\n      }\n\n      if (referenceIndex > 1) {\n        backReference.children.push({\n          type: 'element',\n          tagName: 'sup',\n          children: [{type: 'text', value: String(referenceIndex)}]\n        })\n      }\n\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      backReferences.push(backReference)\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: state.clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(def, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: state.footnoteLabelTagName,\n        properties: {\n          // To do: use structured clone.\n          ...JSON.parse(JSON.stringify(state.footnoteLabelProperties)),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: state.footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n *\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\n\n/**\n * Plugin that turns markdown into HTML to support rehype.\n *\n * *   If a destination processor is given, that processor runs with a new HTML\n *     (hast) tree (bridge-mode).\n *     As the given processor runs with a hast tree, and rehype plugins support\n *     hast, that means rehype plugins can be used with the given processor.\n *     The hast tree is discarded in the end.\n *     It’s highly unlikely that you want to do this.\n * *   The common case is to not pass a destination processor, in which case the\n *     current processor continues running with a new HTML (hast) tree\n *     (mutate-mode).\n *     As the current processor continues with a hast tree, and rehype plugins\n *     support hast, that means rehype plugins can be used after\n *     `remark-rehype`.\n *     It’s likely that this is what you want to do.\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `mdast-util-to-hast`.\n */\nconst remarkRehype =\n  /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */\n  (\n    function (destination, options) {\n      return destination && 'run' in destination\n        ? bridge(destination, options)\n        : mutate(destination || options)\n    }\n  )\n\nexport default remarkRehype\n\n/**\n * Bridge-mode.\n * Runs the destination with the new hast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toHast(node, options), file, (error) => {\n      next(error)\n    })\n  }\n}\n\n/**\n * Mutate-mode.\n * Further plugins run on the hast tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\n */\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned by `toHast`.\n  return (node) => toHast(node, options)\n}\n"],"names":["regexCheck","asciiAlphanumeric","regex","code","test","String","fromCharCode","normalizeUri","value","result","index","start","skip","length","charCodeAt","replace","next","push","slice","encodeURIComponent","join","pointStart","point","pointEnd","type","node","position","line","column","offset","footnoteReference","state","id","identifier","toUpperCase","safeId","toLowerCase","footnoteOrder","indexOf","counter","footnoteCounts","reuseCounter","link","tagName","properties","href","clobberPrefix","dataFootnoteRef","ariaDescribedBy","children","patch","sup","applyData","revert","subtype","referenceType","suffix","label","alt","contents","all","head","unshift","tail","listItemLoose","spread","handlers","blockquote","wrap","break","lang","match","className","meta","data","delete","emphasis","footnote","footnoteById","no","heading","depth","html","dangerous","imageReference","def","definition","src","url","title","undefined","image","inlineCode","text","linkReference","listItem","parent","results","loose","listLoose","checked","paragraph","disabled","child","list","Array","isArray","includes","ordered","root","strong","table","rows","firstRow","shift","tableContent","body","end","tableCell","tableRow","siblings","align","cellIndex","cells","cell","alignValue","trimLines","thematicBreak","toml","ignore","yaml","footnoteDefinition","own","hasOwnProperty","from","to","hName","hChildren","hProperties","one","Error","call","passThrough","unknownHandler","defaultUnknownHandler","values","nodes","toHast","tree","options","settings","allowDangerousHtml","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","footnoteBackLabel","definitions","augment","visit","left","right","ctx","generated","props","createState","foot","listItems","content","referenceIndex","backReferences","backReference","dataFootnoteBackref","ariaLabel","tailTail","dataFootnotes","JSON","parse","stringify","footer","destination","file","run","error","bridge","mutate"],"sourceRoot":""}