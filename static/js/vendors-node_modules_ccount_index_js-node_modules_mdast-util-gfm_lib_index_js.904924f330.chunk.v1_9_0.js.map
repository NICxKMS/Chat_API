{"version":3,"file":"static/js/vendors-node_modules_ccount_index_js-node_modules_mdast-util-gfm_lib_index_js.904924f330.chunk.v1_9_0.js","mappings":"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","sources":["../node_modules/ccount/index.js","../node_modules/mdast-util-gfm-footnote/lib/index.js","../node_modules/mdast-util-gfm-strikethrough/lib/index.js","../node_modules/markdown-table/index.js","../node_modules/mdast-util-gfm-table/lib/index.js","../node_modules/mdast-util-gfm-task-list-item/lib/index.js","../node_modules/mdast-util-gfm/lib/index.js"],"sourcesContent":["/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n */\n\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {association} from 'mdast-util-to-markdown/lib/util/association.js'\nimport {containerFlow} from 'mdast-util-to-markdown/lib/util/container-flow.js'\nimport {indentLines} from 'mdast-util-to-markdown/lib/util/indent-lines.js'\nimport {safe} from 'mdast-util-to-markdown/lib/util/safe.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n// To do: next major: rename `context` -> `state`, `safeOptions` to `info`, use\n// utilities on `state`.\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = /** @type {FootnoteDefinition} */ (\n    this.stack[this.stack.length - 1]\n  )\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = /** @type {FootnoteDefinition} */ (\n    this.stack[this.stack.length - 1]\n  )\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  let value = tracker.move('[^')\n  const exit = context.enter('footnoteReference')\n  const subexit = context.enter('reference')\n  value += tracker.move(\n    safe(context, association(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\nfunction footnoteDefinition(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  let value = tracker.move('[^')\n  const exit = context.enter('footnoteDefinition')\n  const subexit = context.enter('label')\n  value += tracker.move(\n    safe(context, association(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  value += tracker.move(\n    ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n  )\n  tracker.shift(4)\n  value += tracker.move(\n    indentLines(containerFlow(node, context, tracker.current()), map)\n  )\n  exit()\n\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line\n  }\n\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n// To do: next major: expose functions.\n// To do: next major: use `state`, state utilities.\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmStrikethroughFromMarkdown = {\n  canContainEols: ['delete'],\n  enter: {strikethrough: enterStrikethrough},\n  exit: {strikethrough: exitStrikethrough}\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmStrikethroughToMarkdown = {\n  unsafe: [\n    {\n      character: '~',\n      inConstruct: 'phrasing',\n      notInConstruct: constructsWithoutStrikethrough\n    }\n  ],\n  handlers: {delete: handleDelete}\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  const exit = context.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += containerPhrasing(node, context, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","// To do: next major: remove.\n/**\n * @typedef {Options} MarkdownTableOptions\n *   Configuration.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [alignDelimiters=true]\n *   Whether to align the delimiters (default: `true`);\n *   they are aligned by default:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {ReadonlyArray<string | null | undefined> | string | null | undefined} [align]\n *   How to align columns (default: `''`);\n *   one style for all columns or styles for their respective columns;\n *   each style is either `'l'` (left), `'r'` (right), or `'c'` (center);\n *   other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left;\n *   *only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean | null | undefined} [delimiterEnd=true]\n *   Whether to end each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean | null | undefined} [delimiterStart=true]\n *   Whether to begin each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean | null | undefined} [padding=true]\n *   Whether to add a space of padding between delimiters and cells\n *   (default: `true`).\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {((value: string) => number) | null | undefined} [stringLength]\n *   Function to detect the length of table cell content (optional);\n *   this is used when aligning the delimiters (`|`) between table cells;\n *   full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source;\n *   to fix this, you can pass this function,\n *   which receives the cell content and returns its “visible” size;\n *   note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @param {string} value\n *   Cell value.\n * @returns {number}\n *   Cell size.\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * Generate a markdown\n * ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables))\n * table.\n *\n * @param {ReadonlyArray<ReadonlyArray<string | null | undefined>>} table\n *   Table data (matrix of strings).\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Result.\n */\nexport function markdownTable(table, options) {\n  const settings = options || {}\n  // To do: next major: change to spread.\n  const align = (settings.align || []).concat()\n  const stringLength = settings.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (settings.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      settings.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (settings.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (settings.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (settings.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        settings.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(settings.alignDelimiters === false && cell === '') &&\n        (settings.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (settings.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (settings.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (settings.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        settings.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      settings.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string | null | undefined} [value]\n *   Value to serialize.\n * @returns {string}\n *   Result.\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string | null | undefined} value\n *   Value.\n * @returns {number}\n *   Alignment.\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n      ? 108 /* `l` */\n      : code === 82 /* `R` */ || code === 114 /* `r` */\n        ? 114 /* `r` */\n        : 0\n}\n","/**\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').InlineCode} InlineCode\n *\n * @typedef {import('markdown-table').MarkdownTableOptions} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Context} ToMarkdownContext\n * @typedef {import('mdast-util-to-markdown').SafeOptions} SafeOptions\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells.\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters.\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {inlineCode} from 'mdast-util-to-markdown/lib/handle/inline-code.js'\nimport {markdownTable} from 'markdown-table'\n\n// To do: next major: use `state` and `state` utilities from `mdast-util-to-markdown`.\n// To do: next major: use `defaultHandlers.inlineCode`.\n// To do: next major: expose functions.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM tables.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmTableFromMarkdown = {\n  enter: {\n    table: enterTable,\n    tableData: enterCell,\n    tableHeader: enterCell,\n    tableRow: enterRow\n  },\n  exit: {\n    codeText: exitCodeText,\n    table: exitTable,\n    tableData: exit,\n    tableHeader: exit,\n    tableRow: exit\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  /** @type {Array<'left' | 'right' | 'center' | 'none'>} */\n  // @ts-expect-error: `align` is custom.\n  const align = token._align\n  this.enter(\n    {\n      type: 'table',\n      align: align.map((d) => (d === 'none' ? null : d)),\n      children: []\n    },\n    token\n  )\n  this.setData('inTable', true)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.setData('inTable')\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.getData('inTable')) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = /** @type {InlineCode} */ (this.stack[this.stack.length - 1])\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      table: handleTable,\n      tableRow: handleTableRow,\n      tableCell: handleTableCell,\n      inlineCode: inlineCodeWithTable\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, context, safeOptions) {\n    return serializeData(\n      handleTableAsData(node, context, safeOptions),\n      node.align\n    )\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, context, safeOptions) {\n    const row = handleTableRowAsData(node, context, safeOptions)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, context, safeOptions) {\n    const exit = context.enter('tableCell')\n    const subexit = context.enter('phrasing')\n    const value = containerPhrasing(node, context, {\n      ...safeOptions,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = context.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(\n        children[index],\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableRowAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = context.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(\n        children[index],\n        node,\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, context) {\n    let value = inlineCode(node, parent, context)\n\n    if (context.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\n/**\n * @typedef {Extract<Root | Content, Parent>} Parents\n */\n\nimport {listItem} from 'mdast-util-to-markdown/lib/handle/list-item.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n// To do: next major: rename `context` -> `state`, `safeOptions` -> `info`, use\n// `track` from `state`.\n// To do: next major: replace exports with functions.\n// To do: next major: use `defaulthandlers.listItem`.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM task list items.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmTaskListItemFromMarkdown = {\n  exit: {\n    taskListCheckValueChecked: exitCheck,\n    taskListCheckValueUnchecked: exitCheck,\n    paragraph: exitParagraphWithTaskListItem\n  }\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM task list items.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmTaskListItemToMarkdown = {\n  unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n  handlers: {listItem: listItemWithTaskListItem}\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  const node = /** @type {ListItem} */ (this.stack[this.stack.length - 2])\n  // We’re always in a paragraph, in a list item.\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = /** @type {Parents} */ (this.stack[this.stack.length - 2])\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = /** @type {Paragraph} */ (this.stack[this.stack.length - 1])\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, context, safeOptions) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = track(safeOptions)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = listItem(node, parent, context, {\n    ...safeOptions,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * @typedef {import('mdast-util-gfm-table').Options} Options\n *   Configuration.\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown,\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown,\n    gfmTableFromMarkdown,\n    gfmTaskListItemFromMarkdown\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown,\n      gfmFootnoteToMarkdown(),\n      gfmStrikethroughToMarkdown,\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown\n    ]\n  }\n}\n"],"names":["ccount","value","character","source","String","TypeError","count","index","indexOf","length","enterFootnoteDefinition","token","this","enter","type","identifier","label","children","enterFootnoteDefinitionLabelString","buffer","exitFootnoteDefinitionLabelString","resume","node","stack","normalizeIdentifier","sliceSerialize","toLowerCase","exitFootnoteDefinition","exit","enterFootnoteCall","enterFootnoteCallString","exitFootnoteCallString","exitFootnoteCall","footnoteReference","_","context","safeOptions","tracker","track","move","subexit","safe","association","current","before","after","footnoteDefinition","shift","indentLines","containerFlow","map","line","blank","peek","handleDelete","gfmStrikethroughFromMarkdown","canContainEols","strikethrough","gfmStrikethroughToMarkdown","unsafe","inConstruct","notInConstruct","handlers","delete","containerPhrasing","defaultStringLength","toAlignment","code","codePointAt","gfmTableFromMarkdown","table","align","_align","d","setData","tableData","enterCell","tableHeader","tableRow","codeText","getData","replace","$0","$1","gfmTableToMarkdown","options","settings","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","atBreak","serializeData","result","handleTableRowAsData","handleTableAsData","slice","tableCell","handleTableCell","inlineCode","parent","includes","matrix","concat","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","row","sizes","columnIndex","cell","size","undefined","push","Math","max","repeat","splice","lines","delimiterStart","delimiterEnd","join","markdownTable","gfmTaskListItemFromMarkdown","taskListCheckValueChecked","exitCheck","taskListCheckValueUnchecked","paragraph","checked","head","siblings","firstParaghraph","sibling","position","start","offset","column","Object","assign","gfmTaskListItemToMarkdown","listItem","checkable","checkbox","gfmFromMarkdown","gfmAutolinkLiteralFromMarkdown","gfmFootnoteDefinition","gfmFootnoteDefinitionLabelString","gfmFootnoteCall","gfmFootnoteCallString","gfmToMarkdown","extensions","gfmAutolinkLiteralToMarkdown"],"sourceRoot":""}