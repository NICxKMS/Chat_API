{"version":3,"file":"static/js/vendor.sindresorhus.b2d5c44e.chunk.js","mappings":"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","sources":["../node_modules/@sindresorhus/is/dist/index.js"],"sourcesContent":["\"use strict\";\n/// <reference lib=\"es2018\"/>\n/// <reference lib=\"dom\"/>\n/// <reference types=\"node\"/>\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst typedArrayTypeNames = [\n    'Int8Array',\n    'Uint8Array',\n    'Uint8ClampedArray',\n    'Int16Array',\n    'Uint16Array',\n    'Int32Array',\n    'Uint32Array',\n    'Float32Array',\n    'Float64Array',\n    'BigInt64Array',\n    'BigUint64Array'\n];\nfunction isTypedArrayName(name) {\n    return typedArrayTypeNames.includes(name);\n}\nconst objectTypeNames = [\n    'Function',\n    'Generator',\n    'AsyncGenerator',\n    'GeneratorFunction',\n    'AsyncGeneratorFunction',\n    'AsyncFunction',\n    'Observable',\n    'Array',\n    'Buffer',\n    'Blob',\n    'Object',\n    'RegExp',\n    'Date',\n    'Error',\n    'Map',\n    'Set',\n    'WeakMap',\n    'WeakSet',\n    'ArrayBuffer',\n    'SharedArrayBuffer',\n    'DataView',\n    'Promise',\n    'URL',\n    'FormData',\n    'URLSearchParams',\n    'HTMLElement',\n    ...typedArrayTypeNames\n];\nfunction isObjectTypeName(name) {\n    return objectTypeNames.includes(name);\n}\nconst primitiveTypeNames = [\n    'null',\n    'undefined',\n    'string',\n    'number',\n    'bigint',\n    'boolean',\n    'symbol'\n];\nfunction isPrimitiveTypeName(name) {\n    return primitiveTypeNames.includes(name);\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isOfType(type) {\n    return (value) => typeof value === type;\n}\nconst { toString } = Object.prototype;\nconst getObjectType = (value) => {\n    const objectTypeName = toString.call(value).slice(8, -1);\n    if (/HTML\\w+Element/.test(objectTypeName) && is.domElement(value)) {\n        return 'HTMLElement';\n    }\n    if (isObjectTypeName(objectTypeName)) {\n        return objectTypeName;\n    }\n    return undefined;\n};\nconst isObjectOfType = (type) => (value) => getObjectType(value) === type;\nfunction is(value) {\n    if (value === null) {\n        return 'null';\n    }\n    switch (typeof value) {\n        case 'undefined':\n            return 'undefined';\n        case 'string':\n            return 'string';\n        case 'number':\n            return 'number';\n        case 'boolean':\n            return 'boolean';\n        case 'function':\n            return 'Function';\n        case 'bigint':\n            return 'bigint';\n        case 'symbol':\n            return 'symbol';\n        default:\n    }\n    if (is.observable(value)) {\n        return 'Observable';\n    }\n    if (is.array(value)) {\n        return 'Array';\n    }\n    if (is.buffer(value)) {\n        return 'Buffer';\n    }\n    const tagType = getObjectType(value);\n    if (tagType) {\n        return tagType;\n    }\n    if (value instanceof String || value instanceof Boolean || value instanceof Number) {\n        throw new TypeError('Please don\\'t use object wrappers for primitive types');\n    }\n    return 'Object';\n}\nis.undefined = isOfType('undefined');\nis.string = isOfType('string');\nconst isNumberType = isOfType('number');\nis.number = (value) => isNumberType(value) && !is.nan(value);\nis.bigint = isOfType('bigint');\n// eslint-disable-next-line @typescript-eslint/ban-types\nis.function_ = isOfType('function');\nis.null_ = (value) => value === null;\nis.class_ = (value) => is.function_(value) && value.toString().startsWith('class ');\nis.boolean = (value) => value === true || value === false;\nis.symbol = isOfType('symbol');\nis.numericString = (value) => is.string(value) && !is.emptyStringOrWhitespace(value) && !Number.isNaN(Number(value));\nis.array = (value, assertion) => {\n    if (!Array.isArray(value)) {\n        return false;\n    }\n    if (!is.function_(assertion)) {\n        return true;\n    }\n    return value.every(assertion);\n};\nis.buffer = (value) => { var _a, _b, _c, _d; return (_d = (_c = (_b = (_a = value) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.isBuffer) === null || _c === void 0 ? void 0 : _c.call(_b, value)) !== null && _d !== void 0 ? _d : false; };\nis.blob = (value) => isObjectOfType('Blob')(value);\nis.nullOrUndefined = (value) => is.null_(value) || is.undefined(value);\nis.object = (value) => !is.null_(value) && (typeof value === 'object' || is.function_(value));\nis.iterable = (value) => { var _a; return is.function_((_a = value) === null || _a === void 0 ? void 0 : _a[Symbol.iterator]); };\nis.asyncIterable = (value) => { var _a; return is.function_((_a = value) === null || _a === void 0 ? void 0 : _a[Symbol.asyncIterator]); };\nis.generator = (value) => { var _a, _b; return is.iterable(value) && is.function_((_a = value) === null || _a === void 0 ? void 0 : _a.next) && is.function_((_b = value) === null || _b === void 0 ? void 0 : _b.throw); };\nis.asyncGenerator = (value) => is.asyncIterable(value) && is.function_(value.next) && is.function_(value.throw);\nis.nativePromise = (value) => isObjectOfType('Promise')(value);\nconst hasPromiseAPI = (value) => {\n    var _a, _b;\n    return is.function_((_a = value) === null || _a === void 0 ? void 0 : _a.then) &&\n        is.function_((_b = value) === null || _b === void 0 ? void 0 : _b.catch);\n};\nis.promise = (value) => is.nativePromise(value) || hasPromiseAPI(value);\nis.generatorFunction = isObjectOfType('GeneratorFunction');\nis.asyncGeneratorFunction = (value) => getObjectType(value) === 'AsyncGeneratorFunction';\nis.asyncFunction = (value) => getObjectType(value) === 'AsyncFunction';\n// eslint-disable-next-line no-prototype-builtins, @typescript-eslint/ban-types\nis.boundFunction = (value) => is.function_(value) && !value.hasOwnProperty('prototype');\nis.regExp = isObjectOfType('RegExp');\nis.date = isObjectOfType('Date');\nis.error = isObjectOfType('Error');\nis.map = (value) => isObjectOfType('Map')(value);\nis.set = (value) => isObjectOfType('Set')(value);\nis.weakMap = (value) => isObjectOfType('WeakMap')(value);\nis.weakSet = (value) => isObjectOfType('WeakSet')(value);\nis.int8Array = isObjectOfType('Int8Array');\nis.uint8Array = isObjectOfType('Uint8Array');\nis.uint8ClampedArray = isObjectOfType('Uint8ClampedArray');\nis.int16Array = isObjectOfType('Int16Array');\nis.uint16Array = isObjectOfType('Uint16Array');\nis.int32Array = isObjectOfType('Int32Array');\nis.uint32Array = isObjectOfType('Uint32Array');\nis.float32Array = isObjectOfType('Float32Array');\nis.float64Array = isObjectOfType('Float64Array');\nis.bigInt64Array = isObjectOfType('BigInt64Array');\nis.bigUint64Array = isObjectOfType('BigUint64Array');\nis.arrayBuffer = isObjectOfType('ArrayBuffer');\nis.sharedArrayBuffer = isObjectOfType('SharedArrayBuffer');\nis.dataView = isObjectOfType('DataView');\nis.enumCase = (value, targetEnum) => Object.values(targetEnum).includes(value);\nis.directInstanceOf = (instance, class_) => Object.getPrototypeOf(instance) === class_.prototype;\nis.urlInstance = (value) => isObjectOfType('URL')(value);\nis.urlString = (value) => {\n    if (!is.string(value)) {\n        return false;\n    }\n    try {\n        new URL(value); // eslint-disable-line no-new\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n};\n// Example: `is.truthy = (value: unknown): value is (not false | not 0 | not '' | not undefined | not null) => Boolean(value);`\nis.truthy = (value) => Boolean(value);\n// Example: `is.falsy = (value: unknown): value is (not true | 0 | '' | undefined | null) => Boolean(value);`\nis.falsy = (value) => !value;\nis.nan = (value) => Number.isNaN(value);\nis.primitive = (value) => is.null_(value) || isPrimitiveTypeName(typeof value);\nis.integer = (value) => Number.isInteger(value);\nis.safeInteger = (value) => Number.isSafeInteger(value);\nis.plainObject = (value) => {\n    // From: https://github.com/sindresorhus/is-plain-obj/blob/main/index.js\n    if (toString.call(value) !== '[object Object]') {\n        return false;\n    }\n    const prototype = Object.getPrototypeOf(value);\n    return prototype === null || prototype === Object.getPrototypeOf({});\n};\nis.typedArray = (value) => isTypedArrayName(getObjectType(value));\nconst isValidLength = (value) => is.safeInteger(value) && value >= 0;\nis.arrayLike = (value) => !is.nullOrUndefined(value) && !is.function_(value) && isValidLength(value.length);\nis.inRange = (value, range) => {\n    if (is.number(range)) {\n        return value >= Math.min(0, range) && value <= Math.max(range, 0);\n    }\n    if (is.array(range) && range.length === 2) {\n        return value >= Math.min(...range) && value <= Math.max(...range);\n    }\n    throw new TypeError(`Invalid range: ${JSON.stringify(range)}`);\n};\nconst NODE_TYPE_ELEMENT = 1;\nconst DOM_PROPERTIES_TO_CHECK = [\n    'innerHTML',\n    'ownerDocument',\n    'style',\n    'attributes',\n    'nodeValue'\n];\nis.domElement = (value) => {\n    return is.object(value) &&\n        value.nodeType === NODE_TYPE_ELEMENT &&\n        is.string(value.nodeName) &&\n        !is.plainObject(value) &&\n        DOM_PROPERTIES_TO_CHECK.every(property => property in value);\n};\nis.observable = (value) => {\n    var _a, _b, _c, _d;\n    if (!value) {\n        return false;\n    }\n    // eslint-disable-next-line no-use-extend-native/no-use-extend-native\n    if (value === ((_b = (_a = value)[Symbol.observable]) === null || _b === void 0 ? void 0 : _b.call(_a))) {\n        return true;\n    }\n    if (value === ((_d = (_c = value)['@@observable']) === null || _d === void 0 ? void 0 : _d.call(_c))) {\n        return true;\n    }\n    return false;\n};\nis.nodeStream = (value) => is.object(value) && is.function_(value.pipe) && !is.observable(value);\nis.infinite = (value) => value === Infinity || value === -Infinity;\nconst isAbsoluteMod2 = (remainder) => (value) => is.integer(value) && Math.abs(value % 2) === remainder;\nis.evenInteger = isAbsoluteMod2(0);\nis.oddInteger = isAbsoluteMod2(1);\nis.emptyArray = (value) => is.array(value) && value.length === 0;\nis.nonEmptyArray = (value) => is.array(value) && value.length > 0;\nis.emptyString = (value) => is.string(value) && value.length === 0;\nconst isWhiteSpaceString = (value) => is.string(value) && !/\\S/.test(value);\nis.emptyStringOrWhitespace = (value) => is.emptyString(value) || isWhiteSpaceString(value);\n// TODO: Use `not ''` when the `not` operator is available.\nis.nonEmptyString = (value) => is.string(value) && value.length > 0;\n// TODO: Use `not ''` when the `not` operator is available.\nis.nonEmptyStringAndNotWhitespace = (value) => is.string(value) && !is.emptyStringOrWhitespace(value);\nis.emptyObject = (value) => is.object(value) && !is.map(value) && !is.set(value) && Object.keys(value).length === 0;\n// TODO: Use `not` operator here to remove `Map` and `Set` from type guard:\n// - https://github.com/Microsoft/TypeScript/pull/29317\nis.nonEmptyObject = (value) => is.object(value) && !is.map(value) && !is.set(value) && Object.keys(value).length > 0;\nis.emptySet = (value) => is.set(value) && value.size === 0;\nis.nonEmptySet = (value) => is.set(value) && value.size > 0;\nis.emptyMap = (value) => is.map(value) && value.size === 0;\nis.nonEmptyMap = (value) => is.map(value) && value.size > 0;\n// `PropertyKey` is any value that can be used as an object key (string, number, or symbol)\nis.propertyKey = (value) => is.any([is.string, is.number, is.symbol], value);\nis.formData = (value) => isObjectOfType('FormData')(value);\nis.urlSearchParams = (value) => isObjectOfType('URLSearchParams')(value);\nconst predicateOnArray = (method, predicate, values) => {\n    if (!is.function_(predicate)) {\n        throw new TypeError(`Invalid predicate: ${JSON.stringify(predicate)}`);\n    }\n    if (values.length === 0) {\n        throw new TypeError('Invalid number of values');\n    }\n    return method.call(values, predicate);\n};\nis.any = (predicate, ...values) => {\n    const predicates = is.array(predicate) ? predicate : [predicate];\n    return predicates.some(singlePredicate => predicateOnArray(Array.prototype.some, singlePredicate, values));\n};\nis.all = (predicate, ...values) => predicateOnArray(Array.prototype.every, predicate, values);\nconst assertType = (condition, description, value, options = {}) => {\n    if (!condition) {\n        const { multipleValues } = options;\n        const valuesMessage = multipleValues ?\n            `received values of types ${[\n                ...new Set(value.map(singleValue => `\\`${is(singleValue)}\\``))\n            ].join(', ')}` :\n            `received value of type \\`${is(value)}\\``;\n        throw new TypeError(`Expected value which is \\`${description}\\`, ${valuesMessage}.`);\n    }\n};\nexports.assert = {\n    // Unknowns.\n    undefined: (value) => assertType(is.undefined(value), 'undefined', value),\n    string: (value) => assertType(is.string(value), 'string', value),\n    number: (value) => assertType(is.number(value), 'number', value),\n    bigint: (value) => assertType(is.bigint(value), 'bigint', value),\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    function_: (value) => assertType(is.function_(value), 'Function', value),\n    null_: (value) => assertType(is.null_(value), 'null', value),\n    class_: (value) => assertType(is.class_(value), \"Class\" /* class_ */, value),\n    boolean: (value) => assertType(is.boolean(value), 'boolean', value),\n    symbol: (value) => assertType(is.symbol(value), 'symbol', value),\n    numericString: (value) => assertType(is.numericString(value), \"string with a number\" /* numericString */, value),\n    array: (value, assertion) => {\n        const assert = assertType;\n        assert(is.array(value), 'Array', value);\n        if (assertion) {\n            value.forEach(assertion);\n        }\n    },\n    buffer: (value) => assertType(is.buffer(value), 'Buffer', value),\n    blob: (value) => assertType(is.blob(value), 'Blob', value),\n    nullOrUndefined: (value) => assertType(is.nullOrUndefined(value), \"null or undefined\" /* nullOrUndefined */, value),\n    object: (value) => assertType(is.object(value), 'Object', value),\n    iterable: (value) => assertType(is.iterable(value), \"Iterable\" /* iterable */, value),\n    asyncIterable: (value) => assertType(is.asyncIterable(value), \"AsyncIterable\" /* asyncIterable */, value),\n    generator: (value) => assertType(is.generator(value), 'Generator', value),\n    asyncGenerator: (value) => assertType(is.asyncGenerator(value), 'AsyncGenerator', value),\n    nativePromise: (value) => assertType(is.nativePromise(value), \"native Promise\" /* nativePromise */, value),\n    promise: (value) => assertType(is.promise(value), 'Promise', value),\n    generatorFunction: (value) => assertType(is.generatorFunction(value), 'GeneratorFunction', value),\n    asyncGeneratorFunction: (value) => assertType(is.asyncGeneratorFunction(value), 'AsyncGeneratorFunction', value),\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    asyncFunction: (value) => assertType(is.asyncFunction(value), 'AsyncFunction', value),\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    boundFunction: (value) => assertType(is.boundFunction(value), 'Function', value),\n    regExp: (value) => assertType(is.regExp(value), 'RegExp', value),\n    date: (value) => assertType(is.date(value), 'Date', value),\n    error: (value) => assertType(is.error(value), 'Error', value),\n    map: (value) => assertType(is.map(value), 'Map', value),\n    set: (value) => assertType(is.set(value), 'Set', value),\n    weakMap: (value) => assertType(is.weakMap(value), 'WeakMap', value),\n    weakSet: (value) => assertType(is.weakSet(value), 'WeakSet', value),\n    int8Array: (value) => assertType(is.int8Array(value), 'Int8Array', value),\n    uint8Array: (value) => assertType(is.uint8Array(value), 'Uint8Array', value),\n    uint8ClampedArray: (value) => assertType(is.uint8ClampedArray(value), 'Uint8ClampedArray', value),\n    int16Array: (value) => assertType(is.int16Array(value), 'Int16Array', value),\n    uint16Array: (value) => assertType(is.uint16Array(value), 'Uint16Array', value),\n    int32Array: (value) => assertType(is.int32Array(value), 'Int32Array', value),\n    uint32Array: (value) => assertType(is.uint32Array(value), 'Uint32Array', value),\n    float32Array: (value) => assertType(is.float32Array(value), 'Float32Array', value),\n    float64Array: (value) => assertType(is.float64Array(value), 'Float64Array', value),\n    bigInt64Array: (value) => assertType(is.bigInt64Array(value), 'BigInt64Array', value),\n    bigUint64Array: (value) => assertType(is.bigUint64Array(value), 'BigUint64Array', value),\n    arrayBuffer: (value) => assertType(is.arrayBuffer(value), 'ArrayBuffer', value),\n    sharedArrayBuffer: (value) => assertType(is.sharedArrayBuffer(value), 'SharedArrayBuffer', value),\n    dataView: (value) => assertType(is.dataView(value), 'DataView', value),\n    enumCase: (value, targetEnum) => assertType(is.enumCase(value, targetEnum), 'EnumCase', value),\n    urlInstance: (value) => assertType(is.urlInstance(value), 'URL', value),\n    urlString: (value) => assertType(is.urlString(value), \"string with a URL\" /* urlString */, value),\n    truthy: (value) => assertType(is.truthy(value), \"truthy\" /* truthy */, value),\n    falsy: (value) => assertType(is.falsy(value), \"falsy\" /* falsy */, value),\n    nan: (value) => assertType(is.nan(value), \"NaN\" /* nan */, value),\n    primitive: (value) => assertType(is.primitive(value), \"primitive\" /* primitive */, value),\n    integer: (value) => assertType(is.integer(value), \"integer\" /* integer */, value),\n    safeInteger: (value) => assertType(is.safeInteger(value), \"integer\" /* safeInteger */, value),\n    plainObject: (value) => assertType(is.plainObject(value), \"plain object\" /* plainObject */, value),\n    typedArray: (value) => assertType(is.typedArray(value), \"TypedArray\" /* typedArray */, value),\n    arrayLike: (value) => assertType(is.arrayLike(value), \"array-like\" /* arrayLike */, value),\n    domElement: (value) => assertType(is.domElement(value), \"HTMLElement\" /* domElement */, value),\n    observable: (value) => assertType(is.observable(value), 'Observable', value),\n    nodeStream: (value) => assertType(is.nodeStream(value), \"Node.js Stream\" /* nodeStream */, value),\n    infinite: (value) => assertType(is.infinite(value), \"infinite number\" /* infinite */, value),\n    emptyArray: (value) => assertType(is.emptyArray(value), \"empty array\" /* emptyArray */, value),\n    nonEmptyArray: (value) => assertType(is.nonEmptyArray(value), \"non-empty array\" /* nonEmptyArray */, value),\n    emptyString: (value) => assertType(is.emptyString(value), \"empty string\" /* emptyString */, value),\n    emptyStringOrWhitespace: (value) => assertType(is.emptyStringOrWhitespace(value), \"empty string or whitespace\" /* emptyStringOrWhitespace */, value),\n    nonEmptyString: (value) => assertType(is.nonEmptyString(value), \"non-empty string\" /* nonEmptyString */, value),\n    nonEmptyStringAndNotWhitespace: (value) => assertType(is.nonEmptyStringAndNotWhitespace(value), \"non-empty string and not whitespace\" /* nonEmptyStringAndNotWhitespace */, value),\n    emptyObject: (value) => assertType(is.emptyObject(value), \"empty object\" /* emptyObject */, value),\n    nonEmptyObject: (value) => assertType(is.nonEmptyObject(value), \"non-empty object\" /* nonEmptyObject */, value),\n    emptySet: (value) => assertType(is.emptySet(value), \"empty set\" /* emptySet */, value),\n    nonEmptySet: (value) => assertType(is.nonEmptySet(value), \"non-empty set\" /* nonEmptySet */, value),\n    emptyMap: (value) => assertType(is.emptyMap(value), \"empty map\" /* emptyMap */, value),\n    nonEmptyMap: (value) => assertType(is.nonEmptyMap(value), \"non-empty map\" /* nonEmptyMap */, value),\n    propertyKey: (value) => assertType(is.propertyKey(value), 'PropertyKey', value),\n    formData: (value) => assertType(is.formData(value), 'FormData', value),\n    urlSearchParams: (value) => assertType(is.urlSearchParams(value), 'URLSearchParams', value),\n    // Numbers.\n    evenInteger: (value) => assertType(is.evenInteger(value), \"even integer\" /* evenInteger */, value),\n    oddInteger: (value) => assertType(is.oddInteger(value), \"odd integer\" /* oddInteger */, value),\n    // Two arguments.\n    directInstanceOf: (instance, class_) => assertType(is.directInstanceOf(instance, class_), \"T\" /* directInstanceOf */, instance),\n    inRange: (value, range) => assertType(is.inRange(value, range), \"in range\" /* inRange */, value),\n    // Variadic functions.\n    any: (predicate, ...values) => {\n        return assertType(is.any(predicate, ...values), \"predicate returns truthy for any value\" /* any */, values, { multipleValues: true });\n    },\n    all: (predicate, ...values) => assertType(is.all(predicate, ...values), \"predicate returns truthy for all values\" /* all */, values, { multipleValues: true })\n};\n// Some few keywords are reserved, but we'll populate them for Node.js users\n// See https://github.com/Microsoft/TypeScript/issues/2536\nObject.defineProperties(is, {\n    class: {\n        value: is.class_\n    },\n    function: {\n        value: is.function_\n    },\n    null: {\n        value: is.null_\n    }\n});\nObject.defineProperties(exports.assert, {\n    class: {\n        value: exports.assert.class_\n    },\n    function: {\n        value: exports.assert.function_\n    },\n    null: {\n        value: exports.assert.null_\n    }\n});\nexports.default = is;\n// For CommonJS default export support\nmodule.exports = is;\nmodule.exports.default = is;\nmodule.exports.assert = exports.assert;\n"],"names":["Object","defineProperty","exports","value","typedArrayTypeNames","objectTypeNames","primitiveTypeNames","isOfType","type","toString","prototype","getObjectType","objectTypeName","call","slice","test","is","domElement","name","includes","isObjectOfType","observable","array","buffer","tagType","String","Boolean","Number","TypeError","undefined","string","isNumberType","number","nan","bigint","function_","null_","class_","startsWith","boolean","symbol","numericString","emptyStringOrWhitespace","isNaN","assertion","Array","isArray","every","_a","_b","_c","_d","constructor","isBuffer","blob","nullOrUndefined","object","iterable","Symbol","iterator","asyncIterable","asyncIterator","generator","next","throw","asyncGenerator","nativePromise","promise","then","catch","hasPromiseAPI","generatorFunction","asyncGeneratorFunction","asyncFunction","boundFunction","hasOwnProperty","regExp","date","error","map","set","weakMap","weakSet","int8Array","uint8Array","uint8ClampedArray","int16Array","uint16Array","int32Array","uint32Array","float32Array","float64Array","bigInt64Array","bigUint64Array","arrayBuffer","sharedArrayBuffer","dataView","enumCase","targetEnum","values","directInstanceOf","instance","getPrototypeOf","urlInstance","urlString","URL","truthy","falsy","primitive","integer","isInteger","safeInteger","isSafeInteger","plainObject","typedArray","isTypedArrayName","arrayLike","isValidLength","length","inRange","range","Math","min","max","JSON","stringify","DOM_PROPERTIES_TO_CHECK","nodeType","nodeName","property","nodeStream","pipe","infinite","Infinity","isAbsoluteMod2","remainder","abs","evenInteger","oddInteger","emptyArray","nonEmptyArray","emptyString","isWhiteSpaceString","nonEmptyString","nonEmptyStringAndNotWhitespace","emptyObject","keys","nonEmptyObject","emptySet","size","nonEmptySet","emptyMap","nonEmptyMap","propertyKey","any","formData","urlSearchParams","predicateOnArray","method","predicate","_len","arguments","_key","some","singlePredicate","all","_len2","_key2","assertType","condition","description","options","multipleValues","valuesMessage","Set","singleValue","join","assert","forEach","_len3","_key3","_len4","_key4","defineProperties","class","function","null","module"],"sourceRoot":""}