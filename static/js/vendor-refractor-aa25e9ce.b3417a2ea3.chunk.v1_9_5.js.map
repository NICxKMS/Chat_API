{"version":3,"file":"static/js/vendor-refractor-aa25e9ce.b3417a2ea3.chunk.v1_9_5.js","mappings":"8IACA,IAAIA,EAAeC,EAAQ,OAI3B,SAASC,EAAUC,GACjBA,EAAMC,SAASJ,GACfG,EAAME,UAAUC,aAAa,MAAO,WAAY,CAC9CC,KAAM,CACJC,QAAS,WACTC,MAAO,WAETC,OACE,uIACFC,MAAO,CACLH,QAAS,cACTI,OAAQ,CACNC,QAAS,6BACTC,YAAa,WAIrB,CApBAC,EAAOC,QAAUd,EACjBA,EAAUe,YAAc,YACxBf,EAAUgB,QAAU,E,kBCHpB,IAAIC,EAA4BlB,EAAQ,OAIxC,SAASmB,EAAIjB,GACXA,EAAMC,SAASe,GAQd,SAAWhB,GACV,IAAIkB,EAAU,oCACVC,EAAW,CACb,CACEd,QAAS,sBACTC,MAAO,WAET,CACED,QAAS,iCACTe,QAAQ,EACRC,YAAY,GAEd,CACEhB,QAAS,+CACTe,QAAQ,EACRC,YAAY,GAEd,gBACA,iCAEEC,EACF,6IACEC,EACF,wFACEZ,EAAc,gBAClBX,EAAME,UAAUe,IAAM,CACpBO,UAAW,CACTnB,QAAS,6BACTC,MAAO,aAETY,QAASA,EACTO,SAAU,sBACVC,QAAS,CACPrB,QACE,oEACFgB,YAAY,EACZZ,OAAQ,CACNE,YAAa,OAGjB,wBAAyB,CACvBN,QAAS,4DACTgB,YAAY,EACZf,MAAO,cAET,sBAAuB,CACrBD,QAAS,qCACTgB,YAAY,EACZf,MAAO,YAETI,QAAS,CACP,CACEL,QACE,8EACFC,MAAO,eACPc,QAAQ,EACRC,YAAY,GAEd,CACEhB,QACE,sIACFC,MAAO,YACPc,QAAQ,EACRC,YAAY,GAEd,CACEhB,QACE,6IACFC,MAAO,cACPc,QAAQ,EACRC,YAAY,GAEd,CACEhB,QACE,2EACFC,MAAO,mBACPc,QAAQ,GAEV,CACEf,QAAS,qDACTC,MAAO,mBACPc,QAAQ,EACRC,YAAY,GAEd,CACEhB,QAAS,qCACTC,MAAO,iBACPc,QAAQ,GAEV,CAEEf,QAAS,sBACTgB,YAAY,GAEd,aACA,CAKEhB,QACE,8hBACFgB,YAAY,IAGhB,gBAAiB,CACfhB,QAAS,qCACTgB,YAAY,GAEd,aAAc,CACZ,CACEhB,QACE,qGACFe,QAAQ,EACRC,YAAY,GAEd,CACEhB,QAAS,8BACTe,QAAQ,EACRC,YAAY,GAEd,CACEhB,QAAS,gCACTe,QAAQ,GAEV,CACEf,QAAS,gCACTC,MAAO,6BACPc,QAAQ,EACRC,YAAY,EACZZ,OAAQ,CACNE,YAAa,OAGjB,CACEN,QAAS,kCACTC,MAAO,6BACPc,QAAQ,EACRX,OAAQ,CACNE,YAAa,OAGjB,CACEN,QACE,iHACFC,MAAO,6BACPc,QAAQ,EACRC,YAAY,EACZZ,OAAQ,CACNE,YAAa,OAGjB,CACEN,QAAS,wBACTC,MAAO,mBACPc,QAAQ,GAEV,CACEf,QAAS,gCACTC,MAAO,CAAC,6BAA8B,oBACtCc,QAAQ,EACRX,OAAQ,CACNE,YAAa,OAGjB,CACEN,QAAS,wBACTC,MAAO,iBACPc,QAAQ,GAEV,CACEf,QAAS,gCACTC,MAAO,CAAC,6BAA8B,kBACtCc,QAAQ,EACRX,OAAQ,CACNE,YAAa,OAGjB,CACEN,QAAS,gCACTC,MAAO,YACPc,QAAQ,EACRC,YAAY,GAEd,CACEhB,QAAS,0CACTC,MAAO,CAAC,6BAA8B,aACtCc,QAAQ,EACRC,YAAY,EACZZ,OAAQ,CACNE,YAAa,OAGjB,CACEN,QAAS,4CACTC,MAAO,cACPc,QAAQ,EACRC,YAAY,GAEd,CACEhB,QAAS,oDACTC,MAAO,CAAC,6BAA8B,eACtCc,QAAQ,EACRC,YAAY,EACZZ,OAAQ,CACNE,YAAa,QAInBQ,SAAUA,EACVQ,SAAU,CACRtB,QAAS,+CACTgB,YAAY,EACZZ,OAAQ,CACNE,YAAa,OAGjBiB,SAAU,CACRvB,QAAS,aACTgB,YAAY,GAEdC,OAAQA,EACRC,SAAUA,EACVZ,YAAaA,GAEf,IAAIkB,EAAuB,CACzBxB,QACE,6FACFgB,YAAY,EACZZ,OAAQT,EAAME,UAAUe,KAEtBa,EAAS,CACX,CACEzB,QAAS,sCACTC,MAAO,gBACPc,QAAQ,EACRX,OAAQ,CACNe,UAAW,CACTnB,QAAS,2BACTC,MAAO,SACPG,OAAQ,CACNE,YAAa,mBAKrB,CACEN,QACE,8EACFC,MAAO,iBACPc,QAAQ,EACRX,OAAQ,CACNe,UAAW,CACTnB,QAAS,yCACTC,MAAO,SACPG,OAAQ,CACNE,YAAa,iBAGjBoB,cAAeF,IAGnB,CACExB,QAAS,yBACTC,MAAO,yBACPc,QAAQ,GAEV,CACEf,QAAS,yBACTC,MAAO,uBACPc,QAAQ,GAEV,CACEf,QAAS,yBACTC,MAAO,uBACPc,QAAQ,EACRX,OAAQ,CACNsB,cAAeF,KAIrB7B,EAAME,UAAUC,aAAa,MAAO,WAAY,CAC9C2B,OAAQA,EACRE,UAAW,CACT3B,QACE,4IACFe,QAAQ,EACRX,OAAQ,CACN,oBAAqB,CACnBJ,QAAS,uBACTgB,YAAY,EAEZZ,OAAQ,CACNS,QAASA,EACTY,OAAQA,EACR,uBAAwB,CACtB,CACEzB,QAAS,+BACTC,MAAO,aACPc,QAAQ,EACRC,YAAY,GAEd,CACEhB,QAAS,+BACTC,MAAO,CAAC,aAAc,8BACtBc,QAAQ,EACRC,YAAY,EACZZ,OAAQ,CACNE,YAAa,QAInBQ,SAAUA,EACVG,OAAQA,EACRC,SAAUA,EACVZ,YAAaA,IAGjBa,UAAW,CACTnB,QAAS,WACTC,MAAO,mBAKfN,EAAMiC,MAAMC,IAAI,mBAAmB,SAAUC,GACtC,MAAMC,KAAKD,EAAIE,OAKpBrC,EAAME,UAAU,qBAAqBoC,kBACnCH,EACA,MAHA,oKAMJ,IACAnC,EAAMiC,MAAMC,IAAI,kBAAkB,SAAUC,GAC1CnC,EAAME,UAAU,qBAAqBqC,qBAAqBJ,EAAK,MACjE,GACD,CApVA,CAoVEnC,EACL,CAjWAY,EAAOC,QAAUI,EACjBA,EAAIH,YAAc,MAClBG,EAAIF,QAAU,E,YCCd,SAASyB,EAAKxC,IACX,SAAWA,GACV,IAAIyC,EACF,6GACGC,OACL1C,EAAME,UAAUsC,KAAO,CACrBtB,QAAS,CACP,CAEEb,QAAS,2BACTgB,YAAY,EACZD,QAAQ,GAEV,CACEf,QAAS,gBACTgB,YAAY,EACZD,QAAQ,IAIZU,OAAQ,CACN,CACEzB,QAASsC,OACP,qCAAqCD,OACnC,MACA,CAEE,mDAAmDA,OAEnD,2CAA2CA,OAI3CD,GACAG,KAAK,KACP,KAEJxB,QAAQ,GAEV,CACEf,QAAS,mCACTe,QAAQ,GAGV,CACEf,QAAS,wBACTe,QAAQ,IAGZyB,MAAO,CACL,CACExC,QAASsC,OACP,+BAA+BD,OAC7B,MACA,CAEE,mDAAmDA,OAEnD,2CAA2CA,OAI3CD,GACAG,KAAK,KACP,IACA,mBAAmBF,QAEvBtB,QAAQ,GAEV,CACEf,QAASsC,OACP,yCAAyCD,OACvC,MACA,CAGE,8EACGA,OAEH,sEACGA,OAKHD,EAAW,MAAMC,OAASD,GAC1BG,KAAK,KACP,IACA,qBAAqBF,QAEzBrB,YAAY,EACZD,QAAQ,GAKV,CACEf,QACE,4HACFe,QAAQ,IAIZK,SAAU,CAER,sBACA,kBACA,kBACA,sDACA,aAEA,qDAEFqB,WAAY,CAEVzC,QAAS,uBACTC,MAAO,UAET,WAAY,CAEVD,QAAS,kCACTC,MAAO,UAETqB,SAAU,CACRtB,QAAS,mBACTgB,YAAY,GAEdX,QACE,6MACFY,OACE,8GACFC,SACE,gNACFZ,YAAa,eAEhB,CAtIA,CAsIEX,EACL,CA3IAY,EAAOC,QAAU2B,EACjBA,EAAK1B,YAAc,OACnB0B,EAAKzB,QAAU,E,YCCf,SAASgC,EAAW/C,GAClBA,EAAME,UAAU6C,WAAa,CAC3B7B,QAASyB,OACP,CAEE,mBAAmBD,OACnB,cAAcA,OACd,4DAA4DA,OAC5D,mBAAmBA,QACnBE,KAAK,MAETd,OAAQ,CACNzB,QAAS,kDACTe,QAAQ,GAEVK,SAAU,OACV,sBAAuB,CACrBpB,QAAS,2CACTgB,YAAY,EACZf,MAAO,YAET,aAAc,CACZD,QACE,iIACFgB,YAAY,EACZZ,OAAQ,CACNE,YAAa,MAGjBD,QACE,gYACF,mBAAoB,CAClBL,QAAS,sBACTC,MAAO,YAETqB,SAAU,sBACVqB,QAAS,sBACT1B,OAAQ,oBACRC,SAAU,8BACVZ,YAAa,eAEfX,EAAME,UAAU+C,MAAQjD,EAAME,UAAU6C,UAC1C,CA7CAnC,EAAOC,QAAUkC,EACjBA,EAAWjC,YAAc,aACzBiC,EAAWhC,QAAU,CAAC,Q","sources":["../node_modules/refractor/lang/php-extras.js","../node_modules/refractor/lang/php.js","../node_modules/refractor/lang/perl.js","../node_modules/refractor/lang/peoplecode.js"],"sourcesContent":["'use strict'\nvar refractorPhp = require('./php.js')\nmodule.exports = phpExtras\nphpExtras.displayName = 'phpExtras'\nphpExtras.aliases = []\nfunction phpExtras(Prism) {\n  Prism.register(refractorPhp)\n  Prism.languages.insertBefore('php', 'variable', {\n    this: {\n      pattern: /\\$this\\b/,\n      alias: 'keyword'\n    },\n    global:\n      /\\$(?:GLOBALS|HTTP_RAW_POST_DATA|_(?:COOKIE|ENV|FILES|GET|POST|REQUEST|SERVER|SESSION)|argc|argv|http_response_header|php_errormsg)\\b/,\n    scope: {\n      pattern: /\\b[\\w\\\\]+::/,\n      inside: {\n        keyword: /\\b(?:parent|self|static)\\b/,\n        punctuation: /::|\\\\/\n      }\n    }\n  })\n}\n","'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = php\nphp.displayName = 'php'\nphp.aliases = []\nfunction php(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  /**\n   * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n   * Modified by Miles Johnson: http://milesj.me\n   * Rewritten by Tom Pavelec\n   *\n   * Supports PHP 5.3 - 8.0\n   */\n  ;(function (Prism) {\n    var comment = /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*|#(?!\\[).*/\n    var constant = [\n      {\n        pattern: /\\b(?:false|true)\\b/i,\n        alias: 'boolean'\n      },\n      {\n        pattern: /(::\\s*)\\b[a-z_]\\w*\\b(?!\\s*\\()/i,\n        greedy: true,\n        lookbehind: true\n      },\n      {\n        pattern: /(\\b(?:case|const)\\s+)\\b[a-z_]\\w*(?=\\s*[;=])/i,\n        greedy: true,\n        lookbehind: true\n      },\n      /\\b(?:null)\\b/i,\n      /\\b[A-Z_][A-Z0-9_]*\\b(?!\\s*\\()/\n    ]\n    var number =\n      /\\b0b[01]+(?:_[01]+)*\\b|\\b0o[0-7]+(?:_[0-7]+)*\\b|\\b0x[\\da-f]+(?:_[\\da-f]+)*\\b|(?:\\b\\d+(?:_\\d+)*\\.?(?:\\d+(?:_\\d+)*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i\n    var operator =\n      /<?=>|\\?\\?=?|\\.{3}|\\??->|[!=]=?=?|::|\\*\\*=?|--|\\+\\+|&&|\\|\\||<<|>>|[?~]|[/^|%*&<>.+-]=?/\n    var punctuation = /[{}\\[\\](),:;]/\n    Prism.languages.php = {\n      delimiter: {\n        pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n        alias: 'important'\n      },\n      comment: comment,\n      variable: /\\$+(?:\\w+\\b|(?=\\{))/,\n      package: {\n        pattern:\n          /(namespace\\s+|use\\s+(?:function\\s+)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      },\n      'class-name-definition': {\n        pattern: /(\\b(?:class|enum|interface|trait)\\s+)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n        lookbehind: true,\n        alias: 'class-name'\n      },\n      'function-definition': {\n        pattern: /(\\bfunction\\s+)[a-z_]\\w*(?=\\s*\\()/i,\n        lookbehind: true,\n        alias: 'function'\n      },\n      keyword: [\n        {\n          pattern:\n            /(\\(\\s*)\\b(?:array|bool|boolean|float|int|integer|object|string)\\b(?=\\s*\\))/i,\n          alias: 'type-casting',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern:\n            /([(,?]\\s*)\\b(?:array(?!\\s*\\()|bool|callable|(?:false|null)(?=\\s*\\|)|float|int|iterable|mixed|object|self|static|string)\\b(?=\\s*\\$)/i,\n          alias: 'type-hint',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern:\n            /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b(?:array(?!\\s*\\()|bool|callable|(?:false|null)(?=\\s*\\|)|float|int|iterable|mixed|object|self|static|string|void)\\b/i,\n          alias: 'return-type',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern:\n            /\\b(?:array(?!\\s*\\()|bool|float|int|iterable|mixed|object|string|void)\\b/i,\n          alias: 'type-declaration',\n          greedy: true\n        },\n        {\n          pattern: /(\\|\\s*)(?:false|null)\\b|\\b(?:false|null)(?=\\s*\\|)/i,\n          alias: 'type-declaration',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /\\b(?:parent|self|static)(?=\\s*::)/i,\n          alias: 'static-context',\n          greedy: true\n        },\n        {\n          // yield from\n          pattern: /(\\byield\\s+)from\\b/i,\n          lookbehind: true\n        }, // `class` is always a keyword unlike other keywords\n        /\\bclass\\b/i,\n        {\n          // https://www.php.net/manual/en/reserved.keywords.php\n          //\n          // keywords cannot be preceded by \"->\"\n          // the complex lookbehind means `(?<!(?:->|::)\\s*)`\n          pattern:\n            /((?:^|[^\\s>:]|(?:^|[^-])>|(?:^|[^:]):)\\s*)\\b(?:abstract|and|array|as|break|callable|case|catch|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|enum|eval|exit|extends|final|finally|fn|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|match|namespace|new|or|parent|print|private|protected|public|require|require_once|return|self|static|switch|throw|trait|try|unset|use|var|while|xor|yield|__halt_compiler)\\b/i,\n          lookbehind: true\n        }\n      ],\n      'argument-name': {\n        pattern: /([(,]\\s+)\\b[a-z_]\\w*(?=\\s*:(?!:))/i,\n        lookbehind: true\n      },\n      'class-name': [\n        {\n          pattern:\n            /(\\b(?:extends|implements|instanceof|new(?!\\s+self|\\s+static))\\s+|\\bcatch\\s*\\()\\b[a-z_]\\w*(?!\\\\)\\b/i,\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /(\\|\\s*)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /\\b[a-z_]\\w*(?!\\\\)\\b(?=\\s*\\|)/i,\n          greedy: true\n        },\n        {\n          pattern: /(\\|\\s*)(?:\\\\?\\b[a-z_]\\w*)+\\b/i,\n          alias: 'class-name-fully-qualified',\n          greedy: true,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /(?:\\\\?\\b[a-z_]\\w*)+\\b(?=\\s*\\|)/i,\n          alias: 'class-name-fully-qualified',\n          greedy: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern:\n            /(\\b(?:extends|implements|instanceof|new(?!\\s+self\\b|\\s+static\\b))\\s+|\\bcatch\\s*\\()(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n          alias: 'class-name-fully-qualified',\n          greedy: true,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /\\b[a-z_]\\w*(?=\\s*\\$)/i,\n          alias: 'type-declaration',\n          greedy: true\n        },\n        {\n          pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n          alias: ['class-name-fully-qualified', 'type-declaration'],\n          greedy: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /\\b[a-z_]\\w*(?=\\s*::)/i,\n          alias: 'static-context',\n          greedy: true\n        },\n        {\n          pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*::)/i,\n          alias: ['class-name-fully-qualified', 'static-context'],\n          greedy: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /([(,?]\\s*)[a-z_]\\w*(?=\\s*\\$)/i,\n          alias: 'type-hint',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /([(,?]\\s*)(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n          alias: ['class-name-fully-qualified', 'type-hint'],\n          greedy: true,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n          alias: 'return-type',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n          alias: ['class-name-fully-qualified', 'return-type'],\n          greedy: true,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        }\n      ],\n      constant: constant,\n      function: {\n        pattern: /(^|[^\\\\\\w])\\\\?[a-z_](?:[\\w\\\\]*\\w)?(?=\\s*\\()/i,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      },\n      property: {\n        pattern: /(->\\s*)\\w+/,\n        lookbehind: true\n      },\n      number: number,\n      operator: operator,\n      punctuation: punctuation\n    }\n    var string_interpolation = {\n      pattern:\n        /\\{\\$(?:\\{(?:\\{[^{}]+\\}|[^{}]+)\\}|[^{}])+\\}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[[^\\r\\n\\[\\]]+\\]|->\\w+)?)/,\n      lookbehind: true,\n      inside: Prism.languages.php\n    }\n    var string = [\n      {\n        pattern: /<<<'([^']+)'[\\r\\n](?:.*[\\r\\n])*?\\1;/,\n        alias: 'nowdoc-string',\n        greedy: true,\n        inside: {\n          delimiter: {\n            pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<'?|[';]$/\n            }\n          }\n        }\n      },\n      {\n        pattern:\n          /<<<(?:\"([^\"]+)\"[\\r\\n](?:.*[\\r\\n])*?\\1;|([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?\\2;)/i,\n        alias: 'heredoc-string',\n        greedy: true,\n        inside: {\n          delimiter: {\n            pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<\"?|[\";]$/\n            }\n          },\n          interpolation: string_interpolation\n        }\n      },\n      {\n        pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n        alias: 'backtick-quoted-string',\n        greedy: true\n      },\n      {\n        pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n        alias: 'single-quoted-string',\n        greedy: true\n      },\n      {\n        pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n        alias: 'double-quoted-string',\n        greedy: true,\n        inside: {\n          interpolation: string_interpolation\n        }\n      }\n    ]\n    Prism.languages.insertBefore('php', 'variable', {\n      string: string,\n      attribute: {\n        pattern:\n          /#\\[(?:[^\"'\\/#]|\\/(?![*/])|\\/\\/.*$|#(?!\\[).*$|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*')+\\](?=\\s*[a-z$#])/im,\n        greedy: true,\n        inside: {\n          'attribute-content': {\n            pattern: /^(#\\[)[\\s\\S]+(?=\\]$)/,\n            lookbehind: true,\n            // inside can appear subset of php\n            inside: {\n              comment: comment,\n              string: string,\n              'attribute-class-name': [\n                {\n                  pattern: /([^:]|^)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n                  alias: 'class-name',\n                  greedy: true,\n                  lookbehind: true\n                },\n                {\n                  pattern: /([^:]|^)(?:\\\\?\\b[a-z_]\\w*)+/i,\n                  alias: ['class-name', 'class-name-fully-qualified'],\n                  greedy: true,\n                  lookbehind: true,\n                  inside: {\n                    punctuation: /\\\\/\n                  }\n                }\n              ],\n              constant: constant,\n              number: number,\n              operator: operator,\n              punctuation: punctuation\n            }\n          },\n          delimiter: {\n            pattern: /^#\\[|\\]$/,\n            alias: 'punctuation'\n          }\n        }\n      }\n    })\n    Prism.hooks.add('before-tokenize', function (env) {\n      if (!/<\\?/.test(env.code)) {\n        return\n      }\n      var phpPattern =\n        /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#(?!\\[))(?:[^?\\n\\r]|\\?(?!>))*(?=$|\\?>|[\\r\\n])|#\\[|\\/\\*(?:[^*]|\\*(?!\\/))*(?:\\*\\/|$))*?(?:\\?>|$)/g\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'php',\n        phpPattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php')\n    })\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = perl\nperl.displayName = 'perl'\nperl.aliases = []\nfunction perl(Prism) {\n  ;(function (Prism) {\n    var brackets =\n      /(?:\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)|\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}|\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\]|<(?:[^<>\\\\]|\\\\[\\s\\S])*>)/\n        .source\n    Prism.languages.perl = {\n      comment: [\n        {\n          // POD\n          pattern: /(^\\s*)=\\w[\\s\\S]*?=cut.*/m,\n          lookbehind: true,\n          greedy: true\n        },\n        {\n          pattern: /(^|[^\\\\$])#.*/,\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      // TODO Could be nice to handle Heredoc too.\n      string: [\n        {\n          pattern: RegExp(\n            /\\b(?:q|qq|qw|qx)(?![a-zA-Z0-9])\\s*/.source +\n              '(?:' +\n              [\n                // q/.../\n                /([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source, // q a...a\n                // eslint-disable-next-line regexp/strict\n                /([a-zA-Z0-9])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2/.source, // q(...)\n                // q{...}\n                // q[...]\n                // q<...>\n                brackets\n              ].join('|') +\n              ')'\n          ),\n          greedy: true\n        }, // \"...\", `...`\n        {\n          pattern: /(\"|`)(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n          greedy: true\n        }, // '...'\n        // FIXME Multi-line single-quoted strings are not supported as they would break variables containing '\n        {\n          pattern: /'(?:[^'\\\\\\r\\n]|\\\\.)*'/,\n          greedy: true\n        }\n      ],\n      regex: [\n        {\n          pattern: RegExp(\n            /\\b(?:m|qr)(?![a-zA-Z0-9])\\s*/.source +\n              '(?:' +\n              [\n                // m/.../\n                /([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source, // m a...a\n                // eslint-disable-next-line regexp/strict\n                /([a-zA-Z0-9])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2/.source, // m(...)\n                // m{...}\n                // m[...]\n                // m<...>\n                brackets\n              ].join('|') +\n              ')' +\n              /[msixpodualngc]*/.source\n          ),\n          greedy: true\n        }, // The lookbehinds prevent -s from breaking\n        {\n          pattern: RegExp(\n            /(^|[^-])\\b(?:s|tr|y)(?![a-zA-Z0-9])\\s*/.source +\n              '(?:' +\n              [\n                // s/.../.../\n                // eslint-disable-next-line regexp/strict\n                /([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2/\n                  .source, // s a...a...a\n                // eslint-disable-next-line regexp/strict\n                /([a-zA-Z0-9])(?:(?!\\3)[^\\\\]|\\\\[\\s\\S])*\\3(?:(?!\\3)[^\\\\]|\\\\[\\s\\S])*\\3/\n                  .source, // s(...)(...)\n                // s{...}{...}\n                // s[...][...]\n                // s<...><...>\n                // s(...)[...]\n                brackets + /\\s*/.source + brackets\n              ].join('|') +\n              ')' +\n              /[msixpodualngcer]*/.source\n          ),\n          lookbehind: true,\n          greedy: true\n        }, // /.../\n        // The look-ahead tries to prevent two divisions on\n        // the same line from being highlighted as regex.\n        // This does not support multi-line regex.\n        {\n          pattern:\n            /\\/(?:[^\\/\\\\\\r\\n]|\\\\.)*\\/[msixpodualngc]*(?=\\s*(?:$|[\\r\\n,.;})&|\\-+*~<>!?^]|(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|x|xor)\\b))/,\n          greedy: true\n        }\n      ],\n      // FIXME Not sure about the handling of ::, ', and #\n      variable: [\n        // ${^POSTMATCH}\n        /[&*$@%]\\{\\^[A-Z]+\\}/, // $^V\n        /[&*$@%]\\^[A-Z_]/, // ${...}\n        /[&*$@%]#?(?=\\{)/, // $foo\n        /[&*$@%]#?(?:(?:::)*'?(?!\\d)[\\w$]+(?![\\w$]))+(?:::)*/, // $1\n        /[&*$@%]\\d+/, // $_, @_, %!\n        // The negative lookahead prevents from breaking the %= operator\n        /(?!%=)[$@%][!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~]/\n      ],\n      filehandle: {\n        // <>, <FOO>, _\n        pattern: /<(?![<=])\\S*?>|\\b_\\b/,\n        alias: 'symbol'\n      },\n      'v-string': {\n        // v1.2, 1.2.3\n        pattern: /v\\d+(?:\\.\\d+)*|\\d+(?:\\.\\d+){2,}/,\n        alias: 'string'\n      },\n      function: {\n        pattern: /(\\bsub[ \\t]+)\\w+/,\n        lookbehind: true\n      },\n      keyword:\n        /\\b(?:any|break|continue|default|delete|die|do|else|elsif|eval|for|foreach|given|goto|if|last|local|my|next|our|package|print|redo|require|return|say|state|sub|switch|undef|unless|until|use|when|while)\\b/,\n      number:\n        /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0b[01](?:_?[01])*|(?:(?:\\d(?:_?\\d)*)?\\.)?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)\\b/,\n      operator:\n        /-[rwxoRWXOezsfdlpSbctugkTBMAC]\\b|\\+[+=]?|-[-=>]?|\\*\\*?=?|\\/\\/?=?|=[=~>]?|~[~=]?|\\|\\|?=?|&&?=?|<(?:=>?|<=?)?|>>?=?|![~=]?|[%^]=?|\\.(?:=|\\.\\.?)?|[\\\\?]|\\bx(?:=|\\b)|\\b(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|xor)\\b/,\n      punctuation: /[{}[\\];(),:]/\n    }\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = peoplecode\npeoplecode.displayName = 'peoplecode'\npeoplecode.aliases = ['pcode']\nfunction peoplecode(Prism) {\n  Prism.languages.peoplecode = {\n    comment: RegExp(\n      [\n        // C-style multiline comments\n        /\\/\\*[\\s\\S]*?\\*\\//.source, // REM comments\n        /\\bREM[^;]*;/.source, // Nested <* *> comments\n        /<\\*(?:[^<*]|\\*(?!>)|<(?!\\*)|<\\*(?:(?!\\*>)[\\s\\S])*\\*>)*\\*>/.source, // /+ +/ comments\n        /\\/\\+[\\s\\S]*?\\+\\//.source\n      ].join('|')\n    ),\n    string: {\n      pattern: /'(?:''|[^'\\r\\n])*'(?!')|\"(?:\"\"|[^\"\\r\\n])*\"(?!\")/,\n      greedy: true\n    },\n    variable: /%\\w+/,\n    'function-definition': {\n      pattern: /((?:^|[^\\w-])(?:function|method)\\s+)\\w+/i,\n      lookbehind: true,\n      alias: 'function'\n    },\n    'class-name': {\n      pattern:\n        /((?:^|[^-\\w])(?:as|catch|class|component|create|extends|global|implements|instance|local|of|property|returns)\\s+)\\w+(?::\\w+)*/i,\n      lookbehind: true,\n      inside: {\n        punctuation: /:/\n      }\n    },\n    keyword:\n      /\\b(?:abstract|alias|as|catch|class|component|constant|create|declare|else|end-(?:class|evaluate|for|function|get|if|method|set|try|while)|evaluate|extends|for|function|get|global|if|implements|import|instance|library|local|method|null|of|out|peopleCode|private|program|property|protected|readonly|ref|repeat|returns?|set|step|then|throw|to|try|until|value|when(?:-other)?|while)\\b/i,\n    'operator-keyword': {\n      pattern: /\\b(?:and|not|or)\\b/i,\n      alias: 'operator'\n    },\n    function: /[_a-z]\\w*(?=\\s*\\()/i,\n    boolean: /\\b(?:false|true)\\b/i,\n    number: /\\b\\d+(?:\\.\\d+)?\\b/,\n    operator: /<>|[<>]=?|!=|\\*\\*|[-+*/|=@]/,\n    punctuation: /[:.;,()[\\]]/\n  }\n  Prism.languages.pcode = Prism.languages.peoplecode\n}\n"],"names":["refractorPhp","require","phpExtras","Prism","register","languages","insertBefore","this","pattern","alias","global","scope","inside","keyword","punctuation","module","exports","displayName","aliases","refractorMarkupTemplating","php","comment","constant","greedy","lookbehind","number","operator","delimiter","variable","package","function","property","string_interpolation","string","interpolation","attribute","hooks","add","env","test","code","buildPlaceholders","tokenizePlaceholders","perl","brackets","source","RegExp","join","regex","filehandle","peoplecode","boolean","pcode"],"sourceRoot":""}