{"version":3,"file":"static/js/4431.a4513bd1e2.chunk.v1_7.js","mappings":"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","sources":["../node_modules/micromark-extension-gfm-footnote/node_modules/micromark-util-character/index.js","../node_modules/micromark-extension-gfm-footnote/node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","../node_modules/micromark-extension-gfm-footnote/lib/syntax.js","../node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {blankLine} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  }\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {Token} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1]\n    if (token.type === 'labelImage') {\n      labelStart = token\n      break\n    }\n\n    // Exit if we’ve walked far enough.\n    if (\n      token.type === 'gfmFootnoteCall' ||\n      token.type === 'labelLink' ||\n      token.type === 'label' ||\n      token.type === 'image' ||\n      token.type === 'link'\n    ) {\n      break\n    }\n  }\n  return start\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code)\n    }\n    const id = normalizeIdentifier(\n      self.sliceSerialize({\n        start: labelStart.end,\n        end: self.now()\n      })\n    )\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code)\n    }\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return ok(code)\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length\n  /** @type {Token | undefined} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    if (\n      events[index][1].type === 'labelImage' &&\n      events[index][0] === 'enter'\n    ) {\n      labelStart = events[index][1]\n      break\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = 'data'\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker'\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  }\n  // Increment the end 1 character.\n  marker.end.column++\n  marker.end.offset++\n  marker.end._bufferIndex++\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  }\n  /** @type {Token} */\n  const chunk = {\n    type: 'chunkString',\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  }\n\n  /** @type {Array<Event>} */\n  const replacement = [\n    // Take the `labelImageMarker` (now `data`, the `!`)\n    events[index + 1],\n    events[index + 2],\n    ['enter', call, context],\n    // The `[`\n    events[index + 3],\n    events[index + 4],\n    // The `^`.\n    ['enter', marker, context],\n    ['exit', marker, context],\n    // Everything in between.\n    ['enter', string, context],\n    ['enter', chunk, context],\n    ['exit', chunk, context],\n    ['exit', string, context],\n    // The ending (`]`, properly parsed and labelled).\n    events[events.length - 2],\n    events[events.length - 1],\n    ['exit', call, context]\n  ]\n  events.splice(index, events.length - index + 1, ...replacement)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  let size = 0\n  /** @type {boolean} */\n  let data\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall')\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return callStart\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code)\n    effects.enter('gfmFootnoteCallMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallMarker')\n    effects.enter('gfmFootnoteCallString')\n    effects.enter('chunkString').contentType = 'string'\n    return callData\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteCallString')\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code)\n      }\n      effects.enter('gfmFootnoteCallLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteCallLabelMarker')\n      effects.exit('gfmFootnoteCall')\n      return ok\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? callEscape : callData\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return callData\n    }\n    return callData(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {string} */\n  let identifier\n  let size = 0\n  /** @type {boolean | undefined} */\n  let data\n  return start\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true\n    effects.enter('gfmFootnoteDefinitionLabel')\n    effects.enter('gfmFootnoteDefinitionLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteDefinitionLabelMarker')\n    return labelAtMarker\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionMarker')\n      effects.enter('gfmFootnoteDefinitionLabelString')\n      effects.enter('chunkString').contentType = 'string'\n      return labelInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteDefinitionLabelString')\n      identifier = normalizeIdentifier(self.sliceSerialize(token))\n      effects.enter('gfmFootnoteDefinitionLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionLabelMarker')\n      effects.exit('gfmFootnoteDefinitionLabel')\n      return labelAfter\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      if (!defined.includes(identifier)) {\n        defined.push(identifier)\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(\n        effects,\n        whitespaceAfter,\n        'gfmFootnoteDefinitionWhitespace'\n      )\n    }\n    return nok(code)\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok))\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition')\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'gfmFootnoteDefinitionIndent',\n    4 + 1\n  )\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'gfmFootnoteDefinitionIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === 4\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean} [singleTilde=true]\n *   Whether to support strikethrough with a single tilde.\n *\n *   Single tildes work on github.com, but are technically prohibited by the\n *   GFM spec.\n */\n\nimport {splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {}\n  let single = options_.singleTilde\n  const tokenizer = {\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  }\n  if (single === null || single === undefined) {\n    single = true\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  }\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (\n        events[index][0] === 'enter' &&\n        events[index][1].type === 'strikethroughSequenceTemporary' &&\n        events[index][1]._close\n      ) {\n        let open = index\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (\n            events[open][0] === 'exit' &&\n            events[open][1].type === 'strikethroughSequenceTemporary' &&\n            events[open][1]._open &&\n            // If the sizes are the same:\n            events[index][1].end.offset - events[index][1].start.offset ===\n              events[open][1].end.offset - events[open][1].start.offset\n          ) {\n            events[index][1].type = 'strikethroughSequence'\n            events[open][1].type = 'strikethroughSequence'\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            }\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            }\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [\n              ['enter', strikethrough, context],\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context],\n              ['enter', text, context]\n            ]\n            const insideSpan = context.parser.constructs.insideSpan.null\n            if (insideSpan) {\n              // Between.\n              splice(\n                nextEvents,\n                nextEvents.length,\n                0,\n                resolveAll(insideSpan, events.slice(open + 1, index), context)\n              )\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [\n              ['exit', text, context],\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context],\n              ['exit', strikethrough, context]\n            ])\n            splice(events, open - 1, index - open + 3, nextEvents)\n            index = open + nextEvents.length - 2\n            break\n          }\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = 'data'\n      }\n    }\n    return events\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous\n    const events = this.events\n    let size = 0\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      if (\n        previous === 126 &&\n        events[events.length - 1][1].type !== 'characterEscape'\n      ) {\n        return nok(code)\n      }\n      effects.enter('strikethroughSequenceTemporary')\n      return more(code)\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous)\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code)\n        effects.consume(code)\n        size++\n        return more\n      }\n      if (size < 2 && !single) return nok(code)\n      const token = effects.exit('strikethroughSequenceTemporary')\n      const after = classifyCharacter(code)\n      token._open = !after || (after === 2 && Boolean(before))\n      token._close = !before || (before === 2 && Boolean(after))\n      return ok(code)\n    }\n  }\n}\n"],"names":["regexCheck","markdownLineEndingOrSpace","code","regex","test","String","fromCharCode","indent","tokenize","effects","ok","nok","self","this","factorySpace","tail","events","length","type","sliceSerialize","partial","gfmFootnote","document","tokenizeDefinitionStart","continuation","tokenizeDefinitionContinuation","exit","gfmFootnoteDefinitionEnd","text","tokenizeGfmFootnoteCall","add","tokenizePotentialGfmFootnoteCall","resolveTo","resolveToPotentialGfmFootnoteCall","index","defined","parser","gfmFootnotes","labelStart","token","_balanced","id","normalizeIdentifier","start","end","now","codePointAt","includes","slice","enter","consume","context","call","Object","assign","marker","column","offset","_bufferIndex","string","chunk","contentType","replacement","splice","data","size","callStart","callData","callEscape","identifier","_container","labelAtMarker","labelInside","labelAfter","labelEscape","push","whitespaceAfter","check","blankLine","attempt","gfmStrikethrough","options","single","singleTilde","tokenizer","previous","more","before","classifyCharacter","after","_open","Boolean","_close","resolveAll","open","strikethrough","nextEvents","insideSpan","constructs","null","attentionMarkers"],"sourceRoot":""}