{"version":3,"file":"static/js/markdown-c87989a4.920ce2d8.chunk.js","mappings":"uJAWe,SAASA,EAAYC,GAkBlCC,OAAOC,OAAOC,KAAM,CAACC,OAhBLC,IAEd,MAAMC,EAAmCH,KAAKI,KAAK,YAEnD,OAAOC,EAAAA,EAAAA,GACLH,EACAJ,OAAOC,OAAO,CAAC,EAAGI,EAAUN,EAAS,CAInCS,WAAYN,KAAKI,KAAK,wBAA0B,GAChDG,gBAAiBP,KAAKI,KAAK,2BAA6B,KAE3D,GAIL,C,yGCFO,MAAMI,EAQb,SAASC,IACP,MAAMC,GAAeC,EAAAA,EAAAA,KAEfC,EAAY,GAElB,IAEIC,EAFAC,EAAY,CAAC,EAGbC,GAAe,EA2BnB,OAvBAC,EAAUZ,KA6CV,SAAca,EAAKC,GACjB,GAAmB,iBAARD,EAET,OAAyB,IAArBE,UAAUC,QACZC,EAAe,OAAQR,GACvBC,EAAUG,GAAOC,EACVF,GAIDM,EAAIC,KAAKT,EAAWG,IAAQH,EAAUG,IAAS,KAIzD,GAAIA,EAGF,OAFAI,EAAe,OAAQR,GACvBC,EAAYG,EACLD,EAIT,OAAOF,CACT,EAlEAE,EAAUf,YAASuB,EACnBR,EAAUS,cAAWD,EAGrBR,EAAUU,OAiEV,WACE,GAAIb,EACF,OAAOG,EAGT,OAASD,EAAcH,EAAUQ,QAAQ,CACvC,MAAOO,KAAa9B,GAAWe,EAAUG,GAEzC,IAAmB,IAAflB,EAAQ,GACV,UAGiB,IAAfA,EAAQ,KACVA,EAAQ,QAAK2B,GAIf,MAAMI,EAAcD,EAASJ,KAAKP,KAAcnB,GAErB,mBAAhB+B,GACTlB,EAAamB,IAAID,EAErB,CAKA,OAHAf,GAAS,EACTE,EAAce,OAAOC,kBAEdf,CACT,EA1FAA,EAAUJ,UAAYA,EAEtBI,EAAUa,IA+FV,SAAaX,GAAmB,QAAAc,EAAAb,UAAAC,OAATvB,EAAO,IAAAoC,MAAAD,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAPrC,EAAOqC,EAAA,GAAAf,UAAAe,GAE5B,IAAI/B,EAIJ,GAFAkB,EAAe,MAAOR,GAElBK,cAEG,GAAqB,mBAAVA,EAChBiB,EAAUjB,KAAUrB,OACf,IAAqB,iBAAVqB,EAOhB,MAAM,IAAIkB,UAAU,+BAAiClB,EAAQ,KANzDe,MAAMI,QAAQnB,GAChBoB,EAAQpB,GAERqB,EAAUrB,EAId,CAEIf,IACFW,EAAUX,SAAWL,OAAOC,OAAOe,EAAUX,UAAY,CAAC,EAAGA,IAG/D,OAAOa,EAMP,SAASwB,EAAItB,GACX,GAAqB,mBAAVA,EACTiB,EAAUjB,OACL,IAAqB,iBAAVA,EAQhB,MAAM,IAAIkB,UAAU,+BAAiClB,EAAQ,KAP7D,GAAIe,MAAMI,QAAQnB,GAAQ,CACxB,MAAOuB,KAAW5C,GAAWqB,EAC7BiB,EAAUM,KAAW5C,EACvB,MACE0C,EAAUrB,EAId,CACF,CAMA,SAASqB,EAAUG,GACjBJ,EAAQI,EAAOC,SAEXD,EAAOvC,WACTA,EAAWL,OAAOC,OAAOI,GAAY,CAAC,EAAGuC,EAAOvC,UAEpD,CAMA,SAASmC,EAAQK,GACf,IAAIC,GAAS,EAEb,GAAID,aAEG,KAAIV,MAAMI,QAAQM,GAMvB,MAAM,IAAIP,UAAU,oCAAsCO,EAAU,KALpE,OAASC,EAAQD,EAAQvB,QAAQ,CAE/BoB,EADcG,EAAQC,GAExB,CAGF,CACF,CAOA,SAAST,EAAUM,EAAQvB,GACzB,IAEI2B,EAFAD,GAAS,EAIb,OAASA,EAAQhC,EAAUQ,QACzB,GAAIR,EAAUgC,GAAO,KAAOH,EAAQ,CAClCI,EAAQjC,EAAUgC,GAClB,KACF,CAGEC,IACEC,EAAAA,EAAAA,GAAWD,EAAM,MAAOC,EAAAA,EAAAA,GAAW5B,KACrCA,EAAQ6B,GAAO,EAAMF,EAAM,GAAI3B,IAGjC2B,EAAM,GAAK3B,GAGXN,EAAUoC,KAAK,IAAI7B,WAEvB,CACF,EApMAH,EAAUiC,MAuMV,SAAe/C,GACbc,EAAUU,SACV,MAAMwB,EAAOC,EAAMjD,GACbD,EAASe,EAAUf,OAGzB,GAFAmD,EAAa,QAASnD,GAElBoD,EAAQpD,EAAQ,SAElB,OAAO,IAAIA,EAAOqD,OAAOJ,GAAOA,GAAMD,QAIxC,OAAOhD,EAAOqD,OAAOJ,GAAOA,EAC9B,EAnNAlC,EAAUuC,UAsNV,SAAmBC,EAAMtD,GACvBc,EAAUU,SACV,MAAMwB,EAAOC,EAAMjD,GACbuB,EAAWT,EAAUS,SAI3B,GAHAgC,EAAe,YAAahC,GAC5BiC,EAAWF,GAEPH,EAAQ5B,EAAU,WAEpB,OAAO,IAAIA,EAAS+B,EAAMN,GAAMS,UAIlC,OAAOlC,EAAS+B,EAAMN,EACxB,EAlOAlC,EAAU4C,IA0OV,SAAaJ,EAAMtD,EAAK2D,GACtBH,EAAWF,GACXxC,EAAUU,SAELmC,GAA2B,mBAAR3D,IACtB2D,EAAW3D,EACXA,OAAMsB,GAGR,IAAKqC,EACH,OAAO,IAAIC,QAAQC,GAUrB,SAASA,EAASC,EAASC,GAUzB,SAASC,EAAKC,EAAOC,EAAMlB,GACzBkB,EAAOA,GAAQZ,EACXW,EACFF,EAAOE,GACEH,EACTA,EAAQI,GAGRP,EAAS,KAAMO,EAAMlB,EAEzB,CAlBAxC,EAAakD,IAAIJ,EAAML,EAAMjD,GAAMgE,EAmBrC,CA5BAH,EAAS,KAAMF,EA6BjB,EAnRA7C,EAAUqD,QAsRV,SAAiBb,EAAMN,GAErB,IAAIR,EAEA4B,EAOJ,OALAtD,EAAU4C,IAAIJ,EAAMN,EAAMgB,GAE1BK,EAAW,UAAW,MAAOD,GAGtB5B,EAOP,SAASwB,EAAKC,EAAOC,IACnBI,EAAAA,EAAAA,GAAKL,GACLzB,EAAS0B,EACTE,GAAW,CACb,CACF,EA3SAtD,EAAUyD,QAkTV,SAAiBvE,EAAK2D,GAKpB,GAJA7C,EAAUU,SACV0B,EAAa,UAAWpC,EAAUf,QAClCwD,EAAe,UAAWzC,EAAUS,WAE/BoC,EACH,OAAO,IAAIC,QAAQC,GAUrB,SAASA,EAASC,EAASC,GACzB,MAAMf,EAAOC,EAAMjD,GA0BnB,SAASgE,EAAKC,EAAOjB,GACfiB,IAAUjB,EACZe,EAAOE,GACEH,EACTA,EAAQd,GAGRW,EAAS,KAAMX,EAEnB,CAjCAlC,EAAU4C,IAAI5C,EAAUiC,MAAMC,GAAOA,GAAM,CAACiB,EAAOC,EAAMlB,KACvD,IAAIiB,GAAUC,GAASlB,EAEhB,CAEL,MAAMR,EAAS1B,EAAUuC,UAAUa,EAAMlB,GAErCR,UAsMY,iBADIxB,EAnMYwB,IAoMJgC,EAASxD,GAnMnCgC,EAAKhC,MAAQwB,EAEbQ,EAAKR,OAASA,GAGhBwB,EAAKC,EAAOjB,EACd,MAdEgB,EAAKC,GA0Mf,IAA8BjD,CA5LtB,GAkBJ,CA5CA6C,EAAS,KAAMF,EA6CjB,EAvWA7C,EAAU2D,YA0WV,SAAqBzE,GAEnB,IAAIoE,EAEJtD,EAAUU,SACV0B,EAAa,cAAepC,EAAUf,QACtCwD,EAAe,cAAezC,EAAUS,UAExC,MAAMyB,EAAOC,EAAMjD,GAMnB,OAJAc,EAAUyD,QAAQvB,EAAMgB,GAExBK,EAAW,cAAe,UAAWD,GAE9BpB,EAMP,SAASgB,EAAKC,GACZG,GAAW,GACXE,EAAAA,EAAAA,GAAKL,EACP,CACF,EA/XOnD,EAIP,SAASA,IACP,MAAM4D,EAAcnE,IACpB,IAAImC,GAAS,EAEb,OAASA,EAAQhC,EAAUQ,QACzBwD,EAAY/C,OAAOjB,EAAUgC,IAK/B,OAFAgC,EAAYxE,KAAK2C,GAAO,EAAM,CAAC,EAAGjC,IAE3B8D,CACT,CAiXF,CA3auBnE,GAAOiB,SAExBJ,EAAM,CAAC,EAAEuD,eAkbf,SAASxB,EAAQnC,EAAO4D,GACtB,MACmB,mBAAV5D,GAGPA,EAAM6D,YAeV,SAAc7D,GAEZ,IAAID,EAEJ,IAAKA,KAAOC,EACV,GAAII,EAAIC,KAAKL,EAAOD,GAClB,OAAO,EAIX,OAAO,CACT,CArBK+D,CAAK9D,EAAM6D,YAAcD,KAAQ5D,EAAM6D,UAE5C,CA4BA,SAAS3B,EAAa0B,EAAM5D,GAC1B,GAAqB,mBAAVA,EACT,MAAM,IAAIkB,UAAU,WAAa0C,EAAO,qBAE5C,CASA,SAASrB,EAAeqB,EAAM5D,GAC5B,GAAqB,mBAAVA,EACT,MAAM,IAAIkB,UAAU,WAAa0C,EAAO,uBAE5C,CASA,SAASzD,EAAeyD,EAAMjE,GAC5B,GAAIA,EACF,MAAM,IAAIoE,MACR,gBACEH,EACA,mHAGR,CAQA,SAASpB,EAAWF,GAGlB,KAAKV,EAAAA,EAAAA,GAAWU,IAA8B,iBAAdA,EAAK0B,KACnC,MAAM,IAAI9C,UAAU,uBAAyBoB,EAAO,IAGxD,CAUA,SAASe,EAAWO,EAAMK,EAAWb,GACnC,IAAKA,EACH,MAAM,IAAIW,MACR,IAAMH,EAAO,0BAA4BK,EAAY,YAG3D,CAMA,SAAShC,EAAMjC,GACb,OAOF,SAAyBA,GACvB,OAAOkE,QACLlE,GACmB,iBAAVA,GACP,YAAaA,GACb,aAAcA,EAEpB,CAdSmE,CAAgBnE,GAASA,EAAQ,IAAIoE,EAAAA,EAAMpE,EACpD,C","sources":["../node_modules/react-markdown/node_modules/remark-parse/lib/index.js","../node_modules/react-markdown/node_modules/unified/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * @this {import('unified').Processor}\n * @type {import('unified').Plugin<[Options?] | void[], string, Root>}\n */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\nimport {bail} from 'bail'\nimport isBuffer from 'is-buffer'\nimport extend from 'extend'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\n\n// Expose a frozen processor.\nexport const unified = base().freeze()\n\nconst own = {}.hasOwnProperty\n\n// Function to create the first processor.\n/**\n * @returns {Processor}\n */\nfunction base() {\n  const transformers = trough()\n  /** @type {Processor['attachers']} */\n  const attachers = []\n  /** @type {Record<string, unknown>} */\n  let namespace = {}\n  /** @type {boolean|undefined} */\n  let frozen\n  let freezeIndex = -1\n\n  // Data management.\n  // @ts-expect-error: overloads are handled.\n  processor.data = data\n  processor.Parser = undefined\n  processor.Compiler = undefined\n\n  // Lock.\n  processor.freeze = freeze\n\n  // Plugins.\n  processor.attachers = attachers\n  // @ts-expect-error: overloads are handled.\n  processor.use = use\n\n  // API.\n  processor.parse = parse\n  processor.stringify = stringify\n  // @ts-expect-error: overloads are handled.\n  processor.run = run\n  processor.runSync = runSync\n  // @ts-expect-error: overloads are handled.\n  processor.process = process\n  processor.processSync = processSync\n\n  // Expose.\n  return processor\n\n  // Create a new processor based on the processor in the current scope.\n  /** @type {Processor} */\n  function processor() {\n    const destination = base()\n    let index = -1\n\n    while (++index < attachers.length) {\n      destination.use(...attachers[index])\n    }\n\n    destination.data(extend(true, {}, namespace))\n\n    return destination\n  }\n\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen)\n        namespace[key] = value\n        return processor\n      }\n\n      // Get `key`.\n      return (own.call(namespace, key) && namespace[key]) || null\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen)\n      namespace = key\n      return processor\n    }\n\n    // Get space.\n    return namespace\n  }\n\n  /** @type {Processor['freeze']} */\n  function freeze() {\n    if (frozen) {\n      return processor\n    }\n\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      /** @type {Transformer|void} */\n      const transformer = attacher.call(processor, ...options)\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer)\n      }\n    }\n\n    frozen = true\n    freezeIndex = Number.POSITIVE_INFINITY\n\n    return processor\n  }\n\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n  function use(value, ...options) {\n    /** @type {Record<string, unknown>|undefined} */\n    let settings\n\n    assertUnfrozen('use', frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings)\n    }\n\n    return processor\n\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value)\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value\n          addPlugin(plugin, ...options)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n    function addPreset(result) {\n      addList(result.plugins)\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n    function addPlugin(plugin, value) {\n      let index = -1\n      /** @type {Processor['attachers'][number]|undefined} */\n      let entry\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index]\n          break\n        }\n      }\n\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value)\n        }\n\n        entry[1] = value\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments])\n      }\n    }\n  }\n\n  /** @type {Processor['parse']} */\n  function parse(doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Parser = processor.Parser\n    assertParser('parse', Parser)\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Parser(String(file), file) // eslint-disable-line new-cap\n  }\n\n  /** @type {Processor['stringify']} */\n  function stringify(node, doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Compiler = processor.Compiler\n    assertCompiler('stringify', Compiler)\n    assertNode(node)\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Compiler(node, file) // eslint-disable-line new-cap\n  }\n\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n  function run(node, doc, callback) {\n    assertNode(node)\n    processor.freeze()\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc\n      doc = undefined\n    }\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done)\n\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n      function done(error, tree, file) {\n        tree = tree || node\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(tree)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['runSync']} */\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.run(node, file, done)\n\n    assertDone('runSync', 'run', complete)\n\n    // @ts-expect-error: we either bailed on an error or have a tree.\n    return result\n\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n    function done(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n  function process(doc, callback) {\n    processor.freeze()\n    assertParser('process', processor.Parser)\n    assertCompiler('process', processor.Compiler)\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      const file = vfile(doc)\n\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error)\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file)\n\n          if (result === undefined || result === null) {\n            // Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result\n          } else {\n            file.result = result\n          }\n\n          done(error, file)\n        }\n      })\n\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n      function done(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['processSync']} */\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.freeze()\n    assertParser('processSync', processor.Parser)\n    assertCompiler('processSync', processor.Compiler)\n\n    const file = vfile(doc)\n\n    processor.process(file, done)\n\n    assertDone('processSync', 'process', complete)\n\n    return file\n\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n    function done(error) {\n      complete = true\n      bail(error)\n    }\n  }\n}\n\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\nfunction newable(value, name) {\n  return (\n    typeof value === 'function' &&\n    // Prototypes do exist.\n    // type-coverage:ignore-next-line\n    value.prototype &&\n    // A function with keys in its prototype is probably a constructor.\n    // Classes’ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    // type-coverage:ignore-next-line\n    (keys(value.prototype) || name in value.prototype)\n  )\n}\n\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\nfunction keys(value) {\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value)\n}\n"],"names":["remarkParse","options","Object","assign","this","Parser","doc","settings","data","fromMarkdown","extensions","mdastExtensions","unified","base","transformers","trough","attachers","frozen","namespace","freezeIndex","processor","key","value","arguments","length","assertUnfrozen","own","call","undefined","Compiler","freeze","attacher","transformer","use","Number","POSITIVE_INFINITY","_len","Array","_key","addPlugin","TypeError","isArray","addList","addPreset","add","plugin","result","plugins","index","entry","isPlainObj","extend","push","parse","file","vfile","assertParser","newable","String","stringify","node","assertCompiler","assertNode","compile","run","callback","Promise","executor","resolve","reject","done","error","tree","runSync","complete","assertDone","bail","process","isBuffer","processSync","destination","hasOwnProperty","name","prototype","keys","Error","type","asyncName","Boolean","looksLikeAVFile","VFile"],"sourceRoot":""}