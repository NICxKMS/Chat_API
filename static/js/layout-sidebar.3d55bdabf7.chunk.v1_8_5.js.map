{"version":3,"file":"static/js/layout-sidebar.3d55bdabf7.chunk.v1_8_5.js","mappings":"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","sources":["hooks/useProfilePicture.js","components/layout/Sidebar/index.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useLocalStorage } from './useLocalStorage';\n\n// Time-to-live for cache entries (1 day in milliseconds)\nconst TTL = 24 * 60 * 60 * 1000;\n\n/**\n * Custom hook to fetch and cache user profile picture with a 1-day TTL.\n * @param {string} imageUrl - The URL to fetch the profile picture from.\n * @returns {{ profilePicture: string | null, loading: boolean, error: any }}\n */\nexport const useProfilePicture = (imageUrl) => {\n  const cacheKey = `profilePicture_${imageUrl}`;\n  // cachedEntry is either null, a string (legacy), or { data, timestamp }\n  const [cachedEntry, setCachedEntry] = useLocalStorage(cacheKey, null);\n  const [profilePicture, setProfilePicture] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    let isMounted = true;\n    if (!imageUrl) {\n      // No URL: clear state\n      setProfilePicture(null);\n      setLoading(false);\n      return;\n    }\n\n    // Validate cache entry\n    let entry = cachedEntry;\n    if (entry) {\n      // Legacy format: string\n      if (typeof entry === 'string') {\n        const wrapped = { data: entry, timestamp: Date.now() };\n        setCachedEntry(wrapped);\n        entry = wrapped;\n      }\n      // TTL check\n      if (\n        entry.timestamp &&\n        Date.now() - entry.timestamp < TTL &&\n        entry.data\n      ) {\n        setProfilePicture(entry.data);\n        setLoading(false);\n        return;\n      }\n      // Expired cache\n      setCachedEntry(null);\n    }\n\n    // Fetch and cache new image\n    setLoading(true);\n    fetch(imageUrl)\n      .then((response) => {\n        if (!response.ok) throw new Error(`Failed to fetch image: ${response.status}`);\n        return response.blob();\n      })\n      .then(\n        (blob) =>\n          new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            reader.onloadend = () => resolve(reader.result);\n            reader.onerror = reject;\n            reader.readAsDataURL(blob);\n          })\n      )\n      .then((dataUrl) => {\n        if (!isMounted) return;\n        const entryToCache = { data: dataUrl, timestamp: Date.now() };\n        setCachedEntry(entryToCache);\n        setProfilePicture(dataUrl);\n      })\n      .catch((err) => {\n        if (!isMounted) return;\n        console.error('Error fetching and caching profile image:', err);\n        setError(err);\n      })\n      .finally(() => {\n        if (!isMounted) return;\n        setLoading(false);\n      });\n\n    return () => {\n      isMounted = false;\n    };\n  }, [imageUrl, cachedEntry, setCachedEntry]);\n\n  return { profilePicture, loading, error };\n}; ","import { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { PlusIcon, GearIcon, ChevronLeftIcon } from '@primer/octicons-react';\nimport { useAuth } from '../../../contexts/AuthContext';\nimport { useChatControl } from '../../../contexts/ChatControlContext';\nimport { useProfilePicture } from '../../../hooks/useProfilePicture';\nimport Spinner from '../../common/Spinner';\nimport styles from './Sidebar.module.css';\n// Remove unused icons if PlusIcon/GearIcon only used for floating buttons\n// import { GearIcon, PlusIcon } from '@primer/octicons-react'; \n\n// Remove imports for components moved out\n// const ThemeToggle = lazy(() => import('../../common/ThemeToggle'));\n// const ApiStatus = lazy(() => import('../../common/ApiStatus'));\n\n// Sample data (keep for now)\nconst sampleSessions = [\n  { id: 'session-1', title: 'LLM Explanation Chat', timestamp: '2 hours ago' },\n  { id: 'session-2', title: 'React Component Refactoring', timestamp: 'Yesterday' },\n  { id: 'session-3', title: 'CSS Grid Layout Ideas', timestamp: 'Mar 30' },\n  { id: 'session-4', title: 'Python Script Debugging', timestamp: 'Mar 28' },\n];\n\n/**\n * Sidebar component containing app controls and chat session list\n * @param {Object} props - Component props\n * @param {string} [props.className] - Additional CSS class\n * @param {Function} [props.onToggleSettings] - Handler for settings button click\n * @param {Function} [props.onToggleSidebar] - Handler for sidebar toggle button click\n * @returns {JSX.Element} - Rendered sidebar\n */\nconst Sidebar = memo(({ className = '', onToggleSettings = () => console.warn('Settings handler not provided to Sidebar'), onToggleSidebar = () => console.warn('Sidebar toggle handler not provided to Sidebar') }) => {\n  const { currentUser, isAuthenticated } = useAuth();\n  const { newChat } = useChatControl();\n  const { profilePicture: userAvatar, loading: avatarLoading } = useProfilePicture(currentUser?.photoURL);\n  \n  const userName = currentUser?.displayName || currentUser?.email || 'Sir';\n  \n  // Handle button clicks with fallbacks\n  const handleNewChat = (e) => {\n    e.preventDefault();\n    newChat();\n  };\n\n  const handleSettings = (e) => {\n    e.preventDefault();\n    onToggleSettings();\n  };\n\n  return (\n    <div className={`${styles.Sidebar} ${className}`}>\n      {/* Header with Title and Controls */}\n      <div className={styles.Sidebar__header}>\n        <h1 className={styles.Sidebar__title}>AI Chat</h1>\n        <div className={styles.Sidebar__headerControls}>\n          <button \n            className={`${styles.Sidebar__iconButton} ${styles['Sidebar__iconButton--newChat']}`}\n            onClick={handleNewChat}\n            aria-label=\"New chat\"\n            title=\"New chat\"\n          >\n            <PlusIcon size={20} />\n          </button>\n          <button \n            className={`${styles.Sidebar__iconButton} ${styles['Sidebar__iconButton--settings']}`}\n            onClick={handleSettings}\n            aria-label=\"Settings\"\n            title=\"Settings\"\n          >\n            <GearIcon size={20} />\n          </button>\n          <button\n            className={styles.Sidebar__iconButton}\n            onClick={onToggleSidebar}\n            aria-label=\"Close sidebar\"\n            title=\"Close sidebar\"\n          >\n            <ChevronLeftIcon size={20} />\n          </button>\n        </div>\n      </div>\n      \n      {/* Chat Session List */}\n      <div className={styles.Sidebar__chatListContainer}>\n        <ul className={styles.Sidebar__sessionList}>\n          {sampleSessions.map(session => (\n            <li key={session.id} className={styles.Sidebar__sessionItem}>\n              <button className={styles.Sidebar__sessionButton} onClick={() => console.log('Load session:', session.id)}>\n                <span className={styles.Sidebar__sessionTitle}>{session.title}</span>\n                <span className={styles.Sidebar__sessionTimestamp}>{session.timestamp}</span>\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      {/* Footer */}\n      <div className={styles.Sidebar__footer}>\n        {isAuthenticated ? (\n          <div className={styles.Sidebar__userProfile}>\n            {currentUser?.photoURL ? (\n              avatarLoading ? (\n                <Spinner size=\"small\" tag=\"avatar\" />\n              ) : userAvatar ? (\n                <img\n                  src={userAvatar}\n                  alt={`${userName}'s profile`}\n                  className={styles.Sidebar__userAvatar}\n                />\n              ) : (\n                <div className={styles.Sidebar__userInitial}>\n                  {userName.charAt(0).toUpperCase()}\n                </div>\n              )\n            ) : (\n              <div className={styles.Sidebar__userInitial}>\n                {userName.charAt(0).toUpperCase()}\n              </div>\n            )}\n            <span className={styles.Sidebar__userName}>{userName}</span>\n          </div>\n        ) : (\n          <span className={styles.footerPlaceholderText}></span>\n        )}\n      </div>\n    </div>\n  );\n});\n\nSidebar.displayName = 'Sidebar';\n\n// Define PropTypes\nSidebar.propTypes = {\n  className: PropTypes.string,\n  onToggleSettings: PropTypes.func,\n  onToggleSidebar: PropTypes.func\n};\n\nexport default Sidebar; "],"names":["useProfilePicture","imageUrl","cacheKey","cachedEntry","setCachedEntry","useLocalStorage","profilePicture","setProfilePicture","useState","loading","setLoading","error","setError","useEffect","isMounted","entry","wrapped","data","timestamp","Date","now","fetch","then","response","ok","Error","status","blob","Promise","resolve","reject","reader","FileReader","onloadend","result","onerror","readAsDataURL","dataUrl","entryToCache","catch","err","finally","sampleSessions","id","title","Sidebar","memo","_ref","className","onToggleSettings","onToggleSidebar","currentUser","isAuthenticated","useAuth","newChat","useChatControl","userAvatar","avatarLoading","photoURL","userName","displayName","email","_jsxs","styles","children","Sidebar__header","_jsx","Sidebar__title","Sidebar__headerControls","Sidebar__iconButton","onClick","e","preventDefault","PlusIcon","size","GearIcon","ChevronLeftIcon","Sidebar__chatListContainer","Sidebar__sessionList","map","session","Sidebar__sessionItem","Sidebar__sessionButton","Sidebar__sessionTitle","Sidebar__sessionTimestamp","Sidebar__footer","Sidebar__userProfile","Spinner","tag","src","alt","Sidebar__userAvatar","Sidebar__userInitial","charAt","toUpperCase","Sidebar__userName","footerPlaceholderText"],"sourceRoot":""}