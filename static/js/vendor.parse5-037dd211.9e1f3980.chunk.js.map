{"version":3,"file":"static/js/vendor.parse5-037dd211.9e1f3980.chunk.js","mappings":"oJAOIA,E,mEACJ,SAAWA,GACPA,EAAMA,EAAY,KAAI,GAAK,OAC3BA,EAAMA,EAAc,OAAI,GAAK,SAC7BA,EAAMA,EAAe,QAAI,GAAK,UAC9BA,EAAMA,EAAmB,YAAI,GAAK,cAClCA,EAAMA,EAAiB,UAAI,GAAK,YAChCA,EAAMA,EAAgB,SAAI,GAAK,WAC/BA,EAAMA,EAAoB,aAAI,GAAK,eACnCA,EAAMA,EAAgB,SAAI,GAAK,WAC/BA,EAAMA,EAA6B,sBAAI,GAAK,wBAC5CA,EAAMA,EAA2B,oBAAI,GAAK,sBAC1CA,EAAMA,EAA2B,oBAAI,IAAM,sBAC3CA,EAAMA,EAA8B,uBAAI,IAAM,yBAC9CA,EAAMA,EAA4B,qBAAI,IAAM,uBAC5CA,EAAMA,EAA4B,qBAAI,IAAM,uBAC5CA,EAAMA,EAAkC,2BAAI,IAAM,6BAClDA,EAAMA,EAAgC,yBAAI,IAAM,2BAChDA,EAAMA,EAAgC,yBAAI,IAAM,2BAChDA,EAAMA,EAAgC,yBAAI,IAAM,2BAChDA,EAAMA,EAAqC,8BAAI,IAAM,gCACrDA,EAAMA,EAA2B,oBAAI,IAAM,sBAC3CA,EAAMA,EAAgC,yBAAI,IAAM,2BAChDA,EAAMA,EAAqC,8BAAI,IAAM,gCACrDA,EAAMA,EAA0C,mCAAI,IAAM,qCAC1DA,EAAMA,EAAwC,iCAAI,IAAM,mCACxDA,EAAMA,EAAwC,iCAAI,IAAM,mCACxDA,EAAMA,EAAuC,gCAAI,IAAM,kCACvDA,EAAMA,EAAkC,2BAAI,IAAM,6BAClDA,EAAMA,EAAuC,gCAAI,IAAM,kCACvDA,EAAMA,EAA4C,qCAAI,IAAM,uCAC5DA,EAAMA,EAAiD,0CAAI,IAAM,4CACjEA,EAAMA,EAAqC,8BAAI,IAAM,gCACrDA,EAAMA,EAA6B,sBAAI,IAAM,wBAC7CA,EAAMA,EAAsB,eAAI,IAAM,iBACtCA,EAAMA,EAA4B,qBAAI,IAAM,uBAC5CA,EAAMA,EAA8B,uBAAI,IAAM,yBAC9CA,EAAMA,EAAqC,8BAAI,IAAM,gCACrDA,EAAMA,EAAqC,8BAAI,IAAM,gCACrDA,EAAMA,EAAgC,yBAAI,IAAM,2BAChDA,EAAMA,EAAoC,6BAAI,IAAM,+BACpDA,EAAMA,EAA8B,uBAAI,IAAM,yBAC9CA,EAAMA,EAAqB,cAAI,IAAM,gBACrCA,EAAMA,EAA+B,wBAAI,IAAM,0BAC/CA,EAAMA,EAAqB,cAAI,IAAM,gBACrCA,EAAMA,EAA0B,mBAAI,IAAM,qBAC1CA,EAAMA,EAAe,QAAI,IAAM,UAC/BA,EAAMA,EAA8B,uBAAI,IAAM,yBAC9CA,EAAMA,EAAmC,4BAAI,IAAM,8BACnDA,EAAMA,EAAwC,iCAAI,IAAM,mCACxDA,EAAMA,EAA6C,sCAAI,IAAM,wCAC7DA,EAAMA,EAAwB,iBAAI,IAAM,mBACxCA,EAAMA,EAAmB,YAAI,IAAM,cACnCA,EAAMA,EAAwB,iBAAI,IAAM,mBACxCA,EAAMA,EAAe,QAAI,IAAM,UAC/BA,EAAMA,EAA2B,oBAAI,IAAM,sBAC3CA,EAAMA,EAAoB,aAAI,IAAM,eACpCA,EAAMA,EAA0B,mBAAI,IAAM,qBAC1CA,EAAMA,EAAoC,6BAAI,IAAM,+BACpDA,EAAMA,EAAwC,iCAAI,IAAM,mCACxDA,EAAMA,EAA+C,wCAAI,IAAM,0CAC/DA,EAAMA,EAA+C,wCAAI,IAAM,0CAC/DA,EAAMA,EAAuC,gCAAI,IAAM,kCACvDA,EAAMA,EAAqD,8CAAI,IAAM,gDACrEA,EAAMA,EAAoC,6BAAI,IAAM,+BACpDA,EAAMA,EAAwC,iCAAI,IAAM,mCACxDA,EAAMA,EAA+C,wCAAI,IAAM,0CAC/DA,EAAMA,EAA+C,wCAAI,IAAM,0CAC/DA,EAAMA,EAAuC,gCAAI,IAAM,kCACvDA,EAAMA,EAAqB,cAAI,IAAM,gBACrCA,EAAMA,EAAqB,cAAI,IAAM,gBACrCA,EAAMA,EAA6B,sBAAI,IAAM,wBAC7CA,EAAMA,EAAyB,kBAAI,IAAM,oBACzCA,EAAMA,EAA2B,oBAAI,IAAM,sBAC3CA,EAAMA,EAA2B,oBAAI,IAAM,qBAC9C,CA1ED,CA0EGA,IAAUA,EAAQ,CAAC,IAEf,MAAMC,EAAgB,CACzBC,KAAMF,EAAME,KACZC,OAAQH,EAAMG,OACdC,QAASJ,EAAMI,QACfC,YAAaL,EAAMK,YACnBC,UAAWN,EAAMM,UACjBC,cAAeP,EAAMO,eASzB,SAASC,EAAaC,GAClB,OAAOA,GAAMC,EAAAA,GAAEC,iBAAmBF,GAAMC,EAAAA,GAAEE,eAC9C,CAIA,SAASC,EAAcJ,GACnB,OAJJ,SAAsBA,GAClB,OAAOA,GAAMC,EAAAA,GAAEI,eAAiBL,GAAMC,EAAAA,GAAEK,aAC5C,CAEWC,CAAaP,IAAOD,EAAaC,EAC5C,CACA,SAASQ,EAAoBR,GACzB,OAAOI,EAAcJ,IAbzB,SAAsBA,GAClB,OAAOA,GAAMC,EAAAA,GAAEQ,SAAWT,GAAMC,EAAAA,GAAES,OACtC,CAWgCC,CAAaX,EAC7C,CACA,SAASY,EAAaZ,GAClB,OAAOA,EAAK,EAChB,CACA,SAASa,EAAab,GAClB,OAAOA,IAAOC,EAAAA,GAAEa,OAASd,IAAOC,EAAAA,GAAEc,WAAaf,IAAOC,EAAAA,GAAEe,YAAchB,IAAOC,EAAAA,GAAEgB,SACnF,CACA,SAASC,EAAoClB,GACzC,OAAOa,EAAab,IAAOA,IAAOC,EAAAA,GAAEkB,SAAWnB,IAAOC,EAAAA,GAAEmB,iBAC5D,CAoBO,MAAMC,EACTC,WAAAA,CAAYC,EAASC,GACjBC,KAAKF,QAAUA,EACfE,KAAKD,QAAUA,EACfC,KAAKC,QAAS,EAEdD,KAAKE,QAAS,EAOdF,KAAKG,eAAgB,EACrBH,KAAKI,iBAAmB,GACxBJ,KAAKK,QAAS,EACdL,KAAKM,MAAQxC,EAAME,KACnBgC,KAAKO,YAAczC,EAAME,KACzBgC,KAAKQ,eAAiB,EACtBR,KAAKS,uBAAyB,EAC9BT,KAAKU,sBAAwB,KAC7BV,KAAKW,aAAe,KACpBX,KAAKY,YAAc,CAAEC,KAAM,GAAIC,MAAO,IACtCd,KAAKe,aAAe,IAAIC,EAAAA,EAAajB,GACrCC,KAAKiB,gBAAkBjB,KAAKkB,oBAAoB,GAChDlB,KAAKmB,cAAgB,IAAIC,EAAAA,GAAcC,EAAAA,IAAgB,CAAC9C,EAAI+C,KAGxDtB,KAAKe,aAAaQ,IAAMvB,KAAKQ,eAAiBc,EAAW,EACzDtB,KAAKwB,4CAA4CjD,EAAG,GACrDwB,EAAQ0B,aACL,CACEC,wCAAyCA,KACrC1B,KAAK2B,KAAKC,EAAAA,EAAIF,wCAAyC,EAAE,EAE7DG,2CAA6CP,IACzCtB,KAAK2B,KAAKC,EAAAA,EAAIC,2CAA4C7B,KAAKQ,eAAiBR,KAAKe,aAAaQ,IAAMD,EAAS,EAErHQ,kCAAoCC,IAChC,MAAMC,EA1D1B,SAA8CD,GAC1C,OAAIA,IAASvD,EAAAA,GAAEyD,KACJL,EAAAA,EAAIM,uBAENH,EAAO,QACLH,EAAAA,EAAIO,uCAENC,EAAAA,EAAAA,IAAYL,GACVH,EAAAA,EAAIS,6BAENC,EAAAA,EAAAA,IAAqBP,GACnBH,EAAAA,EAAIW,gCAENC,EAAAA,EAAAA,IAAmBT,IAASA,IAASvD,EAAAA,GAAEiE,gBACrCb,EAAAA,EAAIc,0BAER,IACX,CAyCkCC,CAAqCZ,GAC/CC,GACAhC,KAAK2B,KAAKK,EAAO,EAAE,QAG7BY,EACV,CAEAjB,IAAAA,CAAKI,GAAoB,IAAdc,EAAQC,UAAAC,OAAA,QAAAH,IAAAE,UAAA,GAAAA,UAAA,GAAG,EAClB,IAAIE,EAAIC,EACoC,QAA3CA,GAAMD,EAAKhD,KAAKD,SAAS0B,oBAAiC,IAAPwB,GAAyBA,EAAGC,KAAKF,EAAIhD,KAAKe,aAAaoC,SAASpB,EAAMc,GAC9H,CAEA3B,kBAAAA,CAAmBkC,GACf,OAAKpD,KAAKF,QAAQuD,uBAGX,CACHC,UAAWtD,KAAKe,aAAawC,KAC7BC,SAAUxD,KAAKe,aAAa0C,IAAML,EAClCM,YAAa1D,KAAKe,aAAaqC,OAASA,EACxCO,SAAU,EACVC,QAAS,EACTC,WAAY,GARL,IAUf,CACAC,eAAAA,GACI,IAAI9D,KAAKE,OAAT,CAGA,IADAF,KAAKE,QAAS,EACPF,KAAKK,SAAWL,KAAKC,QAAQ,CAChCD,KAAKS,sBAAwB,EAC7B,MAAMlC,EAAKyB,KAAK+D,WACX/D,KAAKgE,sBACNhE,KAAKiE,WAAW1F,EAExB,CACAyB,KAAKE,QAAS,CATJ,CAUd,CAEAgE,KAAAA,GACIlE,KAAKC,QAAS,CAClB,CACAkE,MAAAA,CAAOC,GACH,IAAKpE,KAAKC,OACN,MAAM,IAAIoE,MAAM,8BAEpBrE,KAAKC,QAAS,EAEVD,KAAKE,SAETF,KAAK8D,kBACA9D,KAAKC,QACNmE,SAA8DA,IAEtE,CACAE,KAAAA,CAAMC,EAAOC,EAAaJ,GACtBpE,KAAKK,QAAS,EACdL,KAAKe,aAAauD,MAAMC,EAAOC,GAC/BxE,KAAK8D,kBACA9D,KAAKC,QACNmE,SAA8DA,GAEtE,CACAK,sBAAAA,CAAuBF,GACnBvE,KAAKK,QAAS,EACdL,KAAKe,aAAa0D,uBAAuBF,GACzCvE,KAAK8D,iBACT,CAEAE,kBAAAA,GACI,QAAIhE,KAAKe,aAAa2D,gBAClB1E,KAAKe,aAAa4D,QAAQ3E,KAAKS,uBAC/BT,KAAKS,sBAAwB,EAC7BT,KAAKK,QAAS,GACP,EAGf,CAEA0D,QAAAA,GAEI,OADA/D,KAAKS,wBACET,KAAKe,aAAa6D,SAC7B,CACAC,UAAAA,CAAWC,GACP9E,KAAKS,uBAAyBqE,EAC9B,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAOC,IACvB/E,KAAKe,aAAa6D,SAE1B,CACAI,uBAAAA,CAAwBC,EAASC,GAC7B,QAAIlF,KAAKe,aAAaoE,WAAWF,EAASC,KAEtClF,KAAK6E,WAAWI,EAAQlC,OAAS,IAC1B,EAGf,CAEAqC,oBAAAA,GACIpF,KAAKW,aAAe,CAChB0E,KAAMC,EAAAA,EAAUC,UAChBC,QAAS,GACTC,MAAOC,EAAAA,OAAOC,QACdC,aAAa,EACbC,gBAAgB,EAChBC,MAAO,GACPC,SAAU/F,KAAKkB,mBAAmB,GAE1C,CACA8E,kBAAAA,GACIhG,KAAKW,aAAe,CAChB0E,KAAMC,EAAAA,EAAUW,QAChBT,QAAS,GACTC,MAAOC,EAAAA,OAAOC,QACdC,aAAa,EACbC,gBAAgB,EAChBC,MAAO,GACPC,SAAU/F,KAAKkB,mBAAmB,GAE1C,CACAgF,mBAAAA,CAAoB9C,GAChBpD,KAAKW,aAAe,CAChB0E,KAAMC,EAAAA,EAAUa,QAChBC,KAAM,GACNL,SAAU/F,KAAKkB,mBAAmBkC,GAE1C,CACAiD,mBAAAA,CAAoBC,GAChBtG,KAAKW,aAAe,CAChB0E,KAAMC,EAAAA,EAAUiB,QAChB1F,KAAMyF,EACNE,aAAa,EACbC,SAAU,KACVC,SAAU,KACVX,SAAU/F,KAAKiB,gBAEvB,CACA0F,qBAAAA,CAAsBtB,EAAMuB,GACxB5G,KAAKU,sBAAwB,CACzB2E,OACAuB,QACAb,SAAU/F,KAAKiB,gBAEvB,CAEA4F,WAAAA,CAAYC,GACR9G,KAAKY,YAAc,CACfC,KAAMiG,EACNhG,MAAO,IAEXd,KAAKiB,gBAAkBjB,KAAKkB,mBAAmB,EACnD,CACA6F,cAAAA,GACI,IAAI/D,EACAC,EACJ,MAAM+D,EAAQhH,KAAKW,aACnB,GAAmD,QAA/CsG,EAAAA,EAAAA,GAAaD,EAAOhH,KAAKY,YAAYC,OAErC,GADAmG,EAAMlB,MAAMoB,KAAKlH,KAAKY,aAClBoG,EAAMjB,UAAY/F,KAAKiB,gBAAiB,EACsB,QAAtC+B,GAAMC,EAAK+D,EAAMjB,UAAUD,aAA0B,IAAP9C,EAAgBA,EAAMC,EAAG6C,MAAQqB,OAAOC,OAAO,OACvGpH,KAAKY,YAAYC,MAAQb,KAAKiB,gBAE5CjB,KAAKqH,iBACT,OAGArH,KAAK2B,KAAKC,EAAAA,EAAI0F,mBAEtB,CACAD,eAAAA,GACQrH,KAAKiB,kBACLjB,KAAKiB,gBAAgB0C,QAAU3D,KAAKe,aAAawC,KACjDvD,KAAKiB,gBAAgB2C,OAAS5D,KAAKe,aAAa0C,IAChDzD,KAAKiB,gBAAgB4C,UAAY7D,KAAKe,aAAaqC,OAE3D,CAEAmE,YAAAA,CAAaC,GACTxH,KAAKyH,2BAA2BD,EAAGzB,UACnC/F,KAAKW,aAAe,KAChB6G,EAAGzB,WACHyB,EAAGzB,SAASpC,QAAU3D,KAAKe,aAAawC,KACxCiE,EAAGzB,SAASnC,OAAS5D,KAAKe,aAAa0C,IAAM,EAC7C+D,EAAGzB,SAASlC,UAAY7D,KAAKe,aAAaqC,OAAS,GAEvDpD,KAAKiB,gBAAkBjB,KAAKkB,oBAAoB,EACpD,CACAwG,mBAAAA,GACI,MAAMF,EAAKxH,KAAKW,aAChBX,KAAKuH,aAAaC,GAClBA,EAAG/B,OAAQkC,EAAAA,EAAAA,UAASH,EAAGhC,SACnBgC,EAAGnC,OAASC,EAAAA,EAAUC,WACtBvF,KAAKI,iBAAmBoH,EAAGhC,QAC3BxF,KAAKD,QAAQ6H,WAAWJ,KAGpBA,EAAG1B,MAAM/C,OAAS,GAClB/C,KAAK2B,KAAKC,EAAAA,EAAIiG,sBAEdL,EAAG5B,aACH5F,KAAK2B,KAAKC,EAAAA,EAAIkG,2BAElB9H,KAAKD,QAAQgI,SAASP,IAE1BxH,KAAKe,aAAaiH,iBACtB,CACAC,kBAAAA,CAAmBT,GACfxH,KAAKuH,aAAaC,GAClBxH,KAAKD,QAAQmI,UAAUV,GACvBxH,KAAKe,aAAaiH,iBACtB,CACAG,kBAAAA,CAAmBX,GACfxH,KAAKuH,aAAaC,GAClBxH,KAAKD,QAAQqI,UAAUZ,GACvBxH,KAAKe,aAAaiH,iBACtB,CACAP,0BAAAA,CAA2BY,GACvB,GAAIrI,KAAKU,sBAAuB,CAQ5B,OALI2H,GAAgBrI,KAAKU,sBAAsBqF,WAC3C/F,KAAKU,sBAAsBqF,SAASpC,QAAU0E,EAAa/E,UAC3DtD,KAAKU,sBAAsBqF,SAASnC,OAASyE,EAAa7E,SAC1DxD,KAAKU,sBAAsBqF,SAASlC,UAAYwE,EAAa3E,aAEzD1D,KAAKU,sBAAsB2E,MAC/B,KAAKC,EAAAA,EAAUgD,UACXtI,KAAKD,QAAQwI,YAAYvI,KAAKU,uBAC9B,MAEJ,KAAK4E,EAAAA,EAAUkD,eACXxI,KAAKD,QAAQ0I,gBAAgBzI,KAAKU,uBAClC,MAEJ,KAAK4E,EAAAA,EAAUoD,qBACX1I,KAAKD,QAAQ4I,sBAAsB3I,KAAKU,uBAIhDV,KAAKU,sBAAwB,IACjC,CACJ,CACAkI,aAAAA,GACI,MAAM7C,EAAW/F,KAAKkB,mBAAmB,GACrC6E,IACAA,EAASpC,QAAUoC,EAASzC,UAC5ByC,EAASnC,OAASmC,EAASvC,SAC3BuC,EAASlC,UAAYkC,EAASrC,aAElC1D,KAAKyH,2BAA2B1B,GAChC/F,KAAKD,QAAQ8I,MAAM,CAAExD,KAAMC,EAAAA,EAAUwD,IAAK/C,aAC1C/F,KAAKK,QAAS,CAClB,CAUA0I,kCAAAA,CAAmC1D,EAAM2D,GACrC,GAAIhJ,KAAKU,sBAAuB,CAC5B,GAAIV,KAAKU,sBAAsB2E,OAASA,EAEpC,YADArF,KAAKU,sBAAsBkG,OAASoC,GAIpChJ,KAAKiB,gBAAkBjB,KAAKkB,mBAAmB,GAC/ClB,KAAKyH,2BAA2BzH,KAAKiB,iBACrCjB,KAAKe,aAAaiH,iBAE1B,CACAhI,KAAK2G,sBAAsBtB,EAAM2D,EACrC,CACAC,cAAAA,CAAe1K,GACX,MAAM8G,EAAOjG,EAAab,GACpB+G,EAAAA,EAAUoD,qBACVnK,IAAOC,EAAAA,GAAEyD,KACLqD,EAAAA,EAAUkD,eACVlD,EAAAA,EAAUgD,UACpBtI,KAAK+I,mCAAmC1D,EAAM6D,OAAOC,cAAc5K,GACvE,CAGA6K,UAAAA,CAAWJ,GACPhJ,KAAK+I,mCAAmCzD,EAAAA,EAAUgD,UAAWU,EACjE,CAEAK,wBAAAA,GACIrJ,KAAKO,YAAcP,KAAKM,MACxBN,KAAKM,MAAQxC,EAAMwL,oBACnBtJ,KAAKQ,eAAiBR,KAAKe,aAAaQ,IACxCvB,KAAKmB,cAAcoI,YAAYvJ,KAAKwJ,mCAAqCC,EAAAA,GAAaC,UAAYD,EAAAA,GAAaE,OACnH,CACAH,gCAAAA,GACI,OAAQxJ,KAAKO,cAAgBzC,EAAM8L,+BAC/B5J,KAAKO,cAAgBzC,EAAM+L,+BAC3B7J,KAAKO,cAAgBzC,EAAMgM,wBACnC,CACAtI,2CAAAA,CAA4CjD,GACpCyB,KAAKwJ,mCACLxJ,KAAKY,YAAYE,OAASoI,OAAOC,cAAc5K,GAG/CyB,KAAKiJ,eAAe1K,EAE5B,CAEA0F,UAAAA,CAAW1F,GACP,OAAQyB,KAAKM,OACT,KAAKxC,EAAME,KACPgC,KAAK+J,WAAWxL,GAChB,MAEJ,KAAKT,EAAMG,OACP+B,KAAKgK,aAAazL,GAClB,MAEJ,KAAKT,EAAMI,QACP8B,KAAKiK,cAAc1L,GACnB,MAEJ,KAAKT,EAAMK,YACP6B,KAAKkK,iBAAiB3L,GACtB,MAEJ,KAAKT,EAAMM,UACP4B,KAAKmK,gBAAgB5L,GACrB,MAEJ,KAAKT,EAAMsM,SACPpK,KAAKqK,cAAc9L,GACnB,MAEJ,KAAKT,EAAMwM,aACPtK,KAAKuK,iBAAiBhM,GACtB,MAEJ,KAAKT,EAAM0M,SACPxK,KAAKyK,cAAclM,GACnB,MAEJ,KAAKT,EAAM4M,sBACP1K,KAAK2K,yBAAyBpM,GAC9B,MAEJ,KAAKT,EAAM8M,oBACP5K,KAAK6K,uBAAuBtM,GAC5B,MAEJ,KAAKT,EAAMgN,oBACP9K,KAAK+K,uBAAuBxM,GAC5B,MAEJ,KAAKT,EAAMkN,uBACPhL,KAAKiL,0BAA0B1M,GAC/B,MAEJ,KAAKT,EAAMoN,qBACPlL,KAAKmL,wBAAwB5M,GAC7B,MAEJ,KAAKT,EAAMsN,qBACPpL,KAAKqL,wBAAwB9M,GAC7B,MAEJ,KAAKT,EAAMwN,2BACPtL,KAAKuL,6BAA6BhN,GAClC,MAEJ,KAAKT,EAAM0N,yBACPxL,KAAKyL,2BAA2BlN,GAChC,MAEJ,KAAKT,EAAM4N,yBACP1L,KAAK2L,2BAA2BpN,GAChC,MAEJ,KAAKT,EAAM8N,yBACP5L,KAAK6L,4BAA4BtN,GACjC,MAEJ,KAAKT,EAAMgO,8BACP9L,KAAK+L,gCAAgCxN,GACrC,MAEJ,KAAKT,EAAMkO,oBACPhM,KAAKiM,wBAAwB1N,GAC7B,MAEJ,KAAKT,EAAMoO,yBACPlM,KAAKmM,4BAA4B5N,GACjC,MAEJ,KAAKT,EAAMsO,8BACPpM,KAAKqM,gCAAgC9N,GACrC,MAEJ,KAAKT,EAAMwO,mCACPtM,KAAKuM,oCAAoChO,GACzC,MAEJ,KAAKT,EAAM0O,iCACPxM,KAAKyM,kCAAkClO,GACvC,MAEJ,KAAKT,EAAM4O,iCACP1M,KAAK2M,kCAAkCpO,GACvC,MAEJ,KAAKT,EAAM8O,gCACP5M,KAAK6M,kCAAkCtO,GACvC,MAEJ,KAAKT,EAAMgP,2BACP9M,KAAK+M,8BAA8BxO,GACnC,MAEJ,KAAKT,EAAMkP,gCACPhN,KAAKiN,kCAAkC1O,GACvC,MAEJ,KAAKT,EAAMoP,qCACPlN,KAAKmN,sCAAsC5O,GAC3C,MAEJ,KAAKT,EAAMsP,0CACPpN,KAAKqN,0CAA0C9O,GAC/C,MAEJ,KAAKT,EAAMwP,8BACPtN,KAAKuN,gCAAgChP,GACrC,MAEJ,KAAKT,EAAM0P,sBACPxN,KAAKyN,0BAA0BlP,GAC/B,MAEJ,KAAKT,EAAM4P,eACP1N,KAAK2N,oBAAoBpP,GACzB,MAEJ,KAAKT,EAAM8P,qBACP5N,KAAK6N,yBAAyBtP,GAC9B,MAEJ,KAAKT,EAAMgQ,uBACP9N,KAAK+N,2BAA2BxP,GAChC,MAEJ,KAAKT,EAAM8L,8BACP5J,KAAKgO,iCAAiCzP,GACtC,MAEJ,KAAKT,EAAM+L,8BACP7J,KAAKiO,iCAAiC1P,GACtC,MAEJ,KAAKT,EAAMgM,yBACP9J,KAAKkO,6BAA6B3P,GAClC,MAEJ,KAAKT,EAAMqQ,6BACPnO,KAAKoO,gCAAgC7P,GACrC,MAEJ,KAAKT,EAAMuQ,uBACPrO,KAAKsO,0BAA0B/P,GAC/B,MAEJ,KAAKT,EAAMyQ,cACPvO,KAAKwO,mBAAmBjQ,GACxB,MAEJ,KAAKT,EAAM2Q,wBACPzO,KAAK0O,4BAA4BnQ,GACjC,MAEJ,KAAKT,EAAM6Q,cACP3O,KAAK4O,mBAAmBrQ,GACxB,MAEJ,KAAKT,EAAM+Q,mBACP7O,KAAK8O,uBAAuBvQ,GAC5B,MAEJ,KAAKT,EAAMqI,QACPnG,KAAK+O,cAAcxQ,GACnB,MAEJ,KAAKT,EAAMkR,uBACPhP,KAAKiP,0BAA0B1Q,GAC/B,MAEJ,KAAKT,EAAMoR,4BACPlP,KAAKmP,8BAA8B5Q,GACnC,MAEJ,KAAKT,EAAMsR,iCACPpP,KAAKqP,kCAAkC9Q,GACvC,MAEJ,KAAKT,EAAMwR,sCACPtP,KAAKuP,sCAAsChR,GAC3C,MAEJ,KAAKT,EAAM0R,iBACPxP,KAAKyP,qBAAqBlR,GAC1B,MAEJ,KAAKT,EAAM4R,YACP1P,KAAK2P,iBAAiBpR,GACtB,MAEJ,KAAKT,EAAM8R,iBACP5P,KAAK6P,qBAAqBtR,GAC1B,MAEJ,KAAKT,EAAMyI,QACPvG,KAAK8P,cAAcvR,GACnB,MAEJ,KAAKT,EAAMiS,oBACP/P,KAAKgQ,wBAAwBzR,GAC7B,MAEJ,KAAKT,EAAMmS,aACPjQ,KAAKkQ,kBAAkB3R,GACvB,MAEJ,KAAKT,EAAMqS,mBACPnQ,KAAKoQ,uBAAuB7R,GAC5B,MAEJ,KAAKT,EAAMuS,6BACPrQ,KAAKsQ,gCAAgC/R,GACrC,MAEJ,KAAKT,EAAMyS,iCACPvQ,KAAKwQ,oCAAoCjS,GACzC,MAEJ,KAAKT,EAAM2S,wCACPzQ,KAAK0Q,0CAA0CnS,GAC/C,MAEJ,KAAKT,EAAM6S,wCACP3Q,KAAK4Q,0CAA0CrS,GAC/C,MAEJ,KAAKT,EAAM+S,gCACP7Q,KAAK8Q,mCAAmCvS,GACxC,MAEJ,KAAKT,EAAMiT,8CACP/Q,KAAKgR,+CAA+CzS,GACpD,MAEJ,KAAKT,EAAMmT,6BACPjR,KAAKkR,gCAAgC3S,GACrC,MAEJ,KAAKT,EAAMqT,iCACPnR,KAAKoR,oCAAoC7S,GACzC,MAEJ,KAAKT,EAAMuT,wCACPrR,KAAKsR,0CAA0C/S,GAC/C,MAEJ,KAAKT,EAAMyT,wCACPvR,KAAKwR,0CAA0CjT,GAC/C,MAEJ,KAAKT,EAAM2T,gCACPzR,KAAK0R,mCAAmCnT,GACxC,MAEJ,KAAKT,EAAM6T,cACP3R,KAAK4R,mBAAmBrT,GACxB,MAEJ,KAAKT,EAAMO,cACP2B,KAAK6R,mBAAmBtT,GACxB,MAEJ,KAAKT,EAAMgU,sBACP9R,KAAK+R,0BAA0BxT,GAC/B,MAEJ,KAAKT,EAAMkU,kBACPhS,KAAKiS,sBAAsB1T,GAC3B,MAEJ,KAAKT,EAAMwL,oBACPtJ,KAAKkS,2BACL,MAEJ,KAAKpU,EAAMqU,oBACPnS,KAAKoS,yBAAyB7T,GAC9B,MAEJ,QACI,MAAM,IAAI8F,MAAM,iBAG5B,CAIA0F,UAAAA,CAAWxL,GACP,OAAQA,GACJ,KAAKC,EAAAA,GAAE6T,eACHrS,KAAKM,MAAQxC,EAAMsM,SACnB,MAEJ,KAAK5L,EAAAA,GAAE8T,UACHtS,KAAKqJ,2BACL,MAEJ,KAAK7K,EAAAA,GAAEyD,KACHjC,KAAK2B,KAAKC,EAAAA,EAAI2Q,yBACdvS,KAAKiJ,eAAe1K,GACpB,MAEJ,KAAKC,EAAAA,GAAEsK,IACH9I,KAAK4I,gBACL,MAEJ,QACI5I,KAAKiJ,eAAe1K,GAGhC,CAGAyL,YAAAA,CAAazL,GACT,OAAQA,GACJ,KAAKC,EAAAA,GAAE8T,UACHtS,KAAKqJ,2BACL,MAEJ,KAAK7K,EAAAA,GAAE6T,eACHrS,KAAKM,MAAQxC,EAAM4M,sBACnB,MAEJ,KAAKlM,EAAAA,GAAEyD,KACHjC,KAAK2B,KAAKC,EAAAA,EAAI2Q,yBACdvS,KAAKoJ,WAAWoJ,EAAAA,IAChB,MAEJ,KAAKhU,EAAAA,GAAEsK,IACH9I,KAAK4I,gBACL,MAEJ,QACI5I,KAAKiJ,eAAe1K,GAGhC,CAGA0L,aAAAA,CAAc1L,GACV,OAAQA,GACJ,KAAKC,EAAAA,GAAE6T,eACHrS,KAAKM,MAAQxC,EAAMkN,uBACnB,MAEJ,KAAKxM,EAAAA,GAAEyD,KACHjC,KAAK2B,KAAKC,EAAAA,EAAI2Q,yBACdvS,KAAKoJ,WAAWoJ,EAAAA,IAChB,MAEJ,KAAKhU,EAAAA,GAAEsK,IACH9I,KAAK4I,gBACL,MAEJ,QACI5I,KAAKiJ,eAAe1K,GAGhC,CAGA2L,gBAAAA,CAAiB3L,GACb,OAAQA,GACJ,KAAKC,EAAAA,GAAE6T,eACHrS,KAAKM,MAAQxC,EAAMwN,2BACnB,MAEJ,KAAK9M,EAAAA,GAAEyD,KACHjC,KAAK2B,KAAKC,EAAAA,EAAI2Q,yBACdvS,KAAKoJ,WAAWoJ,EAAAA,IAChB,MAEJ,KAAKhU,EAAAA,GAAEsK,IACH9I,KAAK4I,gBACL,MAEJ,QACI5I,KAAKiJ,eAAe1K,GAGhC,CAGA4L,eAAAA,CAAgB5L,GACZ,OAAQA,GACJ,KAAKC,EAAAA,GAAEyD,KACHjC,KAAK2B,KAAKC,EAAAA,EAAI2Q,yBACdvS,KAAKoJ,WAAWoJ,EAAAA,IAChB,MAEJ,KAAKhU,EAAAA,GAAEsK,IACH9I,KAAK4I,gBACL,MAEJ,QACI5I,KAAKiJ,eAAe1K,GAGhC,CAGA8L,aAAAA,CAAc9L,GACV,GAAII,EAAcJ,GACdyB,KAAKoF,uBACLpF,KAAKM,MAAQxC,EAAM0M,SACnBxK,KAAKyK,cAAclM,QAGnB,OAAQA,GACJ,KAAKC,EAAAA,GAAEiU,iBACHzS,KAAKM,MAAQxC,EAAM2Q,wBACnB,MAEJ,KAAKjQ,EAAAA,GAAEkB,QACHM,KAAKM,MAAQxC,EAAMwM,aACnB,MAEJ,KAAK9L,EAAAA,GAAEkU,cACH1S,KAAK2B,KAAKC,EAAAA,EAAI+Q,wCACd3S,KAAKkG,oBAAoB,GACzBlG,KAAKM,MAAQxC,EAAMyQ,cACnBvO,KAAKwO,mBAAmBjQ,GACxB,MAEJ,KAAKC,EAAAA,GAAEsK,IACH9I,KAAK2B,KAAKC,EAAAA,EAAIgR,kBACd5S,KAAKoJ,WAAW,KAChBpJ,KAAK4I,gBACL,MAEJ,QACI5I,KAAK2B,KAAKC,EAAAA,EAAIiR,gCACd7S,KAAKoJ,WAAW,KAChBpJ,KAAKM,MAAQxC,EAAME,KACnBgC,KAAK+J,WAAWxL,GAGhC,CAGAgM,gBAAAA,CAAiBhM,GACb,GAAII,EAAcJ,GACdyB,KAAKgG,qBACLhG,KAAKM,MAAQxC,EAAM0M,SACnBxK,KAAKyK,cAAclM,QAGnB,OAAQA,GACJ,KAAKC,EAAAA,GAAEmB,kBACHK,KAAK2B,KAAKC,EAAAA,EAAIkR,mBACd9S,KAAKM,MAAQxC,EAAME,KACnB,MAEJ,KAAKQ,EAAAA,GAAEsK,IACH9I,KAAK2B,KAAKC,EAAAA,EAAIgR,kBACd5S,KAAKoJ,WAAW,MAChBpJ,KAAK4I,gBACL,MAEJ,QACI5I,KAAK2B,KAAKC,EAAAA,EAAIiR,gCACd7S,KAAKkG,oBAAoB,GACzBlG,KAAKM,MAAQxC,EAAMyQ,cACnBvO,KAAKwO,mBAAmBjQ,GAGxC,CAGAkM,aAAAA,CAAclM,GACV,MAAMyI,EAAQhH,KAAKW,aACnB,OAAQpC,GACJ,KAAKC,EAAAA,GAAEa,MACP,KAAKb,EAAAA,GAAEc,UACP,KAAKd,EAAAA,GAAEe,WACP,KAAKf,EAAAA,GAAEgB,UACHQ,KAAKM,MAAQxC,EAAM0P,sBACnB,MAEJ,KAAKhP,EAAAA,GAAEkB,QACHM,KAAKM,MAAQxC,EAAMuQ,uBACnB,MAEJ,KAAK7P,EAAAA,GAAEmB,kBACHK,KAAKM,MAAQxC,EAAME,KACnBgC,KAAK0H,sBACL,MAEJ,KAAKlJ,EAAAA,GAAEyD,KACHjC,KAAK2B,KAAKC,EAAAA,EAAI2Q,yBACdvL,EAAMxB,SAAWgN,EAAAA,GACjB,MAEJ,KAAKhU,EAAAA,GAAEsK,IACH9I,KAAK2B,KAAKC,EAAAA,EAAImR,UACd/S,KAAK4I,gBACL,MAEJ,QACI5B,EAAMxB,SAAW0D,OAAOC,cAAc7K,EAAaC,GAAMY,EAAaZ,GAAMA,GAGxF,CAGAoM,wBAAAA,CAAyBpM,GACjBA,IAAOC,EAAAA,GAAEkB,QACTM,KAAKM,MAAQxC,EAAM8M,qBAGnB5K,KAAKoJ,WAAW,KAChBpJ,KAAKM,MAAQxC,EAAMG,OACnB+B,KAAKgK,aAAazL,GAE1B,CAGAsM,sBAAAA,CAAuBtM,GACfI,EAAcJ,IACdyB,KAAKM,MAAQxC,EAAMgN,oBACnB9K,KAAK+K,uBAAuBxM,KAG5ByB,KAAKoJ,WAAW,MAChBpJ,KAAKM,MAAQxC,EAAMG,OACnB+B,KAAKgK,aAAazL,GAE1B,CACAyU,mBAAAA,CAAoBC,GAChB,IAAKjT,KAAKe,aAAaoE,WAAWnF,KAAKI,kBAAkB,GACrD,OAAQJ,KAAKgE,qBAEjBhE,KAAKgG,qBACShG,KAAKW,aACb6E,QAAUxF,KAAKI,iBAErB,OADWJ,KAAKe,aAAamS,KAAKlT,KAAKI,iBAAiB2C,SAEpD,KAAKvE,EAAAA,GAAEa,MACP,KAAKb,EAAAA,GAAEc,UACP,KAAKd,EAAAA,GAAEe,WACP,KAAKf,EAAAA,GAAEgB,UAGH,OAFAQ,KAAK6E,WAAW7E,KAAKI,iBAAiB2C,QACtC/C,KAAKM,MAAQxC,EAAM0P,uBACZ,EAEX,KAAKhP,EAAAA,GAAEkB,QAGH,OAFAM,KAAK6E,WAAW7E,KAAKI,iBAAiB2C,QACtC/C,KAAKM,MAAQxC,EAAMuQ,wBACZ,EAEX,KAAK7P,EAAAA,GAAEmB,kBAIH,OAHAK,KAAK6E,WAAW7E,KAAKI,iBAAiB2C,QACtC/C,KAAK0H,sBACL1H,KAAKM,MAAQxC,EAAME,MACZ,EAEX,QACI,OAAQgC,KAAKgE,qBAGzB,CAGA+G,sBAAAA,CAAuBxM,GACfyB,KAAKgT,oBAAoBzU,KACzByB,KAAKoJ,WAAW,MAChBpJ,KAAKM,MAAQxC,EAAMG,OACnB+B,KAAKgK,aAAazL,GAE1B,CAGA0M,yBAAAA,CAA0B1M,GAClBA,IAAOC,EAAAA,GAAEkB,QACTM,KAAKM,MAAQxC,EAAMoN,sBAGnBlL,KAAKoJ,WAAW,KAChBpJ,KAAKM,MAAQxC,EAAMI,QACnB8B,KAAKiK,cAAc1L,GAE3B,CAGA4M,uBAAAA,CAAwB5M,GAChBI,EAAcJ,IACdyB,KAAKM,MAAQxC,EAAMsN,qBACnBpL,KAAKqL,wBAAwB9M,KAG7ByB,KAAKoJ,WAAW,MAChBpJ,KAAKM,MAAQxC,EAAMI,QACnB8B,KAAKiK,cAAc1L,GAE3B,CAGA8M,uBAAAA,CAAwB9M,GAChByB,KAAKgT,oBAAoBzU,KACzByB,KAAKoJ,WAAW,MAChBpJ,KAAKM,MAAQxC,EAAMI,QACnB8B,KAAKiK,cAAc1L,GAE3B,CAGAgN,4BAAAA,CAA6BhN,GACzB,OAAQA,GACJ,KAAKC,EAAAA,GAAEkB,QACHM,KAAKM,MAAQxC,EAAM0N,yBACnB,MAEJ,KAAKhN,EAAAA,GAAEiU,iBACHzS,KAAKM,MAAQxC,EAAM8N,yBACnB5L,KAAKoJ,WAAW,MAChB,MAEJ,QACIpJ,KAAKoJ,WAAW,KAChBpJ,KAAKM,MAAQxC,EAAMK,YACnB6B,KAAKkK,iBAAiB3L,GAGlC,CAGAkN,0BAAAA,CAA2BlN,GACnBI,EAAcJ,IACdyB,KAAKM,MAAQxC,EAAM4N,yBACnB1L,KAAK2L,2BAA2BpN,KAGhCyB,KAAKoJ,WAAW,MAChBpJ,KAAKM,MAAQxC,EAAMK,YACnB6B,KAAKkK,iBAAiB3L,GAE9B,CAGAoN,0BAAAA,CAA2BpN,GACnByB,KAAKgT,oBAAoBzU,KACzByB,KAAKoJ,WAAW,MAChBpJ,KAAKM,MAAQxC,EAAMK,YACnB6B,KAAKkK,iBAAiB3L,GAE9B,CAGAsN,2BAAAA,CAA4BtN,GACpBA,IAAOC,EAAAA,GAAE2U,cACTnT,KAAKM,MAAQxC,EAAMgO,8BACnB9L,KAAKoJ,WAAW,OAGhBpJ,KAAKM,MAAQxC,EAAMK,YACnB6B,KAAKkK,iBAAiB3L,GAE9B,CAGAwN,+BAAAA,CAAgCxN,GACxBA,IAAOC,EAAAA,GAAE2U,cACTnT,KAAKM,MAAQxC,EAAMsO,8BACnBpM,KAAKoJ,WAAW,OAGhBpJ,KAAKM,MAAQxC,EAAMK,YACnB6B,KAAKkK,iBAAiB3L,GAE9B,CAGA0N,uBAAAA,CAAwB1N,GACpB,OAAQA,GACJ,KAAKC,EAAAA,GAAE2U,aACHnT,KAAKM,MAAQxC,EAAMoO,yBACnBlM,KAAKoJ,WAAW,KAChB,MAEJ,KAAK5K,EAAAA,GAAE6T,eACHrS,KAAKM,MAAQxC,EAAMwO,mCACnB,MAEJ,KAAK9N,EAAAA,GAAEyD,KACHjC,KAAK2B,KAAKC,EAAAA,EAAI2Q,yBACdvS,KAAKoJ,WAAWoJ,EAAAA,IAChB,MAEJ,KAAKhU,EAAAA,GAAEsK,IACH9I,KAAK2B,KAAKC,EAAAA,EAAIwR,gCACdpT,KAAK4I,gBACL,MAEJ,QACI5I,KAAKiJ,eAAe1K,GAGhC,CAGA4N,2BAAAA,CAA4B5N,GACxB,OAAQA,GACJ,KAAKC,EAAAA,GAAE2U,aACHnT,KAAKM,MAAQxC,EAAMsO,8BACnBpM,KAAKoJ,WAAW,KAChB,MAEJ,KAAK5K,EAAAA,GAAE6T,eACHrS,KAAKM,MAAQxC,EAAMwO,mCACnB,MAEJ,KAAK9N,EAAAA,GAAEyD,KACHjC,KAAK2B,KAAKC,EAAAA,EAAI2Q,yBACdvS,KAAKM,MAAQxC,EAAMkO,oBACnBhM,KAAKoJ,WAAWoJ,EAAAA,IAChB,MAEJ,KAAKhU,EAAAA,GAAEsK,IACH9I,KAAK2B,KAAKC,EAAAA,EAAIwR,gCACdpT,KAAK4I,gBACL,MAEJ,QACI5I,KAAKM,MAAQxC,EAAMkO,oBACnBhM,KAAKiJ,eAAe1K,GAGhC,CAGA8N,+BAAAA,CAAgC9N,GAC5B,OAAQA,GACJ,KAAKC,EAAAA,GAAE2U,aACHnT,KAAKoJ,WAAW,KAChB,MAEJ,KAAK5K,EAAAA,GAAE6T,eACHrS,KAAKM,MAAQxC,EAAMwO,mCACnB,MAEJ,KAAK9N,EAAAA,GAAEmB,kBACHK,KAAKM,MAAQxC,EAAMK,YACnB6B,KAAKoJ,WAAW,KAChB,MAEJ,KAAK5K,EAAAA,GAAEyD,KACHjC,KAAK2B,KAAKC,EAAAA,EAAI2Q,yBACdvS,KAAKM,MAAQxC,EAAMkO,oBACnBhM,KAAKoJ,WAAWoJ,EAAAA,IAChB,MAEJ,KAAKhU,EAAAA,GAAEsK,IACH9I,KAAK2B,KAAKC,EAAAA,EAAIwR,gCACdpT,KAAK4I,gBACL,MAEJ,QACI5I,KAAKM,MAAQxC,EAAMkO,oBACnBhM,KAAKiJ,eAAe1K,GAGhC,CAGAgO,mCAAAA,CAAoChO,GAC5BA,IAAOC,EAAAA,GAAEkB,QACTM,KAAKM,MAAQxC,EAAM0O,iCAEd7N,EAAcJ,IACnByB,KAAKoJ,WAAW,KAChBpJ,KAAKM,MAAQxC,EAAM8O,gCACnB5M,KAAK6M,kCAAkCtO,KAGvCyB,KAAKoJ,WAAW,KAChBpJ,KAAKM,MAAQxC,EAAMkO,oBACnBhM,KAAKiM,wBAAwB1N,GAErC,CAGAkO,iCAAAA,CAAkClO,GAC1BI,EAAcJ,IACdyB,KAAKM,MAAQxC,EAAM4O,iCACnB1M,KAAK2M,kCAAkCpO,KAGvCyB,KAAKoJ,WAAW,MAChBpJ,KAAKM,MAAQxC,EAAMkO,oBACnBhM,KAAKiM,wBAAwB1N,GAErC,CAGAoO,iCAAAA,CAAkCpO,GAC1ByB,KAAKgT,oBAAoBzU,KACzByB,KAAKoJ,WAAW,MAChBpJ,KAAKM,MAAQxC,EAAMkO,oBACnBhM,KAAKiM,wBAAwB1N,GAErC,CAGAsO,iCAAAA,CAAkCtO,GAC9B,GAAIyB,KAAKe,aAAaoE,WAAWkO,EAAAA,GAAGC,QAAQ,IACxC7T,EAAoCO,KAAKe,aAAamS,KAAKG,EAAAA,GAAGC,OAAOvQ,SAAU,CAC/E/C,KAAKiJ,eAAe1K,GACpB,IAAK,IAAIwG,EAAI,EAAGA,EAAIsO,EAAAA,GAAGC,OAAOvQ,OAAQgC,IAClC/E,KAAKiJ,eAAejJ,KAAK+D,YAE7B/D,KAAKM,MAAQxC,EAAMgP,0BACvB,MACU9M,KAAKgE,uBACXhE,KAAKM,MAAQxC,EAAMkO,oBACnBhM,KAAKiM,wBAAwB1N,GAErC,CAGAwO,6BAAAA,CAA8BxO,GAC1B,OAAQA,GACJ,KAAKC,EAAAA,GAAE2U,aACHnT,KAAKM,MAAQxC,EAAMkP,gCACnBhN,KAAKoJ,WAAW,KAChB,MAEJ,KAAK5K,EAAAA,GAAE6T,eACHrS,KAAKM,MAAQxC,EAAMsP,0CACnBpN,KAAKoJ,WAAW,KAChB,MAEJ,KAAK5K,EAAAA,GAAEyD,KACHjC,KAAK2B,KAAKC,EAAAA,EAAI2Q,yBACdvS,KAAKoJ,WAAWoJ,EAAAA,IAChB,MAEJ,KAAKhU,EAAAA,GAAEsK,IACH9I,KAAK2B,KAAKC,EAAAA,EAAIwR,gCACdpT,KAAK4I,gBACL,MAEJ,QACI5I,KAAKiJ,eAAe1K,GAGhC,CAGA0O,iCAAAA,CAAkC1O,GAC9B,OAAQA,GACJ,KAAKC,EAAAA,GAAE2U,aACHnT,KAAKM,MAAQxC,EAAMoP,qCACnBlN,KAAKoJ,WAAW,KAChB,MAEJ,KAAK5K,EAAAA,GAAE6T,eACHrS,KAAKM,MAAQxC,EAAMsP,0CACnBpN,KAAKoJ,WAAW,KAChB,MAEJ,KAAK5K,EAAAA,GAAEyD,KACHjC,KAAK2B,KAAKC,EAAAA,EAAI2Q,yBACdvS,KAAKM,MAAQxC,EAAMgP,2BACnB9M,KAAKoJ,WAAWoJ,EAAAA,IAChB,MAEJ,KAAKhU,EAAAA,GAAEsK,IACH9I,KAAK2B,KAAKC,EAAAA,EAAIwR,gCACdpT,KAAK4I,gBACL,MAEJ,QACI5I,KAAKM,MAAQxC,EAAMgP,2BACnB9M,KAAKiJ,eAAe1K,GAGhC,CAGA4O,qCAAAA,CAAsC5O,GAClC,OAAQA,GACJ,KAAKC,EAAAA,GAAE2U,aACHnT,KAAKoJ,WAAW,KAChB,MAEJ,KAAK5K,EAAAA,GAAE6T,eACHrS,KAAKM,MAAQxC,EAAMsP,0CACnBpN,KAAKoJ,WAAW,KAChB,MAEJ,KAAK5K,EAAAA,GAAEmB,kBACHK,KAAKM,MAAQxC,EAAMK,YACnB6B,KAAKoJ,WAAW,KAChB,MAEJ,KAAK5K,EAAAA,GAAEyD,KACHjC,KAAK2B,KAAKC,EAAAA,EAAI2Q,yBACdvS,KAAKM,MAAQxC,EAAMgP,2BACnB9M,KAAKoJ,WAAWoJ,EAAAA,IAChB,MAEJ,KAAKhU,EAAAA,GAAEsK,IACH9I,KAAK2B,KAAKC,EAAAA,EAAIwR,gCACdpT,KAAK4I,gBACL,MAEJ,QACI5I,KAAKM,MAAQxC,EAAMgP,2BACnB9M,KAAKiJ,eAAe1K,GAGhC,CAGA8O,yCAAAA,CAA0C9O,GAClCA,IAAOC,EAAAA,GAAEkB,SACTM,KAAKM,MAAQxC,EAAMwP,8BACnBtN,KAAKoJ,WAAW,OAGhBpJ,KAAKM,MAAQxC,EAAMgP,2BACnB9M,KAAK+M,8BAA8BxO,GAE3C,CAGAgP,+BAAAA,CAAgChP,GAC5B,GAAIyB,KAAKe,aAAaoE,WAAWkO,EAAAA,GAAGC,QAAQ,IACxC7T,EAAoCO,KAAKe,aAAamS,KAAKG,EAAAA,GAAGC,OAAOvQ,SAAU,CAC/E/C,KAAKiJ,eAAe1K,GACpB,IAAK,IAAIwG,EAAI,EAAGA,EAAIsO,EAAAA,GAAGC,OAAOvQ,OAAQgC,IAClC/E,KAAKiJ,eAAejJ,KAAK+D,YAE7B/D,KAAKM,MAAQxC,EAAMkO,mBACvB,MACUhM,KAAKgE,uBACXhE,KAAKM,MAAQxC,EAAMgP,2BACnB9M,KAAK+M,8BAA8BxO,GAE3C,CAGAkP,yBAAAA,CAA0BlP,GACtB,OAAQA,GACJ,KAAKC,EAAAA,GAAEa,MACP,KAAKb,EAAAA,GAAEc,UACP,KAAKd,EAAAA,GAAEe,WACP,KAAKf,EAAAA,GAAEgB,UAEH,MAEJ,KAAKhB,EAAAA,GAAEkB,QACP,KAAKlB,EAAAA,GAAEmB,kBACP,KAAKnB,EAAAA,GAAEsK,IACH9I,KAAKM,MAAQxC,EAAM8P,qBACnB5N,KAAK6N,yBAAyBtP,GAC9B,MAEJ,KAAKC,EAAAA,GAAE+U,YACHvT,KAAK2B,KAAKC,EAAAA,EAAI4R,yCACdxT,KAAK6G,YAAY,KACjB7G,KAAKM,MAAQxC,EAAM4P,eACnB,MAEJ,QACI1N,KAAK6G,YAAY,IACjB7G,KAAKM,MAAQxC,EAAM4P,eACnB1N,KAAK2N,oBAAoBpP,GAGrC,CAGAoP,mBAAAA,CAAoBpP,GAChB,OAAQA,GACJ,KAAKC,EAAAA,GAAEa,MACP,KAAKb,EAAAA,GAAEc,UACP,KAAKd,EAAAA,GAAEe,WACP,KAAKf,EAAAA,GAAEgB,UACP,KAAKhB,EAAAA,GAAEkB,QACP,KAAKlB,EAAAA,GAAEmB,kBACP,KAAKnB,EAAAA,GAAEsK,IACH9I,KAAK+G,iBACL/G,KAAKM,MAAQxC,EAAM8P,qBACnB5N,KAAK6N,yBAAyBtP,GAC9B,MAEJ,KAAKC,EAAAA,GAAE+U,YACHvT,KAAK+G,iBACL/G,KAAKM,MAAQxC,EAAMgQ,uBACnB,MAEJ,KAAKtP,EAAAA,GAAEiV,eACP,KAAKjV,EAAAA,GAAEkV,WACP,KAAKlV,EAAAA,GAAE6T,eACHrS,KAAK2B,KAAKC,EAAAA,EAAI+R,oCACd3T,KAAKY,YAAYC,MAAQqI,OAAOC,cAAc5K,GAC9C,MAEJ,KAAKC,EAAAA,GAAEyD,KACHjC,KAAK2B,KAAKC,EAAAA,EAAI2Q,yBACdvS,KAAKY,YAAYC,MAAQ2R,EAAAA,GACzB,MAEJ,QACIxS,KAAKY,YAAYC,MAAQqI,OAAOC,cAAc7K,EAAaC,GAAMY,EAAaZ,GAAMA,GAGhG,CAGAsP,wBAAAA,CAAyBtP,GACrB,OAAQA,GACJ,KAAKC,EAAAA,GAAEa,MACP,KAAKb,EAAAA,GAAEc,UACP,KAAKd,EAAAA,GAAEe,WACP,KAAKf,EAAAA,GAAEgB,UAEH,MAEJ,KAAKhB,EAAAA,GAAEkB,QACHM,KAAKM,MAAQxC,EAAMuQ,uBACnB,MAEJ,KAAK7P,EAAAA,GAAE+U,YACHvT,KAAKM,MAAQxC,EAAMgQ,uBACnB,MAEJ,KAAKtP,EAAAA,GAAEmB,kBACHK,KAAKM,MAAQxC,EAAME,KACnBgC,KAAK0H,sBACL,MAEJ,KAAKlJ,EAAAA,GAAEsK,IACH9I,KAAK2B,KAAKC,EAAAA,EAAImR,UACd/S,KAAK4I,gBACL,MAEJ,QACI5I,KAAK6G,YAAY,IACjB7G,KAAKM,MAAQxC,EAAM4P,eACnB1N,KAAK2N,oBAAoBpP,GAGrC,CAGAwP,0BAAAA,CAA2BxP,GACvB,OAAQA,GACJ,KAAKC,EAAAA,GAAEa,MACP,KAAKb,EAAAA,GAAEc,UACP,KAAKd,EAAAA,GAAEe,WACP,KAAKf,EAAAA,GAAEgB,UAEH,MAEJ,KAAKhB,EAAAA,GAAEiV,eACHzT,KAAKM,MAAQxC,EAAM8L,8BACnB,MAEJ,KAAKpL,EAAAA,GAAEkV,WACH1T,KAAKM,MAAQxC,EAAM+L,8BACnB,MAEJ,KAAKrL,EAAAA,GAAEmB,kBACHK,KAAK2B,KAAKC,EAAAA,EAAIgS,uBACd5T,KAAKM,MAAQxC,EAAME,KACnBgC,KAAK0H,sBACL,MAEJ,QACI1H,KAAKM,MAAQxC,EAAMgM,yBACnB9J,KAAKkO,6BAA6B3P,GAG9C,CAGAyP,gCAAAA,CAAiCzP,GAC7B,OAAQA,GACJ,KAAKC,EAAAA,GAAEiV,eACHzT,KAAKM,MAAQxC,EAAMqQ,6BACnB,MAEJ,KAAK3P,EAAAA,GAAE8T,UACHtS,KAAKqJ,2BACL,MAEJ,KAAK7K,EAAAA,GAAEyD,KACHjC,KAAK2B,KAAKC,EAAAA,EAAI2Q,yBACdvS,KAAKY,YAAYE,OAAS0R,EAAAA,GAC1B,MAEJ,KAAKhU,EAAAA,GAAEsK,IACH9I,KAAK2B,KAAKC,EAAAA,EAAImR,UACd/S,KAAK4I,gBACL,MAEJ,QACI5I,KAAKY,YAAYE,OAASoI,OAAOC,cAAc5K,GAG3D,CAGA0P,gCAAAA,CAAiC1P,GAC7B,OAAQA,GACJ,KAAKC,EAAAA,GAAEkV,WACH1T,KAAKM,MAAQxC,EAAMqQ,6BACnB,MAEJ,KAAK3P,EAAAA,GAAE8T,UACHtS,KAAKqJ,2BACL,MAEJ,KAAK7K,EAAAA,GAAEyD,KACHjC,KAAK2B,KAAKC,EAAAA,EAAI2Q,yBACdvS,KAAKY,YAAYE,OAAS0R,EAAAA,GAC1B,MAEJ,KAAKhU,EAAAA,GAAEsK,IACH9I,KAAK2B,KAAKC,EAAAA,EAAImR,UACd/S,KAAK4I,gBACL,MAEJ,QACI5I,KAAKY,YAAYE,OAASoI,OAAOC,cAAc5K,GAG3D,CAGA2P,4BAAAA,CAA6B3P,GACzB,OAAQA,GACJ,KAAKC,EAAAA,GAAEa,MACP,KAAKb,EAAAA,GAAEc,UACP,KAAKd,EAAAA,GAAEe,WACP,KAAKf,EAAAA,GAAEgB,UACHQ,KAAKqH,kBACLrH,KAAKM,MAAQxC,EAAM0P,sBACnB,MAEJ,KAAKhP,EAAAA,GAAE8T,UACHtS,KAAKqJ,2BACL,MAEJ,KAAK7K,EAAAA,GAAEmB,kBACHK,KAAKqH,kBACLrH,KAAKM,MAAQxC,EAAME,KACnBgC,KAAK0H,sBACL,MAEJ,KAAKlJ,EAAAA,GAAEyD,KACHjC,KAAK2B,KAAKC,EAAAA,EAAI2Q,yBACdvS,KAAKY,YAAYE,OAAS0R,EAAAA,GAC1B,MAEJ,KAAKhU,EAAAA,GAAEiV,eACP,KAAKjV,EAAAA,GAAEkV,WACP,KAAKlV,EAAAA,GAAE6T,eACP,KAAK7T,EAAAA,GAAE+U,YACP,KAAK/U,EAAAA,GAAEqV,aACH7T,KAAK2B,KAAKC,EAAAA,EAAIkS,6CACd9T,KAAKY,YAAYE,OAASoI,OAAOC,cAAc5K,GAC/C,MAEJ,KAAKC,EAAAA,GAAEsK,IACH9I,KAAK2B,KAAKC,EAAAA,EAAImR,UACd/S,KAAK4I,gBACL,MAEJ,QACI5I,KAAKY,YAAYE,OAASoI,OAAOC,cAAc5K,GAG3D,CAGA6P,+BAAAA,CAAgC7P,GAC5B,OAAQA,GACJ,KAAKC,EAAAA,GAAEa,MACP,KAAKb,EAAAA,GAAEc,UACP,KAAKd,EAAAA,GAAEe,WACP,KAAKf,EAAAA,GAAEgB,UACHQ,KAAKqH,kBACLrH,KAAKM,MAAQxC,EAAM0P,sBACnB,MAEJ,KAAKhP,EAAAA,GAAEkB,QACHM,KAAKqH,kBACLrH,KAAKM,MAAQxC,EAAMuQ,uBACnB,MAEJ,KAAK7P,EAAAA,GAAEmB,kBACHK,KAAKqH,kBACLrH,KAAKM,MAAQxC,EAAME,KACnBgC,KAAK0H,sBACL,MAEJ,KAAKlJ,EAAAA,GAAEsK,IACH9I,KAAK2B,KAAKC,EAAAA,EAAImR,UACd/S,KAAK4I,gBACL,MAEJ,QACI5I,KAAK2B,KAAKC,EAAAA,EAAImS,oCACd/T,KAAKM,MAAQxC,EAAM0P,sBACnBxN,KAAKyN,0BAA0BlP,GAG3C,CAGA+P,yBAAAA,CAA0B/P,GACtB,OAAQA,GACJ,KAAKC,EAAAA,GAAEmB,kBACWK,KAAKW,aACbiF,aAAc,EACpB5F,KAAKM,MAAQxC,EAAME,KACnBgC,KAAK0H,sBACL,MAEJ,KAAKlJ,EAAAA,GAAEsK,IACH9I,KAAK2B,KAAKC,EAAAA,EAAImR,UACd/S,KAAK4I,gBACL,MAEJ,QACI5I,KAAK2B,KAAKC,EAAAA,EAAIoS,wBACdhU,KAAKM,MAAQxC,EAAM0P,sBACnBxN,KAAKyN,0BAA0BlP,GAG3C,CAGAiQ,kBAAAA,CAAmBjQ,GACf,MAAMyI,EAAQhH,KAAKW,aACnB,OAAQpC,GACJ,KAAKC,EAAAA,GAAEmB,kBACHK,KAAKM,MAAQxC,EAAME,KACnBgC,KAAKiI,mBAAmBjB,GACxB,MAEJ,KAAKxI,EAAAA,GAAEsK,IACH9I,KAAKiI,mBAAmBjB,GACxBhH,KAAK4I,gBACL,MAEJ,KAAKpK,EAAAA,GAAEyD,KACHjC,KAAK2B,KAAKC,EAAAA,EAAI2Q,yBACdvL,EAAMZ,MAAQoM,EAAAA,GACd,MAEJ,QACIxL,EAAMZ,MAAQ8C,OAAOC,cAAc5K,GAG/C,CAGAmQ,2BAAAA,CAA4BnQ,GACpByB,KAAKgF,wBAAwBqO,EAAAA,GAAGY,WAAW,IAC3CjU,KAAKkG,oBAAoBmN,EAAAA,GAAGY,UAAUlR,OAAS,GAC/C/C,KAAKM,MAAQxC,EAAM6Q,eAEd3O,KAAKgF,wBAAwBqO,EAAAA,GAAG9M,SAAS,IAE9CvG,KAAKiB,gBAAkBjB,KAAKkB,mBAAmBmS,EAAAA,GAAG9M,QAAQxD,OAAS,GACnE/C,KAAKM,MAAQxC,EAAMyI,SAEdvG,KAAKgF,wBAAwBqO,EAAAA,GAAGa,aAAa,GAC9ClU,KAAKG,cACLH,KAAKM,MAAQxC,EAAMO,eAGnB2B,KAAK2B,KAAKC,EAAAA,EAAIuS,oBACdnU,KAAKkG,oBAAoBmN,EAAAA,GAAGa,YAAYnR,OAAS,GACjD/C,KAAKW,aAAayF,KAAO,UACzBpG,KAAKM,MAAQxC,EAAMyQ,eAKjBvO,KAAKgE,uBACXhE,KAAK2B,KAAKC,EAAAA,EAAIwS,0BACdpU,KAAKkG,oBAAoB,GACzBlG,KAAKM,MAAQxC,EAAMyQ,cACnBvO,KAAKwO,mBAAmBjQ,GAEhC,CAGAqQ,kBAAAA,CAAmBrQ,GACf,OAAQA,GACJ,KAAKC,EAAAA,GAAE2U,aACHnT,KAAKM,MAAQxC,EAAM+Q,mBACnB,MAEJ,KAAKrQ,EAAAA,GAAEmB,kBAAmB,CACtBK,KAAK2B,KAAKC,EAAAA,EAAIyS,6BACdrU,KAAKM,MAAQxC,EAAME,KACnB,MAAMgJ,EAAQhH,KAAKW,aACnBX,KAAKiI,mBAAmBjB,GACxB,KACJ,CACA,QACIhH,KAAKM,MAAQxC,EAAMqI,QACnBnG,KAAK+O,cAAcxQ,GAG/B,CAGAuQ,sBAAAA,CAAuBvQ,GACnB,MAAMyI,EAAQhH,KAAKW,aACnB,OAAQpC,GACJ,KAAKC,EAAAA,GAAE2U,aACHnT,KAAKM,MAAQxC,EAAM4R,YACnB,MAEJ,KAAKlR,EAAAA,GAAEmB,kBACHK,KAAK2B,KAAKC,EAAAA,EAAIyS,6BACdrU,KAAKM,MAAQxC,EAAME,KACnBgC,KAAKiI,mBAAmBjB,GACxB,MAEJ,KAAKxI,EAAAA,GAAEsK,IACH9I,KAAK2B,KAAKC,EAAAA,EAAI0S,cACdtU,KAAKiI,mBAAmBjB,GACxBhH,KAAK4I,gBACL,MAEJ,QACI5B,EAAMZ,MAAQ,IACdpG,KAAKM,MAAQxC,EAAMqI,QACnBnG,KAAK+O,cAAcxQ,GAG/B,CAGAwQ,aAAAA,CAAcxQ,GACV,MAAMyI,EAAQhH,KAAKW,aACnB,OAAQpC,GACJ,KAAKC,EAAAA,GAAE2U,aACHnT,KAAKM,MAAQxC,EAAM0R,iBACnB,MAEJ,KAAKhR,EAAAA,GAAE6T,eACHrL,EAAMZ,MAAQ,IACdpG,KAAKM,MAAQxC,EAAMkR,uBACnB,MAEJ,KAAKxQ,EAAAA,GAAEyD,KACHjC,KAAK2B,KAAKC,EAAAA,EAAI2Q,yBACdvL,EAAMZ,MAAQoM,EAAAA,GACd,MAEJ,KAAKhU,EAAAA,GAAEsK,IACH9I,KAAK2B,KAAKC,EAAAA,EAAI0S,cACdtU,KAAKiI,mBAAmBjB,GACxBhH,KAAK4I,gBACL,MAEJ,QACI5B,EAAMZ,MAAQ8C,OAAOC,cAAc5K,GAG/C,CAGA0Q,yBAAAA,CAA0B1Q,GACtB,MAAMyI,EAAQhH,KAAKW,aACnB,OAAQpC,GACJ,KAAKC,EAAAA,GAAEiU,iBACHzL,EAAMZ,MAAQ,IACdpG,KAAKM,MAAQxC,EAAMoR,4BACnB,MAEJ,KAAK1Q,EAAAA,GAAE6T,eACHrL,EAAMZ,MAAQ,IACd,MAEJ,QACIpG,KAAKM,MAAQxC,EAAMqI,QACnBnG,KAAK+O,cAAcxQ,GAG/B,CAGA4Q,6BAAAA,CAA8B5Q,GACtBA,IAAOC,EAAAA,GAAE2U,aACTnT,KAAKM,MAAQxC,EAAMsR,kCAGnBpP,KAAKM,MAAQxC,EAAMqI,QACnBnG,KAAK+O,cAAcxQ,GAE3B,CAGA8Q,iCAAAA,CAAkC9Q,GAC1BA,IAAOC,EAAAA,GAAE2U,aACTnT,KAAKM,MAAQxC,EAAMwR,uCAGnBtP,KAAKM,MAAQxC,EAAM0R,iBACnBxP,KAAKyP,qBAAqBlR,GAElC,CAGAgR,qCAAAA,CAAsChR,GAC9BA,IAAOC,EAAAA,GAAEmB,mBAAqBpB,IAAOC,EAAAA,GAAEsK,KACvC9I,KAAK2B,KAAKC,EAAAA,EAAI2S,eAElBvU,KAAKM,MAAQxC,EAAM4R,YACnB1P,KAAK2P,iBAAiBpR,EAC1B,CAGAkR,oBAAAA,CAAqBlR,GACjB,MAAMyI,EAAQhH,KAAKW,aACnB,OAAQpC,GACJ,KAAKC,EAAAA,GAAE2U,aACHnT,KAAKM,MAAQxC,EAAM4R,YACnB,MAEJ,KAAKlR,EAAAA,GAAEsK,IACH9I,KAAK2B,KAAKC,EAAAA,EAAI0S,cACdtU,KAAKiI,mBAAmBjB,GACxBhH,KAAK4I,gBACL,MAEJ,QACI5B,EAAMZ,MAAQ,IACdpG,KAAKM,MAAQxC,EAAMqI,QACnBnG,KAAK+O,cAAcxQ,GAG/B,CAGAoR,gBAAAA,CAAiBpR,GACb,MAAMyI,EAAQhH,KAAKW,aACnB,OAAQpC,GACJ,KAAKC,EAAAA,GAAEmB,kBACHK,KAAKM,MAAQxC,EAAME,KACnBgC,KAAKiI,mBAAmBjB,GACxB,MAEJ,KAAKxI,EAAAA,GAAEiU,iBACHzS,KAAKM,MAAQxC,EAAM8R,iBACnB,MAEJ,KAAKpR,EAAAA,GAAE2U,aACHnM,EAAMZ,MAAQ,IACd,MAEJ,KAAK5H,EAAAA,GAAEsK,IACH9I,KAAK2B,KAAKC,EAAAA,EAAI0S,cACdtU,KAAKiI,mBAAmBjB,GACxBhH,KAAK4I,gBACL,MAEJ,QACI5B,EAAMZ,MAAQ,KACdpG,KAAKM,MAAQxC,EAAMqI,QACnBnG,KAAK+O,cAAcxQ,GAG/B,CAGAsR,oBAAAA,CAAqBtR,GACjB,MAAMyI,EAAQhH,KAAKW,aACnB,OAAQpC,GACJ,KAAKC,EAAAA,GAAE2U,aACHnM,EAAMZ,MAAQ,MACdpG,KAAKM,MAAQxC,EAAM0R,iBACnB,MAEJ,KAAKhR,EAAAA,GAAEmB,kBACHK,KAAK2B,KAAKC,EAAAA,EAAI4S,0BACdxU,KAAKM,MAAQxC,EAAME,KACnBgC,KAAKiI,mBAAmBjB,GACxB,MAEJ,KAAKxI,EAAAA,GAAEsK,IACH9I,KAAK2B,KAAKC,EAAAA,EAAI0S,cACdtU,KAAKiI,mBAAmBjB,GACxBhH,KAAK4I,gBACL,MAEJ,QACI5B,EAAMZ,MAAQ,MACdpG,KAAKM,MAAQxC,EAAMqI,QACnBnG,KAAK+O,cAAcxQ,GAG/B,CAGAuR,aAAAA,CAAcvR,GACV,OAAQA,GACJ,KAAKC,EAAAA,GAAEa,MACP,KAAKb,EAAAA,GAAEc,UACP,KAAKd,EAAAA,GAAEe,WACP,KAAKf,EAAAA,GAAEgB,UACHQ,KAAKM,MAAQxC,EAAMiS,oBACnB,MAEJ,KAAKvR,EAAAA,GAAEmB,kBACHK,KAAKM,MAAQxC,EAAMiS,oBACnB/P,KAAKgQ,wBAAwBzR,GAC7B,MAEJ,KAAKC,EAAAA,GAAEsK,IAAK,CACR9I,KAAK2B,KAAKC,EAAAA,EAAI6S,cACdzU,KAAKqG,oBAAoB,MACzB,MAAMW,EAAQhH,KAAKW,aACnBqG,EAAMR,aAAc,EACpBxG,KAAKmI,mBAAmBnB,GACxBhH,KAAK4I,gBACL,KACJ,CACA,QACI5I,KAAK2B,KAAKC,EAAAA,EAAI8S,oCACd1U,KAAKM,MAAQxC,EAAMiS,oBACnB/P,KAAKgQ,wBAAwBzR,GAGzC,CAGAyR,uBAAAA,CAAwBzR,GACpB,GAAID,EAAaC,GACbyB,KAAKqG,oBAAoB6C,OAAOyL,aAAaxV,EAAaZ,KAC1DyB,KAAKM,MAAQxC,EAAMmS,kBAGnB,OAAQ1R,GACJ,KAAKC,EAAAA,GAAEa,MACP,KAAKb,EAAAA,GAAEc,UACP,KAAKd,EAAAA,GAAEe,WACP,KAAKf,EAAAA,GAAEgB,UAEH,MAEJ,KAAKhB,EAAAA,GAAEyD,KACHjC,KAAK2B,KAAKC,EAAAA,EAAI2Q,yBACdvS,KAAKqG,oBAAoBmM,EAAAA,IACzBxS,KAAKM,MAAQxC,EAAMmS,aACnB,MAEJ,KAAKzR,EAAAA,GAAEmB,kBAAmB,CACtBK,KAAK2B,KAAKC,EAAAA,EAAIgT,oBACd5U,KAAKqG,oBAAoB,MACzB,MAAMW,EAAQhH,KAAKW,aACnBqG,EAAMR,aAAc,EACpBxG,KAAKmI,mBAAmBnB,GACxBhH,KAAKM,MAAQxC,EAAME,KACnB,KACJ,CACA,KAAKQ,EAAAA,GAAEsK,IAAK,CACR9I,KAAK2B,KAAKC,EAAAA,EAAI6S,cACdzU,KAAKqG,oBAAoB,MACzB,MAAMW,EAAQhH,KAAKW,aACnBqG,EAAMR,aAAc,EACpBxG,KAAKmI,mBAAmBnB,GACxBhH,KAAK4I,gBACL,KACJ,CACA,QACI5I,KAAKqG,oBAAoB6C,OAAOC,cAAc5K,IAC9CyB,KAAKM,MAAQxC,EAAMmS,aAGnC,CAGAC,iBAAAA,CAAkB3R,GACd,MAAMyI,EAAQhH,KAAKW,aACnB,OAAQpC,GACJ,KAAKC,EAAAA,GAAEa,MACP,KAAKb,EAAAA,GAAEc,UACP,KAAKd,EAAAA,GAAEe,WACP,KAAKf,EAAAA,GAAEgB,UACHQ,KAAKM,MAAQxC,EAAMqS,mBACnB,MAEJ,KAAK3R,EAAAA,GAAEmB,kBACHK,KAAKM,MAAQxC,EAAME,KACnBgC,KAAKmI,mBAAmBnB,GACxB,MAEJ,KAAKxI,EAAAA,GAAEyD,KACHjC,KAAK2B,KAAKC,EAAAA,EAAI2Q,yBACdvL,EAAMnG,MAAQ2R,EAAAA,GACd,MAEJ,KAAKhU,EAAAA,GAAEsK,IACH9I,KAAK2B,KAAKC,EAAAA,EAAI6S,cACdzN,EAAMR,aAAc,EACpBxG,KAAKmI,mBAAmBnB,GACxBhH,KAAK4I,gBACL,MAEJ,QACI5B,EAAMnG,MAAQqI,OAAOC,cAAc7K,EAAaC,GAAMY,EAAaZ,GAAMA,GAGrF,CAGA6R,sBAAAA,CAAuB7R,GACnB,MAAMyI,EAAQhH,KAAKW,aACnB,OAAQpC,GACJ,KAAKC,EAAAA,GAAEa,MACP,KAAKb,EAAAA,GAAEc,UACP,KAAKd,EAAAA,GAAEe,WACP,KAAKf,EAAAA,GAAEgB,UAEH,MAEJ,KAAKhB,EAAAA,GAAEmB,kBACHK,KAAKM,MAAQxC,EAAME,KACnBgC,KAAKmI,mBAAmBnB,GACxB,MAEJ,KAAKxI,EAAAA,GAAEsK,IACH9I,KAAK2B,KAAKC,EAAAA,EAAI6S,cACdzN,EAAMR,aAAc,EACpBxG,KAAKmI,mBAAmBnB,GACxBhH,KAAK4I,gBACL,MAEJ,QACQ5I,KAAKgF,wBAAwBqO,EAAAA,GAAGwB,QAAQ,GACxC7U,KAAKM,MAAQxC,EAAMuS,6BAEdrQ,KAAKgF,wBAAwBqO,EAAAA,GAAGyB,QAAQ,GAC7C9U,KAAKM,MAAQxC,EAAMmT,6BAIbjR,KAAKgE,uBACXhE,KAAK2B,KAAKC,EAAAA,EAAImT,0CACd/N,EAAMR,aAAc,EACpBxG,KAAKM,MAAQxC,EAAM6T,cACnB3R,KAAK4R,mBAAmBrT,IAIxC,CAGA+R,+BAAAA,CAAgC/R,GAC5B,MAAMyI,EAAQhH,KAAKW,aACnB,OAAQpC,GACJ,KAAKC,EAAAA,GAAEa,MACP,KAAKb,EAAAA,GAAEc,UACP,KAAKd,EAAAA,GAAEe,WACP,KAAKf,EAAAA,GAAEgB,UACHQ,KAAKM,MAAQxC,EAAMyS,iCACnB,MAEJ,KAAK/R,EAAAA,GAAEiV,eACHzT,KAAK2B,KAAKC,EAAAA,EAAIoT,4CACdhO,EAAMP,SAAW,GACjBzG,KAAKM,MAAQxC,EAAM2S,wCACnB,MAEJ,KAAKjS,EAAAA,GAAEkV,WACH1T,KAAK2B,KAAKC,EAAAA,EAAIoT,4CACdhO,EAAMP,SAAW,GACjBzG,KAAKM,MAAQxC,EAAM6S,wCACnB,MAEJ,KAAKnS,EAAAA,GAAEmB,kBACHK,KAAK2B,KAAKC,EAAAA,EAAIqT,gCACdjO,EAAMR,aAAc,EACpBxG,KAAKM,MAAQxC,EAAME,KACnBgC,KAAKmI,mBAAmBnB,GACxB,MAEJ,KAAKxI,EAAAA,GAAEsK,IACH9I,KAAK2B,KAAKC,EAAAA,EAAI6S,cACdzN,EAAMR,aAAc,EACpBxG,KAAKmI,mBAAmBnB,GACxBhH,KAAK4I,gBACL,MAEJ,QACI5I,KAAK2B,KAAKC,EAAAA,EAAIsT,2CACdlO,EAAMR,aAAc,EACpBxG,KAAKM,MAAQxC,EAAM6T,cACnB3R,KAAK4R,mBAAmBrT,GAGpC,CAGAiS,mCAAAA,CAAoCjS,GAChC,MAAMyI,EAAQhH,KAAKW,aACnB,OAAQpC,GACJ,KAAKC,EAAAA,GAAEa,MACP,KAAKb,EAAAA,GAAEc,UACP,KAAKd,EAAAA,GAAEe,WACP,KAAKf,EAAAA,GAAEgB,UAEH,MAEJ,KAAKhB,EAAAA,GAAEiV,eACHzM,EAAMP,SAAW,GACjBzG,KAAKM,MAAQxC,EAAM2S,wCACnB,MAEJ,KAAKjS,EAAAA,GAAEkV,WACH1M,EAAMP,SAAW,GACjBzG,KAAKM,MAAQxC,EAAM6S,wCACnB,MAEJ,KAAKnS,EAAAA,GAAEmB,kBACHK,KAAK2B,KAAKC,EAAAA,EAAIqT,gCACdjO,EAAMR,aAAc,EACpBxG,KAAKM,MAAQxC,EAAME,KACnBgC,KAAKmI,mBAAmBnB,GACxB,MAEJ,KAAKxI,EAAAA,GAAEsK,IACH9I,KAAK2B,KAAKC,EAAAA,EAAI6S,cACdzN,EAAMR,aAAc,EACpBxG,KAAKmI,mBAAmBnB,GACxBhH,KAAK4I,gBACL,MAEJ,QACI5I,KAAK2B,KAAKC,EAAAA,EAAIsT,2CACdlO,EAAMR,aAAc,EACpBxG,KAAKM,MAAQxC,EAAM6T,cACnB3R,KAAK4R,mBAAmBrT,GAGpC,CAGAmS,yCAAAA,CAA0CnS,GACtC,MAAMyI,EAAQhH,KAAKW,aACnB,OAAQpC,GACJ,KAAKC,EAAAA,GAAEiV,eACHzT,KAAKM,MAAQxC,EAAM+S,gCACnB,MAEJ,KAAKrS,EAAAA,GAAEyD,KACHjC,KAAK2B,KAAKC,EAAAA,EAAI2Q,yBACdvL,EAAMP,UAAY+L,EAAAA,GAClB,MAEJ,KAAKhU,EAAAA,GAAEmB,kBACHK,KAAK2B,KAAKC,EAAAA,EAAIuT,+BACdnO,EAAMR,aAAc,EACpBxG,KAAKmI,mBAAmBnB,GACxBhH,KAAKM,MAAQxC,EAAME,KACnB,MAEJ,KAAKQ,EAAAA,GAAEsK,IACH9I,KAAK2B,KAAKC,EAAAA,EAAI6S,cACdzN,EAAMR,aAAc,EACpBxG,KAAKmI,mBAAmBnB,GACxBhH,KAAK4I,gBACL,MAEJ,QACI5B,EAAMP,UAAYyC,OAAOC,cAAc5K,GAGnD,CAGAqS,yCAAAA,CAA0CrS,GACtC,MAAMyI,EAAQhH,KAAKW,aACnB,OAAQpC,GACJ,KAAKC,EAAAA,GAAEkV,WACH1T,KAAKM,MAAQxC,EAAM+S,gCACnB,MAEJ,KAAKrS,EAAAA,GAAEyD,KACHjC,KAAK2B,KAAKC,EAAAA,EAAI2Q,yBACdvL,EAAMP,UAAY+L,EAAAA,GAClB,MAEJ,KAAKhU,EAAAA,GAAEmB,kBACHK,KAAK2B,KAAKC,EAAAA,EAAIuT,+BACdnO,EAAMR,aAAc,EACpBxG,KAAKmI,mBAAmBnB,GACxBhH,KAAKM,MAAQxC,EAAME,KACnB,MAEJ,KAAKQ,EAAAA,GAAEsK,IACH9I,KAAK2B,KAAKC,EAAAA,EAAI6S,cACdzN,EAAMR,aAAc,EACpBxG,KAAKmI,mBAAmBnB,GACxBhH,KAAK4I,gBACL,MAEJ,QACI5B,EAAMP,UAAYyC,OAAOC,cAAc5K,GAGnD,CAGAuS,kCAAAA,CAAmCvS,GAC/B,MAAMyI,EAAQhH,KAAKW,aACnB,OAAQpC,GACJ,KAAKC,EAAAA,GAAEa,MACP,KAAKb,EAAAA,GAAEc,UACP,KAAKd,EAAAA,GAAEe,WACP,KAAKf,EAAAA,GAAEgB,UACHQ,KAAKM,MAAQxC,EAAMiT,8CACnB,MAEJ,KAAKvS,EAAAA,GAAEmB,kBACHK,KAAKM,MAAQxC,EAAME,KACnBgC,KAAKmI,mBAAmBnB,GACxB,MAEJ,KAAKxI,EAAAA,GAAEiV,eACHzT,KAAK2B,KAAKC,EAAAA,EAAIwT,2DACdpO,EAAMN,SAAW,GACjB1G,KAAKM,MAAQxC,EAAMuT,wCACnB,MAEJ,KAAK7S,EAAAA,GAAEkV,WACH1T,KAAK2B,KAAKC,EAAAA,EAAIwT,2DACdpO,EAAMN,SAAW,GACjB1G,KAAKM,MAAQxC,EAAMyT,wCACnB,MAEJ,KAAK/S,EAAAA,GAAEsK,IACH9I,KAAK2B,KAAKC,EAAAA,EAAI6S,cACdzN,EAAMR,aAAc,EACpBxG,KAAKmI,mBAAmBnB,GACxBhH,KAAK4I,gBACL,MAEJ,QACI5I,KAAK2B,KAAKC,EAAAA,EAAIyT,2CACdrO,EAAMR,aAAc,EACpBxG,KAAKM,MAAQxC,EAAM6T,cACnB3R,KAAK4R,mBAAmBrT,GAGpC,CAGAyS,8CAAAA,CAA+CzS,GAC3C,MAAMyI,EAAQhH,KAAKW,aACnB,OAAQpC,GACJ,KAAKC,EAAAA,GAAEa,MACP,KAAKb,EAAAA,GAAEc,UACP,KAAKd,EAAAA,GAAEe,WACP,KAAKf,EAAAA,GAAEgB,UAEH,MAEJ,KAAKhB,EAAAA,GAAEmB,kBACHK,KAAKmI,mBAAmBnB,GACxBhH,KAAKM,MAAQxC,EAAME,KACnB,MAEJ,KAAKQ,EAAAA,GAAEiV,eACHzM,EAAMN,SAAW,GACjB1G,KAAKM,MAAQxC,EAAMuT,wCACnB,MAEJ,KAAK7S,EAAAA,GAAEkV,WACH1M,EAAMN,SAAW,GACjB1G,KAAKM,MAAQxC,EAAMyT,wCACnB,MAEJ,KAAK/S,EAAAA,GAAEsK,IACH9I,KAAK2B,KAAKC,EAAAA,EAAI6S,cACdzN,EAAMR,aAAc,EACpBxG,KAAKmI,mBAAmBnB,GACxBhH,KAAK4I,gBACL,MAEJ,QACI5I,KAAK2B,KAAKC,EAAAA,EAAIyT,2CACdrO,EAAMR,aAAc,EACpBxG,KAAKM,MAAQxC,EAAM6T,cACnB3R,KAAK4R,mBAAmBrT,GAGpC,CAGA2S,+BAAAA,CAAgC3S,GAC5B,MAAMyI,EAAQhH,KAAKW,aACnB,OAAQpC,GACJ,KAAKC,EAAAA,GAAEa,MACP,KAAKb,EAAAA,GAAEc,UACP,KAAKd,EAAAA,GAAEe,WACP,KAAKf,EAAAA,GAAEgB,UACHQ,KAAKM,MAAQxC,EAAMqT,iCACnB,MAEJ,KAAK3S,EAAAA,GAAEiV,eACHzT,KAAK2B,KAAKC,EAAAA,EAAI0T,4CACdtO,EAAMN,SAAW,GACjB1G,KAAKM,MAAQxC,EAAMuT,wCACnB,MAEJ,KAAK7S,EAAAA,GAAEkV,WACH1T,KAAK2B,KAAKC,EAAAA,EAAI0T,4CACdtO,EAAMN,SAAW,GACjB1G,KAAKM,MAAQxC,EAAMyT,wCACnB,MAEJ,KAAK/S,EAAAA,GAAEmB,kBACHK,KAAK2B,KAAKC,EAAAA,EAAI2T,gCACdvO,EAAMR,aAAc,EACpBxG,KAAKM,MAAQxC,EAAME,KACnBgC,KAAKmI,mBAAmBnB,GACxB,MAEJ,KAAKxI,EAAAA,GAAEsK,IACH9I,KAAK2B,KAAKC,EAAAA,EAAI6S,cACdzN,EAAMR,aAAc,EACpBxG,KAAKmI,mBAAmBnB,GACxBhH,KAAK4I,gBACL,MAEJ,QACI5I,KAAK2B,KAAKC,EAAAA,EAAIyT,2CACdrO,EAAMR,aAAc,EACpBxG,KAAKM,MAAQxC,EAAM6T,cACnB3R,KAAK4R,mBAAmBrT,GAGpC,CAGA6S,mCAAAA,CAAoC7S,GAChC,MAAMyI,EAAQhH,KAAKW,aACnB,OAAQpC,GACJ,KAAKC,EAAAA,GAAEa,MACP,KAAKb,EAAAA,GAAEc,UACP,KAAKd,EAAAA,GAAEe,WACP,KAAKf,EAAAA,GAAEgB,UAEH,MAEJ,KAAKhB,EAAAA,GAAEiV,eACHzM,EAAMN,SAAW,GACjB1G,KAAKM,MAAQxC,EAAMuT,wCACnB,MAEJ,KAAK7S,EAAAA,GAAEkV,WACH1M,EAAMN,SAAW,GACjB1G,KAAKM,MAAQxC,EAAMyT,wCACnB,MAEJ,KAAK/S,EAAAA,GAAEmB,kBACHK,KAAK2B,KAAKC,EAAAA,EAAI2T,gCACdvO,EAAMR,aAAc,EACpBxG,KAAKM,MAAQxC,EAAME,KACnBgC,KAAKmI,mBAAmBnB,GACxB,MAEJ,KAAKxI,EAAAA,GAAEsK,IACH9I,KAAK2B,KAAKC,EAAAA,EAAI6S,cACdzN,EAAMR,aAAc,EACpBxG,KAAKmI,mBAAmBnB,GACxBhH,KAAK4I,gBACL,MAEJ,QACI5I,KAAK2B,KAAKC,EAAAA,EAAIyT,2CACdrO,EAAMR,aAAc,EACpBxG,KAAKM,MAAQxC,EAAM6T,cACnB3R,KAAK4R,mBAAmBrT,GAGpC,CAGA+S,yCAAAA,CAA0C/S,GACtC,MAAMyI,EAAQhH,KAAKW,aACnB,OAAQpC,GACJ,KAAKC,EAAAA,GAAEiV,eACHzT,KAAKM,MAAQxC,EAAM2T,gCACnB,MAEJ,KAAKjT,EAAAA,GAAEyD,KACHjC,KAAK2B,KAAKC,EAAAA,EAAI2Q,yBACdvL,EAAMN,UAAY8L,EAAAA,GAClB,MAEJ,KAAKhU,EAAAA,GAAEmB,kBACHK,KAAK2B,KAAKC,EAAAA,EAAI4T,+BACdxO,EAAMR,aAAc,EACpBxG,KAAKmI,mBAAmBnB,GACxBhH,KAAKM,MAAQxC,EAAME,KACnB,MAEJ,KAAKQ,EAAAA,GAAEsK,IACH9I,KAAK2B,KAAKC,EAAAA,EAAI6S,cACdzN,EAAMR,aAAc,EACpBxG,KAAKmI,mBAAmBnB,GACxBhH,KAAK4I,gBACL,MAEJ,QACI5B,EAAMN,UAAYwC,OAAOC,cAAc5K,GAGnD,CAGAiT,yCAAAA,CAA0CjT,GACtC,MAAMyI,EAAQhH,KAAKW,aACnB,OAAQpC,GACJ,KAAKC,EAAAA,GAAEkV,WACH1T,KAAKM,MAAQxC,EAAM2T,gCACnB,MAEJ,KAAKjT,EAAAA,GAAEyD,KACHjC,KAAK2B,KAAKC,EAAAA,EAAI2Q,yBACdvL,EAAMN,UAAY8L,EAAAA,GAClB,MAEJ,KAAKhU,EAAAA,GAAEmB,kBACHK,KAAK2B,KAAKC,EAAAA,EAAI4T,+BACdxO,EAAMR,aAAc,EACpBxG,KAAKmI,mBAAmBnB,GACxBhH,KAAKM,MAAQxC,EAAME,KACnB,MAEJ,KAAKQ,EAAAA,GAAEsK,IACH9I,KAAK2B,KAAKC,EAAAA,EAAI6S,cACdzN,EAAMR,aAAc,EACpBxG,KAAKmI,mBAAmBnB,GACxBhH,KAAK4I,gBACL,MAEJ,QACI5B,EAAMN,UAAYwC,OAAOC,cAAc5K,GAGnD,CAGAmT,kCAAAA,CAAmCnT,GAC/B,MAAMyI,EAAQhH,KAAKW,aACnB,OAAQpC,GACJ,KAAKC,EAAAA,GAAEa,MACP,KAAKb,EAAAA,GAAEc,UACP,KAAKd,EAAAA,GAAEe,WACP,KAAKf,EAAAA,GAAEgB,UAEH,MAEJ,KAAKhB,EAAAA,GAAEmB,kBACHK,KAAKmI,mBAAmBnB,GACxBhH,KAAKM,MAAQxC,EAAME,KACnB,MAEJ,KAAKQ,EAAAA,GAAEsK,IACH9I,KAAK2B,KAAKC,EAAAA,EAAI6S,cACdzN,EAAMR,aAAc,EACpBxG,KAAKmI,mBAAmBnB,GACxBhH,KAAK4I,gBACL,MAEJ,QACI5I,KAAK2B,KAAKC,EAAAA,EAAI6T,iDACdzV,KAAKM,MAAQxC,EAAM6T,cACnB3R,KAAK4R,mBAAmBrT,GAGpC,CAGAqT,kBAAAA,CAAmBrT,GACf,MAAMyI,EAAQhH,KAAKW,aACnB,OAAQpC,GACJ,KAAKC,EAAAA,GAAEmB,kBACHK,KAAKmI,mBAAmBnB,GACxBhH,KAAKM,MAAQxC,EAAME,KACnB,MAEJ,KAAKQ,EAAAA,GAAEyD,KACHjC,KAAK2B,KAAKC,EAAAA,EAAI2Q,yBACd,MAEJ,KAAK/T,EAAAA,GAAEsK,IACH9I,KAAKmI,mBAAmBnB,GACxBhH,KAAK4I,gBAMjB,CAGAiJ,kBAAAA,CAAmBtT,GACf,OAAQA,GACJ,KAAKC,EAAAA,GAAEkX,qBACH1V,KAAKM,MAAQxC,EAAMgU,sBACnB,MAEJ,KAAKtT,EAAAA,GAAEsK,IACH9I,KAAK2B,KAAKC,EAAAA,EAAI+T,YACd3V,KAAK4I,gBACL,MAEJ,QACI5I,KAAKiJ,eAAe1K,GAGhC,CAGAwT,yBAAAA,CAA0BxT,GAClBA,IAAOC,EAAAA,GAAEkX,qBACT1V,KAAKM,MAAQxC,EAAMkU,mBAGnBhS,KAAKoJ,WAAW,KAChBpJ,KAAKM,MAAQxC,EAAMO,cACnB2B,KAAK6R,mBAAmBtT,GAEhC,CAGA0T,qBAAAA,CAAsB1T,GAClB,OAAQA,GACJ,KAAKC,EAAAA,GAAEmB,kBACHK,KAAKM,MAAQxC,EAAME,KACnB,MAEJ,KAAKQ,EAAAA,GAAEkX,qBACH1V,KAAKoJ,WAAW,KAChB,MAEJ,QACIpJ,KAAKoJ,WAAW,MAChBpJ,KAAKM,MAAQxC,EAAMO,cACnB2B,KAAK6R,mBAAmBtT,GAGpC,CAGA2T,wBAAAA,GACI,IAAInP,EAAS/C,KAAKmB,cAAcmD,MAAMtE,KAAKe,aAAa6U,KAAM5V,KAAKe,aAAaQ,KAChF,GAAIwB,EAAS,EAAG,CACZ,IAAI/C,KAAKe,aAAa8U,iBAUlB,OALA7V,KAAKK,QAAS,EAEdL,KAAKe,aAAaQ,IAAMvB,KAAKe,aAAa6U,KAAK7S,OAAS,EACxD/C,KAAKS,sBAAwB,OAC7BT,KAAKe,aAAa2D,eAAgB,GARlC3B,EAAS/C,KAAKmB,cAAc2U,KAWpC,CACe,IAAX/S,GAGA/C,KAAKe,aAAaQ,IAAMvB,KAAKQ,eAC7BR,KAAKwB,4CAA4ChD,EAAAA,GAAE8T,WACnDtS,KAAKM,OACAN,KAAKwJ,oCAAsCzK,EAAoBiB,KAAKe,aAAamS,KAAK,IACjFpV,EAAMqU,oBACNnS,KAAKO,aAIfP,KAAKM,MAAQN,KAAKO,WAE1B,CAGA6R,wBAAAA,CAAyB7T,GACjBQ,EAAoBR,GACpByB,KAAKwB,4CAA4CjD,IAG7CA,IAAOC,EAAAA,GAAEuX,WACT/V,KAAK2B,KAAKC,EAAAA,EAAIoU,gCAElBhW,KAAKM,MAAQN,KAAKO,YAClBP,KAAKiE,WAAW1F,GAExB,E","sources":["../node_modules/parse5/dist/tokenizer/index.js"],"sourcesContent":["import { Preprocessor } from './preprocessor.js';\nimport { CODE_POINTS as $, SEQUENCES as $$, REPLACEMENT_CHARACTER, isSurrogate, isUndefinedCodePoint, isControlCodePoint, } from '../common/unicode.js';\nimport { TokenType, getTokenAttr, } from '../common/token.js';\nimport { htmlDecodeTree, EntityDecoder, DecodingMode } from 'entities/lib/decode.js';\nimport { ERR } from '../common/error-codes.js';\nimport { TAG_ID, getTagID } from '../common/html.js';\n//States\nvar State;\n(function (State) {\n    State[State[\"DATA\"] = 0] = \"DATA\";\n    State[State[\"RCDATA\"] = 1] = \"RCDATA\";\n    State[State[\"RAWTEXT\"] = 2] = \"RAWTEXT\";\n    State[State[\"SCRIPT_DATA\"] = 3] = \"SCRIPT_DATA\";\n    State[State[\"PLAINTEXT\"] = 4] = \"PLAINTEXT\";\n    State[State[\"TAG_OPEN\"] = 5] = \"TAG_OPEN\";\n    State[State[\"END_TAG_OPEN\"] = 6] = \"END_TAG_OPEN\";\n    State[State[\"TAG_NAME\"] = 7] = \"TAG_NAME\";\n    State[State[\"RCDATA_LESS_THAN_SIGN\"] = 8] = \"RCDATA_LESS_THAN_SIGN\";\n    State[State[\"RCDATA_END_TAG_OPEN\"] = 9] = \"RCDATA_END_TAG_OPEN\";\n    State[State[\"RCDATA_END_TAG_NAME\"] = 10] = \"RCDATA_END_TAG_NAME\";\n    State[State[\"RAWTEXT_LESS_THAN_SIGN\"] = 11] = \"RAWTEXT_LESS_THAN_SIGN\";\n    State[State[\"RAWTEXT_END_TAG_OPEN\"] = 12] = \"RAWTEXT_END_TAG_OPEN\";\n    State[State[\"RAWTEXT_END_TAG_NAME\"] = 13] = \"RAWTEXT_END_TAG_NAME\";\n    State[State[\"SCRIPT_DATA_LESS_THAN_SIGN\"] = 14] = \"SCRIPT_DATA_LESS_THAN_SIGN\";\n    State[State[\"SCRIPT_DATA_END_TAG_OPEN\"] = 15] = \"SCRIPT_DATA_END_TAG_OPEN\";\n    State[State[\"SCRIPT_DATA_END_TAG_NAME\"] = 16] = \"SCRIPT_DATA_END_TAG_NAME\";\n    State[State[\"SCRIPT_DATA_ESCAPE_START\"] = 17] = \"SCRIPT_DATA_ESCAPE_START\";\n    State[State[\"SCRIPT_DATA_ESCAPE_START_DASH\"] = 18] = \"SCRIPT_DATA_ESCAPE_START_DASH\";\n    State[State[\"SCRIPT_DATA_ESCAPED\"] = 19] = \"SCRIPT_DATA_ESCAPED\";\n    State[State[\"SCRIPT_DATA_ESCAPED_DASH\"] = 20] = \"SCRIPT_DATA_ESCAPED_DASH\";\n    State[State[\"SCRIPT_DATA_ESCAPED_DASH_DASH\"] = 21] = \"SCRIPT_DATA_ESCAPED_DASH_DASH\";\n    State[State[\"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN\"] = 22] = \"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN\";\n    State[State[\"SCRIPT_DATA_ESCAPED_END_TAG_OPEN\"] = 23] = \"SCRIPT_DATA_ESCAPED_END_TAG_OPEN\";\n    State[State[\"SCRIPT_DATA_ESCAPED_END_TAG_NAME\"] = 24] = \"SCRIPT_DATA_ESCAPED_END_TAG_NAME\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPE_START\"] = 25] = \"SCRIPT_DATA_DOUBLE_ESCAPE_START\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED\"] = 26] = \"SCRIPT_DATA_DOUBLE_ESCAPED\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH\"] = 27] = \"SCRIPT_DATA_DOUBLE_ESCAPED_DASH\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH\"] = 28] = \"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN\"] = 29] = \"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPE_END\"] = 30] = \"SCRIPT_DATA_DOUBLE_ESCAPE_END\";\n    State[State[\"BEFORE_ATTRIBUTE_NAME\"] = 31] = \"BEFORE_ATTRIBUTE_NAME\";\n    State[State[\"ATTRIBUTE_NAME\"] = 32] = \"ATTRIBUTE_NAME\";\n    State[State[\"AFTER_ATTRIBUTE_NAME\"] = 33] = \"AFTER_ATTRIBUTE_NAME\";\n    State[State[\"BEFORE_ATTRIBUTE_VALUE\"] = 34] = \"BEFORE_ATTRIBUTE_VALUE\";\n    State[State[\"ATTRIBUTE_VALUE_DOUBLE_QUOTED\"] = 35] = \"ATTRIBUTE_VALUE_DOUBLE_QUOTED\";\n    State[State[\"ATTRIBUTE_VALUE_SINGLE_QUOTED\"] = 36] = \"ATTRIBUTE_VALUE_SINGLE_QUOTED\";\n    State[State[\"ATTRIBUTE_VALUE_UNQUOTED\"] = 37] = \"ATTRIBUTE_VALUE_UNQUOTED\";\n    State[State[\"AFTER_ATTRIBUTE_VALUE_QUOTED\"] = 38] = \"AFTER_ATTRIBUTE_VALUE_QUOTED\";\n    State[State[\"SELF_CLOSING_START_TAG\"] = 39] = \"SELF_CLOSING_START_TAG\";\n    State[State[\"BOGUS_COMMENT\"] = 40] = \"BOGUS_COMMENT\";\n    State[State[\"MARKUP_DECLARATION_OPEN\"] = 41] = \"MARKUP_DECLARATION_OPEN\";\n    State[State[\"COMMENT_START\"] = 42] = \"COMMENT_START\";\n    State[State[\"COMMENT_START_DASH\"] = 43] = \"COMMENT_START_DASH\";\n    State[State[\"COMMENT\"] = 44] = \"COMMENT\";\n    State[State[\"COMMENT_LESS_THAN_SIGN\"] = 45] = \"COMMENT_LESS_THAN_SIGN\";\n    State[State[\"COMMENT_LESS_THAN_SIGN_BANG\"] = 46] = \"COMMENT_LESS_THAN_SIGN_BANG\";\n    State[State[\"COMMENT_LESS_THAN_SIGN_BANG_DASH\"] = 47] = \"COMMENT_LESS_THAN_SIGN_BANG_DASH\";\n    State[State[\"COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH\"] = 48] = \"COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH\";\n    State[State[\"COMMENT_END_DASH\"] = 49] = \"COMMENT_END_DASH\";\n    State[State[\"COMMENT_END\"] = 50] = \"COMMENT_END\";\n    State[State[\"COMMENT_END_BANG\"] = 51] = \"COMMENT_END_BANG\";\n    State[State[\"DOCTYPE\"] = 52] = \"DOCTYPE\";\n    State[State[\"BEFORE_DOCTYPE_NAME\"] = 53] = \"BEFORE_DOCTYPE_NAME\";\n    State[State[\"DOCTYPE_NAME\"] = 54] = \"DOCTYPE_NAME\";\n    State[State[\"AFTER_DOCTYPE_NAME\"] = 55] = \"AFTER_DOCTYPE_NAME\";\n    State[State[\"AFTER_DOCTYPE_PUBLIC_KEYWORD\"] = 56] = \"AFTER_DOCTYPE_PUBLIC_KEYWORD\";\n    State[State[\"BEFORE_DOCTYPE_PUBLIC_IDENTIFIER\"] = 57] = \"BEFORE_DOCTYPE_PUBLIC_IDENTIFIER\";\n    State[State[\"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED\"] = 58] = \"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED\";\n    State[State[\"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED\"] = 59] = \"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED\";\n    State[State[\"AFTER_DOCTYPE_PUBLIC_IDENTIFIER\"] = 60] = \"AFTER_DOCTYPE_PUBLIC_IDENTIFIER\";\n    State[State[\"BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS\"] = 61] = \"BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS\";\n    State[State[\"AFTER_DOCTYPE_SYSTEM_KEYWORD\"] = 62] = \"AFTER_DOCTYPE_SYSTEM_KEYWORD\";\n    State[State[\"BEFORE_DOCTYPE_SYSTEM_IDENTIFIER\"] = 63] = \"BEFORE_DOCTYPE_SYSTEM_IDENTIFIER\";\n    State[State[\"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED\"] = 64] = \"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED\";\n    State[State[\"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED\"] = 65] = \"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED\";\n    State[State[\"AFTER_DOCTYPE_SYSTEM_IDENTIFIER\"] = 66] = \"AFTER_DOCTYPE_SYSTEM_IDENTIFIER\";\n    State[State[\"BOGUS_DOCTYPE\"] = 67] = \"BOGUS_DOCTYPE\";\n    State[State[\"CDATA_SECTION\"] = 68] = \"CDATA_SECTION\";\n    State[State[\"CDATA_SECTION_BRACKET\"] = 69] = \"CDATA_SECTION_BRACKET\";\n    State[State[\"CDATA_SECTION_END\"] = 70] = \"CDATA_SECTION_END\";\n    State[State[\"CHARACTER_REFERENCE\"] = 71] = \"CHARACTER_REFERENCE\";\n    State[State[\"AMBIGUOUS_AMPERSAND\"] = 72] = \"AMBIGUOUS_AMPERSAND\";\n})(State || (State = {}));\n//Tokenizer initial states for different modes\nexport const TokenizerMode = {\n    DATA: State.DATA,\n    RCDATA: State.RCDATA,\n    RAWTEXT: State.RAWTEXT,\n    SCRIPT_DATA: State.SCRIPT_DATA,\n    PLAINTEXT: State.PLAINTEXT,\n    CDATA_SECTION: State.CDATA_SECTION,\n};\n//Utils\n//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline\n//this functions if they will be situated in another module due to context switch.\n//Always perform inlining check before modifying this functions ('node --trace-inlining').\nfunction isAsciiDigit(cp) {\n    return cp >= $.DIGIT_0 && cp <= $.DIGIT_9;\n}\nfunction isAsciiUpper(cp) {\n    return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_Z;\n}\nfunction isAsciiLower(cp) {\n    return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_Z;\n}\nfunction isAsciiLetter(cp) {\n    return isAsciiLower(cp) || isAsciiUpper(cp);\n}\nfunction isAsciiAlphaNumeric(cp) {\n    return isAsciiLetter(cp) || isAsciiDigit(cp);\n}\nfunction toAsciiLower(cp) {\n    return cp + 32;\n}\nfunction isWhitespace(cp) {\n    return cp === $.SPACE || cp === $.LINE_FEED || cp === $.TABULATION || cp === $.FORM_FEED;\n}\nfunction isScriptDataDoubleEscapeSequenceEnd(cp) {\n    return isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN;\n}\nfunction getErrorForNumericCharacterReference(code) {\n    if (code === $.NULL) {\n        return ERR.nullCharacterReference;\n    }\n    else if (code > 1114111) {\n        return ERR.characterReferenceOutsideUnicodeRange;\n    }\n    else if (isSurrogate(code)) {\n        return ERR.surrogateCharacterReference;\n    }\n    else if (isUndefinedCodePoint(code)) {\n        return ERR.noncharacterCharacterReference;\n    }\n    else if (isControlCodePoint(code) || code === $.CARRIAGE_RETURN) {\n        return ERR.controlCharacterReference;\n    }\n    return null;\n}\n//Tokenizer\nexport class Tokenizer {\n    constructor(options, handler) {\n        this.options = options;\n        this.handler = handler;\n        this.paused = false;\n        /** Ensures that the parsing loop isn't run multiple times at once. */\n        this.inLoop = false;\n        /**\n         * Indicates that the current adjusted node exists, is not an element in the HTML namespace,\n         * and that it is not an integration point for either MathML or HTML.\n         *\n         * @see {@link https://html.spec.whatwg.org/multipage/parsing.html#tree-construction}\n         */\n        this.inForeignNode = false;\n        this.lastStartTagName = '';\n        this.active = false;\n        this.state = State.DATA;\n        this.returnState = State.DATA;\n        this.entityStartPos = 0;\n        this.consumedAfterSnapshot = -1;\n        this.currentCharacterToken = null;\n        this.currentToken = null;\n        this.currentAttr = { name: '', value: '' };\n        this.preprocessor = new Preprocessor(handler);\n        this.currentLocation = this.getCurrentLocation(-1);\n        this.entityDecoder = new EntityDecoder(htmlDecodeTree, (cp, consumed) => {\n            // Note: Set `pos` _before_ flushing, as flushing might drop\n            // the current chunk and invalidate `entityStartPos`.\n            this.preprocessor.pos = this.entityStartPos + consumed - 1;\n            this._flushCodePointConsumedAsCharacterReference(cp);\n        }, handler.onParseError\n            ? {\n                missingSemicolonAfterCharacterReference: () => {\n                    this._err(ERR.missingSemicolonAfterCharacterReference, 1);\n                },\n                absenceOfDigitsInNumericCharacterReference: (consumed) => {\n                    this._err(ERR.absenceOfDigitsInNumericCharacterReference, this.entityStartPos - this.preprocessor.pos + consumed);\n                },\n                validateNumericCharacterReference: (code) => {\n                    const error = getErrorForNumericCharacterReference(code);\n                    if (error)\n                        this._err(error, 1);\n                },\n            }\n            : undefined);\n    }\n    //Errors\n    _err(code, cpOffset = 0) {\n        var _a, _b;\n        (_b = (_a = this.handler).onParseError) === null || _b === void 0 ? void 0 : _b.call(_a, this.preprocessor.getError(code, cpOffset));\n    }\n    // NOTE: `offset` may never run across line boundaries.\n    getCurrentLocation(offset) {\n        if (!this.options.sourceCodeLocationInfo) {\n            return null;\n        }\n        return {\n            startLine: this.preprocessor.line,\n            startCol: this.preprocessor.col - offset,\n            startOffset: this.preprocessor.offset - offset,\n            endLine: -1,\n            endCol: -1,\n            endOffset: -1,\n        };\n    }\n    _runParsingLoop() {\n        if (this.inLoop)\n            return;\n        this.inLoop = true;\n        while (this.active && !this.paused) {\n            this.consumedAfterSnapshot = 0;\n            const cp = this._consume();\n            if (!this._ensureHibernation()) {\n                this._callState(cp);\n            }\n        }\n        this.inLoop = false;\n    }\n    //API\n    pause() {\n        this.paused = true;\n    }\n    resume(writeCallback) {\n        if (!this.paused) {\n            throw new Error('Parser was already resumed');\n        }\n        this.paused = false;\n        // Necessary for synchronous resume.\n        if (this.inLoop)\n            return;\n        this._runParsingLoop();\n        if (!this.paused) {\n            writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();\n        }\n    }\n    write(chunk, isLastChunk, writeCallback) {\n        this.active = true;\n        this.preprocessor.write(chunk, isLastChunk);\n        this._runParsingLoop();\n        if (!this.paused) {\n            writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();\n        }\n    }\n    insertHtmlAtCurrentPos(chunk) {\n        this.active = true;\n        this.preprocessor.insertHtmlAtCurrentPos(chunk);\n        this._runParsingLoop();\n    }\n    //Hibernation\n    _ensureHibernation() {\n        if (this.preprocessor.endOfChunkHit) {\n            this.preprocessor.retreat(this.consumedAfterSnapshot);\n            this.consumedAfterSnapshot = 0;\n            this.active = false;\n            return true;\n        }\n        return false;\n    }\n    //Consumption\n    _consume() {\n        this.consumedAfterSnapshot++;\n        return this.preprocessor.advance();\n    }\n    _advanceBy(count) {\n        this.consumedAfterSnapshot += count;\n        for (let i = 0; i < count; i++) {\n            this.preprocessor.advance();\n        }\n    }\n    _consumeSequenceIfMatch(pattern, caseSensitive) {\n        if (this.preprocessor.startsWith(pattern, caseSensitive)) {\n            // We will already have consumed one character before calling this method.\n            this._advanceBy(pattern.length - 1);\n            return true;\n        }\n        return false;\n    }\n    //Token creation\n    _createStartTagToken() {\n        this.currentToken = {\n            type: TokenType.START_TAG,\n            tagName: '',\n            tagID: TAG_ID.UNKNOWN,\n            selfClosing: false,\n            ackSelfClosing: false,\n            attrs: [],\n            location: this.getCurrentLocation(1),\n        };\n    }\n    _createEndTagToken() {\n        this.currentToken = {\n            type: TokenType.END_TAG,\n            tagName: '',\n            tagID: TAG_ID.UNKNOWN,\n            selfClosing: false,\n            ackSelfClosing: false,\n            attrs: [],\n            location: this.getCurrentLocation(2),\n        };\n    }\n    _createCommentToken(offset) {\n        this.currentToken = {\n            type: TokenType.COMMENT,\n            data: '',\n            location: this.getCurrentLocation(offset),\n        };\n    }\n    _createDoctypeToken(initialName) {\n        this.currentToken = {\n            type: TokenType.DOCTYPE,\n            name: initialName,\n            forceQuirks: false,\n            publicId: null,\n            systemId: null,\n            location: this.currentLocation,\n        };\n    }\n    _createCharacterToken(type, chars) {\n        this.currentCharacterToken = {\n            type,\n            chars,\n            location: this.currentLocation,\n        };\n    }\n    //Tag attributes\n    _createAttr(attrNameFirstCh) {\n        this.currentAttr = {\n            name: attrNameFirstCh,\n            value: '',\n        };\n        this.currentLocation = this.getCurrentLocation(0);\n    }\n    _leaveAttrName() {\n        var _a;\n        var _b;\n        const token = this.currentToken;\n        if (getTokenAttr(token, this.currentAttr.name) === null) {\n            token.attrs.push(this.currentAttr);\n            if (token.location && this.currentLocation) {\n                const attrLocations = ((_a = (_b = token.location).attrs) !== null && _a !== void 0 ? _a : (_b.attrs = Object.create(null)));\n                attrLocations[this.currentAttr.name] = this.currentLocation;\n                // Set end location\n                this._leaveAttrValue();\n            }\n        }\n        else {\n            this._err(ERR.duplicateAttribute);\n        }\n    }\n    _leaveAttrValue() {\n        if (this.currentLocation) {\n            this.currentLocation.endLine = this.preprocessor.line;\n            this.currentLocation.endCol = this.preprocessor.col;\n            this.currentLocation.endOffset = this.preprocessor.offset;\n        }\n    }\n    //Token emission\n    prepareToken(ct) {\n        this._emitCurrentCharacterToken(ct.location);\n        this.currentToken = null;\n        if (ct.location) {\n            ct.location.endLine = this.preprocessor.line;\n            ct.location.endCol = this.preprocessor.col + 1;\n            ct.location.endOffset = this.preprocessor.offset + 1;\n        }\n        this.currentLocation = this.getCurrentLocation(-1);\n    }\n    emitCurrentTagToken() {\n        const ct = this.currentToken;\n        this.prepareToken(ct);\n        ct.tagID = getTagID(ct.tagName);\n        if (ct.type === TokenType.START_TAG) {\n            this.lastStartTagName = ct.tagName;\n            this.handler.onStartTag(ct);\n        }\n        else {\n            if (ct.attrs.length > 0) {\n                this._err(ERR.endTagWithAttributes);\n            }\n            if (ct.selfClosing) {\n                this._err(ERR.endTagWithTrailingSolidus);\n            }\n            this.handler.onEndTag(ct);\n        }\n        this.preprocessor.dropParsedChunk();\n    }\n    emitCurrentComment(ct) {\n        this.prepareToken(ct);\n        this.handler.onComment(ct);\n        this.preprocessor.dropParsedChunk();\n    }\n    emitCurrentDoctype(ct) {\n        this.prepareToken(ct);\n        this.handler.onDoctype(ct);\n        this.preprocessor.dropParsedChunk();\n    }\n    _emitCurrentCharacterToken(nextLocation) {\n        if (this.currentCharacterToken) {\n            //NOTE: if we have a pending character token, make it's end location equal to the\n            //current token's start location.\n            if (nextLocation && this.currentCharacterToken.location) {\n                this.currentCharacterToken.location.endLine = nextLocation.startLine;\n                this.currentCharacterToken.location.endCol = nextLocation.startCol;\n                this.currentCharacterToken.location.endOffset = nextLocation.startOffset;\n            }\n            switch (this.currentCharacterToken.type) {\n                case TokenType.CHARACTER: {\n                    this.handler.onCharacter(this.currentCharacterToken);\n                    break;\n                }\n                case TokenType.NULL_CHARACTER: {\n                    this.handler.onNullCharacter(this.currentCharacterToken);\n                    break;\n                }\n                case TokenType.WHITESPACE_CHARACTER: {\n                    this.handler.onWhitespaceCharacter(this.currentCharacterToken);\n                    break;\n                }\n            }\n            this.currentCharacterToken = null;\n        }\n    }\n    _emitEOFToken() {\n        const location = this.getCurrentLocation(0);\n        if (location) {\n            location.endLine = location.startLine;\n            location.endCol = location.startCol;\n            location.endOffset = location.startOffset;\n        }\n        this._emitCurrentCharacterToken(location);\n        this.handler.onEof({ type: TokenType.EOF, location });\n        this.active = false;\n    }\n    //Characters emission\n    //OPTIMIZATION: The specification uses only one type of character token (one token per character).\n    //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.\n    //If we have a sequence of characters that belong to the same group, the parser can process it\n    //as a single solid character token.\n    //So, there are 3 types of character tokens in parse5:\n    //1)TokenType.NULL_CHARACTER - \\u0000-character sequences (e.g. '\\u0000\\u0000\\u0000')\n    //2)TokenType.WHITESPACE_CHARACTER - any whitespace/new-line character sequences (e.g. '\\n  \\r\\t   \\f')\n    //3)TokenType.CHARACTER - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')\n    _appendCharToCurrentCharacterToken(type, ch) {\n        if (this.currentCharacterToken) {\n            if (this.currentCharacterToken.type === type) {\n                this.currentCharacterToken.chars += ch;\n                return;\n            }\n            else {\n                this.currentLocation = this.getCurrentLocation(0);\n                this._emitCurrentCharacterToken(this.currentLocation);\n                this.preprocessor.dropParsedChunk();\n            }\n        }\n        this._createCharacterToken(type, ch);\n    }\n    _emitCodePoint(cp) {\n        const type = isWhitespace(cp)\n            ? TokenType.WHITESPACE_CHARACTER\n            : cp === $.NULL\n                ? TokenType.NULL_CHARACTER\n                : TokenType.CHARACTER;\n        this._appendCharToCurrentCharacterToken(type, String.fromCodePoint(cp));\n    }\n    //NOTE: used when we emit characters explicitly.\n    //This is always for non-whitespace and non-null characters, which allows us to avoid additional checks.\n    _emitChars(ch) {\n        this._appendCharToCurrentCharacterToken(TokenType.CHARACTER, ch);\n    }\n    // Character reference helpers\n    _startCharacterReference() {\n        this.returnState = this.state;\n        this.state = State.CHARACTER_REFERENCE;\n        this.entityStartPos = this.preprocessor.pos;\n        this.entityDecoder.startEntity(this._isCharacterReferenceInAttribute() ? DecodingMode.Attribute : DecodingMode.Legacy);\n    }\n    _isCharacterReferenceInAttribute() {\n        return (this.returnState === State.ATTRIBUTE_VALUE_DOUBLE_QUOTED ||\n            this.returnState === State.ATTRIBUTE_VALUE_SINGLE_QUOTED ||\n            this.returnState === State.ATTRIBUTE_VALUE_UNQUOTED);\n    }\n    _flushCodePointConsumedAsCharacterReference(cp) {\n        if (this._isCharacterReferenceInAttribute()) {\n            this.currentAttr.value += String.fromCodePoint(cp);\n        }\n        else {\n            this._emitCodePoint(cp);\n        }\n    }\n    // Calling states this way turns out to be much faster than any other approach.\n    _callState(cp) {\n        switch (this.state) {\n            case State.DATA: {\n                this._stateData(cp);\n                break;\n            }\n            case State.RCDATA: {\n                this._stateRcdata(cp);\n                break;\n            }\n            case State.RAWTEXT: {\n                this._stateRawtext(cp);\n                break;\n            }\n            case State.SCRIPT_DATA: {\n                this._stateScriptData(cp);\n                break;\n            }\n            case State.PLAINTEXT: {\n                this._statePlaintext(cp);\n                break;\n            }\n            case State.TAG_OPEN: {\n                this._stateTagOpen(cp);\n                break;\n            }\n            case State.END_TAG_OPEN: {\n                this._stateEndTagOpen(cp);\n                break;\n            }\n            case State.TAG_NAME: {\n                this._stateTagName(cp);\n                break;\n            }\n            case State.RCDATA_LESS_THAN_SIGN: {\n                this._stateRcdataLessThanSign(cp);\n                break;\n            }\n            case State.RCDATA_END_TAG_OPEN: {\n                this._stateRcdataEndTagOpen(cp);\n                break;\n            }\n            case State.RCDATA_END_TAG_NAME: {\n                this._stateRcdataEndTagName(cp);\n                break;\n            }\n            case State.RAWTEXT_LESS_THAN_SIGN: {\n                this._stateRawtextLessThanSign(cp);\n                break;\n            }\n            case State.RAWTEXT_END_TAG_OPEN: {\n                this._stateRawtextEndTagOpen(cp);\n                break;\n            }\n            case State.RAWTEXT_END_TAG_NAME: {\n                this._stateRawtextEndTagName(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_LESS_THAN_SIGN: {\n                this._stateScriptDataLessThanSign(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_END_TAG_OPEN: {\n                this._stateScriptDataEndTagOpen(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_END_TAG_NAME: {\n                this._stateScriptDataEndTagName(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPE_START: {\n                this._stateScriptDataEscapeStart(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPE_START_DASH: {\n                this._stateScriptDataEscapeStartDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED: {\n                this._stateScriptDataEscaped(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_DASH: {\n                this._stateScriptDataEscapedDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_DASH_DASH: {\n                this._stateScriptDataEscapedDashDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN: {\n                this._stateScriptDataEscapedLessThanSign(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN: {\n                this._stateScriptDataEscapedEndTagOpen(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_END_TAG_NAME: {\n                this._stateScriptDataEscapedEndTagName(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPE_START: {\n                this._stateScriptDataDoubleEscapeStart(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED: {\n                this._stateScriptDataDoubleEscaped(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH: {\n                this._stateScriptDataDoubleEscapedDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH: {\n                this._stateScriptDataDoubleEscapedDashDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN: {\n                this._stateScriptDataDoubleEscapedLessThanSign(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPE_END: {\n                this._stateScriptDataDoubleEscapeEnd(cp);\n                break;\n            }\n            case State.BEFORE_ATTRIBUTE_NAME: {\n                this._stateBeforeAttributeName(cp);\n                break;\n            }\n            case State.ATTRIBUTE_NAME: {\n                this._stateAttributeName(cp);\n                break;\n            }\n            case State.AFTER_ATTRIBUTE_NAME: {\n                this._stateAfterAttributeName(cp);\n                break;\n            }\n            case State.BEFORE_ATTRIBUTE_VALUE: {\n                this._stateBeforeAttributeValue(cp);\n                break;\n            }\n            case State.ATTRIBUTE_VALUE_DOUBLE_QUOTED: {\n                this._stateAttributeValueDoubleQuoted(cp);\n                break;\n            }\n            case State.ATTRIBUTE_VALUE_SINGLE_QUOTED: {\n                this._stateAttributeValueSingleQuoted(cp);\n                break;\n            }\n            case State.ATTRIBUTE_VALUE_UNQUOTED: {\n                this._stateAttributeValueUnquoted(cp);\n                break;\n            }\n            case State.AFTER_ATTRIBUTE_VALUE_QUOTED: {\n                this._stateAfterAttributeValueQuoted(cp);\n                break;\n            }\n            case State.SELF_CLOSING_START_TAG: {\n                this._stateSelfClosingStartTag(cp);\n                break;\n            }\n            case State.BOGUS_COMMENT: {\n                this._stateBogusComment(cp);\n                break;\n            }\n            case State.MARKUP_DECLARATION_OPEN: {\n                this._stateMarkupDeclarationOpen(cp);\n                break;\n            }\n            case State.COMMENT_START: {\n                this._stateCommentStart(cp);\n                break;\n            }\n            case State.COMMENT_START_DASH: {\n                this._stateCommentStartDash(cp);\n                break;\n            }\n            case State.COMMENT: {\n                this._stateComment(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN: {\n                this._stateCommentLessThanSign(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN_BANG: {\n                this._stateCommentLessThanSignBang(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN_BANG_DASH: {\n                this._stateCommentLessThanSignBangDash(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH: {\n                this._stateCommentLessThanSignBangDashDash(cp);\n                break;\n            }\n            case State.COMMENT_END_DASH: {\n                this._stateCommentEndDash(cp);\n                break;\n            }\n            case State.COMMENT_END: {\n                this._stateCommentEnd(cp);\n                break;\n            }\n            case State.COMMENT_END_BANG: {\n                this._stateCommentEndBang(cp);\n                break;\n            }\n            case State.DOCTYPE: {\n                this._stateDoctype(cp);\n                break;\n            }\n            case State.BEFORE_DOCTYPE_NAME: {\n                this._stateBeforeDoctypeName(cp);\n                break;\n            }\n            case State.DOCTYPE_NAME: {\n                this._stateDoctypeName(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_NAME: {\n                this._stateAfterDoctypeName(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_PUBLIC_KEYWORD: {\n                this._stateAfterDoctypePublicKeyword(cp);\n                break;\n            }\n            case State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER: {\n                this._stateBeforeDoctypePublicIdentifier(cp);\n                break;\n            }\n            case State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED: {\n                this._stateDoctypePublicIdentifierDoubleQuoted(cp);\n                break;\n            }\n            case State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED: {\n                this._stateDoctypePublicIdentifierSingleQuoted(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER: {\n                this._stateAfterDoctypePublicIdentifier(cp);\n                break;\n            }\n            case State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS: {\n                this._stateBetweenDoctypePublicAndSystemIdentifiers(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_SYSTEM_KEYWORD: {\n                this._stateAfterDoctypeSystemKeyword(cp);\n                break;\n            }\n            case State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER: {\n                this._stateBeforeDoctypeSystemIdentifier(cp);\n                break;\n            }\n            case State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED: {\n                this._stateDoctypeSystemIdentifierDoubleQuoted(cp);\n                break;\n            }\n            case State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED: {\n                this._stateDoctypeSystemIdentifierSingleQuoted(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER: {\n                this._stateAfterDoctypeSystemIdentifier(cp);\n                break;\n            }\n            case State.BOGUS_DOCTYPE: {\n                this._stateBogusDoctype(cp);\n                break;\n            }\n            case State.CDATA_SECTION: {\n                this._stateCdataSection(cp);\n                break;\n            }\n            case State.CDATA_SECTION_BRACKET: {\n                this._stateCdataSectionBracket(cp);\n                break;\n            }\n            case State.CDATA_SECTION_END: {\n                this._stateCdataSectionEnd(cp);\n                break;\n            }\n            case State.CHARACTER_REFERENCE: {\n                this._stateCharacterReference();\n                break;\n            }\n            case State.AMBIGUOUS_AMPERSAND: {\n                this._stateAmbiguousAmpersand(cp);\n                break;\n            }\n            default: {\n                throw new Error('Unknown state');\n            }\n        }\n    }\n    // State machine\n    // Data state\n    //------------------------------------------------------------------\n    _stateData(cp) {\n        switch (cp) {\n            case $.LESS_THAN_SIGN: {\n                this.state = State.TAG_OPEN;\n                break;\n            }\n            case $.AMPERSAND: {\n                this._startCharacterReference();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitCodePoint(cp);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    //  RCDATA state\n    //------------------------------------------------------------------\n    _stateRcdata(cp) {\n        switch (cp) {\n            case $.AMPERSAND: {\n                this._startCharacterReference();\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.RCDATA_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // RAWTEXT state\n    //------------------------------------------------------------------\n    _stateRawtext(cp) {\n        switch (cp) {\n            case $.LESS_THAN_SIGN: {\n                this.state = State.RAWTEXT_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data state\n    //------------------------------------------------------------------\n    _stateScriptData(cp) {\n        switch (cp) {\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // PLAINTEXT state\n    //------------------------------------------------------------------\n    _statePlaintext(cp) {\n        switch (cp) {\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Tag open state\n    //------------------------------------------------------------------\n    _stateTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this._createStartTagToken();\n            this.state = State.TAG_NAME;\n            this._stateTagName(cp);\n        }\n        else\n            switch (cp) {\n                case $.EXCLAMATION_MARK: {\n                    this.state = State.MARKUP_DECLARATION_OPEN;\n                    break;\n                }\n                case $.SOLIDUS: {\n                    this.state = State.END_TAG_OPEN;\n                    break;\n                }\n                case $.QUESTION_MARK: {\n                    this._err(ERR.unexpectedQuestionMarkInsteadOfTagName);\n                    this._createCommentToken(1);\n                    this.state = State.BOGUS_COMMENT;\n                    this._stateBogusComment(cp);\n                    break;\n                }\n                case $.EOF: {\n                    this._err(ERR.eofBeforeTagName);\n                    this._emitChars('<');\n                    this._emitEOFToken();\n                    break;\n                }\n                default: {\n                    this._err(ERR.invalidFirstCharacterOfTagName);\n                    this._emitChars('<');\n                    this.state = State.DATA;\n                    this._stateData(cp);\n                }\n            }\n    }\n    // End tag open state\n    //------------------------------------------------------------------\n    _stateEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this.state = State.TAG_NAME;\n            this._stateTagName(cp);\n        }\n        else\n            switch (cp) {\n                case $.GREATER_THAN_SIGN: {\n                    this._err(ERR.missingEndTagName);\n                    this.state = State.DATA;\n                    break;\n                }\n                case $.EOF: {\n                    this._err(ERR.eofBeforeTagName);\n                    this._emitChars('</');\n                    this._emitEOFToken();\n                    break;\n                }\n                default: {\n                    this._err(ERR.invalidFirstCharacterOfTagName);\n                    this._createCommentToken(2);\n                    this.state = State.BOGUS_COMMENT;\n                    this._stateBogusComment(cp);\n                }\n            }\n    }\n    // Tag name state\n    //------------------------------------------------------------------\n    _stateTagName(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                break;\n            }\n            case $.SOLIDUS: {\n                this.state = State.SELF_CLOSING_START_TAG;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.tagName += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.tagName += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n            }\n        }\n    }\n    // RCDATA less-than sign state\n    //------------------------------------------------------------------\n    _stateRcdataLessThanSign(cp) {\n        if (cp === $.SOLIDUS) {\n            this.state = State.RCDATA_END_TAG_OPEN;\n        }\n        else {\n            this._emitChars('<');\n            this.state = State.RCDATA;\n            this._stateRcdata(cp);\n        }\n    }\n    // RCDATA end tag open state\n    //------------------------------------------------------------------\n    _stateRcdataEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.RCDATA_END_TAG_NAME;\n            this._stateRcdataEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.RCDATA;\n            this._stateRcdata(cp);\n        }\n    }\n    handleSpecialEndTag(_cp) {\n        if (!this.preprocessor.startsWith(this.lastStartTagName, false)) {\n            return !this._ensureHibernation();\n        }\n        this._createEndTagToken();\n        const token = this.currentToken;\n        token.tagName = this.lastStartTagName;\n        const cp = this.preprocessor.peek(this.lastStartTagName.length);\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this._advanceBy(this.lastStartTagName.length);\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                return false;\n            }\n            case $.SOLIDUS: {\n                this._advanceBy(this.lastStartTagName.length);\n                this.state = State.SELF_CLOSING_START_TAG;\n                return false;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._advanceBy(this.lastStartTagName.length);\n                this.emitCurrentTagToken();\n                this.state = State.DATA;\n                return false;\n            }\n            default: {\n                return !this._ensureHibernation();\n            }\n        }\n    }\n    // RCDATA end tag name state\n    //------------------------------------------------------------------\n    _stateRcdataEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.RCDATA;\n            this._stateRcdata(cp);\n        }\n    }\n    // RAWTEXT less-than sign state\n    //------------------------------------------------------------------\n    _stateRawtextLessThanSign(cp) {\n        if (cp === $.SOLIDUS) {\n            this.state = State.RAWTEXT_END_TAG_OPEN;\n        }\n        else {\n            this._emitChars('<');\n            this.state = State.RAWTEXT;\n            this._stateRawtext(cp);\n        }\n    }\n    // RAWTEXT end tag open state\n    //------------------------------------------------------------------\n    _stateRawtextEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.RAWTEXT_END_TAG_NAME;\n            this._stateRawtextEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.RAWTEXT;\n            this._stateRawtext(cp);\n        }\n    }\n    // RAWTEXT end tag name state\n    //------------------------------------------------------------------\n    _stateRawtextEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.RAWTEXT;\n            this._stateRawtext(cp);\n        }\n    }\n    // Script data less-than sign state\n    //------------------------------------------------------------------\n    _stateScriptDataLessThanSign(cp) {\n        switch (cp) {\n            case $.SOLIDUS: {\n                this.state = State.SCRIPT_DATA_END_TAG_OPEN;\n                break;\n            }\n            case $.EXCLAMATION_MARK: {\n                this.state = State.SCRIPT_DATA_ESCAPE_START;\n                this._emitChars('<!');\n                break;\n            }\n            default: {\n                this._emitChars('<');\n                this.state = State.SCRIPT_DATA;\n                this._stateScriptData(cp);\n            }\n        }\n    }\n    // Script data end tag open state\n    //------------------------------------------------------------------\n    _stateScriptDataEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.SCRIPT_DATA_END_TAG_NAME;\n            this._stateScriptDataEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data end tag name state\n    //------------------------------------------------------------------\n    _stateScriptDataEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data escape start state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapeStart(cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = State.SCRIPT_DATA_ESCAPE_START_DASH;\n            this._emitChars('-');\n        }\n        else {\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data escape start dash state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapeStartDash(cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;\n            this._emitChars('-');\n        }\n        else {\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data escaped state\n    //------------------------------------------------------------------\n    _stateScriptDataEscaped(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_ESCAPED_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data escaped dash state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedDash(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data escaped dash dash state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedDashDash(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA;\n                this._emitChars('>');\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data escaped less-than sign state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedLessThanSign(cp) {\n        if (cp === $.SOLIDUS) {\n            this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN;\n        }\n        else if (isAsciiLetter(cp)) {\n            this._emitChars('<');\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_START;\n            this._stateScriptDataDoubleEscapeStart(cp);\n        }\n        else {\n            this._emitChars('<');\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data escaped end tag open state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_NAME;\n            this._stateScriptDataEscapedEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data escaped end tag name state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data double escape start state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapeStart(cp) {\n        if (this.preprocessor.startsWith($$.SCRIPT, false) &&\n            isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek($$.SCRIPT.length))) {\n            this._emitCodePoint(cp);\n            for (let i = 0; i < $$.SCRIPT.length; i++) {\n                this._emitCodePoint(this._consume());\n            }\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n        }\n        else if (!this._ensureHibernation()) {\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data double escaped state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscaped(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n                this._emitChars('<');\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data double escaped dash state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapedDash(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n                this._emitChars('<');\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data double escaped dash dash state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapedDashDash(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n                this._emitChars('<');\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA;\n                this._emitChars('>');\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data double escaped less-than sign state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapedLessThanSign(cp) {\n        if (cp === $.SOLIDUS) {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_END;\n            this._emitChars('/');\n        }\n        else {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n            this._stateScriptDataDoubleEscaped(cp);\n        }\n    }\n    // Script data double escape end state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapeEnd(cp) {\n        if (this.preprocessor.startsWith($$.SCRIPT, false) &&\n            isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek($$.SCRIPT.length))) {\n            this._emitCodePoint(cp);\n            for (let i = 0; i < $$.SCRIPT.length; i++) {\n                this._emitCodePoint(this._consume());\n            }\n            this.state = State.SCRIPT_DATA_ESCAPED;\n        }\n        else if (!this._ensureHibernation()) {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n            this._stateScriptDataDoubleEscaped(cp);\n        }\n    }\n    // Before attribute name state\n    //------------------------------------------------------------------\n    _stateBeforeAttributeName(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.SOLIDUS:\n            case $.GREATER_THAN_SIGN:\n            case $.EOF: {\n                this.state = State.AFTER_ATTRIBUTE_NAME;\n                this._stateAfterAttributeName(cp);\n                break;\n            }\n            case $.EQUALS_SIGN: {\n                this._err(ERR.unexpectedEqualsSignBeforeAttributeName);\n                this._createAttr('=');\n                this.state = State.ATTRIBUTE_NAME;\n                break;\n            }\n            default: {\n                this._createAttr('');\n                this.state = State.ATTRIBUTE_NAME;\n                this._stateAttributeName(cp);\n            }\n        }\n    }\n    // Attribute name state\n    //------------------------------------------------------------------\n    _stateAttributeName(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED:\n            case $.SOLIDUS:\n            case $.GREATER_THAN_SIGN:\n            case $.EOF: {\n                this._leaveAttrName();\n                this.state = State.AFTER_ATTRIBUTE_NAME;\n                this._stateAfterAttributeName(cp);\n                break;\n            }\n            case $.EQUALS_SIGN: {\n                this._leaveAttrName();\n                this.state = State.BEFORE_ATTRIBUTE_VALUE;\n                break;\n            }\n            case $.QUOTATION_MARK:\n            case $.APOSTROPHE:\n            case $.LESS_THAN_SIGN: {\n                this._err(ERR.unexpectedCharacterInAttributeName);\n                this.currentAttr.name += String.fromCodePoint(cp);\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.currentAttr.name += REPLACEMENT_CHARACTER;\n                break;\n            }\n            default: {\n                this.currentAttr.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n            }\n        }\n    }\n    // After attribute name state\n    //------------------------------------------------------------------\n    _stateAfterAttributeName(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.SOLIDUS: {\n                this.state = State.SELF_CLOSING_START_TAG;\n                break;\n            }\n            case $.EQUALS_SIGN: {\n                this.state = State.BEFORE_ATTRIBUTE_VALUE;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._createAttr('');\n                this.state = State.ATTRIBUTE_NAME;\n                this._stateAttributeName(cp);\n            }\n        }\n    }\n    // Before attribute value state\n    //------------------------------------------------------------------\n    _stateBeforeAttributeValue(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                this.state = State.ATTRIBUTE_VALUE_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                this.state = State.ATTRIBUTE_VALUE_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingAttributeValue);\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            default: {\n                this.state = State.ATTRIBUTE_VALUE_UNQUOTED;\n                this._stateAttributeValueUnquoted(cp);\n            }\n        }\n    }\n    // Attribute value (double-quoted) state\n    //------------------------------------------------------------------\n    _stateAttributeValueDoubleQuoted(cp) {\n        switch (cp) {\n            case $.QUOTATION_MARK: {\n                this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;\n                break;\n            }\n            case $.AMPERSAND: {\n                this._startCharacterReference();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.currentAttr.value += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.currentAttr.value += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Attribute value (single-quoted) state\n    //------------------------------------------------------------------\n    _stateAttributeValueSingleQuoted(cp) {\n        switch (cp) {\n            case $.APOSTROPHE: {\n                this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;\n                break;\n            }\n            case $.AMPERSAND: {\n                this._startCharacterReference();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.currentAttr.value += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.currentAttr.value += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Attribute value (unquoted) state\n    //------------------------------------------------------------------\n    _stateAttributeValueUnquoted(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this._leaveAttrValue();\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                break;\n            }\n            case $.AMPERSAND: {\n                this._startCharacterReference();\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._leaveAttrValue();\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.currentAttr.value += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.QUOTATION_MARK:\n            case $.APOSTROPHE:\n            case $.LESS_THAN_SIGN:\n            case $.EQUALS_SIGN:\n            case $.GRAVE_ACCENT: {\n                this._err(ERR.unexpectedCharacterInUnquotedAttributeValue);\n                this.currentAttr.value += String.fromCodePoint(cp);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.currentAttr.value += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // After attribute value (quoted) state\n    //------------------------------------------------------------------\n    _stateAfterAttributeValueQuoted(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this._leaveAttrValue();\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                break;\n            }\n            case $.SOLIDUS: {\n                this._leaveAttrValue();\n                this.state = State.SELF_CLOSING_START_TAG;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._leaveAttrValue();\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingWhitespaceBetweenAttributes);\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                this._stateBeforeAttributeName(cp);\n            }\n        }\n    }\n    // Self-closing start tag state\n    //------------------------------------------------------------------\n    _stateSelfClosingStartTag(cp) {\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                const token = this.currentToken;\n                token.selfClosing = true;\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.unexpectedSolidusInTag);\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                this._stateBeforeAttributeName(cp);\n            }\n        }\n    }\n    // Bogus comment state\n    //------------------------------------------------------------------\n    _stateBogusComment(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case $.EOF: {\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.data += REPLACEMENT_CHARACTER;\n                break;\n            }\n            default: {\n                token.data += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Markup declaration open state\n    //------------------------------------------------------------------\n    _stateMarkupDeclarationOpen(cp) {\n        if (this._consumeSequenceIfMatch($$.DASH_DASH, true)) {\n            this._createCommentToken($$.DASH_DASH.length + 1);\n            this.state = State.COMMENT_START;\n        }\n        else if (this._consumeSequenceIfMatch($$.DOCTYPE, false)) {\n            // NOTE: Doctypes tokens are created without fixed offsets. We keep track of the moment a doctype *might* start here.\n            this.currentLocation = this.getCurrentLocation($$.DOCTYPE.length + 1);\n            this.state = State.DOCTYPE;\n        }\n        else if (this._consumeSequenceIfMatch($$.CDATA_START, true)) {\n            if (this.inForeignNode) {\n                this.state = State.CDATA_SECTION;\n            }\n            else {\n                this._err(ERR.cdataInHtmlContent);\n                this._createCommentToken($$.CDATA_START.length + 1);\n                this.currentToken.data = '[CDATA[';\n                this.state = State.BOGUS_COMMENT;\n            }\n        }\n        //NOTE: Sequence lookups can be abrupted by hibernation. In that case, lookup\n        //results are no longer valid and we will need to start over.\n        else if (!this._ensureHibernation()) {\n            this._err(ERR.incorrectlyOpenedComment);\n            this._createCommentToken(2);\n            this.state = State.BOGUS_COMMENT;\n            this._stateBogusComment(cp);\n        }\n    }\n    // Comment start state\n    //------------------------------------------------------------------\n    _stateCommentStart(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.COMMENT_START_DASH;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptClosingOfEmptyComment);\n                this.state = State.DATA;\n                const token = this.currentToken;\n                this.emitCurrentComment(token);\n                break;\n            }\n            default: {\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment start dash state\n    //------------------------------------------------------------------\n    _stateCommentStartDash(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.COMMENT_END;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptClosingOfEmptyComment);\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '-';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment state\n    //------------------------------------------------------------------\n    _stateComment(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.COMMENT_END_DASH;\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                token.data += '<';\n                this.state = State.COMMENT_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.data += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Comment less-than sign state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSign(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.EXCLAMATION_MARK: {\n                token.data += '!';\n                this.state = State.COMMENT_LESS_THAN_SIGN_BANG;\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                token.data += '<';\n                break;\n            }\n            default: {\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment less-than sign bang state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBang(cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH;\n        }\n        else {\n            this.state = State.COMMENT;\n            this._stateComment(cp);\n        }\n    }\n    // Comment less-than sign bang dash state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBangDash(cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH;\n        }\n        else {\n            this.state = State.COMMENT_END_DASH;\n            this._stateCommentEndDash(cp);\n        }\n    }\n    // Comment less-than sign bang dash dash state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBangDashDash(cp) {\n        if (cp !== $.GREATER_THAN_SIGN && cp !== $.EOF) {\n            this._err(ERR.nestedComment);\n        }\n        this.state = State.COMMENT_END;\n        this._stateCommentEnd(cp);\n    }\n    // Comment end dash state\n    //------------------------------------------------------------------\n    _stateCommentEndDash(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.COMMENT_END;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '-';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment end state\n    //------------------------------------------------------------------\n    _stateCommentEnd(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case $.EXCLAMATION_MARK: {\n                this.state = State.COMMENT_END_BANG;\n                break;\n            }\n            case $.HYPHEN_MINUS: {\n                token.data += '-';\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '--';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment end bang state\n    //------------------------------------------------------------------\n    _stateCommentEndBang(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                token.data += '--!';\n                this.state = State.COMMENT_END_DASH;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.incorrectlyClosedComment);\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '--!';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // DOCTYPE state\n    //------------------------------------------------------------------\n    _stateDoctype(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BEFORE_DOCTYPE_NAME;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.BEFORE_DOCTYPE_NAME;\n                this._stateBeforeDoctypeName(cp);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                this._createDoctypeToken(null);\n                const token = this.currentToken;\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingWhitespaceBeforeDoctypeName);\n                this.state = State.BEFORE_DOCTYPE_NAME;\n                this._stateBeforeDoctypeName(cp);\n            }\n        }\n    }\n    // Before DOCTYPE name state\n    //------------------------------------------------------------------\n    _stateBeforeDoctypeName(cp) {\n        if (isAsciiUpper(cp)) {\n            this._createDoctypeToken(String.fromCharCode(toAsciiLower(cp)));\n            this.state = State.DOCTYPE_NAME;\n        }\n        else\n            switch (cp) {\n                case $.SPACE:\n                case $.LINE_FEED:\n                case $.TABULATION:\n                case $.FORM_FEED: {\n                    // Ignore whitespace\n                    break;\n                }\n                case $.NULL: {\n                    this._err(ERR.unexpectedNullCharacter);\n                    this._createDoctypeToken(REPLACEMENT_CHARACTER);\n                    this.state = State.DOCTYPE_NAME;\n                    break;\n                }\n                case $.GREATER_THAN_SIGN: {\n                    this._err(ERR.missingDoctypeName);\n                    this._createDoctypeToken(null);\n                    const token = this.currentToken;\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this.state = State.DATA;\n                    break;\n                }\n                case $.EOF: {\n                    this._err(ERR.eofInDoctype);\n                    this._createDoctypeToken(null);\n                    const token = this.currentToken;\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n                default: {\n                    this._createDoctypeToken(String.fromCodePoint(cp));\n                    this.state = State.DOCTYPE_NAME;\n                }\n            }\n    }\n    // DOCTYPE name state\n    //------------------------------------------------------------------\n    _stateDoctypeName(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.AFTER_DOCTYPE_NAME;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.name += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n            }\n        }\n    }\n    // After DOCTYPE name state\n    //------------------------------------------------------------------\n    _stateAfterDoctypeName(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                if (this._consumeSequenceIfMatch($$.PUBLIC, false)) {\n                    this.state = State.AFTER_DOCTYPE_PUBLIC_KEYWORD;\n                }\n                else if (this._consumeSequenceIfMatch($$.SYSTEM, false)) {\n                    this.state = State.AFTER_DOCTYPE_SYSTEM_KEYWORD;\n                }\n                //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n                //results are no longer valid and we will need to start over.\n                else if (!this._ensureHibernation()) {\n                    this._err(ERR.invalidCharacterSequenceAfterDoctypeName);\n                    token.forceQuirks = true;\n                    this.state = State.BOGUS_DOCTYPE;\n                    this._stateBogusDoctype(cp);\n                }\n            }\n        }\n    }\n    // After DOCTYPE public keyword state\n    //------------------------------------------------------------------\n    _stateAfterDoctypePublicKeyword(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER;\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Before DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    _stateBeforeDoctypePublicIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // DOCTYPE public identifier (double-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypePublicIdentifierDoubleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.QUOTATION_MARK: {\n                this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.publicId += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.publicId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // DOCTYPE public identifier (single-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypePublicIdentifierSingleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.APOSTROPHE: {\n                this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.publicId += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.publicId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // After DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    _stateAfterDoctypePublicIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Between DOCTYPE public and system identifiers state\n    //------------------------------------------------------------------\n    _stateBetweenDoctypePublicAndSystemIdentifiers(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // After DOCTYPE system keyword state\n    //------------------------------------------------------------------\n    _stateAfterDoctypeSystemKeyword(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER;\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Before DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    _stateBeforeDoctypeSystemIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // DOCTYPE system identifier (double-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypeSystemIdentifierDoubleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.QUOTATION_MARK: {\n                this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.systemId += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.systemId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // DOCTYPE system identifier (single-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypeSystemIdentifierSingleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.APOSTROPHE: {\n                this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.systemId += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.systemId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // After DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    _stateAfterDoctypeSystemIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Bogus DOCTYPE state\n    //------------------------------------------------------------------\n    _stateBogusDoctype(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                break;\n            }\n            case $.EOF: {\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    // CDATA section state\n    //------------------------------------------------------------------\n    _stateCdataSection(cp) {\n        switch (cp) {\n            case $.RIGHT_SQUARE_BRACKET: {\n                this.state = State.CDATA_SECTION_BRACKET;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInCdata);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // CDATA section bracket state\n    //------------------------------------------------------------------\n    _stateCdataSectionBracket(cp) {\n        if (cp === $.RIGHT_SQUARE_BRACKET) {\n            this.state = State.CDATA_SECTION_END;\n        }\n        else {\n            this._emitChars(']');\n            this.state = State.CDATA_SECTION;\n            this._stateCdataSection(cp);\n        }\n    }\n    // CDATA section end state\n    //------------------------------------------------------------------\n    _stateCdataSectionEnd(cp) {\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                break;\n            }\n            case $.RIGHT_SQUARE_BRACKET: {\n                this._emitChars(']');\n                break;\n            }\n            default: {\n                this._emitChars(']]');\n                this.state = State.CDATA_SECTION;\n                this._stateCdataSection(cp);\n            }\n        }\n    }\n    // Character reference state\n    //------------------------------------------------------------------\n    _stateCharacterReference() {\n        let length = this.entityDecoder.write(this.preprocessor.html, this.preprocessor.pos);\n        if (length < 0) {\n            if (this.preprocessor.lastChunkWritten) {\n                length = this.entityDecoder.end();\n            }\n            else {\n                // Wait for the rest of the entity.\n                this.active = false;\n                // Mark the entire buffer as read.\n                this.preprocessor.pos = this.preprocessor.html.length - 1;\n                this.consumedAfterSnapshot = 0;\n                this.preprocessor.endOfChunkHit = true;\n                return;\n            }\n        }\n        if (length === 0) {\n            // This was not a valid entity. Go back to the beginning, and\n            // figure out what to do.\n            this.preprocessor.pos = this.entityStartPos;\n            this._flushCodePointConsumedAsCharacterReference($.AMPERSAND);\n            this.state =\n                !this._isCharacterReferenceInAttribute() && isAsciiAlphaNumeric(this.preprocessor.peek(1))\n                    ? State.AMBIGUOUS_AMPERSAND\n                    : this.returnState;\n        }\n        else {\n            // We successfully parsed an entity. Switch to the return state.\n            this.state = this.returnState;\n        }\n    }\n    // Ambiguos ampersand state\n    //------------------------------------------------------------------\n    _stateAmbiguousAmpersand(cp) {\n        if (isAsciiAlphaNumeric(cp)) {\n            this._flushCodePointConsumedAsCharacterReference(cp);\n        }\n        else {\n            if (cp === $.SEMICOLON) {\n                this._err(ERR.unknownNamedCharacterReference);\n            }\n            this.state = this.returnState;\n            this._callState(cp);\n        }\n    }\n}\n"],"names":["State","TokenizerMode","DATA","RCDATA","RAWTEXT","SCRIPT_DATA","PLAINTEXT","CDATA_SECTION","isAsciiUpper","cp","$","LATIN_CAPITAL_A","LATIN_CAPITAL_Z","isAsciiLetter","LATIN_SMALL_A","LATIN_SMALL_Z","isAsciiLower","isAsciiAlphaNumeric","DIGIT_0","DIGIT_9","isAsciiDigit","toAsciiLower","isWhitespace","SPACE","LINE_FEED","TABULATION","FORM_FEED","isScriptDataDoubleEscapeSequenceEnd","SOLIDUS","GREATER_THAN_SIGN","Tokenizer","constructor","options","handler","this","paused","inLoop","inForeignNode","lastStartTagName","active","state","returnState","entityStartPos","consumedAfterSnapshot","currentCharacterToken","currentToken","currentAttr","name","value","preprocessor","Preprocessor","currentLocation","getCurrentLocation","entityDecoder","EntityDecoder","htmlDecodeTree","consumed","pos","_flushCodePointConsumedAsCharacterReference","onParseError","missingSemicolonAfterCharacterReference","_err","ERR","absenceOfDigitsInNumericCharacterReference","validateNumericCharacterReference","code","error","NULL","nullCharacterReference","characterReferenceOutsideUnicodeRange","isSurrogate","surrogateCharacterReference","isUndefinedCodePoint","noncharacterCharacterReference","isControlCodePoint","CARRIAGE_RETURN","controlCharacterReference","getErrorForNumericCharacterReference","undefined","cpOffset","arguments","length","_a","_b","call","getError","offset","sourceCodeLocationInfo","startLine","line","startCol","col","startOffset","endLine","endCol","endOffset","_runParsingLoop","_consume","_ensureHibernation","_callState","pause","resume","writeCallback","Error","write","chunk","isLastChunk","insertHtmlAtCurrentPos","endOfChunkHit","retreat","advance","_advanceBy","count","i","_consumeSequenceIfMatch","pattern","caseSensitive","startsWith","_createStartTagToken","type","TokenType","START_TAG","tagName","tagID","TAG_ID","UNKNOWN","selfClosing","ackSelfClosing","attrs","location","_createEndTagToken","END_TAG","_createCommentToken","COMMENT","data","_createDoctypeToken","initialName","DOCTYPE","forceQuirks","publicId","systemId","_createCharacterToken","chars","_createAttr","attrNameFirstCh","_leaveAttrName","token","getTokenAttr","push","Object","create","_leaveAttrValue","duplicateAttribute","prepareToken","ct","_emitCurrentCharacterToken","emitCurrentTagToken","getTagID","onStartTag","endTagWithAttributes","endTagWithTrailingSolidus","onEndTag","dropParsedChunk","emitCurrentComment","onComment","emitCurrentDoctype","onDoctype","nextLocation","CHARACTER","onCharacter","NULL_CHARACTER","onNullCharacter","WHITESPACE_CHARACTER","onWhitespaceCharacter","_emitEOFToken","onEof","EOF","_appendCharToCurrentCharacterToken","ch","_emitCodePoint","String","fromCodePoint","_emitChars","_startCharacterReference","CHARACTER_REFERENCE","startEntity","_isCharacterReferenceInAttribute","DecodingMode","Attribute","Legacy","ATTRIBUTE_VALUE_DOUBLE_QUOTED","ATTRIBUTE_VALUE_SINGLE_QUOTED","ATTRIBUTE_VALUE_UNQUOTED","_stateData","_stateRcdata","_stateRawtext","_stateScriptData","_statePlaintext","TAG_OPEN","_stateTagOpen","END_TAG_OPEN","_stateEndTagOpen","TAG_NAME","_stateTagName","RCDATA_LESS_THAN_SIGN","_stateRcdataLessThanSign","RCDATA_END_TAG_OPEN","_stateRcdataEndTagOpen","RCDATA_END_TAG_NAME","_stateRcdataEndTagName","RAWTEXT_LESS_THAN_SIGN","_stateRawtextLessThanSign","RAWTEXT_END_TAG_OPEN","_stateRawtextEndTagOpen","RAWTEXT_END_TAG_NAME","_stateRawtextEndTagName","SCRIPT_DATA_LESS_THAN_SIGN","_stateScriptDataLessThanSign","SCRIPT_DATA_END_TAG_OPEN","_stateScriptDataEndTagOpen","SCRIPT_DATA_END_TAG_NAME","_stateScriptDataEndTagName","SCRIPT_DATA_ESCAPE_START","_stateScriptDataEscapeStart","SCRIPT_DATA_ESCAPE_START_DASH","_stateScriptDataEscapeStartDash","SCRIPT_DATA_ESCAPED","_stateScriptDataEscaped","SCRIPT_DATA_ESCAPED_DASH","_stateScriptDataEscapedDash","SCRIPT_DATA_ESCAPED_DASH_DASH","_stateScriptDataEscapedDashDash","SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN","_stateScriptDataEscapedLessThanSign","SCRIPT_DATA_ESCAPED_END_TAG_OPEN","_stateScriptDataEscapedEndTagOpen","SCRIPT_DATA_ESCAPED_END_TAG_NAME","_stateScriptDataEscapedEndTagName","SCRIPT_DATA_DOUBLE_ESCAPE_START","_stateScriptDataDoubleEscapeStart","SCRIPT_DATA_DOUBLE_ESCAPED","_stateScriptDataDoubleEscaped","SCRIPT_DATA_DOUBLE_ESCAPED_DASH","_stateScriptDataDoubleEscapedDash","SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH","_stateScriptDataDoubleEscapedDashDash","SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN","_stateScriptDataDoubleEscapedLessThanSign","SCRIPT_DATA_DOUBLE_ESCAPE_END","_stateScriptDataDoubleEscapeEnd","BEFORE_ATTRIBUTE_NAME","_stateBeforeAttributeName","ATTRIBUTE_NAME","_stateAttributeName","AFTER_ATTRIBUTE_NAME","_stateAfterAttributeName","BEFORE_ATTRIBUTE_VALUE","_stateBeforeAttributeValue","_stateAttributeValueDoubleQuoted","_stateAttributeValueSingleQuoted","_stateAttributeValueUnquoted","AFTER_ATTRIBUTE_VALUE_QUOTED","_stateAfterAttributeValueQuoted","SELF_CLOSING_START_TAG","_stateSelfClosingStartTag","BOGUS_COMMENT","_stateBogusComment","MARKUP_DECLARATION_OPEN","_stateMarkupDeclarationOpen","COMMENT_START","_stateCommentStart","COMMENT_START_DASH","_stateCommentStartDash","_stateComment","COMMENT_LESS_THAN_SIGN","_stateCommentLessThanSign","COMMENT_LESS_THAN_SIGN_BANG","_stateCommentLessThanSignBang","COMMENT_LESS_THAN_SIGN_BANG_DASH","_stateCommentLessThanSignBangDash","COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH","_stateCommentLessThanSignBangDashDash","COMMENT_END_DASH","_stateCommentEndDash","COMMENT_END","_stateCommentEnd","COMMENT_END_BANG","_stateCommentEndBang","_stateDoctype","BEFORE_DOCTYPE_NAME","_stateBeforeDoctypeName","DOCTYPE_NAME","_stateDoctypeName","AFTER_DOCTYPE_NAME","_stateAfterDoctypeName","AFTER_DOCTYPE_PUBLIC_KEYWORD","_stateAfterDoctypePublicKeyword","BEFORE_DOCTYPE_PUBLIC_IDENTIFIER","_stateBeforeDoctypePublicIdentifier","DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED","_stateDoctypePublicIdentifierDoubleQuoted","DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED","_stateDoctypePublicIdentifierSingleQuoted","AFTER_DOCTYPE_PUBLIC_IDENTIFIER","_stateAfterDoctypePublicIdentifier","BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS","_stateBetweenDoctypePublicAndSystemIdentifiers","AFTER_DOCTYPE_SYSTEM_KEYWORD","_stateAfterDoctypeSystemKeyword","BEFORE_DOCTYPE_SYSTEM_IDENTIFIER","_stateBeforeDoctypeSystemIdentifier","DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED","_stateDoctypeSystemIdentifierDoubleQuoted","DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED","_stateDoctypeSystemIdentifierSingleQuoted","AFTER_DOCTYPE_SYSTEM_IDENTIFIER","_stateAfterDoctypeSystemIdentifier","BOGUS_DOCTYPE","_stateBogusDoctype","_stateCdataSection","CDATA_SECTION_BRACKET","_stateCdataSectionBracket","CDATA_SECTION_END","_stateCdataSectionEnd","_stateCharacterReference","AMBIGUOUS_AMPERSAND","_stateAmbiguousAmpersand","LESS_THAN_SIGN","AMPERSAND","unexpectedNullCharacter","REPLACEMENT_CHARACTER","EXCLAMATION_MARK","QUESTION_MARK","unexpectedQuestionMarkInsteadOfTagName","eofBeforeTagName","invalidFirstCharacterOfTagName","missingEndTagName","eofInTag","handleSpecialEndTag","_cp","peek","HYPHEN_MINUS","eofInScriptHtmlCommentLikeText","$$","SCRIPT","EQUALS_SIGN","unexpectedEqualsSignBeforeAttributeName","QUOTATION_MARK","APOSTROPHE","unexpectedCharacterInAttributeName","missingAttributeValue","GRAVE_ACCENT","unexpectedCharacterInUnquotedAttributeValue","missingWhitespaceBetweenAttributes","unexpectedSolidusInTag","DASH_DASH","CDATA_START","cdataInHtmlContent","incorrectlyOpenedComment","abruptClosingOfEmptyComment","eofInComment","nestedComment","incorrectlyClosedComment","eofInDoctype","missingWhitespaceBeforeDoctypeName","fromCharCode","missingDoctypeName","PUBLIC","SYSTEM","invalidCharacterSequenceAfterDoctypeName","missingWhitespaceAfterDoctypePublicKeyword","missingDoctypePublicIdentifier","missingQuoteBeforeDoctypePublicIdentifier","abruptDoctypePublicIdentifier","missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers","missingQuoteBeforeDoctypeSystemIdentifier","missingWhitespaceAfterDoctypeSystemKeyword","missingDoctypeSystemIdentifier","abruptDoctypeSystemIdentifier","unexpectedCharacterAfterDoctypeSystemIdentifier","RIGHT_SQUARE_BRACKET","eofInCdata","html","lastChunkWritten","end","SEMICOLON","unknownNamedCharacterReference"],"sourceRoot":""}