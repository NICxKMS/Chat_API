{"version":3,"file":"static/js/chat-input.9a794673.chunk.js","mappings":"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","sources":["components/chat/ChatInput/index.js"],"sourcesContent":["import { useState, useRef, useEffect, useCallback, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { PlusIcon, PaperAirplaneIcon, XIcon, CheckIcon,  KebabHorizontalIcon, ImageIcon,  SearchIcon, LightBulbIcon } from '@primer/octicons-react';\nimport styles from './ChatInput.module.css';\nimport { useChat } from '../../../contexts/ChatContext';\n\n/**\n * Reads a file and returns its base64 representation.\n * @param {File} file - The file to read.\n * @returns {Promise<string>} A promise resolving with the base64 data URL.\n */\nconst readFileAsBase64 = (file) => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = (error) => reject(error);\n    reader.readAsDataURL(file);\n  });\n};\n\n/**\n * Auto-resizing chat input component with image upload support\n * @param {Object} props - Component props\n * @param {Function} props.onSendMessage - Function to handle message sending\n * @param {Function} props.onNewChat - Function to trigger a new chat\n * @param {boolean} [props.disabled=false] - Whether the input is disabled\n * @param {Object} [props.selectedModel] - Currently selected model\n * @param {boolean} [props.isStaticLayout=false] - Flag indicating if the layout is static (empty chat)\n * @param {Object} [props.editingMessage=null] - Message being edited, or null if not in edit mode\n * @param {Function} [props.onCancelEdit] - Function to cancel edit mode\n * @param {boolean} [props.isStreaming=false] - Flag indicating if the input is in streaming mode\n * @param {Function} [props.toggleModelSelector] - Function to toggle model selector\n * @param {Function} [props.onFocus] - Function to call when input is focused\n * @returns {JSX.Element} - Rendered component\n */\nconst ChatInput = memo(({ \n  onSendMessage, \n  onNewChat, \n  disabled = false, \n  selectedModel, \n  isStaticLayout = false,\n  editingMessage = null,\n  onCancelEdit,\n  isStreaming = false,\n  toggleModelSelector,\n  onFocus\n}) => {\n  const [message, setMessage] = useState('');\n  const [selectedImages, setSelectedImages] = useState([]);\n  const textareaRef = useRef(null);\n  const fileInputRef = useRef(null);\n  const isEditing = !!editingMessage;\n  const [isMobile, setIsMobile] = useState(window.innerWidth <= 600);\n  const { isWaitingForResponse, stopGeneration } = useChat();\n  \n  // Set up window resize listener to detect mobile view\n  useEffect(() => {\n    const handleResize = () => {\n      setIsMobile(window.innerWidth <= 600);\n    };\n    \n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  \n  // Focus input on mount\n  useEffect(() => {\n    if (textareaRef.current) {\n      textareaRef.current.focus();\n    }\n  }, []);\n  \n  // Set message content when entering edit mode\n  useEffect(() => {\n    if (editingMessage) {\n      // Extract text content based on message structure\n      let textContent = '';\n      if (typeof editingMessage.content === 'string') {\n        textContent = editingMessage.content;\n      } else if (Array.isArray(editingMessage.content)) {\n        // Extract text from multimodal content\n        const textPart = editingMessage.content.find(part => part.type === 'text');\n        if (textPart) {\n          textContent = textPart.text || '';\n        }\n      }\n      \n      setMessage(textContent);\n      // Focus on textarea with slight delay to ensure it's rendered\n      setTimeout(() => {\n        if (textareaRef.current) {\n          textareaRef.current.focus();\n        }\n      }, 0);\n    }\n  }, [editingMessage]);\n  \n  // Auto-resize the textarea as content changes\n  const adjustTextareaHeight = useCallback(() => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n    \n    // Reset height to auto to get proper scrollHeight\n    textarea.style.height = 'auto';\n    \n    // Set height to scrollHeight (content height) + some padding\n    const newHeight = Math.min(textarea.scrollHeight + 2, 200);\n    textarea.style.height = `${newHeight}px`;\n\n    // Update the parent container\n    const inputContainer = textarea.closest('.inputContainer') || textarea.closest(`.${styles.inputContainer}`);\n    if (inputContainer) {\n      // The ResizeObserver in ChatContainer will detect this height change\n      inputContainer.style.height = 'auto';\n    }\n  }, []);\n  \n  // Update height when message changes\n  useEffect(() => {\n    adjustTextareaHeight();\n  }, [message, adjustTextareaHeight]);\n  \n  // Handle message change\n  const handleChange = (e) => {\n    setMessage(e.target.value);\n  };\n  \n  // Handle keydown events (Enter without Shift to send, Escape to cancel edit)\n  const handleKeyDown = (e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      // Only process if there is text and not waiting for a response\n      if (!isWaitingForResponse && (message.trim() || selectedImages.length > 0)) {\n        if (!selectedModel && toggleModelSelector) {\n          // If no model is selected, show the model selector\n          toggleModelSelector();\n        } else {\n          handleSend();\n        }\n      }\n      // No action for Enter key while waiting for response\n    } else if (isEditing && e.key === 'Escape') {\n      e.preventDefault();\n      handleCancelEdit();\n    }\n  };\n  \n  // Function to handle image selection\n  const handleImageSelection = async (event) => {\n    const files = Array.from(event.target.files);\n    if (!files.length) return;\n\n    // Limit the number of images (e.g., to 5)\n    const MAX_IMAGES = 5;\n    if (selectedImages.length + files.length > MAX_IMAGES) {\n      alert(`You can upload a maximum of ${MAX_IMAGES} images.`);\n      // Clear the file input value to allow re-selection of the same file if needed\n      if (fileInputRef.current) {\n         fileInputRef.current.value = \"\";\n      }\n      return;\n    }\n\n    try {\n      const imagePromises = files.map(async (file) => {\n        // Basic validation (type and size)\n        if (!file.type.startsWith('image/')) {\n            throw new Error(`File ${file.name} is not a valid image type.`);\n        }\n        const MAX_SIZE_MB = 5; // Example: 5MB limit per image\n        if (file.size > MAX_SIZE_MB * 1024 * 1024) {\n             throw new Error(`File ${file.name} exceeds the ${MAX_SIZE_MB}MB size limit.`);\n        }\n\n        const base64 = await readFileAsBase64(file);\n        return { name: file.name, url: base64 }; // Store name and base64 URL\n      });\n\n      const newImages = await Promise.all(imagePromises);\n      setSelectedImages((prevImages) => [...prevImages, ...newImages]);\n    } catch (error) {\n      console.error(\"Error processing images:\", error);\n      alert(`Error processing images: ${error.message}`);\n    }\n\n    // Clear the file input value to allow re-selection of the same file if needed\n     if (fileInputRef.current) {\n         fileInputRef.current.value = \"\";\n     }\n  };\n\n  // Handle clipboard paste events for images\n  const handlePaste = async (e) => {\n    if (isEditing) return; // Don't handle paste in edit mode\n    \n    const items = e.clipboardData?.items;\n    if (!items) return;\n    \n    // Find image items in the clipboard\n    const imageItems = Array.from(items).filter(item => item.type.startsWith('image/'));\n    if (imageItems.length === 0) return;\n    \n    // Limit the number of images (e.g., to 5)\n    const MAX_IMAGES = 5;\n    if (selectedImages.length + imageItems.length > MAX_IMAGES) {\n      alert(`You can upload a maximum of ${MAX_IMAGES} images.`);\n      return;\n    }\n    \n    try {\n      const imagePromises = imageItems.map(async (item) => {\n        const file = item.getAsFile();\n        // Basic validation (size)\n        const MAX_SIZE_MB = 5; // Example: 5MB limit per image\n        if (file.size > MAX_SIZE_MB * 1024 * 1024) {\n          throw new Error(`Pasted image exceeds the ${MAX_SIZE_MB}MB size limit.`);\n        }\n        \n        const base64 = await readFileAsBase64(file);\n        return { name: 'pasted-image-' + Date.now(), url: base64 };\n      });\n      \n      const newImages = await Promise.all(imagePromises);\n      setSelectedImages((prevImages) => [...prevImages, ...newImages]);\n      \n      // If a paste event is detected and handled as an image, prevent the default behavior\n      // to avoid also pasting the image as text\n      if (newImages.length > 0) {\n        e.preventDefault();\n      }\n    } catch (error) {\n      console.error(\"Error processing pasted images:\", error);\n      alert(`Error processing pasted images: ${error.message}`);\n    }\n  };\n\n  // Function to remove an image\n  const removeImage = (indexToRemove) => {\n    setSelectedImages((prevImages) => prevImages.filter((_, index) => index !== indexToRemove));\n  };\n\n  // Trigger hidden file input click\n  const triggerFileInput = () => {\n    fileInputRef.current?.click();\n  };\n\n  // Cancel edit mode\n  const handleCancelEdit = () => {\n    if (onCancelEdit) {\n      onCancelEdit();\n    }\n    setMessage('');\n  };\n\n  // Stop the response generation\n  const handleStop = () => {\n    stopGeneration();\n  };\n\n  // Send message and reset input\n  const handleSend = () => {\n    // Ensure there's either text or images to send, and not disabled\n    const hasText = message.trim().length > 0;\n    // In edit mode, we only support editing text, not adding images\n    const hasImages = !isEditing && selectedImages.length > 0;\n    \n    // If no model is selected but there's something to send, show model selector\n    if ((!hasText && !hasImages) || disabled) return;\n    \n    // If no model is selected, show model selector\n    if (!selectedModel && toggleModelSelector) {\n      toggleModelSelector();\n      return;\n    }\n\n    // ALWAYS construct payload as an array of parts\n    const contentPayload = [];\n\n    if (hasText) {\n      contentPayload.push({ type: 'text', text: message.trim() });\n    }\n\n    if (hasImages) {\n      selectedImages.forEach(img => {\n        contentPayload.push({ type: 'image_url', image_url: { url: img.url } });\n      });\n    }\n\n    // Only call onSendMessage if payload is not empty\n    if (contentPayload.length > 0) {\n      // If editing, pass the editing message as the second parameter  \n      onSendMessage(contentPayload, isEditing ? editingMessage : null);\n    }\n\n    // Reset state AFTER sending\n    setMessage('');\n    setSelectedImages([]);\n    \n    // Exit edit mode if we were editing\n    if (isEditing && onCancelEdit) {\n      onCancelEdit();\n    }\n\n    // Reset textarea height and focus\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      setTimeout(() => textareaRef.current?.focus(), 0);\n    }\n  };\n  \n  // Handle button click for send or stop\n  const handleButtonClick = (e) => {\n    // Prevent event bubbling\n    e.preventDefault();\n    e.stopPropagation();\n    \n    if (isWaitingForResponse) {\n      handleStop();\n    } else if (!selectedModel && (message.trim() || selectedImages.length > 0)) {\n      // If no model is selected but there's content to send, show model selector\n      if (toggleModelSelector) {\n        toggleModelSelector();\n      }\n    } else {\n      handleSend();\n    }\n    \n    // On mobile, blur the input to hide the keyboard after sending\n    if (isMobile && textareaRef.current) {\n      textareaRef.current.blur();\n    }\n  };\n  \n  // Determine placeholder text based on editing state\n  const placeholderText = isEditing \n    ? 'Edit your message...' \n    : isWaitingForResponse\n      ? 'Type your next message while waiting...'\n      : 'Ask anything';\n  \n  // Focus textarea and handle keyboard detection\n  useEffect(() => {\n    // This effect is for mobile keyboard detection\n    if (!isMobile) return;\n    \n    // Set up event listeners for detecting virtual keyboard\n    const detectKeyboard = () => {\n      // Consider keyboard open if window height significantly decreases\n      const isKeyboard = window.innerHeight < window.outerHeight * 0.75;\n      \n      // Add a class to the body element when keyboard is open\n      if (isKeyboard) {\n        document.body.classList.add('keyboard-open');\n      } else {\n        document.body.classList.remove('keyboard-open');\n      }\n    };\n    \n    const handleFocus = () => {\n      if (isMobile) {\n        document.body.classList.add('keyboard-open');\n        \n        // On some devices, we need to detect keyboard using window resizing\n        window.addEventListener('resize', detectKeyboard);\n      }\n      \n      // Call onFocus prop if provided\n      if (onFocus) {\n        onFocus();\n      }\n    };\n    \n    const handleBlur = () => {\n      if (isMobile) {\n        document.body.classList.remove('keyboard-open');\n        window.removeEventListener('resize', detectKeyboard);\n      }\n    };\n    \n    // Capture ref value in closure to avoid stale ref in cleanup function\n    const textarea = textareaRef.current;\n    \n    if (textarea) {\n      textarea.addEventListener('focus', handleFocus);\n      textarea.addEventListener('blur', handleBlur);\n    }\n    \n    return () => {\n      if (textarea) {\n        textarea.removeEventListener('focus', handleFocus);\n        textarea.removeEventListener('blur', handleBlur);\n      }\n      window.removeEventListener('resize', detectKeyboard);\n    };\n  }, [isMobile, textareaRef, onFocus]);\n  \n  // Auto-focus textarea when component mounts or app state changes\n  useEffect(() => {\n    // Focus the textarea when the component mounts\n    if (textareaRef.current) {\n      textareaRef.current.focus();\n    }\n  }, []);\n  \n  return (\n    <>\n      {/* Image Previews Container - Moved outside inputContainer */}\n      {selectedImages.length > 0 && (\n        <div className={styles.imagePreviewContainer}>\n          {selectedImages.map((image, index) => (\n            <div key={index} className={styles.imagePreviewWrapper}>\n              <img \n                src={image.url} \n                alt={`preview ${index}`} \n                className={styles.imagePreview} \n              />\n              <button \n                className={styles.removeImageButton} \n                onClick={() => removeImage(index)}\n                aria-label={`Remove image ${index + 1}`}\n                title={`Remove image ${index + 1}`}\n              >\n                <XIcon size={12} />\n              </button>\n            </div>\n          ))}\n        </div>\n      )}\n\n      <div className={`${styles.inputContainer} ${isEditing ? styles.editing : ''} ${isWaitingForResponse ? styles.waitingForResponse : ''} ${isMobile ? styles.mobileView : ''}`}>\n        {/* Hidden file input */}\n        <input\n          type=\"file\"\n          ref={fileInputRef}\n          style={{ display: 'none' }}\n          accept=\"image/jpeg, image/png, image/gif, image/webp\"\n          multiple\n          onChange={handleImageSelection}\n        />\n\n        {/* Text input area with send button inside */}\n        <div className={`${styles.inputWrapper} ${!selectedModel ? styles.noModelSelected : ''}`}>\n          <textarea\n            ref={textareaRef}\n            className={styles.chatInput}\n            placeholder={placeholderText}\n            value={message}\n            onChange={handleChange}\n            onKeyDown={handleKeyDown}\n            onPaste={handlePaste}\n            disabled={disabled}\n            rows={1}\n            aria-label=\"Chat message input\"\n          />\n          \n          {/* Send/Stop button positioned inside the textarea */}\n          <button\n            className={`${styles.sendButtonInline} ${isWaitingForResponse ? styles.stopButton : ''} ${!selectedModel ? styles.noModelSelected : ''}`}\n            onClick={handleButtonClick}\n            disabled={(!isWaitingForResponse && ((!message.trim() && selectedImages.length === 0) || disabled))}\n            aria-label={isWaitingForResponse ? \"Stop generation\" : !selectedModel ? \"Select model\" : isEditing ? \"Save edit\" : \"Send message\"}\n            title={isWaitingForResponse ? \"Stop generation\" : !selectedModel ? \"Select a model\" : isEditing ? \"Save edit (Enter)\" : \"Send message (Enter)\"}\n            type=\"button\"\n          >\n            {isWaitingForResponse ? (\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"21\" height=\"21\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\n              </svg>\n            ) : !selectedModel ? (\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <rect x=\"3\" y=\"3\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n                <rect x=\"7\" y=\"3\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n                <rect x=\"11\" y=\"3\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n                <rect x=\"3\" y=\"7\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n                <rect x=\"7\" y=\"7\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n                <rect x=\"11\" y=\"7\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n                <rect x=\"3\" y=\"11\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n                <rect x=\"7\" y=\"11\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n                <rect x=\"11\" y=\"11\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n              </svg>\n            ) : isEditing ? (\n              <CheckIcon size={21} />\n            ) : (\n              <PaperAirplaneIcon size={21} />\n            )}\n          </button>\n        </div>\n        \n        {/* Buttons in a single row */}\n        <div className={styles.actionRow}>\n          {/* Left side buttons */}\n          <div className={styles.leftButtons}>\n            {/* Upload button (Only when not editing) - moved to left side */}\n            {!isEditing && (\n              <button\n                className={styles.uploadButton}\n                onClick={toggleModelSelector ? (selectedModel ? triggerFileInput : toggleModelSelector) : triggerFileInput}\n                disabled={disabled}\n                aria-label={selectedModel?.capabilities?.includes('vision') ? \"Upload images\" : \"Select model for image upload\"}\n                title={selectedModel?.capabilities?.includes('vision') ? \"Upload images\" : \"Select model for image upload\"}\n                type=\"button\"\n              >\n                <ImageIcon size={16} />\n              </button>\n            )}\n            \n            <button\n              className={`${styles.textButton} ${isMobile ? styles.iconOnlyButton : ''}`}\n              aria-label=\"Search\"\n              title=\"Search\"\n              type=\"button\"\n            >\n              <SearchIcon size={16} />\n              {!isMobile && <span className={styles.buttonText}>Search</span>}\n            </button>\n            \n            <button\n              className={`${styles.textButton} ${isMobile ? styles.iconOnlyButton : ''}`}\n              aria-label=\"Reason mode\"\n              title=\"Reason mode\"\n              type=\"button\"\n            >\n              <LightBulbIcon size={16} />\n              {!isMobile && <span className={styles.buttonText}>Reason</span>}\n            </button>\n            \n            <button\n              className={styles.actionButton}\n              aria-label=\"More options\"\n              title=\"More options\"\n              type=\"button\"\n            >\n              <KebabHorizontalIcon size={16} />\n            </button>\n          </div>\n          \n          {/* Right side buttons */}\n          <div className={styles.rightButtons}>\n            {/* New chat button - moved to right side */}\n            <button \n              className={styles.actionButton}\n              onClick={onNewChat}\n              aria-label=\"New chat\"\n              title=\"New chat\"\n              type=\"button\"\n            >\n              <PlusIcon size={16} />\n            </button>\n            \n            {/* Cancel edit button (Only when editing) */}\n            {isEditing && (\n              <button\n                className={styles.uploadButton}\n                onClick={handleCancelEdit}\n                aria-label=\"Cancel edit\"\n                title=\"Cancel edit (Esc)\"\n                type=\"button\"\n              >\n                <XIcon size={16} />\n              </button>\n            )}\n            \n            {/* AI model button */}\n            <button\n              className={styles.modelButton}\n              onClick={toggleModelSelector}\n              aria-label=\"Select AI model\"\n              title=\"Select AI model\"\n              type=\"button\"\n            >\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <rect x=\"3\" y=\"3\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n                <rect x=\"7\" y=\"3\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n                <rect x=\"11\" y=\"3\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n                <rect x=\"3\" y=\"7\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n                <rect x=\"7\" y=\"7\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n                <rect x=\"11\" y=\"7\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n                <rect x=\"3\" y=\"11\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n                <rect x=\"7\" y=\"11\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n                <rect x=\"11\" y=\"11\" width=\"2\" height=\"2\" fill=\"currentColor\" />\n              </svg>\n            </button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n});\n\n// PropTypes for documentation and type checking\nChatInput.propTypes = {\n  onSendMessage: PropTypes.func.isRequired,\n  onNewChat: PropTypes.func.isRequired,\n  disabled: PropTypes.bool,\n  selectedModel: PropTypes.object,\n  isStaticLayout: PropTypes.bool,\n  editingMessage: PropTypes.object,\n  onCancelEdit: PropTypes.func,\n  isStreaming: PropTypes.bool,\n  toggleModelSelector: PropTypes.func,\n  onFocus: PropTypes.func\n};\n\nexport default ChatInput; "],"names":["readFileAsBase64","file","Promise","resolve","reject","reader","FileReader","onload","result","onerror","error","readAsDataURL","memo","_ref","_selectedModel$capabi","_selectedModel$capabi2","onSendMessage","onNewChat","disabled","selectedModel","isStaticLayout","editingMessage","onCancelEdit","isStreaming","toggleModelSelector","onFocus","message","setMessage","useState","selectedImages","setSelectedImages","textareaRef","useRef","fileInputRef","isEditing","isMobile","setIsMobile","window","innerWidth","isWaitingForResponse","stopGeneration","useChat","useEffect","handleResize","addEventListener","removeEventListener","current","focus","textContent","content","Array","isArray","textPart","find","part","type","text","setTimeout","adjustTextareaHeight","useCallback","textarea","style","height","newHeight","Math","min","scrollHeight","inputContainer","closest","styles","triggerFileInput","_fileInputRef$current","click","handleCancelEdit","handleSend","hasText","trim","length","hasImages","contentPayload","push","forEach","img","image_url","url","_textareaRef$current","placeholderText","detectKeyboard","innerHeight","outerHeight","document","body","classList","add","remove","handleFocus","handleBlur","_jsxs","_Fragment","children","_jsx","className","imagePreviewContainer","map","image","index","imagePreviewWrapper","src","alt","imagePreview","removeImageButton","onClick","removeImage","indexToRemove","prevImages","filter","_","title","XIcon","size","editing","waitingForResponse","mobileView","ref","display","accept","multiple","onChange","async","files","from","event","target","alert","value","imagePromises","startsWith","Error","name","MAX_SIZE_MB","base64","newImages","all","inputWrapper","noModelSelected","chatInput","placeholder","e","onKeyDown","key","shiftKey","preventDefault","onPaste","_e$clipboardData","items","clipboardData","imageItems","item","getAsFile","Date","now","rows","sendButtonInline","stopButton","stopPropagation","blur","xmlns","width","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","x","y","rx","ry","CheckIcon","PaperAirplaneIcon","actionRow","leftButtons","uploadButton","capabilities","includes","ImageIcon","textButton","iconOnlyButton","SearchIcon","buttonText","LightBulbIcon","actionButton","KebabHorizontalIcon","rightButtons","PlusIcon","modelButton"],"sourceRoot":""}