{"version":3,"file":"static/js/node_modules_comma-separated-tokens_index_js-node_modules_space-separated-tokens_index_js.a4a5532646.chunk.v1_9_0.js","mappings":"8MAsBO,SAASA,EAAMC,GAEpB,MAAMC,EAAS,GACTC,EAAQC,OAAOH,GAAS,IAC9B,IAAII,EAAQF,EAAMG,QAAQ,KACtBC,EAAQ,EAERC,GAAM,EAEV,MAAQA,GAAK,EACI,IAAXH,IACFA,EAAQF,EAAMM,OACdD,GAAM,GAGR,MAAME,EAAQP,EAAMQ,MAAMJ,EAAOF,GAAOO,QAEpCF,GAAUF,GACZN,EAAOW,KAAKH,GAGdH,EAAQF,EAAQ,EAChBA,EAAQF,EAAMG,QAAQ,IAAKC,EAC7B,CAEA,OAAOL,CACT,CAYO,SAASY,EAAUC,EAAQC,GAChC,MAAMC,EAAWD,GAAW,CAAC,EAK7B,OAF4C,KAA9BD,EAAOA,EAAON,OAAS,GAAY,IAAIM,EAAQ,IAAMA,GAGhEG,MACED,EAASE,SAAW,IAAM,IACzB,MACsB,IAArBF,EAASG,QAAoB,GAAK,MAEtCR,MACL,C,0CCjEO,SAASZ,EAAMC,GACpB,MAAME,EAAQC,OAAOH,GAAS,IAAIW,OAClC,OAAOT,EAAQA,EAAMkB,MAAM,iBAAmB,EAChD,CAUO,SAASP,EAAUC,GACxB,OAAOA,EAAOG,KAAK,KAAKN,MAC1B,C","sources":["../node_modules/comma-separated-tokens/index.js","../node_modules/space-separated-tokens/index.js"],"sourcesContent":["/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n"],"names":["parse","value","tokens","input","String","index","indexOf","start","end","length","token","slice","trim","push","stringify","values","options","settings","join","padRight","padLeft","split"],"sourceRoot":""}