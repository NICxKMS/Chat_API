{"version":3,"file":"refractor-lilypond-CEeVDmqN.js","sources":["../../node_modules/refractor/lang/lilypond.js"],"sourcesContent":["'use strict'\nvar refractorScheme = require('./scheme.js')\nmodule.exports = lilypond\nlilypond.displayName = 'lilypond'\nlilypond.aliases = []\nfunction lilypond(Prism) {\n  Prism.register(refractorScheme)\n  ;(function (Prism) {\n    var schemeExpression =\n      /\\((?:[^();\"#\\\\]|\\\\[\\s\\S]|;.*(?!.)|\"(?:[^\"\\\\]|\\\\.)*\"|#(?:\\{(?:(?!#\\})[\\s\\S])*#\\}|[^{])|<expr>)*\\)/\n        .source // allow for up to pow(2, recursivenessLog2) many levels of recursive brace expressions\n    // For some reason, this can't be 4\n    var recursivenessLog2 = 5\n    for (var i = 0; i < recursivenessLog2; i++) {\n      schemeExpression = schemeExpression.replace(/<expr>/g, function () {\n        return schemeExpression\n      })\n    }\n    schemeExpression = schemeExpression.replace(/<expr>/g, /[^\\s\\S]/.source)\n    var lilypond = (Prism.languages.lilypond = {\n      comment: /%(?:(?!\\{).*|\\{[\\s\\S]*?%\\})/,\n      'embedded-scheme': {\n        pattern: RegExp(\n          /(^|[=\\s])#(?:\"(?:[^\"\\\\]|\\\\.)*\"|[^\\s()\"]*(?:[^\\s()]|<expr>))/.source.replace(\n            /<expr>/g,\n            function () {\n              return schemeExpression\n            }\n          ),\n          'm'\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          scheme: {\n            pattern: /^(#)[\\s\\S]+$/,\n            lookbehind: true,\n            alias: 'language-scheme',\n            inside: {\n              'embedded-lilypond': {\n                pattern: /#\\{[\\s\\S]*?#\\}/,\n                greedy: true,\n                inside: {\n                  punctuation: /^#\\{|#\\}$/,\n                  lilypond: {\n                    pattern: /[\\s\\S]+/,\n                    alias: 'language-lilypond',\n                    inside: null // see below\n                  }\n                }\n              },\n              rest: Prism.languages.scheme\n            }\n          },\n          punctuation: /#/\n        }\n      },\n      string: {\n        pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        greedy: true\n      },\n      'class-name': {\n        pattern: /(\\\\new\\s+)[\\w-]+/,\n        lookbehind: true\n      },\n      keyword: {\n        pattern: /\\\\[a-z][-\\w]*/i,\n        inside: {\n          punctuation: /^\\\\/\n        }\n      },\n      operator: /[=|]|<<|>>/,\n      punctuation: {\n        pattern:\n          /(^|[a-z\\d])(?:'+|,+|[_^]?-[_^]?(?:[-+^!>._]|(?=\\d))|[_^]\\.?|[.!])|[{}()[\\]<>^~]|\\\\[()[\\]<>\\\\!]|--|__/,\n        lookbehind: true\n      },\n      number: /\\b\\d+(?:\\/\\d+)?\\b/\n    })\n    lilypond['embedded-scheme'].inside['scheme'].inside[\n      'embedded-lilypond'\n    ].inside['lilypond'].inside = lilypond\n    Prism.languages.ly = lilypond\n  })(Prism)\n}\n"],"names":["refractorScheme","require$$0","lilypond","Prism","register","schemeExpression","source","i","replace","languages","comment","pattern","RegExp","lookbehind","greedy","inside","scheme","alias","punctuation","rest","string","keyword","operator","number","ly","lilypond_1","displayName","aliases"],"mappings":"0FACA,IAAIA,EAAkBC,IAItB,SAASC,EAASC,GAChBA,EAAMC,SAASJ,GACd,SAAWG,GAMV,IALA,IAAIE,EACF,mGACGC,OAGIC,EAAI,EAAGA,EADQ,EACeA,IAClBF,EAAAA,EAAiBG,QAAQ,WAAW,WAC9C,OAAAH,CACR,IAEHA,EAAmBA,EAAiBG,QAAQ,UAAW,UAAUF,QAC7DJ,IAAAA,EAAYC,EAAMM,UAAUP,SAAW,CACzCQ,QAAS,8BACT,kBAAmB,CACjBC,QAASC,OACP,8DAA8DN,OAAOE,QACnE,WACA,WACS,OAAAH,CACrB,IAEU,KAEFQ,YAAY,EACZC,QAAQ,EACRC,OAAQ,CACNC,OAAQ,CACNL,QAAS,eACTE,YAAY,EACZI,MAAO,kBACPF,OAAQ,CACN,oBAAqB,CACnBJ,QAAS,iBACTG,QAAQ,EACRC,OAAQ,CACNG,YAAa,YACbhB,SAAU,CACRS,QAAS,UACTM,MAAO,oBACPF,OAAQ,QAIdI,KAAMhB,EAAMM,UAAUO,SAG1BE,YAAa,MAGjBE,OAAQ,CACNT,QAAS,oBACTG,QAAQ,GAEV,aAAc,CACZH,QAAS,mBACTE,YAAY,GAEdQ,QAAS,CACPV,QAAS,iBACTI,OAAQ,CACNG,YAAa,QAGjBI,SAAU,aACVJ,YAAa,CACXP,QACE,uGACFE,YAAY,GAEdU,OAAQ,qBAEVrB,EAAS,mBAAmBa,OAAe,OAAEA,OAC3C,qBACAA,OAAiB,SAAEA,OAASb,EAC9BC,EAAMM,UAAUe,GAAKtB,EA3EtB,CA4EEC,EACL,QAlFiBsB,EAAAvB,EACjBA,EAASwB,YAAc,WACvBxB,EAASyB,QAAU","x_google_ignoreList":[0]}