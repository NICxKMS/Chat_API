{"version":3,"file":"vendor-mdast-util-gfm-table-0sjzvTgl.js","sources":["../../node_modules/mdast-util-gfm-table/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').InlineCode} InlineCode\n *\n * @typedef {import('markdown-table').MarkdownTableOptions} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Context} ToMarkdownContext\n * @typedef {import('mdast-util-to-markdown').SafeOptions} SafeOptions\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells.\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters.\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {inlineCode} from 'mdast-util-to-markdown/lib/handle/inline-code.js'\nimport {markdownTable} from 'markdown-table'\n\n// To do: next major: use `state` and `state` utilities from `mdast-util-to-markdown`.\n// To do: next major: use `defaultHandlers.inlineCode`.\n// To do: next major: expose functions.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM tables.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmTableFromMarkdown = {\n  enter: {\n    table: enterTable,\n    tableData: enterCell,\n    tableHeader: enterCell,\n    tableRow: enterRow\n  },\n  exit: {\n    codeText: exitCodeText,\n    table: exitTable,\n    tableData: exit,\n    tableHeader: exit,\n    tableRow: exit\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  /** @type {Array<'left' | 'right' | 'center' | 'none'>} */\n  // @ts-expect-error: `align` is custom.\n  const align = token._align\n  this.enter(\n    {\n      type: 'table',\n      align: align.map((d) => (d === 'none' ? null : d)),\n      children: []\n    },\n    token\n  )\n  this.setData('inTable', true)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.setData('inTable')\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.getData('inTable')) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = /** @type {InlineCode} */ (this.stack[this.stack.length - 1])\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      table: handleTable,\n      tableRow: handleTableRow,\n      tableCell: handleTableCell,\n      inlineCode: inlineCodeWithTable\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, context, safeOptions) {\n    return serializeData(\n      handleTableAsData(node, context, safeOptions),\n      node.align\n    )\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, context, safeOptions) {\n    const row = handleTableRowAsData(node, context, safeOptions)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, context, safeOptions) {\n    const exit = context.enter('tableCell')\n    const subexit = context.enter('phrasing')\n    const value = containerPhrasing(node, context, {\n      ...safeOptions,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = context.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(\n        children[index],\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableRowAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = context.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(\n        children[index],\n        node,\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, context) {\n    let value = inlineCode(node, parent, context)\n\n    if (context.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n"],"names":["gfmTableFromMarkdown","enter","table","token","align","_align","this","type","map","d","children","setData","tableData","enterCell","tableHeader","tableRow","exit","codeText","value","resume","getData","replace","stack","length","$0","$1","gfmTableToMarkdown","options","settings","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","unsafe","character","inConstruct","atBreak","after","handlers","node","_","context","safeOptions","serializeData","index","result","subexit","handleTableRowAsData","handleTableAsData","slice","indexOf","tableCell","handleTableCell","inlineCode","parent","includes","containerPhrasing","before","matrix","markdownTable"],"mappings":"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","x_google_ignoreList":[0]}