{"version":3,"file":"vendor-micromark-extension-gfm-strikethrough-DVLz2FyR.js","sources":["../../node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean} [singleTilde=true]\n *   Whether to support strikethrough with a single tilde.\n *\n *   Single tildes work on github.com, but are technically prohibited by the\n *   GFM spec.\n */\n\nimport {splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {}\n  let single = options_.singleTilde\n  const tokenizer = {\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  }\n  if (single === null || single === undefined) {\n    single = true\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  }\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (\n        events[index][0] === 'enter' &&\n        events[index][1].type === 'strikethroughSequenceTemporary' &&\n        events[index][1]._close\n      ) {\n        let open = index\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (\n            events[open][0] === 'exit' &&\n            events[open][1].type === 'strikethroughSequenceTemporary' &&\n            events[open][1]._open &&\n            // If the sizes are the same:\n            events[index][1].end.offset - events[index][1].start.offset ===\n              events[open][1].end.offset - events[open][1].start.offset\n          ) {\n            events[index][1].type = 'strikethroughSequence'\n            events[open][1].type = 'strikethroughSequence'\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            }\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            }\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [\n              ['enter', strikethrough, context],\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context],\n              ['enter', text, context]\n            ]\n            const insideSpan = context.parser.constructs.insideSpan.null\n            if (insideSpan) {\n              // Between.\n              splice(\n                nextEvents,\n                nextEvents.length,\n                0,\n                resolveAll(insideSpan, events.slice(open + 1, index), context)\n              )\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [\n              ['exit', text, context],\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context],\n              ['exit', strikethrough, context]\n            ])\n            splice(events, open - 1, index - open + 3, nextEvents)\n            index = open + nextEvents.length - 2\n            break\n          }\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = 'data'\n      }\n    }\n    return events\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous\n    const events = this.events\n    let size = 0\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      if (\n        previous === 126 &&\n        events[events.length - 1][1].type !== 'characterEscape'\n      ) {\n        return nok(code)\n      }\n      effects.enter('strikethroughSequenceTemporary')\n      return more(code)\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous)\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code)\n        effects.consume(code)\n        size++\n        return more\n      }\n      if (size < 2 && !single) return nok(code)\n      const token = effects.exit('strikethroughSequenceTemporary')\n      const after = classifyCharacter(code)\n      token._open = !after || (after === 2 && Boolean(before))\n      token._close = !before || (before === 2 && Boolean(after))\n      return ok(code)\n    }\n  }\n}\n"],"names":["gfmStrikethrough","options","single","singleTilde","tokenizer","tokenize","effects","ok","nok","previous","this","events","size","code","length","type","enter","more","before","classifyCharacter","consume","token","exit","after","_open","Boolean","_close","resolveAll","context","index","open","end","offset","start","strikethrough","Object","assign","text","nextEvents","insideSpan","parser","constructs","null","splice","slice","attentionMarkers"],"mappings":"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","x_google_ignoreList":[0]}