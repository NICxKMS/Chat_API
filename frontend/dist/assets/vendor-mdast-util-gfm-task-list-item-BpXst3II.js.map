{"version":3,"file":"vendor-mdast-util-gfm-task-list-item-BpXst3II.js","sources":["../../node_modules/mdast-util-gfm-task-list-item/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\n/**\n * @typedef {Extract<Root | Content, Parent>} Parents\n */\n\nimport {listItem} from 'mdast-util-to-markdown/lib/handle/list-item.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n// To do: next major: rename `context` -> `state`, `safeOptions` -> `info`, use\n// `track` from `state`.\n// To do: next major: replace exports with functions.\n// To do: next major: use `defaulthandlers.listItem`.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM task list items.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmTaskListItemFromMarkdown = {\n  exit: {\n    taskListCheckValueChecked: exitCheck,\n    taskListCheckValueUnchecked: exitCheck,\n    paragraph: exitParagraphWithTaskListItem\n  }\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM task list items.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmTaskListItemToMarkdown = {\n  unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n  handlers: {listItem: listItemWithTaskListItem}\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  const node = /** @type {ListItem} */ (this.stack[this.stack.length - 2])\n  // Weâ€™re always in a paragraph, in a list item.\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = /** @type {Parents} */ (this.stack[this.stack.length - 2])\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = /** @type {Paragraph} */ (this.stack[this.stack.length - 1])\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, context, safeOptions) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = track(safeOptions)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = listItem(node, parent, context, {\n    ...safeOptions,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n"],"names":["gfmTaskListItemFromMarkdown","exit","taskListCheckValueChecked","exitCheck","taskListCheckValueUnchecked","paragraph","token","parent","this","stack","length","type","checked","node","head","children","siblings","firstParaghraph","index","sibling","value","slice","shift","position","start","offset","column","Object","assign","gfmTaskListItemToMarkdown","unsafe","atBreak","character","after","handlers","listItem","context","safeOptions","checkable","checkbox","tracker","track","move","current","replace","$0"],"mappings":"kEA8BY,MAACA,EAA8B,CACzCC,KAAM,CACJC,0BAA2BC,EAC3BC,4BAA6BD,EAC7BE,UA4BJ,SAAuCC,GAC/B,MAAAC,EAAiCC,KAAKC,MAAMD,KAAKC,MAAMC,OAAS,GAEtE,GACEH,GACgB,aAAhBA,EAAOI,MACmB,kBAAnBJ,EAAOK,QACd,CACM,MAAAC,EAAiCL,KAAKC,MAAMD,KAAKC,MAAMC,OAAS,GAChEI,EAAOD,EAAKE,SAAS,GAEvB,GAAAD,GAAsB,SAAdA,EAAKH,KAAiB,CAChC,MAAMK,EAAWT,EAAOQ,SACxB,IAEIE,EAFAC,GAAQ,EAIL,OAAEA,EAAQF,EAASN,QAAQ,CAC1B,MAAAS,EAAUH,EAASE,GACrB,GAAiB,cAAjBC,EAAQR,KAAsB,CACdM,EAAAE,EAClB,KACV,CACA,CAEUF,IAAoBJ,IAEtBC,EAAKM,MAAQN,EAAKM,MAAMC,MAAM,GAEJ,IAAtBP,EAAKM,MAAMV,OACbG,EAAKE,SAASO,QAEdT,EAAKU,UACLT,EAAKS,UACiC,iBAA/BT,EAAKS,SAASC,MAAMC,SAE3BX,EAAKS,SAASC,MAAME,SACpBZ,EAAKS,SAASC,MAAMC,SACfZ,EAAAU,SAASC,MAAQG,OAAOC,OAAO,GAAId,EAAKS,SAASC,QAGhE,CACA,CAEEhB,KAAKP,KAAKK,EACZ,IAhEauB,EAA4B,CACvCC,OAAQ,CAAC,CAACC,SAAS,EAAMC,UAAW,IAAKC,MAAO,UAChDC,SAAU,CAACC,SAoEb,SAAkCtB,EAAMN,EAAQ6B,EAASC,GACjD,MAAAvB,EAAOD,EAAKE,SAAS,GACrBuB,EACoB,kBAAjBzB,EAAKD,SAAyBE,GAAsB,cAAdA,EAAKH,KAC9C4B,EAAW,KAAO1B,EAAKD,QAAU,IAAM,KAAO,KAC9C4B,EAAUC,EAAMJ,GAElBC,GACFE,EAAQE,KAAKH,GAGf,IAAInB,EAAQe,EAAStB,EAAMN,EAAQ6B,EAAS,IACvCC,KACAG,EAAQG,YAGTL,IACMlB,EAAAA,EAAMwB,QAAQ,mCASxB,SAAeC,GACb,OAAOA,EAAKN,CAChB,KARS,OAAAnB,CAST,IA1FA,SAASjB,EAAUG,GACqBE,KAAKC,MAAMD,KAAKC,MAAMC,OAAS,GAEhEE,QAAyB,8BAAfN,EAAMK,IACvB","x_google_ignoreList":[0]}