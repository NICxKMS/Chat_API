{"version":3,"file":"refractor-tsx-Di9Ye_Hi.js","sources":["../../node_modules/refractor/lang/tsx.js"],"sourcesContent":["'use strict'\nvar refractorJsx = require('./jsx.js')\nvar refractorTypescript = require('./typescript.js')\nmodule.exports = tsx\ntsx.displayName = 'tsx'\ntsx.aliases = []\nfunction tsx(Prism) {\n  Prism.register(refractorJsx)\n  Prism.register(refractorTypescript)\n  ;(function (Prism) {\n    var typescript = Prism.util.clone(Prism.languages.typescript)\n    Prism.languages.tsx = Prism.languages.extend('jsx', typescript) // doesn't work with TS because TS is too complex\n    delete Prism.languages.tsx['parameter']\n    delete Prism.languages.tsx['literal-property'] // This will prevent collisions between TSX tags and TS generic types.\n    // Idea by https://github.com/karlhorky\n    // Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\n    var tag = Prism.languages.tsx.tag\n    tag.pattern = RegExp(\n      /(^|[^\\w$]|(?=<\\/))/.source + '(?:' + tag.pattern.source + ')',\n      tag.pattern.flags\n    )\n    tag.lookbehind = true\n  })(Prism)\n}\n"],"names":["refractorJsx","require$$0","refractorTypescript","require$$1","tsx","Prism","register","typescript","util","clone","languages","extend","tag","pattern","RegExp","source","flags","lookbehind","tsx_1","displayName","aliases"],"mappings":"yIACA,IAAIA,EAAeC,IACfC,EAAsBC,IAI1B,SAASC,EAAIC,GACXA,EAAMC,SAASN,GACfK,EAAMC,SAASJ,GACd,SAAWG,GACV,IAAIE,EAAaF,EAAMG,KAAKC,MAAMJ,EAAMK,UAAUH,YAClDF,EAAMK,UAAUN,IAAMC,EAAMK,UAAUC,OAAO,MAAOJ,UAC7CF,EAAMK,UAAUN,IAAe,iBAC/BC,EAAMK,UAAUN,IAAI,oBAGvB,IAAAQ,EAAMP,EAAMK,UAAUN,IAAIQ,IAC9BA,EAAIC,QAAUC,OACZ,qBAAqBC,OAAS,MAAQH,EAAIC,QAAQE,OAAS,IAC3DH,EAAIC,QAAQG,OAEdJ,EAAIK,YAAa,EAZlB,CAaEZ,EACL,QApBiBa,EAAAd,EACjBA,EAAIe,YAAc,MAClBf,EAAIgB,QAAU","x_google_ignoreList":[0]}