{"version":3,"mappings":"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","names":["ModelItem","lazy","__vitePreload","import","__VITE_PRELOAD__","ModelSearch","SelectedModelDisplay","React","memo","selectedModel","jsxs","className","styles","ModelDropdown__selectedModelContainer","children","jsx","ModelDropdown__selectedModelLabel","ModelDropdown__selectedModelInfo","ModelDropdown__modelName","name","jsxRuntimeExports","ModelDropdown__modelDescription","provider","type","propTypes","PropTypes","object","CapabilityTabs","capabilities","activeCapability","onSelectCapability","tabsRef","useRef","useEffect","current","activeTab","querySelector","container","containerWidth","offsetWidth","tabWidth","scrollPosition","offsetLeft","scrollTo","left","Math","max","behavior","ModelDropdown__capabilityTabs","ref","Object","keys","map","ModelDropdown__capabilityTab","capability","onClick","ModelList","isLoading","groupedModels","onSelectModel","searchTerm","totalCount","onClearSearch","ModelDropdown__modelList","role","ModelDropdown__loading","length","group","ModelDropdown__providerTypeHeader","ModelDropdown__providerName","ModelDropdown__providerTypeSeparator","ModelDropdown__typeLabel","modelCount","models","model","Suspense","fallback","selected","id","ModelDropdown__noResults","ModelDropdown__clearSearch","toLowerCase","bool","isRequired","array","func","string","number","SearchContainer","onSearchChange","ModelDropdown__searchContainer","resultCount","ModelSelectionPanel","forwardRef","isExperimentalModelsEnabled","toggleExperimentalModels","capabilitiesWithCounts","setActiveCapability","handleSelectModel","handleClearSearch","ModelDropdown__modelsContainer","ModelDropdown__fixedHeader","ModelDropdown__scrollableModelList","formatProviderName","split","word","charAt","toUpperCase","slice","join","replace","shouldIncludeModel","showExperimental","formattedProvider","typeGroup","searchLower","nameMatch","includes","displayName","providerMatch","typeMatch","tagMatch","tags","some","tag","ModelSelection","processedModels","selectModel","useModel","modelFilter","updateSearchFilter","useModelFilter","useState","panelRef","useCallback","handleSearchChange","searchValue","useMemo","counts","forEach","category","values","flatMap","providerGroups","flat","filter","search","modelsInCategory","groups","entries","typeGroups","filteredGroupModels","push","totalModelCount","reduce","count","modelSelectionContainer"],"ignoreList":[],"sources":["../../src/components/models/ModelDropdown/index.jsx"],"sourcesContent":["import React, { \r\n  useEffect, \r\n  useRef, \r\n  useCallback, \r\n  useMemo, \r\n  useState,\r\n  lazy,\r\n  Suspense\r\n} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useModel, useModelFilter } from '../../../contexts/ModelContext';\r\n// Lazy-load sub-components for dynamic loading\r\nconst ModelItem = lazy(() => import('../ModelItem'));\r\nconst ModelSearch = lazy(() => import('../ModelSearch'));\r\nimport styles from './ModelDropdown.module.css';\r\n\r\n/**\r\n * SelectedModelDisplay component showing the currently selected model\r\n */\r\nconst SelectedModelDisplay = React.memo(({ selectedModel }) => (\r\n  <div className={styles.ModelDropdown__selectedModelContainer}>\r\n    <div className={styles.ModelDropdown__selectedModelLabel}>Current Model:</div>\r\n    <div className={styles.ModelDropdown__selectedModelInfo}>\r\n      <h3 className={styles.ModelDropdown__modelName}>\r\n        {selectedModel ? selectedModel.name : 'No model selected'}\r\n      </h3>\r\n      {selectedModel && (\r\n        <p className={styles.ModelDropdown__modelDescription}>\r\n          {selectedModel.provider ? `${selectedModel.provider} - ${selectedModel.type}` : 'Model details unavailable'}\r\n        </p>\r\n      )}\r\n    </div>\r\n  </div>\r\n));\r\n\r\nSelectedModelDisplay.propTypes = {\r\n  selectedModel: PropTypes.object\r\n};\r\n\r\n/**\r\n * CapabilityTabs component for selecting model categories\r\n */\r\nconst CapabilityTabs = React.memo(({ capabilities, activeCapability, onSelectCapability }) => {\r\n  const tabsRef = useRef(null);\r\n  \r\n  // Scroll the selected tab into view when it changes\r\n  useEffect(() => {\r\n    if (tabsRef.current) {\r\n      const activeTab = tabsRef.current.querySelector(`.${styles['ModelDropdown__capabilityTab--active']}`);\r\n      if (activeTab) {\r\n        // Calculate position to center the tab in the container\r\n        const container = tabsRef.current;\r\n        const containerWidth = container.offsetWidth;\r\n        const tabWidth = activeTab.offsetWidth;\r\n        const tabLeft = activeTab.offsetLeft;\r\n        \r\n        // Center the tab\r\n        const scrollPosition = tabLeft - (containerWidth / 2) + (tabWidth / 2);\r\n        container.scrollTo({\r\n          left: Math.max(0, scrollPosition),\r\n          behavior: 'smooth'\r\n        });\r\n      }\r\n    }\r\n  }, [activeCapability]);\r\n  \r\n  return (\r\n    <div className={styles.ModelDropdown__capabilityTabs} ref={tabsRef}>\r\n      {Object.keys(capabilities).map(capability => (\r\n        <button\r\n          key={capability}\r\n          className={`${styles.ModelDropdown__capabilityTab} ${activeCapability === capability ? styles['ModelDropdown__capabilityTab--active'] : ''}`}\r\n          onClick={() => onSelectCapability(capability)}\r\n        >\r\n          {capability}\r\n          <span> ({capabilities[capability]})</span>\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n});\r\n\r\nCapabilityTabs.propTypes = {\r\n  capabilities: PropTypes.object.isRequired,\r\n  activeCapability: PropTypes.string.isRequired,\r\n  onSelectCapability: PropTypes.func.isRequired\r\n};\r\n\r\n/**\r\n * ModelList component showing the filtered and grouped models\r\n */\r\nconst ModelList = React.memo(({ isLoading, groupedModels, selectedModel, onSelectModel, searchTerm, totalCount, activeCapability, onClearSearch }) => (\r\n  <div className={styles.ModelDropdown__modelList} role=\"listbox\">\r\n    {isLoading ? (\r\n      <div className={styles.ModelDropdown__loading}>Loading models...</div>\r\n    ) : groupedModels && Object.keys(groupedModels).length > 0 ? (\r\n      groupedModels.map((group) => (\r\n        <div key={`${group.provider}-${group.type}`}>\r\n          <div className={styles.ModelDropdown__providerTypeHeader}>\r\n            <span className={styles.ModelDropdown__providerName}>{group.provider}</span>\r\n            <span className={styles.ModelDropdown__providerTypeSeparator}>→</span>\r\n            <span className={styles.ModelDropdown__typeLabel}>{group.type}</span>\r\n            <span className={styles.modelCount}>({group.models.length})</span>\r\n          </div>\r\n          \r\n          {group.models.map(model => (\r\n            <Suspense fallback={null} key={model.id}>\r\n              <ModelItem\r\n                model={model}\r\n                selected={selectedModel?.id === model.id}\r\n                onClick={onSelectModel}\r\n                searchTerm={searchTerm}\r\n              />\r\n            </Suspense>\r\n          ))}\r\n        </div>\r\n      ))\r\n    ) : (\r\n      searchTerm && totalCount === 0 ? (\r\n        <div className={styles.ModelDropdown__noResults}>\r\n          No models found matching \"{searchTerm}\"\r\n          <button \r\n            className={styles.ModelDropdown__clearSearch}\r\n            onClick={onClearSearch}\r\n          >\r\n            Clear search\r\n          </button>\r\n        </div>\r\n      ) : (\r\n        <div className={styles.ModelDropdown__noResults}>\r\n          No {activeCapability.toLowerCase()} models available\r\n        </div>\r\n      )\r\n    )}\r\n  </div>\r\n));\r\n\r\nModelList.propTypes = {\r\n  isLoading: PropTypes.bool.isRequired,\r\n  groupedModels: PropTypes.array,\r\n  selectedModel: PropTypes.object,\r\n  onSelectModel: PropTypes.func.isRequired,\r\n  searchTerm: PropTypes.string,\r\n  totalCount: PropTypes.number,\r\n  activeCapability: PropTypes.string.isRequired,\r\n  onClearSearch: PropTypes.func.isRequired\r\n};\r\n\r\n/**\r\n * SearchContainer component for model searching\r\n */\r\nconst SearchContainer = React.memo(({ searchTerm, onSearchChange, totalCount }) => (\r\n  <div className={styles.ModelDropdown__searchContainer}>\r\n    <Suspense fallback={null}>\r\n      <ModelSearch \r\n        searchTerm={searchTerm}\r\n        onSearchChange={onSearchChange}\r\n        resultCount={totalCount} \r\n      />\r\n    </Suspense>\r\n  </div>\r\n));\r\n\r\nSearchContainer.propTypes = {\r\n  searchTerm: PropTypes.string,\r\n  onSearchChange: PropTypes.func.isRequired,\r\n  totalCount: PropTypes.number\r\n};\r\n\r\n/**\r\n * ModelSelectionPanel component for selecting models from a filterable list\r\n */\r\nconst ModelSelectionPanel = React.forwardRef(({ \r\n  isExperimentalModelsEnabled, \r\n  toggleExperimentalModels, \r\n  capabilitiesWithCounts, \r\n  activeCapability, \r\n  setActiveCapability,\r\n  isLoading,\r\n  groupedModels,\r\n  selectedModel,\r\n  handleSelectModel,\r\n  searchTerm,\r\n  totalCount,\r\n  handleClearSearch \r\n}, ref) => (\r\n  <div className={styles.ModelDropdown__modelsContainer} ref={ref}>\r\n    <div className={styles.ModelDropdown__fixedHeader}>\r\n      <CapabilityTabs \r\n        capabilities={capabilitiesWithCounts} \r\n        activeCapability={activeCapability} \r\n        onSelectCapability={setActiveCapability} \r\n      />\r\n    </div>\r\n    \r\n    <div className={styles.ModelDropdown__scrollableModelList}>\r\n      <ModelList \r\n        isLoading={isLoading}\r\n        groupedModels={groupedModels}\r\n        selectedModel={selectedModel}\r\n        onSelectModel={handleSelectModel}\r\n        searchTerm={searchTerm}\r\n        totalCount={totalCount}\r\n        activeCapability={activeCapability}\r\n        onClearSearch={handleClearSearch}\r\n      />\r\n    </div>\r\n  </div>\r\n));\r\n\r\nModelSelectionPanel.propTypes = {\r\n  isExperimentalModelsEnabled: PropTypes.bool,\r\n  toggleExperimentalModels: PropTypes.func,\r\n  capabilitiesWithCounts: PropTypes.object.isRequired,\r\n  activeCapability: PropTypes.string.isRequired,\r\n  setActiveCapability: PropTypes.func.isRequired,\r\n  isLoading: PropTypes.bool.isRequired,\r\n  groupedModels: PropTypes.array,\r\n  selectedModel: PropTypes.object,\r\n  handleSelectModel: PropTypes.func.isRequired,\r\n  searchTerm: PropTypes.string,\r\n  totalCount: PropTypes.number,\r\n  handleClearSearch: PropTypes.func.isRequired\r\n};\r\n\r\n// Helper function to format provider name\r\nconst formatProviderName = (provider) => {\r\n  if (!provider) return '';\r\n  // Simple title case, handle AI\r\n  return provider\r\n    .split(' ')\r\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\r\n    .join(' ')\r\n    .replace(/ai/gi, 'AI');\r\n};\r\n\r\n// Helper function to check if model should be included\r\nconst shouldIncludeModel = (model, showExperimental, searchTerm, provider, formattedProvider, typeGroup) => {\r\n  if (!model) return false;\r\n  if (searchTerm) {\r\n    const searchLower = searchTerm.toLowerCase();\r\n    const nameMatch = model.name?.toLowerCase().includes(searchLower) || model.displayName?.toLowerCase().includes(searchLower);\r\n    const providerMatch = provider?.toLowerCase().includes(searchLower) || formattedProvider?.toLowerCase().includes(searchLower);\r\n    const typeMatch = typeGroup?.toLowerCase().includes(searchLower);\r\n    const tagMatch = model.tags && model.tags.some(tag => tag?.toLowerCase().includes(searchLower));\r\n\r\n    if (!(nameMatch || providerMatch || typeMatch || tagMatch)) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n};\r\n\r\n\r\n\r\n/**\r\n * Main ModelSelection component that orchestrates all model selection UI\r\n * @returns {JSX.Element} - Rendered component\r\n */\r\nconst ModelSelection = () => {\r\n  const { \r\n    processedModels, \r\n    selectedModel, \r\n    isLoading, \r\n    selectModel, \r\n    showExperimental,\r\n    toggleExperimentalModels\r\n  } = useModel();\r\n  \r\n  const {\r\n    modelFilter,\r\n    updateSearchFilter\r\n  } = useModelFilter();\r\n  \r\n  const [activeCapability, setActiveCapability] = useState('Chat');\r\n  const panelRef = useRef(null);\r\n  \r\n  const handleSelectModel = useCallback((model) => {\r\n    selectModel(model);\r\n  }, [selectModel]);\r\n  \r\n  // Handle search input changes\r\n  const handleSearchChange = useCallback((searchValue) => {\r\n    if (typeof searchValue === 'string') {\r\n      updateSearchFilter(searchValue);\r\n    } else {\r\n      console.warn('Invalid search value in ModelDropdown handleSearchChange');\r\n    }\r\n  }, [updateSearchFilter]);\r\n\r\n  // Handle clearing search\r\n  const handleClearSearch = useCallback(() => {\r\n    updateSearchFilter('');\r\n  }, [updateSearchFilter]);\r\n  \r\n  const capabilitiesWithCounts = useMemo(() => {\r\n    const counts = {};\r\n    if (processedModels) {\r\n      Object.keys(processedModels).forEach(category => {\r\n        counts[category] = Object.values(processedModels[category])\r\n          .flatMap(providerGroups => Object.values(providerGroups))\r\n          .flat()\r\n          .filter(model => shouldIncludeModel(model, showExperimental, modelFilter.search, model.provider, formatProviderName(model.provider), model.type))\r\n          .length;\r\n      });\r\n    }\r\n    return counts;\r\n  }, [processedModels, showExperimental, modelFilter.search]);\r\n\r\n  const groupedModels = useMemo(() => {\r\n    if (!processedModels || !processedModels[activeCapability]) {\r\n      return [];\r\n    }\r\n    \r\n    const modelsInCategory = processedModels[activeCapability];\r\n    const groups = [];\r\n\r\n    Object.entries(modelsInCategory).forEach(([provider, typeGroups]) => {\r\n      const formattedProvider = formatProviderName(provider);\r\n      Object.entries(typeGroups).forEach(([type, models]) => {\r\n        const filteredGroupModels = models.filter(model =>\r\n          shouldIncludeModel(model, showExperimental, modelFilter.search, provider, formattedProvider, type)\r\n        );\r\n        if (filteredGroupModels.length > 0) {\r\n          groups.push({\r\n            provider: formattedProvider,\r\n            type: type,\r\n            models: filteredGroupModels\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    return groups;\r\n  }, [processedModels, activeCapability, showExperimental, modelFilter.search]);\r\n\r\n  const totalModelCount = useMemo(() => {\r\n    return groupedModels.reduce((count, group) => count + group.models.length, 0);\r\n  }, [groupedModels]);\r\n\r\n  return (\r\n    <div className={styles.modelSelectionContainer}>\r\n      <SelectedModelDisplay selectedModel={selectedModel} />\r\n      <SearchContainer \r\n        searchTerm={modelFilter.search}\r\n        onSearchChange={handleSearchChange}\r\n        totalCount={totalModelCount} \r\n      />\r\n      <ModelSelectionPanel\r\n        ref={panelRef}\r\n        isExperimentalModelsEnabled={showExperimental}\r\n        toggleExperimentalModels={toggleExperimentalModels}\r\n        capabilitiesWithCounts={capabilitiesWithCounts}\r\n        activeCapability={activeCapability}\r\n        setActiveCapability={setActiveCapability}\r\n        isLoading={isLoading}\r\n        groupedModels={groupedModels}\r\n        selectedModel={selectedModel}\r\n        handleSelectModel={handleSelectModel}\r\n        searchTerm={modelFilter.search}\r\n        totalCount={totalModelCount}\r\n        handleClearSearch={handleClearSearch}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ModelSelection; "],"file":"assets/index-CQPrrWVa.js"}