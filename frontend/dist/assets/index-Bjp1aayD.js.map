{"version":3,"mappings":";kLAGO,MAAMA,EAGF,SAHEA,EAID,QAINC,MAA0BC,IAOnBC,EAA2BC,IAEtC,MAAOC,EAASC,GAAcC,YAAS,IAEf,oBAAXC,QACFA,OAAOC,WAAWL,GAAOC,UAmE7BA,OA9DPK,aAAU,KAEJ,GAAkB,oBAAXF,OACFG,OAIT,IAAKV,EAAoBW,IAAIR,GAAQ,CAE7BS,QAAiBL,OAAOC,WAAWL,GAGzCH,EAAoBa,IAAIV,EAAO,CAC7BS,iBACAE,cAAeC,KAChB,CAGGC,QAAYhB,EAAoBiB,IAAId,IACpCS,eAAEA,YAAgBE,GAAcE,EAGtCX,EAAWO,EAAeR,SAGpBc,QAAsBC,IAC1Bd,EAAWc,EAAMf,QAAO,EAO1B,OAHAU,EAAUM,IAAIF,GAGVN,EAAeS,kBACFA,mBAAiB,SAAUH,GACnC,KACUI,sBAAoB,SAAUJ,GAC7CJ,EAAUS,OAAOL,GAGM,IAAnBJ,EAAUU,MACZxB,EAAoBuB,OAAOpB,EAAK,GAK7BS,EAAea,aACtBb,EAAea,YAAYP,GACpB,KACLN,EAAec,eAAeR,GAC9BJ,EAAUS,OAAOL,GAGM,IAAnBJ,EAAUU,MACZxB,EAAoBuB,OAAOpB,EAAK,QAXpC,CAgBKO,GACN,CAACP,IAEGC,GAyBIuB,EAAsBA,KAC3BxB,QAAQyB,WAAQ,IAAM,eAAe7B,MAAyB,IACpE,OAAOG,EAAcC,EAAK,u0BCzGtB0B,EAAUC,QAAK,WAAMC,OAAgD,wBAAYC,mMACjFC,EAAcH,QAAK,WAAMC,OAAmE,wBAAgBC,wLAC5GE,EAAgBJ,QAAK,WAAMC,OAAiD,wBAA4BC,iMACxGG,EAAUL,QAAK,WAAMC,OAAgD,uBAAsBK,SAAAC,EAAAC,KAAAN,2LAC3FO,EAAcT,QAAK,WAAMC,OAA8C,wBAA0BC,oMACjGQ,EAAgBV,QAAK,WAAMC,OAAgD,uBAA8BK,SAAAC,EAAAC,KAAAN,iMACzGS,EAAgBX,QAAK,WAAMC,OAAuD,wBAAkBC,qIACpGU,EAAcZ,QAAK,WAAMC,OAAqD,wBAA0BC,oMACxGW,EAAab,QAAK,WAAMC,OAA6C,wBAAuBC,uMAG5FY,EAAkBA,IACtBC,MAAC,MAAI,CAAAC,UAAWC,EAAOC,gBACrBC,SAACJ,MAAAV,EAAA,CAAQX,KAAK,2EAQH0B,KACb,MAAMC,EDyEoBC,MACpBjD,QAAQyB,WAAQ,IAAM,eAAe7B,MAAwB,IACnE,OAAOG,EAAcC,EAAK,EC3ERiD,IAEXC,EAAeC,GAAoBhD,WAAS6C,IAC5CI,EAAgBC,GAAqBlD,YAAS,IAC9CmD,EAAqBC,GAA0BpD,YAAS,IACzDqD,cAAEA,kBAAeC,GAAoBC,KACrCC,YAAEA,kBAAaC,QAAiBC,SAAOC,EAAQC,QAASC,GAAgBC,KACxEC,MAAEA,cAAOC,GAAgBC,IAEzBC,EAAgBC,eAAY,KACfC,OAASA,GAAI,GAC7B,IAGGC,EAAiBF,eAAY,KAEjCjB,GAA0BkB,IAEhBA,GACT,GACA,IAEGE,EAAsBH,eAAY,KACfC,OAASA,GAAI,GACnC,KAGIG,EAAYC,GAAiBxE,YAAS,GACvCyE,EAA6BN,eAAY,KAC7CK,GAAc,GACRd,GAAA,GACL,CAACA,IAGEgB,EAA6B7B,IAAcE,EAC3C4B,EAAgB,CACpBlC,EAAOG,OACP8B,EAA6BjC,EAAO,0BAA4B,IAC/DI,GAAaE,EAAgBN,EAAO,6BAA+B,IACpEmC,OAAOC,SAASC,KAAK,KAGrB,SAAAC,KAAC,MAAI,CAAAvC,UAAWmC,EAEdhC,SAAA,CAACJ,MAAA,OAAIC,UAAWC,EAAOuC,+BACrBrC,gBAAC,MAAI,CAAAH,UAAWC,EAAOwC,sBAErBtC,SAAA,OAACuC,WAAS,CAAAC,SAAU,KAClBxC,SAAAJ,MAACN,GAAW,KAIbsC,EACEhC,MAAA2C,WAAA,CAASC,SACRC,EAAA7C,IAAC,UAAOC,UAAWC,EAAO4C,2BAA4BC,UAAQ,EAAC,aAAW,yBACxE3C,WAACJ,IAAAgD,EAAA,CAAWrE,KAAM,OAGpByB,eAACN,EACC,CAAAoB,kBACA+B,QAAS9B,EACT+B,SAAU9B,EACV+B,UAAUlC,iBAAamC,eAAenC,iBAAaoC,QAAS,OAC5DC,UAAWhC,EACXL,kBAIJjB,MAAC,SACC,CAAAC,UAAWC,EAAO4C,2BAClBS,QAASrB,EACT,aAAW,QACXsB,MAAM,mBAENpD,SAACJ,MAAAgD,EAAA,CAAWrE,KAAM,OAKrBqB,MAAA,UACCC,UAAWC,EAAO4C,2BAClBS,QAASzB,EACT,aAAW,WACX0B,MAAM,WAENpD,eAACqD,EAAS,CAAA9E,KAAM,SAIjBqB,IAAAH,EAAA,CACC6D,uBAAwBxD,EAAO4C,2BAC/Ba,QACErD,EAAY,GAAK,CAEf,CACEsD,KAAgB,SAAVpC,IAAmBxB,IAAC,QAAK6D,MAAO,CAAEC,SAAU,QAAU1D,SAAA,OAAYJ,MAAC,QAAK6D,MAAO,CAAEC,SAAU,QAAU1D,SAAE,OAC7G2D,MAAO,aAAuB,SAAVvC,EAAmB,QAAU,cACjD+B,QAAS9B,GAGX,CACEmC,KAAM5D,MAACyD,EAAS,CAAA9E,KAAM,KACtBoF,MAAO,WACPR,QAASzB,GAGX,CACE8B,KAAM1C,EAAmBlB,MAAA,QAAK6D,MAAO,CAAEC,SAAU,QAAU1D,SAAA,OAAYJ,MAAC,QAAK6D,MAAO,CAAEC,SAAU,QAAU1D,SAAE,OAC5G2D,MAAO7C,EAAkB,YAAWD,iBAAamC,eAA4BC,MAAbpC,OAAaoC,YAAS,UAAY,QAClGE,QAASrC,EAAkBE,EAASD,YAS9CX,GACCR,MAAA2C,WAAA,CAASC,SAAWC,EAAA7C,IAAAD,EAAA,IACnBK,SAAAyC,EAAA7C,IAACJ,EACC,CAAAoE,OAAQxD,EACRyD,SAAUtC,MAMff,KACCZ,IAAC,MAAI,CAAAC,UAAWC,EAAOgE,qBAAsBX,QAASxB,EACpD3B,WAACJ,IAAA,OAAIC,UAAWC,EAAOiE,qBAAsBZ,QAAUa,GAAMA,EAAEC,kBAC7DjE,eAACuC,WAAS,CAAAC,WAAW5C,IAAAD,EAAA,CAAe,GAClCK,WAAAJ,IAACX,EAAc,CAAAiF,QAASvC,UAO/BvB,SACE,MAAI,CAAAP,UAAWC,EAAOqE,yBACrBnE,SAAAJ,MAAC2C,EAASA,SAAA,CAAAC,WAAW5C,IAAA,OAAIC,UAAWC,EAAOsE,6BACzCpE,WAACJ,IAAAhB,EAAA,CACCyF,iBAAkB3C,EAClB4C,gBAAiB/C,UAOzB3B,IAAC,MAAI,CAAAC,UAAWC,EAAOyE,6BACrBvE,SAACJ,MAAA2C,WAAA,CAASC,SAAU5C,MAAC,MAAI,CAAAC,UAAWC,EAAO0E,6BACzCxE,SAAAJ,MAACZ,EACC,CAAAoB,gBACAmB,gBACAjB,iBACAoB,iBACAhB,gBACAC,kBACAgB,sBACAnB,sBACA6D,iBAAkB3C,SAMtBxB,GAAaE,GACZR,MAAA,OACCC,UAAW,GAAGC,EAAO2E,mBAAmB3E,EAAO,8BAC/CqD,QAAS5B,EACT,cAAY,WAMhB3B,IAAC2C,WAAS,CAAAC,SAAU,KAClBxC,SAAAJ,MAACL,GACCqE,OAAQtD,EACR4D,QAASxC,QAGf","names":["BREAKPOINTS","mediaQueryListeners","Map","useMediaQuery","query","matches","setMatches","useState","window","matchMedia","useEffect","undefined","has","mediaQueryList","set","listeners","Set","queryData","get","listener","event","add","addEventListener","removeEventListener","delete","size","addListener","removeListener","useIsSettingsMobile","useMemo","Sidebar","lazy","import","__VITE_PRELOAD__","MainContent","ModelDropdown","Spinner","then","n","i","ThemeToggle","SettingsPanel","SidebarToggle","MoreActions","AuthButton","LoadingFallback","jsx","className","styles","loadingFallback","children","Layout","isDesktop","useIsDesktop","isSidebarOpen","setIsSidebarOpen","isSettingsOpen","setIsSettingsOpen","isModelSelectorOpen","setIsModelSelectorOpen","selectedModel","isLoadingModels","useModel","currentUser","isAuthenticated","login","logout","loading","authLoading","useAuth","theme","toggleTheme","useTheme","toggleSidebar","useCallback","prev","toggleSettings","toggleModelSelector","authLoaded","setAuthLoaded","handleAuthPlaceholderClick","isSidebarEffectivelyHidden","layoutClasses","filter","Boolean","join","jsxs","Layout__mobileActionsContainer","Layout__mobileActions","Suspense","fallback","jsxRuntimeExports","Layout__mobileActionButton","disabled","SignInIcon","onLogin","onLogout","userName","displayName","email","isLoading","onClick","title","GearIcon","triggerButtonClassName","actions","icon","style","fontSize","label","isOpen","onToggle","Layout__modalOverlay","Layout__modalContent","e","stopPropagation","onClose","Layout__sidebarContainer","Layout__sidebarPlaceholder","onToggleSettings","onToggleSidebar","Layout__mainContentContainer","Layout__contentPlaceholder","Layout__overlay"],"ignoreList":[],"sources":["../../src/hooks/useMediaQuery.jsx","../../src/components/layout/Layout/index.jsx"],"sourcesContent":["import { useState, useEffect, useMemo } from 'react';\n\n// Define breakpoint constants in a single source of truth\nexport const BREAKPOINTS = {\n  mobile: '640px',\n  tablet: '1023px',\n  desktop: '1024px',\n  settings: '550px'\n};\n\n// Cached media query listeners\nconst mediaQueryListeners = new Map();\n\n/**\n * Custom hook that returns true if the current viewport matches the provided media query\n * @param {string} query - Media query string e.g., \"(max-width: 1024px)\"\n * @returns {boolean} - True if the media query matches\n */\nexport const useMediaQuery = (query) => {\n  // Initialize with the current match state\n  const [matches, setMatches] = useState(() => {\n    // Check for window to avoid SSR issues\n    if (typeof window !== 'undefined') {\n      return window.matchMedia(query).matches;\n    }\n    return false;\n  });\n\n  useEffect(() => {\n    // Avoid running in SSR context\n    if (typeof window === 'undefined') {\n      return undefined;\n    }\n\n    // Check if we already have a listener for this query\n    if (!mediaQueryListeners.has(query)) {\n      // Create media query list\n      const mediaQueryList = window.matchMedia(query);\n      \n      // Create listener registry for this query\n      mediaQueryListeners.set(query, {\n        mediaQueryList,\n        listeners: new Set()\n      });\n    }\n    \n    const queryData = mediaQueryListeners.get(query);\n    const { mediaQueryList, listeners } = queryData;\n\n    // Initial check\n    setMatches(mediaQueryList.matches);\n\n    // Define listener function\n    const listener = (event) => {\n      setMatches(event.matches);\n    };\n    \n    // Add listener to registry\n    listeners.add(listener);\n\n    // Modern browsers\n    if (mediaQueryList.addEventListener) {\n      mediaQueryList.addEventListener('change', listener);\n      return () => {\n        mediaQueryList.removeEventListener('change', listener);\n        listeners.delete(listener);\n        \n        // Clean up registry if no more listeners\n        if (listeners.size === 0) {\n          mediaQueryListeners.delete(query);\n        }\n      };\n    } \n    // Legacy support for older browsers (e.g., IE, older Safari)\n    else if (mediaQueryList.addListener) {\n      mediaQueryList.addListener(listener);\n      return () => {\n        mediaQueryList.removeListener(listener);\n        listeners.delete(listener);\n        \n        // Clean up registry if no more listeners\n        if (listeners.size === 0) {\n          mediaQueryListeners.delete(query);\n        }\n      };\n    }\n\n    return undefined;\n  }, [query]);\n\n  return matches;\n};\n\n/**\n * Pre-configured hooks for common breakpoints\n */\nexport const useIsMobile = () => {\n  const query = useMemo(() => `(max-width: ${BREAKPOINTS.mobile})`, []);\n  return useMediaQuery(query);\n};\n\nexport const useIsTablet = () => {\n  const query = useMemo(() => \n    `(min-width: calc(${BREAKPOINTS.mobile} + 1px)) and (max-width: ${BREAKPOINTS.tablet})`, []);\n  return useMediaQuery(query);\n};\n\nexport const useIsDesktop = () => {\n  const query = useMemo(() => `(min-width: ${BREAKPOINTS.desktop})`, []);\n  return useMediaQuery(query);\n};\n\n/**\n * Special hook for settings components\n */\nexport const useIsSettingsMobile = () => {\n  const query = useMemo(() => `(max-width: ${BREAKPOINTS.settings})`, []);\n  return useMediaQuery(query);\n};\n\nexport const useIsSettingsDesktop = () => {\n  const query = useMemo(() => `(min-width: calc(${BREAKPOINTS.settings} + 1px))`, []);\n  return useMediaQuery(query);\n};\n\n/**\n * Get a consistent breakpoint value across the app\n * @returns {{mobile: string, tablet: string, desktop: string, settings: string}}\n */\nexport const useBreakpoints = () => {\n  return BREAKPOINTS;\n}; ","import { lazy, useState, useCallback, Suspense } from 'react';\nimport { useIsDesktop } from '../../../hooks/useMediaQuery';\nimport { useModel } from '../../../contexts/ModelContext';\nimport { useAuth } from '../../../contexts/AuthContext'; // Import useAuth\nimport { useTheme } from '../../../contexts/ThemeContext'; // Import ThemeContext\nimport { GearIcon, SignInIcon } from '@primer/octicons-react';\nimport styles from './Layout.module.css';\n// Import icons using the correct paths\n// Import only the specific icons needed\n\n\n// Lazily loaded components - Prefetch hints removed for manual loading\nconst Sidebar = lazy(() => import(/* webpackChunkName: \"layout-sidebar\" */ '../Sidebar'));\nconst MainContent = lazy(() => import(/* webpackPreload: true, webpackChunkName: \"layout-main\" */ '../MainContent'));\nconst ModelDropdown = lazy(() => import(/* webpackChunkName: \"models-dropdown\" */ '../../models/ModelDropdown'));\nconst Spinner = lazy(() => import(/* webpackChunkName: \"common-spinner\" */ '../../common/Spinner'));\nconst ThemeToggle = lazy(() => import(/* webpackChunkName: \"common-theme\" */ '../../common/ThemeToggle'));\nconst SettingsPanel = lazy(() => import(/* webpackChunkName: \"settings-panel\" */ '../../settings/SettingsPanel'));\nconst SidebarToggle = lazy(() => import(/* webpackChunkName: \"layout-sidebar-toggle\" */ '../SidebarToggle'));\nconst MoreActions = lazy(() => import(/* webpackChunkName: \"common-more-actions\" */ '../../common/MoreActions'));\nconst AuthButton = lazy(() => import(/* webpackChunkName: \"auth-button\" */ '../../auth/AuthButton'));\n\n// Loading fallback component\nconst LoadingFallback = () => (\n  <div className={styles.loadingFallback}>\n    <Spinner size=\"medium\" />\n  </div>\n);\n\n/**\n * Layout component that handles responsive design\n * @returns {JSX.Element} - Rendered layout\n */\nconst Layout = () => {\n  const isDesktop = useIsDesktop();\n  // Default sidebar to open on desktop, closed on mobile initially\n  const [isSidebarOpen, setIsSidebarOpen] = useState(isDesktop); \n  const [isSettingsOpen, setIsSettingsOpen] = useState(false); // State for settings panel\n  const [isModelSelectorOpen, setIsModelSelectorOpen] = useState(false); // State for model selector visibility\n  const { selectedModel, isLoadingModels } = useModel(); // Get model data\n  const { currentUser, isAuthenticated, login, logout, loading: authLoading } = useAuth(); // Get auth context\n  const { theme, toggleTheme } = useTheme(); // Get theme context\n\n  const toggleSidebar = useCallback(() => {\n    setIsSidebarOpen(prev => !prev);\n  }, []);\n\n  // Toggle settings panel - passed down from MainContent originally, now managed here\n  const toggleSettings = useCallback(() => {\n    // console.log(\"Toggling settings panel...\"); // Add log\n    setIsSettingsOpen(prev => {\n      // console.log(\"Previous state:\", prev, \"New state:\", !prev); // Log state change\n      return !prev;\n    });\n  }, []);\n\n  const toggleModelSelector = useCallback(() => {\n    setIsModelSelectorOpen(prev => !prev);\n  }, []);\n\n  // Lazy-load placeholder logic for AuthButton\n  const [authLoaded, setAuthLoaded] = useState(false);\n  const handleAuthPlaceholderClick = useCallback(() => {\n    setAuthLoaded(true);\n    login();\n  }, [login]);\n\n  // Determine layout classes based on state and viewport\n  const isSidebarEffectivelyHidden = isDesktop && !isSidebarOpen;\n  const layoutClasses = [\n    styles.Layout,\n    isSidebarEffectivelyHidden ? styles['Layout--sidebarCompact'] : '', // Handles transform\n    !isDesktop && isSidebarOpen ? styles['Layout--sidebarOpenMobile'] : '', // Mobile slide-in\n  ].filter(Boolean).join(' ');\n\n  return (\n    <div className={layoutClasses}>\n      {/* Mobile Actions Container (Top Right) */}\n      <div className={styles.Layout__mobileActionsContainer}>\n        <div className={styles.Layout__mobileActions}>\n          {/* Theme Toggle */}\n          <Suspense fallback={null}>\n            <ThemeToggle />\n          </Suspense>\n          \n          {/* Auth Button placeholder: show generic icon, load AuthButton on click */}\n          {authLoaded ? (\n            <Suspense fallback={\n              <button className={styles.Layout__mobileActionButton} disabled aria-label=\"Loading Authentication\">\n                <SignInIcon size={20} />\n              </button>\n            }>\n              <AuthButton \n                isAuthenticated={isAuthenticated}\n                onLogin={login}\n                onLogout={logout}\n                userName={currentUser?.displayName || currentUser?.email || 'User'}\n                isLoading={authLoading}\n                currentUser={currentUser}\n              />\n            </Suspense>\n          ) : (\n            <button\n              className={styles.Layout__mobileActionButton}\n              onClick={handleAuthPlaceholderClick}\n              aria-label=\"Login\"\n              title=\"Login or Sign Up\"\n            >\n              <SignInIcon size={20} />\n            </button>\n          )}\n          \n          {/* Settings Button */}\n          <button \n            className={styles.Layout__mobileActionButton} \n            onClick={toggleSettings}\n            aria-label=\"Settings\"\n            title=\"Settings\"\n          >\n            <GearIcon size={20} />\n          </button>\n          \n          {/* More Actions Menu - Now pass only additional actions */}\n          <MoreActions \n            triggerButtonClassName={styles.Layout__mobileActionButton}\n            actions={ // Pass only the mobile-specific actions now\n              isDesktop ? [] : [\n                // Theme toggle action\n                {\n                  icon: theme === 'dark' ? <span style={{ fontSize: '16px' }}>☀️</span> : <span style={{ fontSize: '16px' }}>🌙</span>,\n                  label: `Switch to ${theme === 'dark' ? 'light' : 'dark'} mode`,\n                  onClick: toggleTheme\n                },\n                // Settings action\n                {\n                  icon: <GearIcon size={16} />,\n                  label: 'Settings',\n                  onClick: toggleSettings\n                },\n                // Login/Logout action\n                {\n                  icon: isAuthenticated ? <span style={{ fontSize: '16px' }}>👤</span> : <span style={{ fontSize: '16px' }}>🔑</span>,\n                  label: isAuthenticated ? `Logout (${currentUser?.displayName || currentUser?.email || 'User'})` : 'Login',\n                  onClick: isAuthenticated ? logout : login\n                }\n              ]\n            }\n          />\n        </div>\n      </div>\n\n      {/* Sidebar Toggle (floating) - only when sidebar is closed */}\n      {!isSidebarOpen && (\n        <Suspense fallback={<LoadingFallback />}>\n          <SidebarToggle\n            isOpen={isSidebarOpen}\n            onToggle={toggleSidebar}\n          />\n        </Suspense>\n      )}\n\n      {/* Conditionally render the ModelDropdown as a modal/overlay */}\n      {isModelSelectorOpen && (\n        <div className={styles.Layout__modalOverlay} onClick={toggleModelSelector}>\n          <div className={styles.Layout__modalContent} onClick={(e) => e.stopPropagation()}>\n            <Suspense fallback={<LoadingFallback />}>\n              <ModelDropdown onClose={toggleModelSelector} /> \n            </Suspense>\n          </div>\n        </div>\n      )}\n\n      {/* Sidebar container */}\n      {isSidebarOpen && (\n        <div className={styles.Layout__sidebarContainer}>\n          <Suspense fallback={<div className={styles.Layout__sidebarPlaceholder} />}>\n            <Sidebar \n              onToggleSettings={toggleSettings}\n              onToggleSidebar={toggleSidebar}\n            />\n          </Suspense>\n        </div>\n      )}\n      \n      {/* Main content container */}\n      <div className={styles.Layout__mainContentContainer}>\n        <Suspense fallback={<div className={styles.Layout__contentPlaceholder} />}>\n          <MainContent \n            isSidebarOpen={isSidebarOpen} \n            toggleSidebar={toggleSidebar} \n            isSettingsOpen={isSettingsOpen} \n            toggleSettings={toggleSettings}\n            selectedModel={selectedModel}\n            isLoadingModels={isLoadingModels}\n            toggleModelSelector={toggleModelSelector}\n            isModelSelectorOpen={isModelSelectorOpen}\n            onToggleSettings={toggleSettings}\n          />\n        </Suspense>\n      </div>\n\n      {/* Mobile overlay */}\n      {!isDesktop && isSidebarOpen && (\n        <div \n          className={`${styles.Layout__overlay} ${styles['Layout__overlay--visible']}`}\n          onClick={toggleSidebar}\n          aria-hidden=\"true\"\n        />\n      )}\n\n      {/* Conditionally render Settings Panel */}\n      {/* Always mount SettingsPanel to enable CSS transitions on open/close */}\n      <Suspense fallback={null}>\n        <SettingsPanel \n          isOpen={isSettingsOpen} \n          onClose={toggleSettings} \n        />\n      </Suspense>\n    </div>\n  );\n};\n\nexport default Layout; "],"file":"assets/index-Bjp1aayD.js"}