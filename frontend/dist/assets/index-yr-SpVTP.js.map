{"version":3,"file":"index-yr-SpVTP.js","sources":["../../src/components/settings/SettingsSlider/index.jsx"],"sourcesContent":["import { memo, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { InfoIcon } from '../icons';\nimport styles from './SettingsSlider.module.css';\nimport commonStyles from '../common/ControlStyles.module.css';\n\n/**\n * Slider control for numeric settings\n * @param {Object} props - Component props\n * @param {string} props.id - Unique identifier for the slider\n * @param {string} props.label - Label text\n * @param {number} props.value - Current value\n * @param {number} props.min - Minimum value\n * @param {number} props.max - Maximum value\n * @param {number} props.step - Step size\n * @param {Function} props.onChange - Change handler function\n * @param {boolean} [props.disabled=false] - Whether the slider is disabled\n * @param {string} [props.tooltip] - Tooltip text\n * @param {string} [props.size='medium'] - Size variant ('small', 'medium', or 'large')\n * @param {boolean} [props.allowDirectInput=false] - Whether to show a number input field\n * @returns {JSX.Element} - Rendered component\n */\nconst SettingsSlider = memo(({\n  id,\n  label,\n  value,\n  min,\n  max,\n  step,\n  onChange,\n  disabled = false,\n  tooltip,\n  size = 'medium',\n  allowDirectInput = false\n}) => {\n  // Add local state for input field\n  const [inputValue, setInputValue] = useState(value.toString());\n  \n  // Update input value when prop value changes\n  useEffect(() => {\n    setInputValue(value.toString());\n  }, [value]);\n  \n  // Calculate percentage for slider fill\n  const percentage = ((value - min) / (max - min)) * 100;\n  \n  // Format displayed value based on step size\n  const displayValue = Number(value).toFixed(step < 1 ? 2 : 0);\n  \n  // Build class list for SettingsSlider\n  const sliderClasses = [commonStyles.controlContainer, styles.SettingsSlider];\n  if (disabled) sliderClasses.push(styles['SettingsSlider--disabled']);\n  if (size === 'small') sliderClasses.push(styles['SettingsSlider--small']);\n  else if (size === 'large') sliderClasses.push(styles['SettingsSlider--large']);\n  \n  // Handle slider change\n  const handleSliderChange = e => {\n    if (!disabled) onChange(parseFloat(e.target.value));\n  };\n  \n  // Handle input field change\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n  \n  // Handle input field blur (commit value)\n  const handleInputBlur = () => {\n    if (disabled) return;\n    \n    // Parse and validate input\n    let newValue = parseFloat(inputValue);\n    \n    // Handle NaN and enforce min/max bounds\n    if (isNaN(newValue)) {\n      setInputValue(value.toString());\n      return;\n    }\n    \n    // Enforce min/max bounds\n    newValue = Math.max(min, Math.min(max, newValue));\n    \n    // Update the value and input field\n    onChange(newValue);\n    setInputValue(newValue.toString());\n  };\n  \n  // Handle input field key press\n  const handleKeyDown = e => {\n    if (e.key === 'Enter') {\n      e.target.blur(); // Trigger blur to commit the value\n    }\n  };\n  \n  return (\n    <div className={sliderClasses.join(' ')}>\n      <div className={commonStyles.controlHeader}>\n        <label htmlFor={id} className={commonStyles.controlLabel}>\n          {label}\n          {tooltip && (\n            <span className={styles.SettingsSlider__tooltipWrapper}>\n              <InfoIcon className={styles.SettingsSlider__infoIcon} />\n              <span className={styles.SettingsSlider__tooltip}>{tooltip}</span>\n            </span>\n          )}\n        </label>\n        \n        {allowDirectInput ? (\n          <input\n            type=\"number\"\n            className={styles.SettingsSlider__numberInput}\n            value={inputValue}\n            onChange={handleInputChange}\n            onBlur={handleInputBlur}\n            onKeyDown={handleKeyDown}\n            min={min}\n            max={max}\n            step={step}\n            disabled={disabled}\n            aria-label={`${label} value`}\n          />\n        ) : (\n          <span className={styles.SettingsSlider__value}>{displayValue}</span>\n        )}\n      </div>\n      \n      <div className={styles.SettingsSlider__track}>\n        <div \n          className={styles.SettingsSlider__fill} \n          style={{ width: `${percentage}%` }}\n        />\n        \n        <input\n          id={id}\n          type=\"range\"\n          className={styles.SettingsSlider__slider}\n          value={value}\n          min={min}\n          max={max}\n          step={step}\n          onChange={handleSliderChange}\n          disabled={disabled}\n          aria-valuemin={min}\n          aria-valuemax={max}\n          aria-valuenow={value}\n          aria-label={label}\n        />\n      </div>\n    </div>\n  );\n});\n\nSettingsSlider.propTypes = {\n  id: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  value: PropTypes.number.isRequired,\n  min: PropTypes.number.isRequired,\n  max: PropTypes.number.isRequired,\n  step: PropTypes.number.isRequired,\n  onChange: PropTypes.func.isRequired,\n  disabled: PropTypes.bool,\n  tooltip: PropTypes.string,\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n  allowDirectInput: PropTypes.bool\n};\n\n// Display name for debugging\nSettingsSlider.displayName = 'SettingsSlider';\n\nexport default SettingsSlider; "],"names":["SettingsSlider","memo","id","label","value","min","max","step","onChange","disabled","tooltip","size","allowDirectInput","inputValue","setInputValue","useState","toString","useEffect","percentage","displayValue","Number","toFixed","sliderClasses","commonStyles","controlContainer","styles","push","className","join","children","jsxs","controlHeader","htmlFor","controlLabel","jsx","InfoIcon","jsxRuntimeExports","type","e","target","onBlur","handleInputBlur","newValue","parseFloat","isNaN","Math","onKeyDown","key","blur","style","width","displayName"],"mappings":"gvGAsBMA,EAAiBC,QAAK,EAC1BC,KACAC,QACAC,QACAC,MACAC,MACAC,OACAC,WACAC,YAAW,EACXC,UACAC,OAAO,SACPC,oBAAmB,MAGb,MAACC,EAAYC,GAAiBC,EAAAA,SAASX,EAAMY,YAGnDC,EAAAA,WAAU,KACMb,EAAAA,EAAMY,WAAU,GAC7B,CAACZ,IAGJ,MAAMc,GAAed,EAAQC,IAAQC,EAAMD,GAAQ,IAG7Cc,EAAeC,OAAOhB,GAAOiB,QAAQd,EAAO,EAAI,EAAI,GAGpDe,EAAgB,CAACC,EAAaC,iBAAkBC,GAClDhB,GAAUa,EAAcI,KAAKD,GACpB,UAATd,EAAkBW,EAAcI,KAAKD,GACvB,UAATd,GAAkBW,EAAcI,KAAKD,iBAyC3C,MAAI,CAAAE,UAAWL,EAAcM,KAAK,KACjCC,SAAA,GAACC,KAAA,MAAA,CAAIH,UAAWJ,EAAaQ,cAC3BF,SAAA,CAAAC,OAAC,QAAM,CAAAE,QAAS9B,EAAIyB,UAAWJ,EAAaU,aACzC9B,SAAAA,CAAAA,EACAO,KACCoB,KAAC,OAAK,CAAAH,UAAWF,EACfI,SAAA,GAACK,IAAAC,EAAA,CAASR,UAAWF,IACpBS,EAAAA,IAAA,OAAA,CAAKP,UAAWF,EAAiCf,SAAQA,UAK/DE,EACCwB,EAAAF,IAAC,QACC,CAAAG,KAAK,SACLV,UAAWF,EACXrB,MAAOS,EACPL,SAlDqB8B,IACfA,EAAAA,EAAEC,OAAOnC,MAAK,EAkDpBoC,OA9CcC,KACtB,GAAIhC,EAAU,OAGViC,IAAAA,EAAWC,WAAW9B,GAGtB+B,MAAMF,GACMtC,EAAAA,EAAMY,aAKtB0B,EAAWG,KAAKvC,IAAID,EAAKwC,KAAKxC,IAAIC,EAAKoC,IAGvClC,EAASkC,GACKA,EAAAA,EAAS1B,YAAU,EA8BzB8B,UA1BiBR,IACX,UAAVA,EAAES,KACJT,EAAEC,OAAOS,MAAK,EAyBR3C,MACAC,MACAC,OACAE,WACA,aAAY,GAAGN,YAGhBiC,EAAAF,IAAA,OAAA,CAAKP,UAAWF,EAA+BN,SAAaA,SAIhEW,KAAA,MAAA,CAAIH,UAAWF,EACdI,SAAA,GAAAK,IAAC,MACC,CAAAP,UAAWF,EACXwB,MAAO,CAAEC,MAAO,GAAGhC,QAGrBgB,EAAAA,IAAC,SACChC,KACAmC,KAAK,QACLV,UAAWF,EACXrB,QACAC,MACAC,MACAC,OACAC,SAnFwB8B,IACzB7B,GAAUD,EAASmC,WAAWL,EAAEC,OAAOnC,OAAM,EAmF5CK,WACA,gBAAeJ,EACf,gBAAeC,EACf,gBAAeF,EACf,aAAYD,SAGlB,IAmBJH,EAAemD,YAAc"}