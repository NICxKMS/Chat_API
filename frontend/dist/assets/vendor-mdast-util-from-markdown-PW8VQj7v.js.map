{"version":3,"file":"vendor-mdast-util-from-markdown-PW8VQj7v.js","sources":["../../node_modules/mdast-util-from-markdown/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n"],"names":["own","hasOwnProperty","fromMarkdown","value","encoding","options","config","transforms","canContainEols","enter","autolink","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","heading","blockQuote","characterEscape","characterReference","codeFenced","codeFlow","codeFencedFenceInfo","buffer","codeFencedFenceMeta","codeIndented","codeText","codeTextData","data","codeFlowValue","definition","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreakEscape","hardBreak","hardBreakTrailing","htmlFlow","html","htmlFlowData","htmlText","htmlTextData","image","label","listItem","listItemValue","onenterlistitemvalue","listOrdered","list","onenterlistordered","listUnordered","paragraph","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","thematicBreak","exit","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","lineEnding","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","events","tree","type","children","context","stack","tokenStack","resume","setData","getData","listStack","index","length","push","prepareList","pop","handler","call","Object","assign","sliceSerialize","tail","defaultOnError","position","start","point","line","column","offset","end","lineIndex","firstBlankLineIndex","atMarker","containerBalance","listSpread","event","tailIndex","tailEvent","_spread","splice","key","create","and","open","token","this","node","errorHandler","close","onExitError","Error","stringifyPosition","toString","Number","parseInt","lang","meta","replace","identifier","normalizeIdentifier","toLowerCase","title","url","depth","charCodeAt","text","includes","referenceType","string","ancestor","decodeString","fragment","alt","decodeNumericCharacterReference","decodeNamedCharacterReference","ordered","spread","checked","compiler","postprocess","parse","document","write","preprocess","d","combined","extensions","Array","isArray","extension","right","left"],"mappings":"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","x_google_ignoreList":[0]}