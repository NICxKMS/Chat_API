{"version":3,"file":"vendor-micromark-util-combine-extensions-D0lltlzb.js","sources":["../../node_modules/micromark-util-combine-extensions/index.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n"],"names":["hasOwnProperty","combineExtensions","extensions","all","index","length","syntaxExtension","extension","hook","left","call","right","code","value","constructs","Array","isArray","existing","list","before","add","push","splice"],"mappings":"gEASA,MAAMA,EAAiB,CAAA,EAAGA,eAUnB,SAASC,EAAkBC,GAEhC,MAAMC,EAAM,CAAA,EACZ,IAAIC,GAAQ,EAEL,OAAEA,EAAQF,EAAWG,QACVC,EAAAH,EAAKD,EAAWE,IAG3B,OAAAD,CACT,CAWA,SAASG,EAAgBH,EAAKI,GAExB,IAAAC,EAEJ,IAAKA,KAAQD,EAAW,CAChB,MAEAE,GAFQT,EAAeU,KAAKP,EAAKK,GAAQL,EAAIK,QAAQ,KAEpCL,EAAIK,GAAQ,CAAE,GAE/BG,EAAQJ,EAAUC,GAEpB,IAAAI,EAEJ,GAAID,EACF,IAAKC,KAAQD,EAAO,CACbX,EAAeU,KAAKD,EAAMG,KAAOH,EAAKG,GAAQ,IAC7C,MAAAC,EAAQF,EAAMC,GACpBE,EAEEL,EAAKG,GACLG,MAAMC,QAAQH,GAASA,EAAQA,EAAQ,CAACA,GAAS,GAE3D,CAEA,CACA,CAUA,SAASC,EAAWG,EAAUC,GAC5B,IAAId,GAAQ,EAEZ,MAAMe,EAAS,GAER,OAAEf,EAAQc,EAAKb,SAEE,UAApBa,EAAKd,GAAOgB,IAAkBH,EAAWE,GAAQE,KAAKH,EAAKd,IAGxDkB,EAAAL,EAAU,EAAG,EAAGE,EACzB","x_google_ignoreList":[0]}