{"version":3,"file":"vendor-mdast-util-gfm-footnote-50hpPH2M.js","sources":["../../node_modules/mdast-util-gfm-footnote/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n */\n\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {association} from 'mdast-util-to-markdown/lib/util/association.js'\nimport {containerFlow} from 'mdast-util-to-markdown/lib/util/container-flow.js'\nimport {indentLines} from 'mdast-util-to-markdown/lib/util/indent-lines.js'\nimport {safe} from 'mdast-util-to-markdown/lib/util/safe.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n// To do: next major: rename `context` -> `state`, `safeOptions` to `info`, use\n// utilities on `state`.\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = /** @type {FootnoteDefinition} */ (\n    this.stack[this.stack.length - 1]\n  )\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = /** @type {FootnoteDefinition} */ (\n    this.stack[this.stack.length - 1]\n  )\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  let value = tracker.move('[^')\n  const exit = context.enter('footnoteReference')\n  const subexit = context.enter('reference')\n  value += tracker.move(\n    safe(context, association(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\nfunction footnoteDefinition(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  let value = tracker.move('[^')\n  const exit = context.enter('footnoteDefinition')\n  const subexit = context.enter('label')\n  value += tracker.move(\n    safe(context, association(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  value += tracker.move(\n    ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n  )\n  tracker.shift(4)\n  value += tracker.move(\n    indentLines(containerFlow(node, context, tracker.current()), map)\n  )\n  exit()\n\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line\n  }\n\n  return (blank ? '' : '    ') + line\n}\n"],"names":["gfmFootnoteFromMarkdown","enter","gfmFootnoteDefinition","enterFootnoteDefinition","gfmFootnoteDefinitionLabelString","enterFootnoteDefinitionLabelString","gfmFootnoteCall","enterFootnoteCall","gfmFootnoteCallString","enterFootnoteCallString","exit","exitFootnoteDefinition","exitFootnoteDefinitionLabelString","exitFootnoteCall","exitFootnoteCallString","gfmFootnoteToMarkdown","unsafe","character","inConstruct","handlers","footnoteDefinition","footnoteReference","token","this","type","identifier","label","children","buffer","resume","node","stack","length","normalizeIdentifier","sliceSerialize","toLowerCase","_","context","safeOptions","tracker","track","value","move","subexit","safe","association","current","before","after","shift","indentLines","containerFlow","map","line","index","blank","peek"],"mappings":"+JA8BO,SAASA,IACP,MAAA,CACLC,MAAO,CACLC,sBAAuBC,EACvBC,iCAAkCC,EAClCC,gBAAiBC,EACjBC,sBAAuBC,GAEzBC,KAAM,CACJR,sBAAuBS,EACvBP,iCAAkCQ,EAClCN,gBAAiBO,EACjBL,sBAAuBM,GAG7B,CASO,SAASC,IACP,MAAA,CAELC,OAAQ,CAAC,CAACC,UAAW,IAAKC,YAAa,CAAC,WAAY,QAAS,eAC7DC,SAAU,CAACC,qBAAoBC,qBAEnC,CAMA,SAASlB,EAAwBmB,GAC1BC,KAAAtB,MACH,CAACuB,KAAM,qBAAsBC,WAAY,GAAIC,MAAO,GAAIC,SAAU,IAClEL,EAEJ,CAMA,SAASjB,IACPkB,KAAKK,QACP,CAMA,SAAShB,EAAkCU,GACnC,MAAAI,EAAQH,KAAKM,SACbC,EACJP,KAAKQ,MAAMR,KAAKQ,MAAMC,OAAS,GAEjCF,EAAKJ,MAAQA,EACbI,EAAKL,WAAaQ,EAChBV,KAAKW,eAAeZ,IACpBa,aACJ,CAMA,SAASxB,EAAuBW,GAC9BC,KAAKb,KAAKY,EACZ,CAMA,SAASf,EAAkBe,GACpBC,KAAAtB,MAAM,CAACuB,KAAM,oBAAqBC,WAAY,GAAIC,MAAO,IAAKJ,EACrE,CAMA,SAASb,IACPc,KAAKK,QACP,CAMA,SAASd,EAAuBQ,GACxB,MAAAI,EAAQH,KAAKM,SACbC,EACJP,KAAKQ,MAAMR,KAAKQ,MAAMC,OAAS,GAEjCF,EAAKJ,MAAQA,EACbI,EAAKL,WAAaQ,EAChBV,KAAKW,eAAeZ,IACpBa,aACJ,CAMA,SAAStB,EAAiBS,GACxBC,KAAKb,KAAKY,EACZ,CAMA,SAASD,EAAkBS,EAAMM,EAAGC,EAASC,GACrC,MAAAC,EAAUC,EAAMF,GAClB,IAAAG,EAAQF,EAAQG,KAAK,MACnB,MAAAhC,EAAO2B,EAAQpC,MAAM,qBACrB0C,EAAUN,EAAQpC,MAAM,aAWvB,OAVPwC,GAASF,EAAQG,KACfE,EAAKP,EAASQ,EAAYf,GAAO,IAC5BS,EAAQO,UACXC,OAAQN,EACRO,MAAO,OAGJL,IACHjC,IACK+B,GAAAF,EAAQG,KAAK,KACfD,CACT,CAWA,SAASrB,EAAmBU,EAAMM,EAAGC,EAASC,GACtC,MAAAC,EAAUC,EAAMF,GAClB,IAAAG,EAAQF,EAAQG,KAAK,MACnB,MAAAhC,EAAO2B,EAAQpC,MAAM,sBACrB0C,EAAUN,EAAQpC,MAAM,SAkBvB,OAjBPwC,GAASF,EAAQG,KACfE,EAAKP,EAASQ,EAAYf,GAAO,IAC5BS,EAAQO,UACXC,OAAQN,EACRO,MAAO,OAGJL,IACPF,GAASF,EAAQG,KACf,MAAQZ,EAAKH,UAAYG,EAAKH,SAASK,OAAS,EAAI,IAAM,KAE5DO,EAAQU,MAAM,GACdR,GAASF,EAAQG,KACfQ,EAAYC,EAAcrB,EAAMO,EAASE,EAAQO,WAAYM,IAE3D1C,IAEG+B,CACT,CAGA,SAASW,EAAIC,EAAMC,EAAOC,GACxB,OAAc,IAAVD,EACKD,GAGDE,EAAQ,GAAK,QAAUF,CACjC,CA5LAhC,EAAkBmC,KAoJlB,WACS,MAAA,GACT","x_google_ignoreList":[0]}