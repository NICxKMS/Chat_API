{"version":3,"file":"index-BGlFvna6.js","sources":["../../src/components/models/ModelSelectorButton/index.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { useState, useEffect, useRef } from 'react';\nimport { ChevronDownIcon } from '@primer/octicons-react';\nimport styles from './ModelSelectorButton.module.css';\nimport Spinner from '../../common/Spinner';\n\n/**\n * Button to trigger the model selection UI (Dropdown/Modal)\n */\nconst ModelSelectorButton = ({ \n  selectedModelName = null, \n  providerName = null,\n  onClick, \n  disabled = false \n}) => {\n  // State to track window width for responsive text\n  const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);\n  const [showProvider, setShowProvider] = useState(false);\n  const buttonRef = useRef(null);\n  const textRef = useRef(null);\n  const [buttonWidth, setButtonWidth] = useState(0);\n  const [buttonSet, setButtonSet] = useState(false);\n  const [hasOverflow, setHasOverflow] = useState(false);\n\n  // Update mobile state on window resize\n  useEffect(() => {\n    const handleResize = () => {\n      setIsMobile(window.innerWidth <= 768);\n    };\n    \n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  \n  // Measure button width once it's rendered with the model name\n  useEffect(() => {\n    if (buttonRef.current && selectedModelName && !buttonSet) {\n      const width = buttonRef.current.offsetWidth;\n      setButtonWidth(width);\n      setButtonSet(true);\n    }\n  }, [selectedModelName, buttonSet]);\n  \n  // Apply width to button when width is determined\n  useEffect(() => {\n    if (buttonWidth > 0 && buttonRef.current) {\n      buttonRef.current.style.width = `${buttonWidth+10}px`;\n    }\n  }, [buttonWidth]);\n  \n  // Animation to toggle between model and provider\n  useEffect(() => {\n    if (!selectedModelName || !providerName) return;\n    \n    const interval = setInterval(() => {\n      setShowProvider(prev => !prev);\n    }, 5000);\n    \n    return () => clearInterval(interval);\n  }, [selectedModelName, providerName]);\n  \n  // Check if text is overflowing\n  useEffect(() => {\n    if (textRef.current) {\n      const isOverflowing = textRef.current.scrollWidth > textRef.current.clientWidth;\n      setHasOverflow(isOverflowing);\n    }\n  }, [showProvider, selectedModelName, providerName, isMobile]);\n  \n  // Format provider name to title case\n  const getFormattedProvider = () => {\n    if (!providerName) return '';\n    \n    return providerName\n      .split(' ')\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n      .join(' ')\n      .replace(/Ai\\b/g, 'AI');\n  };\n  \n  // Get display text based on current state\n  const displayText = () => {\n    if (!selectedModelName) {\n      return isMobile ? 'Select Model' : 'Select a Model';\n    }\n    \n    if (!providerName || !showProvider) {\n      return selectedModelName;\n    } else {\n      return getFormattedProvider();\n    }\n  };\n  \n  return (\n    <button \n      ref={buttonRef}\n      className={styles.ModelSelectorButton}\n      onClick={onClick}\n      disabled={disabled}\n      aria-haspopup=\"true\"\n      aria-label={`Select Model (Current: ${selectedModelName || 'None'})`}\n    >\n      {disabled && !selectedModelName ? (\n        <Spinner size=\"small\" className={styles.ModelSelectorButton__spinner} />\n      ) : (\n        <div className={styles.ModelSelectorButton__innerContent}>\n          <span \n            ref={textRef}\n            className={`${styles.ModelSelectorButton__text} ${showProvider ? styles['ModelSelectorButton__text--showProvider'] : ''} ${hasOverflow && showProvider ? styles['ModelSelectorButton__text--scrollText'] : ''}`}\n          >\n            {displayText()}\n          </span>\n          <ChevronDownIcon size={16} className={styles.ModelSelectorButton__icon} />\n        </div>\n      )}\n    </button>\n  );\n};\n\nModelSelectorButton.propTypes = {\n  /** Currently selected model name to display */\n  selectedModelName: PropTypes.string,\n  /** Provider name of the selected model */\n  providerName: PropTypes.string,\n  /** Function to call when the button is clicked */\n  onClick: PropTypes.func.isRequired,\n  /** Whether the button should be disabled */\n  disabled: PropTypes.bool,\n};\n\nexport default ModelSelectorButton;"],"names":["ModelSelectorButton","selectedModelName","providerName","onClick","disabled","isMobile","setIsMobile","useState","window","innerWidth","showProvider","setShowProvider","buttonRef","useRef","textRef","buttonWidth","setButtonWidth","buttonSet","setButtonSet","hasOverflow","setHasOverflow","useEffect","handleResize","addEventListener","removeEventListener","current","width","offsetWidth","style","interval","setInterval","prev","clearInterval","isOverflowing","scrollWidth","clientWidth","jsx","ref","className","styles","Spinner","size","jsxs","children","displayText","split","map","word","charAt","toUpperCase","slice","toLowerCase","join","replace","ChevronDownIcon"],"mappings":"ygGASMA,EAAsBA,EAC1BC,oBAAoB,KACpBC,eAAe,KACfC,UACAC,YAAW,MAGL,MAACC,EAAUC,GAAeC,EAASC,SAAAA,OAAOC,YAAc,MACvDC,EAAcC,GAAmBJ,EAAAA,UAAS,GAC3CK,EAAYC,SAAO,MACnBC,EAAUD,SAAO,OAChBE,EAAaC,GAAkBT,EAAAA,SAAS,IACxCU,EAAWC,GAAgBX,EAAAA,UAAS,IACpCY,EAAaC,GAAkBb,EAAAA,UAAS,GAG/Cc,EAAAA,WAAU,KACR,MAAMC,EAAeA,KACPd,EAAAA,OAAOC,YAAc,IAAG,EAItC,OADOc,OAAAA,iBAAiB,SAAUD,GAC3B,IAAMd,OAAOgB,oBAAoB,SAAUF,EAAY,GAC7D,IAGHD,EAAAA,WAAU,KACR,GAAIT,EAAUa,SAAWxB,IAAsBgB,EAAW,CAClDS,MAAAA,EAAQd,EAAUa,QAAQE,YAChCX,EAAeU,GACfR,GAAa,EAAI,IAElB,CAACjB,EAAmBgB,IAGvBI,EAAAA,WAAU,KACJN,EAAc,GAAKH,EAAUa,UAC/Bb,EAAUa,QAAQG,MAAMF,MAAQ,GAAGX,EAAY,OAAE,GAElD,CAACA,IAGJM,EAAAA,WAAU,KACJ,IAACpB,IAAsBC,EAAc,OAEnC2B,MAAAA,EAAWC,aAAY,KACXC,GAAAA,IAASA,GAAI,GAC5B,KAEI,MAAA,IAAMC,cAAcH,EAAQ,GAClC,CAAC5B,EAAmBC,IAGvBmB,EAAAA,WAAU,KACR,GAAIP,EAAQW,QAAS,CACnB,MAAMQ,EAAgBnB,EAAQW,QAAQS,YAAcpB,EAAQW,QAAQU,YACpEf,EAAea,EAAa,IAE7B,CAACvB,EAAcT,EAAmBC,EAAcG,IA0BnD,SACG+B,IAAA,SAAA,CACCC,IAAKzB,EACL0B,UAAWC,EACXpC,UACAC,WACA,gBAAc,OACd,aAAY,0BAA0BH,GAAqB,UAE1DG,SAAAA,IAAaH,IACXmC,IAAAI,EAAA,CAAQC,KAAK,QAAQH,UAAWC,MAEjCG,KAAC,MAAI,CAAAJ,UAAWC,EACdI,SAAA,CAACP,EAAAA,IAAA,OAAA,CACCC,IAAKvB,EACLwB,UAAW,GAAGC,KAAoC7B,EAAe6B,EAAoD,MAAMpB,GAAeT,EAAe6B,EAAkD,KAE1MK,SA5BJ3C,EAIAC,GAAiBQ,EAfjBR,EAEEA,EACJ2C,MAAM,KACNC,QAAYC,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,GAAGC,gBACzDC,KAAK,KACLC,QAAQ,QAAS,MANM,GAgBjBpD,EAJAI,EAAW,eAAiB,yBA6B9BiD,EAAgB,CAAAb,KAAM,GAAIH,UAAWC,QAG5C"}