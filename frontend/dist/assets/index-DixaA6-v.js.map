{"version":3,"file":"index-DixaA6-v.js","sources":["../../src/components/common/MoreActions/index.jsx"],"sourcesContent":["import { useState, useRef, useEffect, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { KebabHorizontalIcon, PlusIcon, TrashIcon, DownloadIcon } from '@primer/octicons-react';\nimport { useChatControl } from '../../../contexts/ChatControlContext';\nimport '../../../styles/common/buttons.css';\nimport styles from './MoreActions.module.css';\n\n/**\n * More Actions component that shows/hides additional action buttons\n * @param {Object} props - Component props\n * @param {Array} props.actions - Array of action objects with { icon, label, onClick }\n * @param {string} [props.triggerButtonClassName='circleActionButton'] - Optional class for the trigger button\n * @returns {JSX.Element} - Rendered component\n */\nconst MoreActions = ({ actions = [], triggerButtonClassName = 'circleActionButton' }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const menuRef = useRef(null);\n  const { newChat, resetChat, downloadChat } = useChatControl();\n  \n  // Close menu when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (menuRef.current && !menuRef.current.contains(event.target)) {\n        setIsOpen(false);\n      }\n    };\n    \n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n  \n  const toggleMenu = () => {\n    setIsOpen(!isOpen);\n  };\n  \n  // Combine standard actions from context with custom actions from props\n  const allActions = useMemo(() => [\n    // Standard Actions\n    {\n      icon: <PlusIcon size={16} />,\n      label: 'New Chat',\n      onClick: newChat\n    },\n    {\n      icon: <TrashIcon size={16} />,\n      label: 'Reset Chat',\n      onClick: resetChat\n    },\n    {\n      icon: <DownloadIcon size={16} />,\n      label: 'Download Chat',\n      onClick: downloadChat\n    },\n    // Custom actions passed via props\n    ...actions\n  ], [newChat, resetChat, downloadChat, actions]);\n  \n  return (\n    <div className={styles.moreActionsContainer} ref={menuRef}>\n      <button\n        className={`${triggerButtonClassName} ${isOpen ? styles.open : ''}`}\n        onClick={toggleMenu}\n        aria-label={isOpen ? 'Close actions menu' : 'Open actions menu'}\n        aria-expanded={isOpen}\n      >\n        <KebabHorizontalIcon size={20} style={{ transform: 'rotate(90deg)' }} />\n      </button>\n      \n      <div \n        className={`${styles.actionsMenu} ${isOpen ? styles.open : ''}`}\n        role=\"menu\"\n      >\n        {allActions.map((action, index) => (\n          <button\n            key={index}\n            className={styles.actionButton}\n            role=\"menuitem\"\n            onClick={() => {\n              if (action.onClick) action.onClick();\n              setIsOpen(false);\n            }}\n            aria-label={action.label}\n            style={{\n              transitionDelay: isOpen ? `${index * 50}ms` : '0ms'\n            }}\n          >\n            <span className={styles.actionIcon}>{action.icon}</span>\n            <span className={styles.actionLabel}>{action.label}</span>\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default MoreActions;\n\n// Define PropTypes for the component\nMoreActions.propTypes = {\n  actions: PropTypes.arrayOf(PropTypes.shape({\n    icon: PropTypes.node.isRequired,\n    label: PropTypes.string.isRequired,\n    onClick: PropTypes.func.isRequired\n  })),\n  triggerButtonClassName: PropTypes.string\n};"],"names":["MoreActions","actions","triggerButtonClassName","isOpen","setIsOpen","useState","menuRef","useRef","newChat","resetChat","downloadChat","useChatControl","useEffect","handleClickOutside","event","current","contains","target","addEventListener","removeEventListener","allActions","useMemo","icon","jsx","PlusIcon","size","label","onClick","TrashIcon","DownloadIcon","className","styles","ref","children","toggleMenu","KebabHorizontalIcon","style","transform","role","map","action","index","jsxs","transitionDelay"],"mappings":"u5FAcMA,EAAcA,EAAGC,UAAU,GAAIC,yBAAyB,yBAC5D,MAAOC,EAAQC,GAAaC,EAAAA,UAAS,GAC/BC,EAAUC,SAAO,OACjBC,QAAEA,EAAAA,UAASC,EAAAA,aAAWC,GAAiBC,IAG7CC,EAAAA,WAAU,KACFC,MAAAA,EAAgCC,IAChCR,EAAQS,UAAYT,EAAQS,QAAQC,SAASF,EAAMG,SACrDb,GAAU,EAAK,EAKnB,OADSc,SAAAA,iBAAiB,YAAaL,GAChC,KACIM,SAAAA,oBAAoB,YAAaN,EAAkB,CAC9D,GACC,IAEH,MAKMO,EAAaC,EAAAA,SAAQ,IAAM,CAE/B,CACEC,KAAMC,EAAAA,IAACC,EAAS,CAAAC,KAAM,KACtBC,MAAO,WACPC,QAASnB,GAEX,CACEc,KAAMC,EAAAA,IAACK,EAAU,CAAAH,KAAM,KACvBC,MAAO,aACPC,QAASlB,GAEX,CACEa,KAAMC,EAAAA,IAACM,EAAa,CAAAJ,KAAM,KAC1BC,MAAO,gBACPC,QAASjB,MAGRT,IACF,CAACO,EAASC,EAAWC,EAAcT,kBAGnC,MAAI,CAAA6B,UAAWC,EAA6BC,IAAK1B,EAChD2B,SAAA,CAACV,EAAAA,IAAA,SAAA,CACCO,UAAW,GAAG5B,KAA0BC,EAAS4B,EAAc,KAC/DJ,QA9BaO,KACjB9B,GAAWD,EAAM,EA8Bb,aAAYA,EAAS,qBAAuB,oBAC5C,gBAAeA,EAEf8B,SAACV,EAAAA,IAAAY,EAAA,CAAoBV,KAAM,GAAIW,MAAO,CAAEC,UAAW,qBAGrDd,EAAAA,IAAC,MACC,CAAAO,UAAW,GAAGC,KAAsB5B,EAAS4B,EAAc,KAC3DO,KAAK,OAEJlB,SAAAA,EAAWmB,KAAI,CAACC,EAAQC,MACtBC,KAAA,SAAA,CAECZ,UAAWC,EACXO,KAAK,WACLX,QAAS,KACHa,EAAOb,SAASa,EAAOb,UAC3BvB,GAAU,EAAK,EAEjB,aAAYoC,EAAOd,MACnBU,MAAO,CACLO,gBAAiBxC,EAAoB,GAARsC,EAAH,KAAoB,OAGhDR,SAAA,CAAAV,MAAC,OAAK,CAAAO,UAAWC,EAAoBS,WAAOlB,aAC3C,OAAK,CAAAQ,UAAWC,EAAqBS,WAAOd,UAbxCe,SAiBb"}