{"version":3,"file":"vendor-micromark-core-commonmark-CKya-DGW.js","sources":["../../node_modules/micromark-core-commonmark/lib/attention.js","../../node_modules/micromark-core-commonmark/node_modules/micromark-util-character/index.js","../../node_modules/micromark-core-commonmark/lib/autolink.js","../../node_modules/micromark-core-commonmark/lib/blank-line.js","../../node_modules/micromark-core-commonmark/lib/block-quote.js","../../node_modules/micromark-core-commonmark/lib/character-escape.js","../../node_modules/micromark-core-commonmark/lib/character-reference.js","../../node_modules/micromark-core-commonmark/lib/code-fenced.js","../../node_modules/micromark-core-commonmark/lib/code-indented.js","../../node_modules/micromark-core-commonmark/lib/code-text.js","../../node_modules/micromark-core-commonmark/lib/content.js","../../node_modules/micromark-core-commonmark/lib/definition.js","../../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../../node_modules/micromark-core-commonmark/lib/heading-atx.js","../../node_modules/micromark-core-commonmark/lib/html-flow.js","../../node_modules/micromark-core-commonmark/lib/html-text.js","../../node_modules/micromark-core-commonmark/lib/label-end.js","../../node_modules/micromark-core-commonmark/lib/label-start-image.js","../../node_modules/micromark-core-commonmark/lib/label-start-link.js","../../node_modules/micromark-core-commonmark/lib/line-ending.js","../../node_modules/micromark-core-commonmark/lib/thematic-break.js","../../node_modules/micromark-core-commonmark/lib/list.js","../../node_modules/micromark-core-commonmark/lib/setext-underline.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n"],"names":["attention","name","tokenize","effects","ok","attentionMarkers","this","parser","constructs","null","previous","before","classifyCharacter","marker","code","enter","inside","consume","token","exit","after","open","includes","close","_open","Boolean","_close","resolveAll","events","context","group","text","openingSequence","closingSequence","use","nextEvents","offset","index","length","type","sliceSerialize","charCodeAt","end","start","Object","assign","movePoint","push","insideSpan","slice","splice","point","column","_bufferIndex","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","regex","test","String","fromCharCode","autolink","nok","size","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","asciiControl","emailAtSignOrDot","emailLabel","emailValue","next","blankLine","factorySpace","partial","blockQuote","self","state","containerState","_container","continuation","contBefore","disable","attempt","characterEscape","characterReference","max","numeric","value","decodeNamedCharacterReference","nonLazyContinuation","lineStart","lazy","now","line","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","tail","sequenceOpen","beforeSequenceOpen","infoBefore","interrupt","check","atNonLazyBreak","contentType","info","metaBefore","meta","contentBefore","contentStart","beforeContentChunk","contentChunk","concrete","codeIndented","afterPrefix","atBreak","furtherStart","codeText","between","data","resolve","tailExitIndex","headEnterIndex","content","chunkInside","contentEnd","continuationConstruct","contentContinue","subtokenize","prefixed","flow","definition","identifier","factoryLabel","call","labelAfter","normalizeIdentifier","markerAfter","factoryWhitespace","destinationBefore","factoryDestination","destinationAfter","titleBefore","afterWhitespace","defined","beforeMarker","factoryTitle","titleAfter","titleAfterOptionalWhitespace","hardBreakEscape","headingAtx","sequenceFurther","htmlFlow","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","slash","toLowerCase","htmlRawNames","htmlBlockNames","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","resolveTo","htmlText","returnState","instruction","tagOpen","declaration","commentEnd","comment","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","media","label","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","labelStartLink","lineEnding","thematicBreak","sequence","list","initialSize","kind","atMarker","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","_closeFlow","furtherBlankLines","notInCurrentItem","indentConstruct","setextUnderline","paragraph","heading"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]}