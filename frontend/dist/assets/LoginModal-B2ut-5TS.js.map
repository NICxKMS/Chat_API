{"version":3,"mappings":"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","names":["LoginModal","onClose","setIsLoggingIn","error","authContextError","useAuth","isLoading","setIsLoading","useState","setError","email","setEmail","password","setPassword","useEffect","handleSignIn","async","provider","getFirebaseAuth","__vitePreload","import","__VITE_PRELOAD__","signInWithPopup","auth","err","code","message","closeModal","className","styles","onClick","children","jsxs","e","stopPropagation","jsx","IoMdClose","Spinner","size","onSubmit","preventDefault","signInWithEmailAndPassword","type","placeholder","value","onChange","target","required","disabled","createUserWithEmailAndPassword","GoogleAuthProvider","googleProvider","title","FcGoogle","GithubAuthProvider","githubProvider","FaGithub"],"ignoreList":[],"sources":["../../src/components/auth/LoginModal.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { IoMdClose } from 'react-icons/io';\nimport { FcGoogle } from 'react-icons/fc';\nimport { FaGithub } from 'react-icons/fa';\nimport Spinner from '../common/Spinner';\nimport styles from './LoginModal.module.css';\n// Assuming a Spinner component exists\n\n// Import icons using the correct paths\n// Icon for email/pass\n\nconst LoginModal = ({ onClose }) => {\n  const { setIsLoggingIn, error: authContextError } = useAuth();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  // Clear local error when auth context error changes (e.g., token fetch error)\n  useEffect(() => {\n    if (authContextError) {\n      setError(authContextError);\n    }\n  }, [authContextError]);\n\n  const handleSignIn = async (provider) => {\n    // Dynamically import Firebase auth to defer load\n    const { getFirebaseAuth } = await import(/* webpackChunkName: \"firebase-config\" */ '../../firebaseConfig');\n    const { signInWithPopup } = await import(/* webpackChunkName: \"firebase-auth\" */ 'firebase/auth');\n    const auth = getFirebaseAuth();\n    if (!auth) {\n      setError(\"Firebase not initialized. Cannot sign in.\");\n      return;\n    }\n    setIsLoading(true);\n    setError(null); // Clear previous errors\n    try {\n      await signInWithPopup(auth, provider);\n      // onAuthStateChanged in AuthContext will handle the rest (closing modal, setting user state)\n      console.log(\"Popup sign-in successful.\");\n    } catch (err) {\n      console.error(\"Popup Sign-in Error:\", err);\n      // Customize error messages based on err.code\n      if (err.code === 'auth/popup-closed-by-user') {\n        console.log('Popup sign-in cancelled by user.');\n        // Close the modal as the user cancelled\n        setIsLoggingIn(false);\n        if (onClose) onClose();\n      } else if (err.code === 'auth/cancelled-popup-request') {\n        console.log('Popup sign-in cancelled (multiple requests).');\n        // Close the modal\n        setIsLoggingIn(false);\n        if (onClose) onClose();\n      } else if (err.code === 'auth/popup-blocked') {\n        setError('Popup blocked by browser. Please allow popups for this site.');\n        // Keep modal open to show the error in this case\n        setIsLoading(false);\n      } else {\n        setError(err.message || 'Failed to sign in. Please try again.');\n        // Keep modal open to show unexpected errors\n        setIsLoading(false);\n      }\n    }\n    // No finally block needed, loading is handled by success/error paths\n  };\n\n  const handleEmailSignIn = async (e) => {\n    e.preventDefault(); // Prevent form submission reload\n    const { getFirebaseAuth } = await import(/* webpackChunkName: \"firebase-config\" */ '../../firebaseConfig');\n    const { signInWithEmailAndPassword } = await import(/* webpackChunkName: \"firebase-auth\" */ 'firebase/auth');\n    const auth = getFirebaseAuth();\n    if (!auth) {\n      setError(\"Firebase not initialized.\");\n      return;\n    }\n    if (!email || !password) {\n        setError(\"Please enter both email and password.\");\n        return;\n    }\n    setIsLoading(true);\n    setError(null);\n    try {\n      await signInWithEmailAndPassword(auth, email, password);\n      // onAuthStateChanged handles the rest\n      console.log(\"Email/Password sign-in successful.\");\n    } catch (err) {\n      console.error(\"Email Sign-in Error:\", err);\n      setError(err.message || 'Failed to sign in with email.');\n      setIsLoading(false);\n    }\n  };\n\n  const handleEmailSignUp = async (e) => {\n    e.preventDefault(); // Prevent form submission reload\n    const { getFirebaseAuth } = await import(/* webpackChunkName: \"firebase-config\" */ '../../firebaseConfig');\n    const { createUserWithEmailAndPassword } = await import(/* webpackChunkName: \"firebase-auth\" */ 'firebase/auth');\n    const auth = getFirebaseAuth();\n    if (!auth) {\n      setError(\"Firebase not initialized.\");\n      return;\n    }\n    if (!email || !password) {\n        setError(\"Please enter both email and password.\");\n        return;\n    }\n    setIsLoading(true);\n    setError(null);\n    try {\n      await createUserWithEmailAndPassword(auth, email, password);\n      // onAuthStateChanged handles the rest\n      console.log(\"Email/Password sign-up successful.\");\n    } catch (err) {\n      console.error(\"Email Sign-up Error:\", err);\n      setError(err.message || 'Failed to sign up with email.');\n      setIsLoading(false);\n    }\n  };\n\n  // Dynamically import GoogleAuthProvider to avoid bundling and missing reference\n  const handleGoogleSignIn = async () => {\n    const { GoogleAuthProvider } = await import(/* webpackChunkName: \"firebase-auth\" */ 'firebase/auth');\n    const googleProvider = new GoogleAuthProvider();\n    handleSignIn(googleProvider);\n  };\n\n  // Dynamically import GithubAuthProvider to avoid missing reference\n  const handleGithubSignIn = async () => {\n    const { GithubAuthProvider } = await import(/* webpackChunkName: \"firebase-auth\" */ 'firebase/auth');\n    const githubProvider = new GithubAuthProvider();\n    handleSignIn(githubProvider);\n  };\n\n  const closeModal = () => {\n    // Only close if not currently in the middle of a sign-in attempt\n    if (!isLoading) {\n      setIsLoggingIn(false);\n      if (onClose) onClose();\n    }\n  };\n\n  return (\n    <div className={styles.LoginModal} onClick={closeModal}>\n      <div className={styles.LoginModal__modal} onClick={(e) => e.stopPropagation()}>\n        <button className={styles.LoginModal__closeButton} onClick={closeModal} aria-label=\"Close login\">\n          <IoMdClose />\n        </button>\n        <h2 className={styles.LoginModal__title}>Login / Sign Up</h2>\n        <p className={styles.LoginModal__subtitle}>Choose a provider to continue</p>\n\n        {isLoading && (\n          <div className={styles.LoginModal__spinnerContainer}> {/* Make spinner take full height when loading */}\n            <Spinner size=\"large\" />\n            <p>Connecting...</p>\n          </div>\n        )}\n\n        {!isLoading && (\n          // Email/Password form is now the default content when not loading\n          <form className={styles.LoginModal__emailForm} onSubmit={handleEmailSignIn}> {/* Added onSubmit */} \n            <input\n              type=\"email\"\n              placeholder=\"Email Address\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              required\n              className={styles.LoginModal__inputField}\n            />\n            <input\n              type=\"password\"\n              placeholder=\"Password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              required\n              className={styles.LoginModal__inputField}\n            />\n            <div className={styles.LoginModal__emailButtonContainer}>\n              <button type=\"submit\" className={styles.LoginModal__emailButton} disabled={isLoading}>\n                Sign In\n              </button>\n              <button type=\"button\" onClick={handleEmailSignUp} className={`${styles.LoginModal__emailButton} ${styles.LoginModal__signUpButton}`} disabled={isLoading}>\n                Sign Up\n              </button>\n            </div>\n          </form>\n        )}\n\n        {/* Alternative Sign-in Providers (Icons) - Shown below email form when not loading */}\n        {!isLoading && (\n          <div className={styles.LoginModal__alternativeLoginContainer}>\n            <p className={styles.LoginModal__alternativeLoginText}>Or sign in with</p>\n            <div className={styles.LoginModal__providerIconContainer}>\n              <button\n                className={styles.LoginModal__providerIconButton}\n                onClick={handleGoogleSignIn}\n                disabled={isLoading}\n                title=\"Sign in with Google\"\n                aria-label=\"Sign in with Google\"\n              >\n                <FcGoogle />\n              </button>\n              <button\n                className={styles.LoginModal__providerIconButton}\n                onClick={handleGithubSignIn}\n                disabled={isLoading}\n                title=\"Sign in with GitHub\"\n                aria-label=\"Sign in with GitHub\"\n              >\n                <FaGithub />\n              </button>\n              {/* Add other provider icons here if needed */}\n            </div>\n          </div>\n        )}\n\n        {error && <p className={styles.LoginModal__error}>{error}</p>}\n\n        <p className={styles.LoginModal__footerText}>\n          By signing in, you agree to our imaginary Terms of Service.\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default LoginModal; "],"file":"assets/LoginModal-B2ut-5TS.js"}