{"version":3,"file":"markdown-D1yvlx7T.js","sources":["../../node_modules/remark-gfm/index.js","../../node_modules/remark-math/index.js","../../node_modules/remark-emoji/index.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('micromark-extension-gfm').Options & import('mdast-util-gfm').Options} Options\n */\n\nimport {gfm} from 'micromark-extension-gfm'\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\n\n/**\n * Plugin to support GFM (autolink literals, footnotes, strikethrough, tables, tasklists).\n *\n * @type {import('unified').Plugin<[Options?]|void[], Root>}\n */\nexport default function remarkGfm(options = {}) {\n  const data = this.data()\n\n  add('micromarkExtensions', gfm(options))\n  add('fromMarkdownExtensions', gfmFromMarkdown())\n  add('toMarkdownExtensions', gfmToMarkdown(options))\n\n  /**\n   * @param {string} field\n   * @param {unknown} value\n   */\n  function add(field, value) {\n    const list = /** @type {unknown[]} */ (\n      // Other extensions\n      /* c8 ignore next 2 */\n      data[field] ? data[field] : (data[field] = [])\n    )\n\n    list.push(value)\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-math').ToOptions} Options\n *\n * @typedef {import('mdast-util-math')} DoNotTouchAsThisImportIncludesMathInTree\n */\n\nimport {math} from 'micromark-extension-math'\nimport {mathFromMarkdown, mathToMarkdown} from 'mdast-util-math'\n\n/**\n * Plugin to support math.\n *\n * @type {import('unified').Plugin<[Options?] | void[], Root, Root>}\n */\nexport default function remarkMath(options = {}) {\n  const data = this.data()\n\n  add('micromarkExtensions', math(options))\n  add('fromMarkdownExtensions', mathFromMarkdown())\n  add('toMarkdownExtensions', mathToMarkdown(options))\n\n  /**\n   * @param {string} field\n   * @param {unknown} value\n   */\n  function add(field, value) {\n    const list = /** @type {unknown[]} */ (\n      // Other extensions\n      /* c8 ignore next 2 */\n      data[field] ? data[field] : (data[field] = [])\n    )\n\n    list.push(value)\n  }\n}\n","import { get as getEmoji } from 'node-emoji';\nimport { emoticon } from 'emoticon';\nimport { findAndReplace } from 'mdast-util-find-and-replace';\nconst RE_EMOJI = /:\\+1:|:-1:|:[\\w-]+:/g;\nconst RE_SHORT = /[$@|*'\",;.=:\\-)([\\]\\\\/<>038BOopPsSdDxXzZ]{2,5}/g;\nconst RE_PUNCT = /(?:_|-(?!1))/g;\nconst DEFAULT_SETTINGS = {\n    padSpaceAfter: false,\n    emoticon: false,\n    accessible: false,\n};\nconst plugin = options => {\n    const settings = Object.assign({}, DEFAULT_SETTINGS, options);\n    const pad = !!settings.padSpaceAfter;\n    const emoticonEnable = !!settings.emoticon;\n    const accessible = !!settings.accessible;\n    function aria(text, label) {\n        // Creating HTML node in Markdown node is undocumented.\n        // https://github.com/syntax-tree/mdast-util-math/blob/e70bb824dc70f5423324b31b0b68581cf6698fe8/index.js#L44-L55\n        return {\n            type: 'text',\n            value: text,\n            data: {\n                hName: 'span',\n                hProperties: {\n                    role: 'img',\n                    ariaLabel: label,\n                },\n                hChildren: [{ type: 'text', value: text }],\n            },\n        };\n    }\n    function replaceEmoticon(match) {\n        // find emoji by shortcode - full match or with-out last char as it could be from text e.g. :-),\n        const iconFull = emoticon.find(e => e.emoticons.includes(match)); // full match\n        const iconPart = emoticon.find(e => e.emoticons.includes(match.slice(0, -1))); // second search pattern\n        const icon = iconFull || iconPart;\n        if (!icon) {\n            return false;\n        }\n        const trimmedChar = !iconFull && iconPart ? match.slice(-1) : '';\n        const addPad = pad ? ' ' : '';\n        const replaced = icon.emoji + addPad + trimmedChar;\n        if (accessible) {\n            return aria(replaced, icon.name + ' emoticon');\n        }\n        return replaced;\n    }\n    function replaceEmoji(match) {\n        let got = getEmoji(match);\n        if (typeof got === 'undefined') {\n            return false;\n        }\n        if (pad) {\n            got = got + ' ';\n        }\n        if (accessible) {\n            const label = match.slice(1, -1).replace(RE_PUNCT, ' ') + ' emoji';\n            return aria(got, label);\n        }\n        return got;\n    }\n    const replacers = [[RE_EMOJI, replaceEmoji]];\n    if (emoticonEnable) {\n        replacers.push([RE_SHORT, replaceEmoticon]);\n    }\n    function transformer(tree) {\n        findAndReplace(tree, replacers);\n    }\n    return transformer;\n};\nexport default plugin;\n//# sourceMappingURL=index.js.map"],"names":["remarkGfm","options","data","this","add","field","value","push","gfm","gfmFromMarkdown","gfmToMarkdown","remarkMath","math","mathFromMarkdown","mathToMarkdown","RE_EMOJI","RE_SHORT","RE_PUNCT","DEFAULT_SETTINGS","padSpaceAfter","emoticon","accessible","plugin","settings","Object","assign","pad","emoticonEnable","aria","text","label","type","hName","hProperties","role","ariaLabel","hChildren","replacers","match","got","getEmoji","slice","replace","iconFull","find","e","emoticons","includes","iconPart","icon","trimmedChar","addPad","replaced","emoji","name","tree","findAndReplace"],"mappings":"6aAae,SAASA,EAAUC,EAAU,IACpC,MAAAC,EAAOC,KAAKD,OAUT,SAAAE,EAAIC,EAAOC,IAIhBJ,EAAKG,GAASH,EAAKG,GAAUH,EAAKG,GAAS,IAGxCE,KAAKD,EACd,CAhBMF,EAAA,sBAAuBI,EAAIP,IAC3BG,EAAA,yBAA0BK,KAC1BL,EAAA,uBAAwBM,EAAcT,GAe5C,CClBe,SAASU,EAAWV,EAAU,IACrC,MAAAC,EAAOC,KAAKD,OAUT,SAAAE,EAAIC,EAAOC,IAIhBJ,EAAKG,GAASH,EAAKG,GAAUH,EAAKG,GAAS,IAGxCE,KAAKD,EACd,CAhBMF,EAAA,sBAAuBQ,EAAKX,IAC5BG,EAAA,yBAA0BS,KAC1BT,EAAA,uBAAwBU,EAAeb,GAe7C,CChCA,MAAMc,EAAW,uBACXC,EAAW,kDACXC,EAAW,gBACXC,EAAmB,CACrBC,eAAe,EACfC,UAAU,EACVC,YAAY,GAEVC,EAAoBrB,IACtB,MAAMsB,EAAWC,OAAOC,OAAO,CAAA,EAAIP,EAAkBjB,GAC/CyB,IAAQH,EAASJ,cACjBQ,IAAmBJ,EAASH,SAC5BC,IAAeE,EAASF,WACrB,SAAAO,EAAKC,EAAMC,GAGT,MAAA,CACHC,KAAM,OACNzB,MAAOuB,EACP3B,KAAM,CACF8B,MAAO,OACPC,YAAa,CACTC,KAAM,MACNC,UAAWL,GAEfM,UAAW,CAAC,CAAEL,KAAM,OAAQzB,MAAOuB,KAGnD,CA+BI,MAAMQ,EAAY,CAAC,CAACtB,EAdpB,SAAsBuB,GACd,IAAAC,EAAMC,EAASF,GACf,QAAe,IAARC,EACA,OAAA,EAKX,GAHIb,IACAa,GAAY,KAEZlB,EAAY,CAEL,OAAAO,EAAKW,EADED,EAAMG,MAAM,MAAOC,QAAQzB,EAAU,KAAO,SAEtE,CACe,OAAAsB,CACf,IAQW,OANHZ,GACAU,EAAU9B,KAAK,CAACS,EAhCpB,SAAyBsB,GAEf,MAAAK,EAAWvB,EAASwB,MAAKC,GAAKA,EAAEC,UAAUC,SAAST,KACnDU,EAAW5B,EAASwB,MAAKC,GAAKA,EAAEC,UAAUC,SAAST,EAAMG,MAAM,GAAK,MACpEQ,EAAON,GAAYK,EACzB,IAAKC,EACM,OAAA,EAEX,MAAMC,GAAeP,GAAYK,EAAWV,EAAMG,UAAY,GACxDU,EAASzB,EAAM,IAAM,GACrB0B,EAAWH,EAAKI,MAAQF,EAASD,EACvC,OAAI7B,EACOO,EAAKwB,EAAUH,EAAKK,KAAO,aAE/BF,CACf,IAmBI,SAAqBG,GACjBC,EAAeD,EAAMlB,EAC7B,CACW","x_google_ignoreList":[0,1,2]}