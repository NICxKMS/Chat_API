{"version":3,"file":"index-BFIUj-vA.js","sources":["../../src/components/models/ModelItem/index.jsx"],"sourcesContent":["import { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ModelItem.module.css';\n\n/**\n * Component for displaying a single model\n * @param {Object} props - Component props\n * @param {Object} props.model - Model data\n * @param {boolean} props.selected - Whether the model is currently selected\n * @param {Function} props.onClick - Function to handle model selection\n * @param {string} props.searchTerm - Current search term for highlighting\n * @returns {JSX.Element} - Rendered component\n */\nconst ModelItem = memo(({ \n  model, \n  selected, \n  onClick,\n  searchTerm\n}) => {\n  // Highlight matching text if searchTerm is provided\n  const highlightMatch = (text) => {\n    if (!searchTerm || !text) return text;\n    \n    const regex = new RegExp(`(${searchTerm})`, 'gi');\n    const parts = text.split(regex);\n    \n    return (\n      <>\n        {parts.map((part, i) => (\n          regex.test(part) ? (\n            <span key={i} className={styles.ModelItem__highlight}>{part}</span>\n          ) : (\n            <span key={i}>{part}</span>\n          )\n        ))}\n      </>\n    );\n  };\n  \n  return (\n    <div \n      className={`${styles.ModelItem} ${selected ? styles['ModelItem--selected'] : ''}`}\n      onClick={() => onClick(model)}\n      role=\"option\"\n      aria-selected={selected}\n    >\n      <div className={styles.ModelItem__icon}>\n        {model.series?.charAt(0) || model.name.charAt(0)}\n      </div>\n      \n      <div className={styles.ModelItem__details}>\n        <div className={styles.ModelItem__name}>\n          {highlightMatch(model.name)}\n        </div>\n        \n        {model.description && (\n          <div className={styles.ModelItem__description}>\n            {highlightMatch(model.description)}\n          </div>\n        )}\n        \n        {model.tags && model.tags.length > 0 && (\n          <div className={styles.ModelItem__tags}>\n            {model.tags.map(tag => (\n              <span \n                key={tag} \n                className={styles.ModelItem__tag}\n                style={{\n                  backgroundColor: \n                    searchTerm && \n                    tag.toLowerCase().includes(searchTerm.toLowerCase()) \n                      ? 'rgba(var(--button-bg-rgb), 0.2)' \n                      : undefined\n                }}\n              >\n                {highlightMatch(tag)}\n              </span>\n            ))}\n          </div>\n        )}\n      </div>\n      \n      {selected && (\n        <div className={styles.ModelItem__selectedIndicator} data-testid=\"check-icon\">\n          <CheckIcon className={styles.ModelItem__checkIcon} />\n        </div>\n      )}\n    </div>\n  );\n});\n\n// SVG Check icon as a component\nconst CheckIcon = ({ className }) => (\n  <svg \n    xmlns=\"http://www.w3.org/2000/svg\" \n    viewBox=\"0 0 24 24\" \n    fill=\"none\" \n    stroke=\"currentColor\" \n    strokeWidth=\"3\" \n    strokeLinecap=\"round\" \n    strokeLinejoin=\"round\" \n    className={className}\n    aria-hidden=\"true\"\n  >\n    <polyline points=\"20 6 9 17 4 12\" />\n  </svg>\n);\n\nModelItem.propTypes = {\n  model: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    description: PropTypes.string,\n    series: PropTypes.string,\n    providerName: PropTypes.string,\n    typeGroupName: PropTypes.string,\n    tags: PropTypes.arrayOf(PropTypes.string)\n  }).isRequired,\n  selected: PropTypes.bool.isRequired,\n  onClick: PropTypes.func.isRequired,\n  searchTerm: PropTypes.string\n};\n\n// Display name for debugging\nModelItem.displayName = 'ModelItem';\n\nexport default ModelItem; "],"names":["ModelItem","memo","model","selected","onClick","searchTerm","highlightMatch","text","regex","RegExp","parts","split","jsx","Fragment","map","part","i","test","className","styles","ModelItem__highlight","jsxs","role","children","ModelItem__icon","series","charAt","name","ModelItem__details","ModelItem__name","description","ModelItem__description","tags","length","ModelItem__tags","tag","ModelItem__tag","style","backgroundColor","toLowerCase","includes","undefined","ModelItem__selectedIndicator","jsxRuntimeExports","CheckIcon","ModelItem__checkIcon","xmlns","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","points","displayName"],"mappings":"w5EAaMA,EAAYC,QAAK,EACrBC,QACAC,WACAC,UACAC,uBAGMC,MAAAA,EAA2BC,IAC/B,IAAKF,IAAeE,EAAaA,OAAAA,EAEjC,MAAMC,EAAQ,IAAIC,OAAO,IAAIJ,KAAe,MACtCK,EAAQH,EAAKI,MAAMH,GAGvB,SAAAI,IAAAC,EAAAA,SAAA,CACGH,WAAMI,KAAI,CAACC,EAAMC,IAChBR,EAAMS,KAAKF,KACTH,IAAC,QAAaM,UAAWC,EAAOC,qBAAuBL,SAAAA,GAA5CC,SAEV,OAAcD,CAAAA,SAAAA,GAAJC,MAGjB,EAKFK,OAAAA,OAAC,OACCH,UAAW,GAAGC,EAAOnB,aAAaG,EAAWgB,EAAO,uBAAyB,KAC7Ef,QAAS,IAAMA,EAAQF,GACvBoB,KAAK,SACL,gBAAenB,EAEfoB,SAAA,GAAAX,IAAC,MAAI,CAAAM,UAAWC,EAAOK,gBACpBtB,UAAMuB,OAAAA,EAAAA,EAAAA,aAAAA,EAAAA,EAAQC,OAAO,KAAMxB,EAAMyB,KAAKD,OAAO,OAG/CL,KAAA,MAAA,CAAIH,UAAWC,EAAOS,mBACrBL,SAAA,CAAAX,EAAAA,IAAC,OAAIM,UAAWC,EAAOU,gBACpBvB,SAAeJ,EAAAA,EAAMyB,QAGvBzB,EAAM4B,aACLlB,EAAAA,IAAC,MAAI,CAAAM,UAAWC,EAAOY,uBACpBzB,SAAAA,EAAeJ,EAAM4B,eAIzB5B,EAAM8B,MAAQ9B,EAAM8B,KAAKC,OAAS,GACjCrB,EAAAA,IAAC,OAAIM,UAAWC,EAAOe,gBACpBhC,SAAM8B,EAAAA,KAAKlB,KACVqB,GAAAvB,EAAAA,IAAC,QAECM,UAAWC,EAAOiB,eAClBC,MAAO,CACLC,gBACEjC,GACA8B,EAAII,cAAcC,SAASnC,EAAWkC,eAClC,uCACAE,GAGPnC,SAAe6B,EAAAA,IAVXA,UAiBdhC,KACCS,IAAC,MAAI,CAAAM,UAAWC,EAAOuB,6BAA8B,cAAY,aAC/DnB,SAACoB,EAAA/B,IAAAgC,EAAA,CAAU1B,UAAWC,EAAO0B,2BAGnC,IAKED,EAAYA,EAAG1B,eACnByB,EAAA/B,IAAC,OACCkC,MAAM,6BACNC,QAAQ,YACRC,KAAK,OACLC,OAAO,eACPC,YAAY,IACZC,cAAc,QACdC,eAAe,QACflC,YACA,cAAY,OAEZK,SAACX,EAAAA,IAAA,WAAA,CAASyC,OAAO,qBAoBrBrD,EAAUsD,YAAc"}