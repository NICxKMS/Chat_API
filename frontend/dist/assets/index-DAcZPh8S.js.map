{"version":3,"mappings":"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","names":["ToastNotification","toasts","dismissToast","jsx","className","styles","toastContainer","map","jsxs","toast","type","children","message","closeButton","onClick","id","ToastContext","createContext","useToast","context","useContext","Error","ADD_TOAST","REMOVE_TOAST","toastReducer","state","action","payload","filter","ToastProvider","dispatch","useReducer","showToast","useCallback","duration","Date","now","toString","Math","random","substr","setTimeout","Provider","value","ToastContainer","LoadingContext","LoadingProvider","loadingMap","setLoadingMap","useState","setLoading","tag","isLoading","prev","anyLoading","Object","values","some","val","useLoading","startLoading","stopLoading","AuthContext","useAuth","undefined","AuthProvider","currentUser","setCurrentUser","idToken","setIdToken","loading","startAuthLoading","stopAuthLoading","error","setError","isLoggingIn","setIsLoggingIn","isFirebaseInitialized","setIsFirebaseInitialized","useEffect","login","async","logout","getFirebaseAuth","__vitePreload","import","__VITE_PRELOAD__","signOut","firebaseSignOut","auth","msg","err","unsubscribe","handleFirebaseInit","initializeAuthListener","onAuthStateChanged","firebaseOnAuthStateChanged","user","token","getIdToken","setItem","e","localStorage","removeItem","addEventListener","removeEventListener","useMemo","isAuthenticated","ThemeContext","useTheme","ThemeProvider","theme","setTheme","getItem","toggleTheme","prevTheme","newTheme","applyTheme","document","body","classList","remove","prefersDark","window","matchMedia","matches","add","mql","handleChange","isDark","ApiContext","useApi","ApiProvider","apiUrl","useLocalStorage","key","initialValue","initialValueRef","useRef","storedValue","setStoredValue","item","JSON","parse","current","setValue","valueToStore","Function","stringify","useCacheToggle","cacheEnabled","setCacheEnabled","clearModelCache","toggleCache","enabled","newValue","refreshModels","originalFunc","isCacheValid","cache","timestamp","allModels","processedModels","experimentalModels","ModelContext","ModelFilterContext","useModel","useModelFilter","ModelProvider","setAllModels","setProcessedModels","setExperimentalModels","selectedModel","setSelectedModel","setIsLoading","showExperimental","setShowExperimental","modelFilter","setModelFilter","search","categories","Chat","Image","Embedding","startModelsLoading","stopModelsLoading","cacheModels","data","updateCategoryFilter","category","isChecked","updateSearchFilter","searchText","selectModel","model","fetchModels","authRequired","overrideToken","headers","Accept","tokenToUse","modelsUrl","URL","response","fetch","ok","errorMsg","status","rawData","json","worker","Worker","url","postMessage","onmessage","fetchedAllModels","fetchedProcessedModels","fetchedExperimentalModels","rawPrev","prevCache","terminate","onerror","initialFetchDoneRef","didAuthFetchRef","rawCache","parsedCache","cachedToken","length","toggleExperimentalModels","modelValue","isExperimentalModelsEnabled","filterValue","DEFAULT_SETTINGS","temperature","top_p","max_tokens","frequency_penalty","presence_penalty","streaming","systemPrompt","SettingsContext","useSettings","SettingsProvider","settings","setSettings","updateSetting","resetSettings","shouldRestrictTemperature","requiresFixedTemperature","properties","includes","toLowerCase","startsWith","series","getModelAdjustedSettings","ChatStatusContext","useChatStatus","ChatStatusProvider","isWaitingForResponse","setIsWaitingForResponse","startChatLoading","stopChatLoading","ChatHistoryContext","useChatHistory","ChatHistoryProvider","chatHistory","internalSetChatHistory","chatHistoryRef","setChatHistory","update","newHistory","addMessageToHistory","role","content","metrics","updateChatWithContent","lastIndex","lastMsg","PerformanceMetricsContext","usePerformanceMetrics","PerformanceMetricsProvider","currentMessageMetrics","setCurrentMessageMetrics","startTime","endTime","elapsedTime","tokenCount","tokensPerSecond","isComplete","timeToFirstToken","promptTokens","completionTokens","totalTokens","finishReason","resetPerformanceMetrics","startPerformanceTimer","updatePerformanceMetrics","newTokenCount","tokenInfo","round","newMetrics","prevHistory","setTokenMetricsForLastMessage","fetchWithRetry","input","init","retries","backoff","attempt","delay","pow","Promise","res","StreamingEventsContext","StreamingEventsProvider","streamingTextRef","currentRequestIdRef","abortControllerRef","isStreamingRef","firstTokenReceivedRef","debouncedUpdateChat","debounce","streamWorkerUrlRef","streamWorkerRef","getOrCreateStreamWorker","parseStreamChunk","chunk","resolve","reject","streamMessageWithFetch","editIndex","requestId","crypto","randomUUID","substring","isEditing","Number","isInteger","modelId","provider","userMessage","truncated","slice","original","timeoutId","abort","abortController","AbortController","adjusted","historyForApi","m","unshift","push","messages","method","signal","reader","getReader","decoder","TextDecoder","accumulatedContent","done","read","clearTimeout","decode","stream","msgs","rawChunk","errMsg","usage","isDone","flush","stopStreaming","reqId","isStreaming","ChatStateContext","useChatState","ChatStateProvider","ChatControlContext","useChatControl","ChatControlProvider","useStreamingEvents","formatModelIdentifier","sendMessage","clientRequestId","requestStartTime","errData","rawUsage","prompt_tokens","completion_tokens","total_tokens","requestEndTime","elapsed","errorMetrics","tokensForMetrics","finalMetrics","stopGenerationAction","clearChat","newChat","resetChat","confirm","downloadChat","history","formatted","name","contentText","Array","isArray","part","text","join","blob","Blob","createObjectURL","a","createElement","href","download","toISOString","replace","appendChild","click","removeChild","revokeObjectURL","getOrCreateConversation","conversationId","stopGeneration","InitializationContext","ContextManager","initializationState","isInitialized","setInitialized","jsxRuntimeExports","Spinner","size","sizeClass","Spinner__loader","PERFORMANCE_MARKS","PERFORMANCE_MEASURES","performanceMonitor","constructor","marks","Set","measures","this","trackPaintMetrics","PerformanceObserver","entries","getEntries","forEach","entry","markName","performance","mark","measureName","measure","observe","entryTypes","startMark","endMark","getMeasures","getEntriesByType","clear","clearMarks","clearMeasures","logMetrics","ESSENTIAL_IMPORTS","layout","then","n","i","chatContainer","chatInput","modelDropdown","sidebar","themeToggle","sidebarToggle","messageList","globalMetrics","moreActions","Layout","lazy","LoginModal","PRELOAD_IMPORTS","essential","heavy","dispatchEvent","Event","AppShell","shellReady","setShellReady","firebaseReady","setFirebaseReady","canceled","imports","fn","preloadSync","requestAnimationFrame","idlePreload","onComplete","idx","requestIdleCallback","catch","runPhases","Fragment","Suspense","fallback","onClose","style","display","alignItems","justifyContent","height","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","GlobalLoadingIndicator","authLoading","toastIdRef","onPerfEntry","ReactDOM","createRoot","getElementById","render","React","StrictMode","console","log","getCLS","getFID","w","getFCP","getLCP","getTTFB","origin","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","waitingServiceWorker","waiting","event","target"],"ignoreList":[],"sources":["../../src/components/common/ToastNotification/index.jsx","../../src/contexts/ToastContext.jsx","../../src/contexts/LoadingContext.jsx","../../src/contexts/AuthContext.jsx","../../src/contexts/ThemeContext.jsx","../../src/contexts/ApiContext.jsx","../../src/hooks/useLocalStorage.jsx","../../src/hooks/useCacheToggle.jsx","../../src/contexts/ModelContext.jsx","../../src/contexts/SettingsContext.jsx","../../src/contexts/ChatStatusContext.jsx","../../src/contexts/ChatHistoryContext.jsx","../../src/contexts/PerformanceMetricsContext.jsx","../../src/utils/network.jsx","../../src/contexts/StreamingEventsContext.jsx","../../src/contexts/ChatStateContext.jsx","../../src/contexts/ChatControlContext.jsx","../../src/contexts/ContextManager.jsx","../../src/components/common/Spinner/index.jsx","../../src/utils/performance.jsx","../../src/App.jsx","../../src/reportWebVitals.jsx","../../src/serviceWorkerRegistration.jsx","../../src/components/common/GlobalLoadingIndicator/index.jsx","../../src/index.jsx"],"sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './ToastNotification.module.css';\r\n\r\n/**\r\n * ToastNotification component renders a list of toast messages.\r\n * @param {Object} props\r\n * @param {Array} props.toasts - Array of toast objects { id, type, message, duration }\r\n * @param {Function} props.dismissToast - Function to remove a toast by id\r\n */\r\nconst ToastNotification = ({ toasts, dismissToast }) => {\r\n  return (\r\n    <div className={styles.toastContainer}>\r\n      {toasts.map((toast) => (\r\n        <div key={toast.id} className={`${styles.toast} ${styles[toast.type] || ''}`}> \r\n          <span className={styles.message}>{toast.message}</span>\r\n          <button\r\n            type=\"button\"\r\n            className={styles.closeButton}\r\n            onClick={() => dismissToast(toast.id)}\r\n            aria-label=\"Close notification\"\r\n          >\r\n            ×\r\n          </button>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nToastNotification.propTypes = {\r\n  toasts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      type: PropTypes.oneOf(['error', 'success', 'info', 'warning']),\r\n      message: PropTypes.string.isRequired,\r\n      duration: PropTypes.number\r\n    })\r\n  ).isRequired,\r\n  dismissToast: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ToastNotification; ","import React, { createContext, useContext, useReducer, useCallback } from 'react';\r\nimport ToastContainer from '../components/common/ToastNotification';\r\n\r\n// Create context for toast notifications\r\nconst ToastContext = createContext();\r\n\r\n// Hook to use toast context\r\nexport const useToast = () => {\r\n  const context = useContext(ToastContext);\r\n  if (!context) {\r\n    throw new Error('useToast must be used within a ToastProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n// Action types\r\nconst ADD_TOAST = 'ADD_TOAST';\r\nconst REMOVE_TOAST = 'REMOVE_TOAST';\r\n\r\n// Reducer to manage toast list\r\nfunction toastReducer(state, action) {\r\n  switch (action.type) {\r\n    case ADD_TOAST:\r\n      return [...state, action.payload];\r\n    case REMOVE_TOAST:\r\n      return state.filter(toast => toast.id !== action.payload);\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// Provider component that holds toast state and renders toasts\r\nexport const ToastProvider = ({ children }) => {\r\n  const [toasts, dispatch] = useReducer(toastReducer, []);\r\n\r\n  // Function to show a toast\r\n  const showToast = useCallback(({ type, message, duration = 3000 }) => {\r\n    const id = Date.now().toString() + Math.random().toString(36).substr(2, 9);\r\n    dispatch({ type: ADD_TOAST, payload: { id, type, message, duration } });\r\n    // Auto-dismiss toast after duration\r\n    setTimeout(() => dispatch({ type: REMOVE_TOAST, payload: id }), duration);\r\n    return id;\r\n  }, []);\r\n\r\n  // Function to manually dismiss a toast\r\n  const dismissToast = useCallback(id => {\r\n    dispatch({ type: REMOVE_TOAST, payload: id });\r\n  }, []);\r\n\r\n  return (\r\n    <ToastContext.Provider value={{ showToast, dismissToast }}>\r\n      {children}\r\n      <ToastContainer toasts={toasts} dismissToast={dismissToast} />\r\n    </ToastContext.Provider>\r\n  );\r\n}; ","import React, { createContext, useContext, useState, useCallback } from 'react';\r\n\r\n// Context to track multiple loading tags\r\nconst LoadingContext = createContext(null);\r\n\r\n/**\r\n * Provider to wrap application and manage loading states by tags\r\n */\r\nexport const LoadingProvider = ({ children }) => {\r\n  const [loadingMap, setLoadingMap] = useState({});\r\n\r\n  const setLoading = useCallback((tag, isLoading) => {\r\n    setLoadingMap(prev => ({ ...prev, [tag]: isLoading }));\r\n  }, []);\r\n\r\n  const isLoading = useCallback(tag => !!loadingMap[tag], [loadingMap]);\r\n  const anyLoading = Object.values(loadingMap).some(val => val);\r\n\r\n  return (\r\n    <LoadingContext.Provider value={{ setLoading, isLoading, anyLoading }}>\r\n      {children}\r\n    </LoadingContext.Provider>\r\n  );\r\n};\r\n\r\n/**\r\n * Hook to control loading for a specific tag\r\n * @param {string} tag - Unique identifier for loading scope\r\n * @returns {[boolean, function, function]} [isLoading, startLoading, stopLoading]\r\n */\r\nexport const useLoading = (tag) => {\r\n  const context = useContext(LoadingContext);\r\n  if (!context) throw new Error('useLoading must be used within LoadingProvider');\r\n  const { setLoading, isLoading } = context;\r\n  const startLoading = useCallback(() => setLoading(tag, true), [setLoading, tag]);\r\n  const stopLoading = useCallback(() => setLoading(tag, false), [setLoading, tag]);\r\n  return [isLoading(tag), startLoading, stopLoading];\r\n};\r\n\r\n/**\r\n * Hook to check if any loading is active globally\r\n * @returns {boolean}\r\n */\r\nexport const useGlobalLoading = () => {\r\n  const context = useContext(LoadingContext);\r\n  if (!context) throw new Error('useGlobalLoading must be used within LoadingProvider');\r\n  return context.anyLoading;\r\n}; ","import { createContext, useContext, useState, useEffect, useCallback, useMemo } from 'react';\nimport { useToast } from './ToastContext';\nimport { useLoading } from './LoadingContext';\n// Firebase is dynamically imported to avoid blocking\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [idToken, setIdToken] = useState(null);\n  const [loading, setLoading] = useState(false); // Changed to false initially - we're proceeding anonymously\n  // Sync with global loading context for auth\n  const [, startAuthLoading, stopAuthLoading] = useLoading('auth');\n  const [error, setError] = useState(null);\n  const [isLoggingIn, setIsLoggingIn] = useState(false); // State to trigger login UI\n  const [isFirebaseInitialized, setIsFirebaseInitialized] = useState(false);\n  const { showToast } = useToast();\n\n  useEffect(() => {\n    if (loading) startAuthLoading(); else stopAuthLoading();\n  }, [loading, startAuthLoading, stopAuthLoading]);\n\n  const login = useCallback(async () => {\n    console.log(\"Login button clicked, setting isLoggingIn to true.\");\n    setIsLoggingIn(true);\n  }, [setIsLoggingIn]);\n\n  const logout = useCallback(async () => {\n    if (!isFirebaseInitialized) {\n      console.log(\"Firebase not initialized yet, cannot logout.\");\n      return;\n    }\n    const { getFirebaseAuth } = await import(/* webpackChunkName: \"firebase-config\" */ '../firebaseConfig');\n    const { signOut: firebaseSignOut } = await import(/* webpackChunkName: \"firebase-auth\" */ 'firebase/auth');\n    const auth = getFirebaseAuth();\n    if (!auth) {\n      const msg = \"Firebase not initialized.\";\n      setError(msg);\n      showToast({ type: 'error', message: msg });\n      return;\n    }\n    try {\n      await firebaseSignOut(auth);\n      console.log(\"Sign out successful.\");\n    } catch (err) {\n      console.error(\"Logout failed:\", err);\n      const msg = err.message || 'Failed to logout.';\n      setError(msg);\n      showToast({ type: 'error', message: msg });\n    }\n  }, [isFirebaseInitialized, setError, showToast]);\n\n  // Effect to listen for Firebase auth state changes\n  useEffect(() => {\n    let unsubscribe = null;\n\n    // Listen for the 'firebaseInitialized' event from App.js\n    const handleFirebaseInit = () => {\n      console.log(\"Received Firebase initialized event\");\n      setIsFirebaseInitialized(true);\n      initializeAuthListener();\n    };\n\n    // Function to initialize auth listener\n    const initializeAuthListener = async () => {\n      setLoading(true);\n      // Dynamically import Firebase auth\n      const { getFirebaseAuth } = await import(/* webpackChunkName: \"firebase-config\" */ '../firebaseConfig');\n      const { onAuthStateChanged: firebaseOnAuthStateChanged } = await import(/* webpackChunkName: \"firebase-auth\" */ 'firebase/auth');\n      \n      const auth = getFirebaseAuth();\n      if (!auth) {\n        console.warn(\"Auth service not available for onAuthStateChanged listener.\");\n        setLoading(false);\n        return;\n      }\n      \n      console.log(\"Setting up Firebase onAuthStateChanged listener.\");\n      unsubscribe = firebaseOnAuthStateChanged(auth, async (user) => {\n        setCurrentUser(user);\n        if (user) {\n          try {\n            // Force refresh is false by default, gets cached token if available\n            const token = await user.getIdToken();\n            setIdToken(token);\n            try { localStorage.setItem('idToken', token); } catch (e) { console.warn('Failed to cache idToken', e); }\n            setError(null); // Clear previous errors on successful login\n            setIsLoggingIn(false); // Ensure login UI closes if open\n            console.log(\"User signed in, token obtained.\");\n          } catch (err) {\n            console.error(\"Failed to get ID token:\", err);\n            const msg = \"Failed to get authentication token.\";\n            setError(msg);\n            showToast({ type: 'error', message: msg });\n            setIdToken(null);\n            // Optionally sign out the user if token fetch fails critically\n            const { signOut: firebaseSignOut } = await import(/* webpackChunkName: \"firebase-auth\" */ 'firebase/auth');\n            await firebaseSignOut(auth);\n          }\n        } else {\n          // User is signed out\n          setIdToken(null);\n          try { localStorage.removeItem('idToken'); } catch (e) { console.warn('Failed to remove cached idToken', e); }\n          setIsLoggingIn(false); // Ensure login UI closes if open\n          console.log(\"User signed out.\");\n        }\n        setLoading(false); // Auth state determined\n      });\n    };\n\n    // Define a custom event for Firebase initialization\n    window.addEventListener('firebaseInitialized', handleFirebaseInit);\n\n    // Cleanup listener on component unmount\n    return () => {\n      window.removeEventListener('firebaseInitialized', handleFirebaseInit);\n      if (typeof unsubscribe === 'function') {\n      console.log(\"Cleaning up Firebase onAuthStateChanged listener.\");\n        unsubscribe();\n      }\n    };\n  }, [showToast]);\n\n  const value = useMemo(() => ({\n    currentUser,\n    idToken,\n    loading,\n    error,\n    login,\n    logout,\n    isAuthenticated: !!currentUser && !!idToken,\n    isLoggingIn,\n    setIsLoggingIn,\n    isFirebaseInitialized\n  }), [currentUser, idToken, loading, error, login, logout, isLoggingIn, setIsLoggingIn, isFirebaseInitialized]);\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}; ","import { createContext, useContext, useState, useEffect, useCallback, useMemo } from 'react';\n\n// Create theme context\nconst ThemeContext = createContext();\n\n// Custom hook for using theme\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n\n// Theme provider component\nexport const ThemeProvider = ({ children }) => {\n  // Initialize theme from localStorage or default to 'dark'\n  const [theme, setTheme] = useState(() => {\n    const savedTheme = localStorage.getItem('theme');\n    return savedTheme || 'dark';\n  });\n\n  // Toggle between light and dark themes\n  const toggleTheme = useCallback(() => {\n    setTheme(prevTheme => {\n      const newTheme = prevTheme === 'dark' ? 'light' : 'dark';\n      localStorage.setItem('theme', newTheme);\n      return newTheme;\n    });\n  }, []);\n\n  // Apply theme class to body element, including system preference\n  useEffect(() => {\n    const applyTheme = () => {\n      document.body.classList.remove('light-mode', 'dark-mode');\n      if (theme === 'system') {\n        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n        document.body.classList.add(prefersDark ? 'dark-mode' : 'light-mode');\n      } else {\n        document.body.classList.add(`${theme}-mode`);\n      }\n    };\n    applyTheme();\n  }, [theme]);\n\n  // Listen to system theme changes when in system mode\n  useEffect(() => {\n    const mql = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = (e) => {\n      if (theme === 'system') {\n        document.body.classList.remove('light-mode', 'dark-mode');\n        document.body.classList.add(e.matches ? 'dark-mode' : 'light-mode');\n      }\n    };\n    mql.addEventListener('change', handleChange);\n    return () => mql.removeEventListener('change', handleChange);\n  }, [theme]);\n\n  // Context value - memoized to prevent unnecessary re-renders\n  const value = useMemo(() => ({\n    theme,\n    toggleTheme,\n    isDark: theme === 'dark'\n  }), [theme, toggleTheme]);\n\n  return (\n    <ThemeContext.Provider value={value}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}; ","import { createContext, useContext, useState, useMemo } from 'react';\r\n\r\n// Create API context\r\nconst ApiContext = createContext();\r\n\r\n// Custom hook for using API context\r\nexport const useApi = () => {\r\n  const context = useContext(ApiContext);\r\n  if (context === undefined) {\r\n    throw new Error('useApi must be used within an ApiProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n// API provider component\r\nexport const ApiProvider = ({ children }) => {\r\n  const [apiUrl] = useState(import.meta.env.REACT_APP_API_URL || 'http://localhost:3000/api'); // Base API URL\r\n\r\n  // Memoize context value to prevent unnecessary re-renders\r\n  const value = useMemo(() => ({\r\n    apiUrl,\r\n  }), [apiUrl]);\r\n\r\n  return (\r\n    <ApiContext.Provider value={value}>\r\n      {children}\r\n    </ApiContext.Provider>\r\n  );\r\n}; ","import { useState, useEffect, useRef, useCallback } from 'react';\n\n/**\n * Custom hook for using localStorage with React state\n * @param {string} key - The localStorage key\n * @param {any} initialValue - The initial value if key doesn't exist\n * @returns {[any, Function]} - State value and setter function\n */\nexport const useLocalStorage = (key, initialValue) => {\n  // Use a ref to hold the initial value to avoid unnecessary state updates\n  const initialValueRef = useRef(initialValue);\n  \n  // Initialize state from localStorage or use initialValue\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from localStorage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or return initialValue\n      return item ? JSON.parse(item) : initialValueRef.current;\n    } catch (error) {\n      console.error(`Error reading localStorage key \"${key}\":`, error);\n      return initialValueRef.current;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that\n  // persists the new value to localStorage\n  const setValue = useCallback((value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      \n      // Save state\n      setStoredValue(valueToStore);\n      \n      // Save to localStorage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.error(`Error setting localStorage key \"${key}\":`, error);\n    }\n  }, [key, storedValue]);\n\n  // Update stored value if key changes\n  useEffect(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      setStoredValue(item ? JSON.parse(item) : initialValueRef.current);\n    } catch (error) {\n      console.error(`Error updating from localStorage key \"${key}\":`, error);\n      setStoredValue(initialValueRef.current);\n    }\n  }, [key]); // Remove initialValue from dependencies\n\n  return [storedValue, setValue];\n};\n\n/**\n * Custom hook for writing to localStorage without React state\n * @param {string} key - The localStorage key\n * @returns {Object} - Methods for accessing localStorage\n */\nexport const useLocalStorageWrite = (key) => {\n  const writeValue = (value) => {\n    try {\n      window.localStorage.setItem(key, JSON.stringify(value));\n      return true;\n    } catch (error) {\n      console.error(`Error writing to localStorage key \"${key}\":`, error);\n      return false;\n    }\n  };\n\n  const readValue = () => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : null;\n    } catch (error) {\n      console.error(`Error reading from localStorage key \"${key}\":`, error);\n      return null;\n    }\n  };\n\n  const removeValue = () => {\n    try {\n      window.localStorage.removeItem(key);\n      return true;\n    } catch (error) {\n      console.error(`Error removing localStorage key \"${key}\":`, error);\n      return false;\n    }\n  };\n\n  return { writeValue, readValue, removeValue };\n}; ","import { useEffect, useCallback } from 'react';\r\nimport { useLocalStorage } from './useLocalStorage';\r\n\r\n/**\r\n * Custom hook for controlling model caching\r\n * @returns {Object} Cache toggle state and methods\r\n */\r\nexport const useCacheToggle = () => {\r\n  // Store cache enabled setting in localStorage with default value of true\r\n  const [cacheEnabled, setCacheEnabled] = useLocalStorage('modelCacheEnabled', true);\r\n  \r\n  // Clear model cache\r\n  const clearModelCache = useCallback(() => {\r\n    try {\r\n      localStorage.removeItem('modelDropdownCache');\r\n      console.log('Model cache cleared');\r\n    } catch (error) {\r\n      console.error('Error clearing model cache:', error);\r\n    }\r\n  }, []);\r\n\r\n  // Toggle cache enabled state and clear cache if disabling\r\n  const toggleCache = useCallback((enabled) => {\r\n    const newValue = typeof enabled === 'boolean' ? enabled : !cacheEnabled;\r\n    \r\n    // If turning off caching, clear the existing cache\r\n    if (!newValue) {\r\n      clearModelCache();\r\n    }\r\n    \r\n    setCacheEnabled(newValue);\r\n    return newValue;\r\n  }, [cacheEnabled, setCacheEnabled, clearModelCache]);\r\n\r\n  // Forcibly refresh models by clearing cache\r\n  const refreshModels = useCallback(() => {\r\n    clearModelCache();\r\n    // Cache will be regenerated on next data fetch\r\n  }, [clearModelCache]);\r\n\r\n  // Patch the original isCacheValid function\r\n  useEffect(() => {\r\n    // Skip this effect during server-side rendering\r\n    if (typeof window === 'undefined') return;\r\n\r\n    // Store the original isCacheValid function\r\n    const originalFunc = window.isCacheValid;\r\n\r\n    // Define our patched function\r\n    window.isCacheValid = function patchedIsCacheValid(cache) {\r\n      // First check if caching is enabled at all\r\n      const enabled = localStorage.getItem('modelCacheEnabled');\r\n      if (enabled === 'false') return false;\r\n      \r\n      // If enabled, use original validation logic\r\n      if (typeof originalFunc === 'function') {\r\n        return originalFunc(cache);\r\n      }\r\n      \r\n      // Fallback implementation if original not available\r\n      return (\r\n        cache &&\r\n        cache.timestamp &&\r\n        Date.now() - cache.timestamp < 5 * 60 * 1000 &&\r\n        cache.allModels &&\r\n        cache.processedModels &&\r\n        cache.experimentalModels\r\n      );\r\n    };\r\n\r\n    // Cleanup function to restore original\r\n    return () => {\r\n      window.isCacheValid = originalFunc;\r\n    };\r\n  }, []);\r\n\r\n  // Return state and functions\r\n  return {\r\n    cacheEnabled,\r\n    toggleCache,\r\n    clearModelCache,\r\n    refreshModels\r\n  };\r\n}; ","import { createContext, useContext, useState, useEffect, useCallback, useMemo, useRef } from 'react';\nimport { useApi } from './ApiContext';\nimport { useLocalStorage } from '../hooks/useLocalStorage';\nimport { useAuth } from './AuthContext';\nimport { useCacheToggle } from '../hooks/useCacheToggle';\nimport { useToast } from './ToastContext';\nimport { useLoading } from './LoadingContext';\n\n// Cache expiry time in milliseconds (5 days)\nconst CACHE_EXPIRY_TIME = 5 * 24 * 60 * 60 * 1000;\n\n// Create separate contexts for models and filtering\nconst ModelContext = createContext();\nconst ModelFilterContext = createContext();\n\n// Custom hook for using model context\nexport const useModel = () => {\n  const context = useContext(ModelContext);\n  if (context === undefined) {\n    throw new Error('useModel must be used within a ModelProvider');\n  }\n  return context;\n};\n\n// Custom hook for using model filter context\nexport const useModelFilter = () => {\n  const context = useContext(ModelFilterContext);\n  if (context === undefined) {\n    throw new Error('useModelFilter must be used within a ModelProvider');\n  }\n  return context;\n};\n\n// Model provider component\nexport const ModelProvider = ({ children }) => {\n  const { cacheEnabled } = useCacheToggle();\n  const { apiUrl } = useApi();\n  const { idToken } = useAuth();\n  const { showToast } = useToast();\n  \n  // State for model data\n  const [allModels, setAllModels] = useState([]);\n  const [processedModels, setProcessedModels] = useState({});\n  const [experimentalModels, setExperimentalModels] = useState([]);\n  const [selectedModel, setSelectedModel] = useLocalStorage('selectedModel', null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  \n  // Filter state - moved to separate context\n  const [showExperimental, setShowExperimental] = useLocalStorage('showExperimental', false);\n  const [modelFilter, setModelFilter] = useState({\n    search: '',\n    categories: {\n      'Chat': true,\n      'Image': true,\n      'Embedding': true\n    }\n  });\n  \n  // Sync with global loading context\n  const [, startModelsLoading, stopModelsLoading] = useLoading('models');\n  useEffect(() => {\n    if (isLoading) startModelsLoading();\n    else stopModelsLoading();\n  }, [isLoading, startModelsLoading, stopModelsLoading]);\n  \n  // Check if cache is valid\n  const isCacheValid = useCallback((cache) => {\n    return (\n      cache &&\n      cache.timestamp &&\n      Date.now() - cache.timestamp < CACHE_EXPIRY_TIME &&\n      cache.allModels &&\n      cache.processedModels &&\n      cache.experimentalModels\n    );\n  }, []);\n  \n  // Expose isCacheValid function for external access\n  useEffect(() => {\n    // Skip during server-side rendering\n    if (typeof window === 'undefined') return;\n    window.isCacheValid = isCacheValid;\n    \n    return () => {\n      delete window.isCacheValid;\n    };\n  }, [isCacheValid]);\n  \n  // Cache models to localStorage\n  const cacheModels = useCallback((data) => {\n    try {\n      const cache = {\n        allModels: data.allModels,\n        processedModels: data.processedModels,\n        experimentalModels: data.experimentalModels,\n        timestamp: Date.now()\n      };\n      \n      localStorage.setItem('modelDropdownCache', JSON.stringify(cache));\n    } catch (error) {\n      console.error('Error caching models:', error);\n    }\n  }, []);\n  \n  // Update category filter\n  const updateCategoryFilter = useCallback((category, isChecked) => {\n    setModelFilter(prev => ({\n      ...prev,\n      categories: {\n        ...prev.categories,\n        [category]: isChecked\n      }\n    }));\n  }, []);\n  \n  // Update search filter\n  const updateSearchFilter = useCallback((searchText) => {\n    setModelFilter(prev => ({\n      ...prev,\n      search: searchText\n    }));\n  }, []);\n  \n  // Select a model\n  const selectModel = useCallback((model) => {\n    // Check if the model is actually different to prevent unnecessary updates\n    if (selectedModel?.id !== model?.id) { \n      setSelectedModel(model);\n    }\n  }, [selectedModel, setSelectedModel]);\n  \n  // Fetch models from API, optionally using auth token or override token\n  const fetchModels = useCallback(async (authRequired = false, overrideToken = null) => {\n    setIsLoading(true);\n    setError(null);\n    \n    console.log(`Fetching models from API (auth: ${authRequired})...`);\n    try {\n      const headers = { 'Accept': 'application/json' };\n      if (authRequired) {\n        // Prefer overrideToken (cached) over current idToken\n        const tokenToUse = overrideToken || idToken;\n        if (tokenToUse) {\n          headers['Authorization'] = `Bearer ${tokenToUse}`;\n        }\n      }\n      const modelsUrl = new URL('/api/models/classified', apiUrl).toString();\n      const response = await fetch(modelsUrl, { headers });\n      console.log('Models response:', response);\n      \n      if (!response.ok) {\n        let errorMsg = `Error fetching models: ${response.status}`;\n        console.error(errorMsg);\n        throw new Error(errorMsg);\n      }\n      \n      const rawData = await response.json();\n      console.log(\"[ModelContext] Raw data:\", rawData);\n      console.log(\"[ModelContext] Spawning worker for model processing...\");\n      // Offload model processing to Web Worker\n      const worker = new Worker(new URL('../workers/modelProcessor.jsx', import.meta.url), { type: 'module' });\n      worker.postMessage(rawData);\n      worker.onmessage = ({ data: msg }) => {\n        if (msg.error) {\n          console.error('[ModelContext] Worker error:', msg.error);\n          setError(msg.error);\n          showToast({ type: 'error', message: msg.error });\n        } else {\n          const {\n            allModels: fetchedAllModels,\n            processedModels: fetchedProcessedModels,\n            experimentalModels: fetchedExperimentalModels\n          } = msg;\n          if (cacheEnabled) {\n            const rawPrev = localStorage.getItem('modelDropdownCache');\n            let prevCache;\n            try { prevCache = JSON.parse(rawPrev); } catch { prevCache = null; }\n            const changed = !prevCache ||\n              JSON.stringify(prevCache.allModels) !== JSON.stringify(fetchedAllModels) ||\n              JSON.stringify(prevCache.processedModels) !== JSON.stringify(fetchedProcessedModels) ||\n              JSON.stringify(prevCache.experimentalModels) !== JSON.stringify(fetchedExperimentalModels);\n            if (changed) {\n              setAllModels(fetchedAllModels);\n              setProcessedModels(fetchedProcessedModels);\n              setExperimentalModels(fetchedExperimentalModels);\n              cacheModels({ allModels: fetchedAllModels, processedModels: fetchedProcessedModels, experimentalModels: fetchedExperimentalModels });\n            }\n          } else {\n            setAllModels(fetchedAllModels);\n            setProcessedModels(fetchedProcessedModels);\n            setExperimentalModels(fetchedExperimentalModels);\n          }\n          // Initial model selection moved to a separate useEffect\n        }\n        setIsLoading(false);\n        worker.terminate();\n      };\n      worker.onerror = (err) => {\n        console.error('[ModelContext] Worker unexpected error:', err);\n        setError(err.message);\n        showToast({ type: 'error', message: err.message });\n        setIsLoading(false);\n        worker.terminate();\n      };\n    } catch (err) {\n      console.error('Failed to fetch or process models:', err);\n      setError(err.message || 'Failed to load model data');\n      showToast({ type: 'error', message: err.message || 'Failed to load model data' });\n      // Attempt to load from potentially expired cache as a last resort?\n    }\n  }, [apiUrl, cacheModels, idToken, cacheEnabled, showToast]);\n  \n  // Initial fetch once on mount\n  const initialFetchDoneRef = useRef(false);\n  // track if we've already fetched models with authentication\n  const didAuthFetchRef = useRef(false);\n\n  useEffect(() => {\n    if (!initialFetchDoneRef.current) {\n      if (cacheEnabled) {\n        const rawCache = localStorage.getItem('modelDropdownCache');\n        let parsedCache;\n        try { parsedCache = JSON.parse(rawCache); } catch { parsedCache = null; }\n        if (parsedCache && window.isCacheValid(parsedCache)) {\n          setAllModels(parsedCache.allModels);\n          setProcessedModels(parsedCache.processedModels);\n          setExperimentalModels(parsedCache.experimentalModels);\n          setIsLoading(false);\n        }\n      }\n      let cachedToken = null;\n      try { cachedToken = localStorage.getItem('idToken'); } catch {}\n      if (cachedToken) {\n        // initial authenticated fetch\n        didAuthFetchRef.current = true;\n        fetchModels(true, cachedToken);\n      } else {\n        // initial unauthenticated fetch\n        fetchModels(false);\n      }\n      initialFetchDoneRef.current = true;\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // After login, fetch authenticated models\n  useEffect(() => {\n    // only fetch once after obtaining idToken if not already done\n    if (initialFetchDoneRef.current && idToken && !didAuthFetchRef.current) {\n      didAuthFetchRef.current = true;\n      fetchModels(true);\n    }\n  }, [idToken, fetchModels]);\n  \n  // Set initial model after models are loaded\n  useEffect(() => {\n    // Select first model if none selected and models are loaded\n    if (!selectedModel && allModels.length > 0) {\n      setSelectedModel(allModels[0]);\n    }\n  }, [allModels, selectedModel, setSelectedModel]);\n  \n  // Create toggleExperimentalModels callback at the top level\n  const toggleExperimentalModels = useCallback(() => {\n    setShowExperimental(prev => !prev);\n  }, [setShowExperimental]);\n  \n  // Main model context value - no filter state\n  const modelValue = useMemo(() => ({\n    allModels,\n    processedModels,\n    experimentalModels,\n    selectedModel,\n    isLoading,\n    error,\n    showExperimental,\n    isExperimentalModelsEnabled: showExperimental,\n    toggleExperimentalModels,\n    setShowExperimental,\n    selectModel,\n    refreshModels: fetchModels\n  }), [\n    allModels,\n    processedModels,\n    experimentalModels,\n    selectedModel,\n    isLoading,\n    error,\n    showExperimental,\n    toggleExperimentalModels,\n    setShowExperimental,\n    selectModel,\n    fetchModels\n  ]);\n  \n  // Filter context value - only filter-related state\n  const filterValue = useMemo(() => ({\n    modelFilter,\n    updateCategoryFilter,\n    updateSearchFilter\n  }), [\n    modelFilter,\n    updateCategoryFilter,\n    updateSearchFilter\n  ]);\n  \n  return (\n    <ModelContext.Provider value={modelValue}>\n      <ModelFilterContext.Provider value={filterValue}>\n        {children}\n      </ModelFilterContext.Provider>\n    </ModelContext.Provider>\n  );\n}; ","import { createContext, useContext, useCallback, useMemo } from 'react';\nimport { useLocalStorage } from '../hooks/useLocalStorage';\n\n// Default settings values\nconst DEFAULT_SETTINGS = {\n  temperature: 0.7,\n  top_p: 1.0,\n  max_tokens: 8191,\n  frequency_penalty: 0,\n  presence_penalty: 0,\n  streaming: true,\n  systemPrompt: `You are a knowledgeable, friendly, and supportive university-level assistant.\n\nFor every question or topic, provide a clear, engaging, and well-structured answer, styled like an expert mentor or senior student.\n\nStyle and Structure:\n\nBegin with a welcoming, positive intro (e.g., \"Alright! I'll break this down for you in detail section by section, with clear explanations and important points.\").\nOrganize your response into numbered sections, each with a descriptive header and an emoji (e.g., # 📚 1. Core Concept).\nIn each section, explain:\nCore ideas and definitions\nHow things work (step-by-step, or process overview)\nAny relevant formulas, code, or examples\nKey points, tips, or comparisons\nUse subheadings, bullet points, tables, and diagrams (ASCII or LaTeX) for clarity when helpful.\nAt the end, summarize with a \"Key Takeaways\" or \"Next Steps/Related Topics\" section, with quick revision notes, further reading, or suggestions for deeper exploration if relevant.\nAlways offer to provide summary tables, code snippets, or quick revision notes if the user wants them.\nTone: Friendly, supportive, and approachable—like a helpful peer or mentor. Formatting: Use bold, italics, emojis, markdown headers, and tables to maximize clarity.\n\nUse emojis befitting the context\n\nYour goal: Make complex ideas easy to understand, memorable, and actionable for the student—whether for study, projects, or curiosity.`\n//  systemPrompt: \"You are ChatGPT, a helpful and knowledgeable AI assistant. Your primary role is to assist Nikhil, a university engineering student, by providing clear, concise, and technically accurate information. Adopt a friendly and approachable tone, akin to a knowledgeable peer or mentor. Enhance your responses with relevant emojis to convey tone and emotion, making interactions more engaging. Structure your answers logically, using bullet points or numbered lists where appropriate to enhance clarity. When applicable, incorporate interactive elements such as code snippets or diagrams to facilitate deeper understanding. Encourage curiosity by suggesting related topics or questions that Nikhil might explore further. Always tailor your assistance to support Nikhil's academic and personal growth in the field of engineering\"\n};\n\n// Create settings context\nconst SettingsContext = createContext();\n\n// Custom hook for using settings\nexport const useSettings = () => {\n  const context = useContext(SettingsContext);\n  if (context === undefined) {\n    throw new Error('useSettings must be used within a SettingsProvider');\n  }\n  return context;\n};\n\n// Settings provider component\nexport const SettingsProvider = ({ children }) => {\n  // Initialize settings state with defaults, persisted to localStorage\n  const [settings, setSettings] = useLocalStorage('appSettings', DEFAULT_SETTINGS);\n  \n  // Handle individual setting updates\n  const updateSetting = useCallback((key, value) => {\n    // Ensure the key is a valid setting we manage\n    if (key in DEFAULT_SETTINGS) {\n      setSettings(prev => ({\n        ...prev,\n        [key]: value\n      }));\n    }\n  }, [setSettings]);\n  \n  // Reset settings to defaults\n  const resetSettings = useCallback(() => {\n    setSettings(DEFAULT_SETTINGS);\n  }, [setSettings]);\n  \n  // Check if temperature should be restricted based on model name/series\n  const shouldRestrictTemperature = useCallback((model) => {\n    if (!model) return false;\n    \n    // More explicit flag checking for temperature restriction\n    // Check for specific model properties that indicate temperature restriction\n    return (\n      model.requiresFixedTemperature === true || \n      (model.properties && model.properties.includes('fixed_temperature')) ||\n      (model.id && model.id.toLowerCase().startsWith('o')) ||\n      (model.series && model.series.toLowerCase() === 'o-series')\n    );\n  }, []);\n  \n  // Get current settings with potential model-specific overrides\n  const getModelAdjustedSettings = useCallback((model) => {\n    if (shouldRestrictTemperature(model)) {\n      return {\n        ...settings,\n        temperature: 1.0\n      };\n    }\n    return settings;\n  }, [settings, shouldRestrictTemperature]);\n  \n  // Memoize context value to prevent unnecessary re-renders\n  const value = useMemo(() => ({\n    settings,\n    updateSetting,\n    resetSettings,\n    shouldRestrictTemperature,\n    getModelAdjustedSettings\n  }), [\n    settings,\n    updateSetting, \n    resetSettings, \n    shouldRestrictTemperature, \n    getModelAdjustedSettings\n  ]);\n  \n  return (\n    <SettingsContext.Provider value={value}>\n      {children}\n    </SettingsContext.Provider>\n  );\n}; ","import { createContext, useContext, useState, useMemo, useEffect } from 'react';\r\nimport { useLoading } from './LoadingContext';\r\n\r\n// Create chat status context\r\nconst ChatStatusContext = createContext();\r\n\r\n// Hook to use chat status context\r\nexport const useChatStatus = () => {\r\n  const context = useContext(ChatStatusContext);\r\n  if (context === undefined) {\r\n    throw new Error('useChatStatus must be used within a ChatStatusProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n// Provider component for chat status\r\nexport const ChatStatusProvider = ({ children }) => {\r\n  const [isWaitingForResponse, setIsWaitingForResponse] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  // Sync with global loading context for chat\r\n  const [, startChatLoading, stopChatLoading] = useLoading('chat');\r\n  useEffect(() => {\r\n    if (isWaitingForResponse) startChatLoading();\r\n    else stopChatLoading();\r\n  }, [isWaitingForResponse, startChatLoading, stopChatLoading]);\r\n\r\n  const value = useMemo(() => ({\r\n    isWaitingForResponse,\r\n    setIsWaitingForResponse,\r\n    error,\r\n    setError,\r\n  }), [isWaitingForResponse, error]);\r\n\r\n  return (\r\n    <ChatStatusContext.Provider value={value}>\r\n      {children}\r\n    </ChatStatusContext.Provider>\r\n  );\r\n}; ","import React, { createContext, useContext, useState, useRef,  useCallback, useMemo } from 'react';\n\n// Create chat history context\nconst ChatHistoryContext = createContext();\n\n// Hook to use chat history context\nexport const useChatHistory = () => {\n  const context = useContext(ChatHistoryContext);\n  if (context === undefined) {\n    throw new Error('useChatHistory must be used within a ChatHistoryProvider');\n  }\n  return context;\n};\n\n// Provider component for chat history\nexport const ChatHistoryProvider = ({ children }) => {\n  // State and ref for chat history, with custom setter to sync ref immediately\n  const [chatHistory, internalSetChatHistory] = useState([]);\n  const chatHistoryRef = useRef([]);\n\n  // Wrap setter to sync ref and state in one step\n  const setChatHistory = useCallback((update) => {\n    internalSetChatHistory(prev => {\n      const newHistory = typeof update === 'function' ? update(prev) : update;\n      chatHistoryRef.current = newHistory;\n      return newHistory;\n    });\n  }, []);\n\n  // Add message, stable callback\n  const addMessageToHistory = useCallback((role, content, metrics) => {\n    const timestamp = Date.now();\n    const message = { id: timestamp, role, content, timestamp, ...(metrics && { metrics }) };\n    setChatHistory(prev => [...prev, message]);\n    return message;\n  }, [setChatHistory]);\n\n  // Function to update content of the most recent assistant message (avoiding user replacements)\n  const updateChatWithContent = useCallback((content) => {\n    setChatHistory(prev => {\n      const lastIndex = prev.length - 1;\n      if (lastIndex < 0) return prev;\n      const lastMsg = prev[lastIndex];\n      // No-op if not assistant or same content\n      if (lastMsg.role !== 'assistant' || lastMsg.content === content) {\n        return prev;\n      }\n      // Otherwise clone and update\n      const newHistory = [...prev];\n      newHistory[lastIndex] = { ...lastMsg, content };\n      return newHistory;\n    });\n  }, [setChatHistory]);\n\n  // Memoize context value to avoid re-renders\n  const value = useMemo(() => ({\n    chatHistory,\n    chatHistoryRef,\n    setChatHistory,\n    addMessageToHistory,\n    updateChatWithContent\n  }), [chatHistory, setChatHistory, addMessageToHistory, updateChatWithContent]);\n\n  return (\n    <ChatHistoryContext.Provider value={value}>\n      {children}\n    </ChatHistoryContext.Provider>\n  );\n}; ","import React, { createContext, useContext, useState, useCallback, useMemo, useEffect } from 'react';\nimport { useChatHistory } from './ChatHistoryContext';\n\n// Create performance metrics context\nconst PerformanceMetricsContext = createContext();\n\n// Hook to use performance metrics context\nexport const usePerformanceMetrics = () => {\n  const context = useContext(PerformanceMetricsContext);\n  if (context === undefined) {\n    throw new Error('usePerformanceMetrics must be used within a PerformanceMetricsProvider');\n  }\n  return context;\n};\n\n// Provider component for performance metrics\nexport const PerformanceMetricsProvider = ({ children }) => {\n  const { setChatHistory } = useChatHistory();\n  const [currentMessageMetrics, setCurrentMessageMetrics] = useState({\n    startTime: null,\n    endTime: null,\n    elapsedTime: null,\n    tokenCount: null,\n    tokensPerSecond: null,\n    isComplete: false,\n    timeToFirstToken: null,\n    promptTokens: null,\n    completionTokens: null,\n    totalTokens: null,\n    finishReason: null\n  });\n\n  const resetPerformanceMetrics = useCallback(() => {\n    setCurrentMessageMetrics({\n      startTime: null,\n      endTime: null,\n      elapsedTime: null,\n      tokenCount: null,\n      tokensPerSecond: null,\n      isComplete: false,\n      timeToFirstToken: null,\n      promptTokens: null,\n      completionTokens: null,\n      totalTokens: null,\n      finishReason: null\n    });\n  }, []);\n\n  const startPerformanceTimer = useCallback(() => {\n    setCurrentMessageMetrics(prev => ({\n      ...prev,\n      startTime: Date.now(),\n      isComplete: false\n    }));\n  }, []);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const updatePerformanceMetrics = useCallback((newTokenCount, isComplete = false, tokenInfo = null, finishReason = null) => {\n    setCurrentMessageMetrics(prev => {\n      const endTime = Date.now();\n      const elapsedTime = prev.startTime ? endTime - prev.startTime : 0;\n      const tokensPerSecond = newTokenCount && elapsedTime ?\n        Math.round((newTokenCount / (elapsedTime / 1000)) * 10) / 10 :\n        prev.tokensPerSecond;\n      const timeToFirstToken = prev.timeToFirstToken ||\n        (newTokenCount > 0 ? elapsedTime : null);\n\n      const newMetrics = {\n        startTime: prev.startTime,\n        endTime,\n        elapsedTime,\n        tokenCount: newTokenCount,\n        tokensPerSecond,\n        isComplete,\n        timeToFirstToken,\n        promptTokens: tokenInfo?.promptTokens || prev.promptTokens,\n        completionTokens: tokenInfo?.completionTokens || prev.completionTokens,\n        totalTokens: tokenInfo?.totalTokens || prev.totalTokens,\n        finishReason: finishReason || prev.finishReason\n      };\n\n      return newMetrics;\n    });\n  }, []);\n\n  // Sync performance metrics into chat history after a metrics update\n  useEffect(() => {\n    if (currentMessageMetrics.endTime != null) {\n      setChatHistory(prevHistory => {\n        const newHistory = [...prevHistory];\n        const lastMsg = newHistory[newHistory.length - 1];\n        if (lastMsg && lastMsg.role === 'assistant') {\n          lastMsg.metrics = { ...currentMessageMetrics };\n        }\n        return newHistory;\n      });\n    }\n  }, [currentMessageMetrics, setChatHistory]);\n\n  // Direct function to set token metrics for the last message - for debugging/testing\n  const setTokenMetricsForLastMessage = useCallback((metrics) => {\n    setChatHistory(prevHistory => {\n      const newHistory = [...prevHistory];\n      const lastMsg = newHistory[newHistory.length - 1];\n      if (lastMsg && lastMsg.role === 'assistant') {\n        lastMsg.metrics = {\n          ...(lastMsg.metrics || {}),\n          ...metrics,\n          isComplete: true\n        };\n      }\n      return newHistory;\n    });\n  }, [setChatHistory]);\n\n  const value = useMemo(() => ({\n    currentMessageMetrics,\n    resetPerformanceMetrics,\n    startPerformanceTimer,\n    updatePerformanceMetrics,\n    setTokenMetricsForLastMessage\n  }), [currentMessageMetrics, resetPerformanceMetrics, startPerformanceTimer, updatePerformanceMetrics, setTokenMetricsForLastMessage]);\n\n  return (\n    <PerformanceMetricsContext.Provider value={value}>\n      {children}\n    </PerformanceMetricsContext.Provider>\n  );\n}; ","export async function fetchWithRetry(input, init = {}, retries = 3, backoff = 500) {\n  let attempt = 0;\n  while (true) {\n    try {\n      const response = await fetch(input, init);\n      if (!response.ok) {\n        throw new Error(`Network error: ${response.status}`);\n      }\n      return response;\n    } catch (error) {\n      if (attempt >= retries) {\n        throw error;\n      }\n      // Exponential backoff with jitter\n      const delay = backoff * Math.pow(2, attempt) + Math.random() * 100;\n      await new Promise(res => setTimeout(res, delay));\n      attempt++;\n    }\n  }\n} ","import React, { createContext, useContext, useRef, useCallback,  useMemo } from 'react';\nimport { useApi } from './ApiContext';\nimport { useModel } from './ModelContext';\nimport { useSettings } from './SettingsContext';\nimport { useAuth } from './AuthContext';\nimport { useChatHistory } from './ChatHistoryContext';\nimport { useChatStatus } from './ChatStatusContext';\nimport { usePerformanceMetrics } from './PerformanceMetricsContext';\nimport { fetchWithRetry } from '../utils/network';\nimport debounce from 'lodash.debounce';\n\n// Create a context for streaming events and logic\nconst StreamingEventsContext = createContext();\n\nexport const useStreamingEvents = () => {\n  const context = useContext(StreamingEventsContext);\n  if (context === undefined) {\n    throw new Error('useStreamingEvents must be used within a StreamingEventsProvider');\n  }\n  return context;\n};\n\nexport const StreamingEventsProvider = ({ children }) => {\n  const { apiUrl } = useApi();\n  const { selectedModel } = useModel();\n  const { getModelAdjustedSettings } = useSettings();\n  const { idToken } = useAuth();\n  const { chatHistoryRef, setChatHistory, addMessageToHistory, updateChatWithContent } = useChatHistory();\n  const { setIsWaitingForResponse, setError } = useChatStatus();\n  const { resetPerformanceMetrics, startPerformanceTimer, updatePerformanceMetrics } = usePerformanceMetrics();\n\n  // Refs for streaming\n  const streamingTextRef = useRef('');\n  const currentRequestIdRef = useRef(null);\n  const abortControllerRef = useRef(null);\n  const isStreamingRef = useRef(false);\n  const firstTokenReceivedRef = useRef(false);\n\n  // Debounced content updater\n  const debouncedUpdateChat = useMemo(\n    () => debounce((content) => updateChatWithContent(content), 20),\n    [updateChatWithContent]\n  );\n\n  // SSE parsing worker setup\n  const streamWorkerUrlRef = useRef(null);\n  const streamWorkerRef = useRef(null);\n  const getOrCreateStreamWorker = useCallback(() => {\n    if (!streamWorkerRef.current) {\n      if (!streamWorkerUrlRef.current) {\n        streamWorkerUrlRef.current = new URL('../workers/streamProcessor.js', import.meta.url);\n      }\n      streamWorkerRef.current = new Worker(streamWorkerUrlRef.current, { type: 'module' });\n    }\n    return streamWorkerRef.current;\n  }, []);\n\n  const parseStreamChunk = useCallback((chunk) => new Promise((resolve, reject) => {\n    const worker = getOrCreateStreamWorker();\n    worker.onmessage = (e) => resolve(e.data);\n    worker.onerror = reject;\n    worker.postMessage(chunk);\n  }), [getOrCreateStreamWorker]);\n\n  // Stream a message using fetch SSE\n  const streamMessageWithFetch = useCallback(async (message, editIndex = null) => {\n    // Generate and store a client-side requestId for this stream\n    const requestId = (typeof crypto !== 'undefined' && crypto.randomUUID)\n      ? crypto.randomUUID()\n      : Math.random().toString(36).substring(2) + Date.now().toString(36);\n    currentRequestIdRef.current = requestId;\n    const isEditing = editIndex !== null && Number.isInteger(editIndex) && editIndex >= 0;\n    if (!message || !selectedModel) {\n      setError('Please enter a message and select a model');\n      return null;\n    }\n    const modelId = `${selectedModel.provider}/${selectedModel.id}`;\n    if (!modelId) {\n      setError('Invalid model selection');\n      return null;\n    }\n    let userMessage;\n    if (isEditing) {\n      setChatHistory(prev => {\n        const truncated = prev.slice(0, editIndex);\n        const original = prev[editIndex];\n        // Preserve original id/timestamp, only update content\n        userMessage = { ...original, content: message };\n        return [...truncated, userMessage];\n      });\n    } else {\n      userMessage = addMessageToHistory('user', message);\n    }\n    resetPerformanceMetrics();\n    startPerformanceTimer();\n    firstTokenReceivedRef.current = false;\n    setIsWaitingForResponse(true);\n    setError(null);\n    streamingTextRef.current = '';\n    isStreamingRef.current = true;\n    addMessageToHistory('assistant', '');\n    let timeoutId = setTimeout(() => {\n      abortControllerRef.current?.abort('timeout');\n      setError('Connection timed out');\n      setIsWaitingForResponse(false);\n    }, 60000);\n    const abortController = new AbortController();\n    abortControllerRef.current = abortController;\n    try {\n      const adjusted = getModelAdjustedSettings(selectedModel);\n      const historyForApi = chatHistoryRef.current.map(({ metrics, ...m }) => m);\n      if (adjusted.systemPrompt && (!historyForApi.length || historyForApi[0].role !== 'system')) {\n        historyForApi.unshift({ role: 'system', content: adjusted.systemPrompt, timestamp: Date.now() - 1 });\n      }\n      historyForApi.push(userMessage);\n      const payload = {\n        requestId,\n        model: modelId,\n        messages: historyForApi,\n        temperature: adjusted.temperature,\n        max_tokens: adjusted.max_tokens,\n        top_p: adjusted.top_p,\n        frequency_penalty: adjusted.frequency_penalty,\n        presence_penalty: adjusted.presence_penalty\n      };\n      const headers = { 'Content-Type': 'application/json', 'Accept': 'text/event-stream', 'Cache-Control': 'no-cache' };\n      if (idToken) headers['Authorization'] = `Bearer ${idToken}`;\n      const response = await fetchWithRetry(new URL('/api/chat/stream', apiUrl).toString(), {\n        method: 'POST', headers, body: JSON.stringify(payload), signal: abortController.signal, cache: 'no-store'\n      });\n      if (!response.ok) throw new Error(`API error: ${response.status}`);\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder('utf-8');\n      let accumulatedContent = '';\n      while (true) {\n        const { done, value } = await reader.read();\n        clearTimeout(timeoutId);\n        timeoutId = setTimeout(() => {\n          abortControllerRef.current?.abort();\n          setError('Connection timed out');\n          setIsWaitingForResponse(false);\n        }, 60000);\n        if (done) {\n          // handle leftover buffer\n          break;\n        }\n        const chunk = decoder.decode(value, { stream: true });\n\n        console.log('Received stream chunk:', chunk);\n\n        try {\n          const msgs = await parseStreamChunk(chunk);\n          for (const msg of msgs) {\n            // Handle server-sent error payload\n            if (msg.rawChunk?.error || msg.finishReason === 'error') {\n              const errMsg = msg.rawChunk?.error?.message || 'Error occurred during generation';\n              console.error('Error in SSE payload:', errMsg);\n              setError(errMsg);\n              setChatHistory(prev => {\n                const newHistory = [...prev];\n                const lastMsg = newHistory[newHistory.length - 1];\n                if (lastMsg && lastMsg.role === 'assistant') {\n                  lastMsg.content += `\\n\\n**Error:** ${errMsg}`;\n                  if (lastMsg.metrics) {\n                    lastMsg.metrics.isComplete = true;\n                    lastMsg.metrics.error = true;\n                  }\n                }\n                return newHistory;\n              });\n              return null;\n            }\n            // Append any content from the chunk\n            if (msg.content) {\n              // Record time to first token once\n              if (!firstTokenReceivedRef.current) {\n                updatePerformanceMetrics(1);\n                firstTokenReceivedRef.current = true;\n              }\n              accumulatedContent += msg.content;\n              streamingTextRef.current = accumulatedContent;\n              debouncedUpdateChat(accumulatedContent);\n            }\n            // Always use server-reported completion tokens for metrics\n            const completionTokens = msg.usage?.completionTokens ?? 0;\n            updatePerformanceMetrics(completionTokens, msg.isDone, msg.usage, msg.finishReason);\n          }\n        } catch {}\n      }\n      debouncedUpdateChat.flush();\n      updateChatWithContent(streamingTextRef.current);\n      return streamingTextRef.current;\n    } catch (error) {\n      console.error('Error streaming message:', error);\n      setError(error.message);\n      // Show the server error content as the assistant's message\n      setChatHistory(prev => {\n        const newHistory = [...prev];\n        const lastMsg = newHistory[newHistory.length - 1];\n        if (lastMsg && lastMsg.role === 'assistant') {\n          lastMsg.content += `\\n\\n**Error:** ${error.message || 'Error occurred during generation'}`;\n          if (lastMsg.metrics) {\n            lastMsg.metrics.isComplete = true;\n            lastMsg.metrics.error = true;\n          }\n        }\n        return newHistory;\n      });\n      return null;\n    } finally {\n      clearTimeout(timeoutId);\n      isStreamingRef.current = false;\n      setIsWaitingForResponse(false);\n      // Do not auto-call stop endpoint here; only explicit stop should trigger it\n      currentRequestIdRef.current = null;\n    }\n  }, [\n    apiUrl, selectedModel, getModelAdjustedSettings, idToken,\n    chatHistoryRef, setChatHistory, addMessageToHistory, updateChatWithContent,\n    debouncedUpdateChat, setError, setIsWaitingForResponse,\n    resetPerformanceMetrics, startPerformanceTimer, updatePerformanceMetrics,\n    parseStreamChunk\n  ]);\n\n  const stopStreaming = useCallback(async () => {\n    if (abortControllerRef.current) abortControllerRef.current.abort('user_stopped');\n    const reqId = currentRequestIdRef.current;\n    if (reqId) {\n      const headers = { 'Content-Type': 'application/json' };\n      if (idToken) headers['Authorization'] = `Bearer ${idToken}`;\n      try {\n        await fetchWithRetry(new URL('/api/chat/stop', apiUrl).toString(), {\n          method: 'POST', headers, body: JSON.stringify({ requestId: reqId })\n        });\n      } catch {} finally {\n        currentRequestIdRef.current = null;\n        abortControllerRef.current = null;\n      }\n    }\n    isStreamingRef.current = false;\n    setIsWaitingForResponse(false);\n    return true;\n  }, [apiUrl, idToken, setIsWaitingForResponse]);\n\n  const value = useMemo(() => ({\n    streamMessageWithFetch,\n    stopStreaming,\n    parseStreamChunk,\n    streamingTextRef,\n    isStreaming: () => isStreamingRef.current\n  }), [streamMessageWithFetch, stopStreaming, parseStreamChunk]);\n\n  return (\n    <StreamingEventsContext.Provider value={value}>\n      {children}\n    </StreamingEventsContext.Provider>\n  );\n}; ","import React, { createContext, useContext, useMemo } from 'react';\nimport { useChatHistory } from './ChatHistoryContext';\nimport { useChatStatus } from './ChatStatusContext';\n\n// Context for read-only chat state\nconst ChatStateContext = createContext();\n\n// Hook to consume chat state\nexport const useChatState = () => {\n  const context = useContext(ChatStateContext);\n  if (context === undefined) {\n    throw new Error('useChatState must be used within a ChatStateProvider');\n  }\n  return context;\n};\n\n// Provider component for chat state\nexport const ChatStateProvider = ({ children }) => {\n  const { chatHistory, chatHistoryRef } = useChatHistory();\n  const { isWaitingForResponse, error } = useChatStatus();\n\n  const value = useMemo(() => ({\n    chatHistory,\n    chatHistoryRef,\n    isWaitingForResponse,\n    error\n  }), [chatHistory, chatHistoryRef, isWaitingForResponse, error]);\n\n  return (\n    <ChatStateContext.Provider value={value}>\n      {children}\n    </ChatStateContext.Provider>\n  );\n}; ","import React, { createContext, useContext, useMemo, useCallback, useRef } from 'react';\nimport { useApi } from './ApiContext';\nimport { useModel } from './ModelContext';\nimport { useSettings } from './SettingsContext';\nimport { useAuth } from './AuthContext';\nimport { useChatHistory } from './ChatHistoryContext';\nimport { useChatStatus } from './ChatStatusContext';\nimport { usePerformanceMetrics } from './PerformanceMetricsContext';\nimport { useStreamingEvents } from './StreamingEventsContext';\nimport { fetchWithRetry } from '../utils/network';\nimport { useToast } from './ToastContext';\n\n// Context for chat actions (controls)\nconst ChatControlContext = createContext();\n\n// Hook to consume chat controls\nexport const useChatControl = () => {\n  const context = useContext(ChatControlContext);\n  if (context === undefined) {\n    throw new Error('useChatControl must be used within a ChatControlProvider');\n  }\n  return context;\n};\n\n// Provider component for chat controls\nexport const ChatControlProvider = ({ children }) => {\n  // Ref to track client-generated request ID for non-streaming\n  const currentRequestIdRef = useRef(null);\n  const { apiUrl } = useApi();\n  const { selectedModel } = useModel();\n  const { settings, getModelAdjustedSettings } = useSettings();\n  const { idToken } = useAuth();\n  const { chatHistoryRef, setChatHistory, addMessageToHistory } = useChatHistory();\n  const { setIsWaitingForResponse, setError } = useChatStatus();\n  const { resetPerformanceMetrics, startPerformanceTimer, setTokenMetricsForLastMessage } = usePerformanceMetrics();\n  const { streamMessageWithFetch, stopStreaming } = useStreamingEvents();\n  const { showToast } = useToast();\n\n  // Helpers\n  const formatModelIdentifier = useCallback((model) => {\n    if (!model || !model.provider || !model.id) return null;\n    return `${model.provider}/${model.id}`;\n  }, []);\n\n  // Action: sendMessage\n  const sendMessage = useCallback(async (message, editIndex = null) => {\n    // Generate unique client-side requestId\n    const clientRequestId = (typeof crypto !== 'undefined' && crypto.randomUUID)\n      ? crypto.randomUUID()\n      : Math.random().toString(36).substring(2) + Date.now().toString(36);\n    currentRequestIdRef.current = clientRequestId;\n    const isEditing = editIndex !== null && Number.isInteger(editIndex) && editIndex >= 0;\n    if (settings.streaming) {\n      return streamMessageWithFetch(message, isEditing ? editIndex : null);\n    }\n    if (!message || !selectedModel) {\n      setError('Please enter a message and select a model');\n      return null;\n    }\n    const modelId = formatModelIdentifier(selectedModel);\n    if (!modelId) {\n      setError('Invalid model selection');\n      return null;\n    }\n    let userMessage;\n    if (isEditing) {\n      setChatHistory(prev => {\n        const truncated = prev.slice(0, editIndex);\n        const original = prev[editIndex];\n        // Preserve original id/timestamp, only update content\n        userMessage = { ...original, content: message };\n        return [...truncated, userMessage];\n      });\n    } else {\n      userMessage = addMessageToHistory('user', message);\n    }\n    const requestStartTime = Date.now();\n    setIsWaitingForResponse(true);\n    setError(null);\n    try {\n      const adjusted = getModelAdjustedSettings(selectedModel);\n      const historyForApi = chatHistoryRef.current.map(({ metrics, ...m }) => m);\n      if (adjusted.systemPrompt && (!historyForApi.length || historyForApi[0].role !== 'system')) {\n        historyForApi.unshift({ role: 'system', content: adjusted.systemPrompt, timestamp: Date.now()-1 });\n      }\n      historyForApi.push(userMessage);\n      const payload = { \n        requestId: clientRequestId,\n        model: modelId, messages: historyForApi,\n        temperature: adjusted.temperature,\n        max_tokens: adjusted.max_tokens,\n        top_p: adjusted.top_p,\n        frequency_penalty: adjusted.frequency_penalty,\n        presence_penalty: adjusted.presence_penalty\n      };\n      resetPerformanceMetrics();\n      startPerformanceTimer();\n      const headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' };\n      if (idToken) headers['Authorization'] = `Bearer ${idToken}`;\n      const response = await fetchWithRetry(new URL('/api/chat/completions', apiUrl).toString(), {\n        method: 'POST', headers, body: JSON.stringify(payload)\n      });\n      if (!response.ok) {\n        let errMsg = `API error: ${response.status}`;\n        try { const errData = await response.json(); errMsg = errData?.error?.message || errData?.message || errMsg; } catch {};\n        throw new Error(errMsg);\n      }\n      const data = await response.json();\n      console.log('Received non-streaming chat data:', data);\n\n      // Handle server-sent error in response payload\n      if (data.error?.message || data.finishReason === 'error') {\n        const errMsg = data.error?.message || 'Error occurred during generation';\n        console.error('Error in API response:', errMsg);\n        setError(errMsg);\n        const rawUsage = data.usage || {};\n        const promptTokens = rawUsage.promptTokens ?? rawUsage.prompt_tokens ?? 0;\n        const completionTokens = rawUsage.completionTokens ?? rawUsage.completion_tokens ?? 0;\n        const totalTokens = rawUsage.totalTokens ?? rawUsage.total_tokens ?? completionTokens;\n        const requestEndTime = Date.now();\n        const elapsed = requestEndTime - requestStartTime;\n        const tokensPerSecond = elapsed ? Math.round((completionTokens / (elapsed / 1000)) * 10) / 10 : null;\n        const errorMetrics = {\n          startTime: requestStartTime,\n          endTime: requestEndTime,\n          elapsedTime: elapsed,\n          tokenCount: completionTokens,\n          tokensPerSecond,\n          isComplete: true,\n          timeToFirstToken: null,\n          promptTokens,\n          completionTokens,\n          totalTokens,\n          finishReason: data.finishReason || 'error',\n          error: true\n        };\n        addMessageToHistory('assistant', errMsg, errorMetrics);\n        return null;\n      }\n      const content = data.content || 'No Response returned';\n      // Use server-provided usage tokens directly\n      const rawUsage = data.usage || {};\n      const promptTokens = rawUsage.promptTokens ?? rawUsage.prompt_tokens ?? 0;\n      const completionTokens = rawUsage.completionTokens ?? rawUsage.completion_tokens ?? 0;\n      const totalTokens = rawUsage.totalTokens ?? rawUsage.total_tokens ?? completionTokens;\n      // Compute timing and rates\n      const requestEndTime = Date.now();\n      const elapsed = requestEndTime - requestStartTime;\n      const tokensForMetrics = completionTokens > 0 ? completionTokens : 0;\n      const tokensPerSecond = elapsed\n        ? Math.round((tokensForMetrics / (elapsed / 1000)) * 10) / 10\n        : null;\n      const finalMetrics = {\n        startTime: requestStartTime,\n        endTime: requestEndTime,\n        elapsedTime: elapsed,\n        tokenCount: tokensForMetrics,\n        tokensPerSecond,\n        isComplete: true,\n        timeToFirstToken: null,\n        promptTokens,\n        completionTokens,\n        totalTokens,\n        finishReason: data.finishReason\n      };\n      addMessageToHistory('assistant', content, finalMetrics);\n      return content;\n    } catch (err) {\n      console.error('Error sending message:', err);\n      setError(err.message);\n      // Show the server error as an assistant reply\n      addMessageToHistory('assistant', err.message || 'An error occurred');\n      return null;\n    } finally {\n      // Clear the clientRequestId after completion\n      currentRequestIdRef.current = null;\n      setIsWaitingForResponse(false);\n    }\n  }, [\n    apiUrl,\n    selectedModel,\n    settings.streaming,\n    getModelAdjustedSettings,\n    idToken,\n    chatHistoryRef,\n    setChatHistory,\n    addMessageToHistory,\n    streamMessageWithFetch,\n    formatModelIdentifier,\n    resetPerformanceMetrics,\n    startPerformanceTimer,\n    setError,\n    setIsWaitingForResponse,\n  ]);\n\n  // Action: stopGeneration\n  const stopGenerationAction = useCallback(async () => {\n    stopStreaming();\n    return true;\n  }, [stopStreaming]);\n\n  // Action: clearChat\n  const clearChat = useCallback(() => {\n    setChatHistory([]);\n    resetPerformanceMetrics();\n  }, [setChatHistory, resetPerformanceMetrics]);\n\n  // Action: newChat\n  const newChat = useCallback(() => {\n    if (chatHistoryRef.current.length > 0) {\n      clearChat();\n    }\n  }, [chatHistoryRef, clearChat]);\n\n  // Action: resetChat\n  const resetChat = useCallback(() => {\n    if (chatHistoryRef.current.length === 0) return;\n    \n    if (window.confirm('Are you sure you want to clear the current chat?')) {\n      clearChat();\n      showToast({ type: 'info', message: 'Chat has been cleared' });\n    }\n  }, [chatHistoryRef, clearChat, showToast]);\n\n  // Action: downloadChat\n  const downloadChat = useCallback(() => {\n    const history = chatHistoryRef.current;\n    if (!history.length) return;\n    try {\n      const formatted = history.map(msg => {\n        const role = msg.role === 'user'\n          ? 'You'\n          : msg.role === 'assistant'\n            ? selectedModel?.name || 'Assistant'\n            : msg.role;\n        let contentText = '';\n        if (typeof msg.content === 'string') {\n          contentText = msg.content;\n        } else if (Array.isArray(msg.content)) {\n          contentText = msg.content\n            .map(part => part.type === 'text' ? part.text : '[Image]')\n            .join('\\n');\n        }\n        return `${role}: ${contentText}\\n`;\n      }).join('');\n      const blob = new Blob([formatted], { type: 'text/plain' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `chat_${new Date().toISOString().replace(/:/g, '-')}.txt`;\n      document.body.appendChild(a);\n      a.click();\n      showToast({ type: 'success', message: 'Chat downloaded successfully' });\n      // Clean up anchor and URL\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n    } catch (error) {\n      console.error(\"Error downloading chat:\", error);\n      showToast({ type: 'error', message: 'Failed to download chat. Please try again.' });\n    }\n  }, [chatHistoryRef, selectedModel, showToast]);\n\n  // Action: getOrCreateConversation (stub)\n  const getOrCreateConversation = useCallback((conversationId) => {\n    // implement or delegate\n  }, []);\n\n  // Value\n  const value = useMemo(() => ({\n    sendMessage,\n    stopGeneration: stopGenerationAction,\n    addMessageToHistory,\n    clearChat,\n    newChat,\n    resetChat,\n    downloadChat,\n    getOrCreateConversation,\n    setTokenMetricsForLastMessage\n  }), [\n    sendMessage,\n    stopGenerationAction,\n    addMessageToHistory,\n    clearChat,\n    newChat,\n    resetChat,\n    downloadChat,\n    getOrCreateConversation,\n    setTokenMetricsForLastMessage\n  ]);\n\n  return (\n    <ChatControlContext.Provider value={value}>\n      {children}\n    </ChatControlContext.Provider>\n  );\n}; ","import { createContext, useContext, useMemo, useEffect } from 'react';\nimport { ThemeProvider } from './ThemeContext';\nimport { ApiProvider } from './ApiContext';\nimport { ModelProvider } from './ModelContext';\nimport { SettingsProvider } from './SettingsContext';\nimport { ChatStatusProvider } from './ChatStatusContext';\nimport { ChatHistoryProvider } from './ChatHistoryContext';\nimport { PerformanceMetricsProvider } from './PerformanceMetricsContext';\nimport { StreamingEventsProvider } from './StreamingEventsContext';\nimport { ChatStateProvider } from './ChatStateContext';\nimport { ChatControlProvider } from './ChatControlContext';\n\n// Create a context for managing initialization state\nconst InitializationContext = createContext(null);\n\nexport const useInitialization = () => {\n  const context = useContext(InitializationContext);\n  if (!context) {\n    throw new Error('useInitialization must be used within an InitializationProvider');\n  }\n  return context;\n};\n\n/**\n * ContextManager component that handles all context providers\n * and their initialization states\n */\nexport const ContextManager = ({ children }) => {\n  // Memoize the initialization state to prevent unnecessary re-renders\n  const initializationState = useMemo(() => ({\n    isInitialized: false,\n    setInitialized: (value) => {\n      initializationState.isInitialized = value;\n    }\n  }), []);\n  // Mark as initialized once on mount\n  useEffect(() => {\n    initializationState.setInitialized(true);\n  }, [initializationState]);\n\n  return (\n    <InitializationContext.Provider value={initializationState}>\n      <ThemeProvider>\n        <ApiProvider>\n          <ModelProvider>\n            <SettingsProvider>\n              <ChatStatusProvider>\n                <ChatHistoryProvider>\n                  <PerformanceMetricsProvider>\n                    <StreamingEventsProvider>\n                      <ChatStateProvider>\n                        <ChatControlProvider>\n                          {children}\n                        </ChatControlProvider>\n                      </ChatStateProvider>\n                    </StreamingEventsProvider>\n                  </PerformanceMetricsProvider>\n                </ChatHistoryProvider>\n              </ChatStatusProvider>\n            </SettingsProvider>\n          </ModelProvider>\n        </ApiProvider>\n      </ThemeProvider>\n    </InitializationContext.Provider>\n  );\n}; ","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Spinner.module.css';\n\n/**\n * Standardized Spinner for all loading states\n * @param {Object} props\n * @param {string} props.size - One of 'small', 'medium', 'large'\n * @param {string} props.tag - Optional loading tag for context\n */\nconst Spinner = ({ size = 'medium', tag }) => {\n  const sizeClass = styles[`Spinner--${size}`] || styles['Spinner--medium'];\n  return (\n    <div className={`${styles.Spinner} ${sizeClass}`} data-loading-tag={tag} aria-label=\"Loading\" role=\"status\">\n      <div className={styles.Spinner__loader} />\n    </div>\n  );\n};\n\nSpinner.propTypes = {\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n  tag: PropTypes.string\n};\n\nexport default Spinner; ","/**\n * Performance monitoring utility\n * Tracks various performance metrics and provides methods for optimization\n */\n\n// Performance marks for tracking different stages of app initialization\nconst PERFORMANCE_MARKS = {\n  APP_START: 'app-start',\n  CONTEXT_INIT: 'context-init',\n  COMPONENT_LOAD: 'component-load',\n  IMPORTANT_COMPONENTS_LOADED: 'important-components-loaded',\n  FORMATTING_COMPONENTS_LOADED: 'formatting-components-loaded',\n  MODEL_SELECTOR_COMPONENTS_LOADED: 'model-selector-components-loaded',\n  FIRST_PAINT: 'first-paint',\n  FIRST_CONTENTFUL_PAINT: 'first-contentful-paint',\n  APP_INTERACTIVE: 'app-interactive',\n  APP_READY: 'app-ready'\n};\n\n// Performance measures for tracking durations\nconst PERFORMANCE_MEASURES = {\n  TOTAL_LOAD: 'total-load-time',\n  CONTEXT_INIT: 'context-init-time',\n  COMPONENT_LOAD: 'component-load-time',\n  TIME_TO_INTERACTIVE: 'time-to-interactive',\n  IMPORTANT_LOAD_TIME: 'important-load-time',\n  FORMATTING_LOAD_TIME: 'formatting-load-time',\n  MODEL_SELECTOR_LOAD_TIME: 'model-selector-load-time'\n};\n\nclass PerformanceMonitor {\n  constructor() {\n    this.marks = new Set();\n    this.measures = new Set();\n    \n    // Automatically track paint metrics if browser supports it\n    if (typeof window !== 'undefined' && 'performance' in window && 'PerformanceObserver' in window) {\n      this.trackPaintMetrics();\n    }\n  }\n\n  /**\n   * Track browser paint metrics (FP, FCP)\n   */\n  trackPaintMetrics() {\n    try {\n      // Create a performance observer to track paint events\n      const paintObserver = new PerformanceObserver((entries) => {\n        entries.getEntries().forEach(entry => {\n          const markName = entry.name === 'first-paint' \n            ? PERFORMANCE_MARKS.FIRST_PAINT \n            : PERFORMANCE_MARKS.FIRST_CONTENTFUL_PAINT;\n          \n          // Add our own performance mark based on the browser's timing\n          performance.mark(markName);\n          this.marks.add(markName);\n          \n          // Measure time from app start to this paint event\n          const measureName = entry.name === 'first-paint' \n            ? 'time-to-first-paint' \n            : 'time-to-first-contentful-paint';\n          \n          try {\n            performance.measure(measureName, PERFORMANCE_MARKS.APP_START, markName);\n            this.measures.add(measureName);\n          } catch (error) {\n            // Handle case where APP_START mark may not exist yet\n            console.warn(`Failed to measure ${measureName}:`, error);\n          }\n        });\n      });\n      \n      // Start observing paint events\n      paintObserver.observe({ entryTypes: ['paint'] });\n    } catch (error) {\n      console.warn('Failed to track paint metrics:', error);\n    }\n  }\n\n  /**\n   * Mark a specific point in time\n   * @param {string} markName - Name of the performance mark\n   */\n  mark(markName) {\n    if (performance && performance.mark) {\n      performance.mark(markName);\n      this.marks.add(markName);\n    }\n  }\n\n  /**\n   * Measure duration between two marks\n   * @param {string} measureName - Name of the performance measure\n   * @param {string} startMark - Name of the start mark\n   * @param {string} endMark - Name of the end mark\n   */\n  measure(measureName, startMark, endMark) {\n    if (performance && performance.measure) {\n      try {\n        performance.measure(measureName, startMark, endMark);\n        this.measures.add(measureName);\n      } catch (error) {\n        console.warn(`Failed to measure ${measureName}:`, error);\n      }\n    }\n  }\n\n  /**\n   * Get all performance measures\n   * @returns {Array} Array of performance measure entries\n   */\n  getMeasures() {\n    if (performance && performance.getEntriesByType) {\n      return performance.getEntriesByType('measure');\n    }\n    return [];\n  }\n\n  /**\n   * Clear all performance marks and measures\n   */\n  clear() {\n    if (performance) {\n      performance.clearMarks();\n      performance.clearMeasures();\n      this.marks.clear();\n      this.measures.clear();\n    }\n  }\n\n  /**\n   * Log performance metrics to console\n   */\n  logMetrics() {\n    const measures = this.getMeasures();\n    console.group('Performance Metrics');\n    measures.forEach(measure => {\n      console.log(`${measure.name}: ${measure.duration.toFixed(2)}ms`);\n    });\n    \n    // Log Web Vitals if available\n    if ('web-vitals' in window) {\n      console.log('Web Vitals will be reported separately');\n    }\n    \n    console.groupEnd();\n  }\n}\n\n// Export singleton instance\nexport const performanceMonitor = new PerformanceMonitor();\n\n// Export constants\nexport { PERFORMANCE_MARKS, PERFORMANCE_MEASURES }; ","/* eslint-disable no-unused-vars */\nimport React, { lazy, Suspense, useEffect, useState } from 'react';\nimport { AuthProvider, useAuth } from './contexts/AuthContext';\nimport { ContextManager } from './contexts/ContextManager';\nimport Spinner from './components/common/Spinner';\nimport { performanceMonitor, PERFORMANCE_MARKS, PERFORMANCE_MEASURES } from './utils/performance';\n// (Formatting preloads removed - we rely on on-demand loading)\n\n// === Phase 1: Critical (lazy) components & essential import definitions ===\n// Define all essential dynamic imports once for reuse\nconst ESSENTIAL_IMPORTS = {\n  layout: () => import(/* webpackPreload: true, webpackChunkName: \"layout\" */ './components/layout/Layout'),\n  chatContainer: () => import(/* webpackPreload: true, webpackChunkName: \"chat-container\" */ './components/chat/ChatContainer'),\n  chatInput: () => import(/* webpackPreload: true, webpackChunkName: \"chat-input\" */ './components/chat/ChatInput'),\n  modelDropdown: () => import(/* webpackPreload: true, webpackChunkName: \"models-dropdown\" */ './components/models/ModelDropdown'),\n  sidebar: () => import(/* webpackPreload: true, webpackChunkName: \"layout-sidebar\" */ './components/layout/Sidebar'),\n  themeToggle: () => import(/* webpackPreload: true, webpackChunkName: \"common-theme\" */ './components/common/ThemeToggle'),\n  sidebarToggle: () => import(/* webpackPreload: true, webpackChunkName: \"layout-sidebar-toggle\" */ './components/layout/SidebarToggle'),\n  messageList: () => import(/* webpackPreload: true, webpackChunkName: \"chat-messagelist\" */ './components/chat/MessageList'),\n  globalMetrics: () => import(/* webpackPreload: true, webpackChunkName: \"chat-globalmetrics\" */ './components/chat/GlobalMetricsBar'),\n  moreActions: () => import(/* webpackPreload: true, webpackChunkName: \"common-more-actions\" */ './components/common/MoreActions'),\n};\n// Lazy-load the layout using the shared import\nconst Layout = lazy(ESSENTIAL_IMPORTS.layout);\n// Lazy-load the login modal separately\nconst LoginModal = lazy(() => import(/* webpackChunkName: \"login-modal\" */ './components/auth/LoginModal'));\n\n// Only essential preload for core components (plus idle-loaded heavy chunks)\nconst PRELOAD_IMPORTS = {\n  essential: Object.values(ESSENTIAL_IMPORTS),\n  heavy: [\n    () => import(/* webpackChunkName: \"markdown-renderer\" */ './components/common/LazyMarkdownRenderer/MarkdownRenderer'),\n    () => import(/* webpackChunkName: \"streaming-message\" */ './components/chat/ChatMessage/StreamingMessage'),\n    () => import(/* webpackChunkName: \"firebase-config\" */ './firebaseConfig')\n              .then(() => {\n                window.dispatchEvent(new Event('firebaseInitialized'));\n              }),\n  ]\n};\n\n// Remove unused `preloadAsync` helper; keep `preloadSync` for essential sync loads\nconst preloadSync = async (imports) => {\n  for (const fn of imports) {\n    await fn();\n  }\n};\n// Simplify idlePreload: on idle, batch load all heavy imports\nconst idlePreload = (imports, onComplete) => {\n  requestIdleCallback(() => {\n    imports.forEach((fn, idx) => fn()\n      .then(() => onComplete(idx))\n      .catch(() => {})\n    );\n  });\n};\n\n/**\n * AppShell handles phased loading of chunks for optimal startup.\n */\nfunction AppShell() {\n  const [shellReady, setShellReady] = useState(false);\n  const [firebaseReady, setFirebaseReady] = useState(false);\n  const { isLoggingIn, setIsLoggingIn } = useAuth();\n\n  useEffect(() => {\n    let canceled = false;\n\n    async function runPhases() {\n      // Phase 1: Essential components\n      performanceMonitor.mark(PERFORMANCE_MARKS.APP_START);\n      console.log('[Phase1] Loading essential components...');\n      try {\n        await preloadSync(PRELOAD_IMPORTS.essential);\n        performanceMonitor.mark(PERFORMANCE_MARKS.IMPORTANT_COMPONENTS_LOADED);\n        performanceMonitor.measure(\n          PERFORMANCE_MEASURES.IMPORTANT_LOAD_TIME,\n          PERFORMANCE_MARKS.APP_START,\n          PERFORMANCE_MARKS.IMPORTANT_COMPONENTS_LOADED\n        );\n        performanceMonitor.mark(PERFORMANCE_MARKS.COMPONENT_LOAD);\n        performanceMonitor.measure(\n          PERFORMANCE_MEASURES.COMPONENT_LOAD,\n          PERFORMANCE_MARKS.APP_START,\n          PERFORMANCE_MARKS.COMPONENT_LOAD\n        );\n        console.log('[Phase1] Essential components loaded');\n      } catch (error) {\n        console.error('[Phase1] Error loading essential components:', error);\n      }\n\n      // Show initial shell before heavy loads\n      requestAnimationFrame(async () => {\n        if (canceled) return;\n        setShellReady(true);\n        performanceMonitor.mark(PERFORMANCE_MARKS.APP_INTERACTIVE);\n        performanceMonitor.measure(\n          PERFORMANCE_MEASURES.TIME_TO_INTERACTIVE,\n          PERFORMANCE_MARKS.APP_START,\n          PERFORMANCE_MARKS.APP_INTERACTIVE\n        );\n        console.log('[Phase1] App is interactive; idle-preloading heavy components');\n        idlePreload(PRELOAD_IMPORTS.heavy, (idx) => {\n          if (idx === PRELOAD_IMPORTS.heavy.length - 1) {\n            console.log('[Phase2] Heavy components idle-preloaded');\n            setFirebaseReady(true);\n          }\n        });\n      });\n    }\n\n    runPhases();\n    return () => {\n      canceled = true;\n      performanceMonitor.clear();\n    };\n  }, []);\n\n  // Spinner until shell is ready\n  if (!shellReady) {\n    return (\n      <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', height: '100vh' }}>\n        <Spinner size=\"medium\" />\n      </div>\n    );\n  }\n\n  // Shell ready: render layout + chat UI\n  return (\n    <>\n      <Suspense fallback={<Spinner size=\"small\" />}><Layout /></Suspense>\n      {isLoggingIn && firebaseReady && (\n        <Suspense fallback={<Spinner size=\"small\" />}>\n          <LoginModal onClose={() => setIsLoggingIn(false)} />\n        </Suspense>\n      )}\n    </>\n  );\n}\n\n/** Root App with providers **/\nexport default function App() {\n  return (\n    <AuthProvider>\n      <ContextManager>\n        <AppShell />\n      </ContextManager>\n    </AuthProvider>\n  );\n} ","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(/* webpackChunkName: \"web-vitals\" */ 'web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (import.meta.env.NODE_ENV === 'production' && 'service-worker' in navigator) {\n    const publicUrl = new URL(import.meta.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${import.meta.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              console.log('New content is available and will be used when all tabs for this page are closed.');\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              console.log('Content is cached for offline use.');\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n} ","import { useEffect, useRef } from 'react';\nimport { useLoading } from '../../../contexts/LoadingContext';\nimport { useToast } from '../../../contexts/ToastContext';\n\nconst GlobalLoadingIndicator = () => {\n  // Only show global loading overlay for authentication operations\n  const [authLoading] = useLoading('auth');\n  const isLoading = authLoading;\n  const { showToast, dismissToast } = useToast();\n  const toastIdRef = useRef(null);\n  useEffect(() => {\n    if (isLoading) {\n      // show persistent loading toast for heavy operations\n      toastIdRef.current = showToast({ type: 'info', message: 'Loading in progress...', duration: 0 });\n    } else if (toastIdRef.current) {\n      // dismiss loading toast and show completion\n      dismissToast(toastIdRef.current);\n      showToast({ type: 'success', message: 'Loading complete', duration: 2000 });\n      toastIdRef.current = null;\n    }\n    return () => {\n      if (toastIdRef.current) {\n        dismissToast(toastIdRef.current);\n        toastIdRef.current = null;\n      }\n    };\n  }, [isLoading, showToast, dismissToast]);\n\n  // No overlay spinner; toasts still handled in useEffect\n  return null;\n};\n\nexport default GlobalLoadingIndicator; ","import './utils/polyfills';\nimport React, { Suspense } from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './styles/common/colors.css';\nimport './styles/common/tokens.css';\nimport './styles/theme.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport { ToastProvider } from './contexts/ToastContext';\nimport { LoadingProvider } from './contexts/LoadingContext';\nimport GlobalLoadingIndicator from './components/common/GlobalLoadingIndicator';\n\n// Set initial theme class on <body> so theme mappings (light-mode/dark-mode) take effect\nconst prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n// Apply body class for index.css mappings\ndocument.body.classList.add(prefersDark ? 'dark-mode' : 'light-mode');\n\n// Create root and render app with Suspense\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <ToastProvider>\n      <LoadingProvider>\n        <Suspense fallback={\n          <div style={{ \n            display: 'flex', \n            justifyContent: 'center', \n            alignItems: 'center', \n            height: '100vh' \n          }}>\n            Loading...\n          </div>\n        }>\n          <App />\n        </Suspense>\n        <GlobalLoadingIndicator />\n      </LoadingProvider>\n    </ToastProvider>\n  </React.StrictMode>\n);\n\n// Report web vitals for performance monitoring\nreportWebVitals(console.log);\n\n// Register service worker for PWA support\nserviceWorkerRegistration.register({\n  onUpdate: registration => {\n    // When new content is available, show a notification\n    const waitingServiceWorker = registration.waiting;\n    if (waitingServiceWorker) {\n      waitingServiceWorker.addEventListener(\"statechange\", event => {\n        if (event.target.state === \"activated\") {\n          window.location.reload();\n        }\n      });\n      waitingServiceWorker.postMessage({ type: \"SKIP_WAITING\" });\n    }\n  }\n}); "],"file":"assets/index-DAcZPh8S.js"}