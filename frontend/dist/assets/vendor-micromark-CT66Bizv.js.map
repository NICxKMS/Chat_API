{"version":3,"file":"vendor-micromark-CT66Bizv.js","sources":["../../node_modules/micromark/node_modules/micromark-util-character/index.js","../../node_modules/micromark/lib/initialize/content.js","../../node_modules/micromark/lib/initialize/document.js","../../node_modules/micromark/lib/initialize/flow.js","../../node_modules/micromark/lib/initialize/text.js","../../node_modules/micromark/lib/create-tokenizer.js","../../node_modules/micromark/lib/constructs.js","../../node_modules/micromark/lib/parse.js","../../node_modules/micromark/lib/preprocess.js","../../node_modules/micromark/lib/postprocess.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {void}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {void}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | void}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n\n    // @ts-expect-error `Buffer` does allow an encoding.\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n"],"names":["markdownLineEnding","code","content","tokenize","effects","contentStart","attempt","this","parser","constructs","contentInitial","consume","enter","exit","factorySpace","lineStart","previous","token","contentType","next","data","document","self","stack","childFlow","childToken","lineStartOffset","continued","start","length","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","events","point","indexBeforeFlow","type","end","exitContainers","index","Object","assign","splice","slice","documentContinued","currentConstruct","concrete","flowStart","interrupt","Boolean","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","line","offset","containerContinue","push","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","size","entry","call","ok","nok","disable","null","includes","initial","blankLine","flowInitial","afterConstruct","resolver","resolveAll","createResolver","string","initializeFactory","text","field","notText","atBreak","list","resolveAllLineSuffixes","extraResolver","context","eventIndex","chunks","tabs","bufferIndex","chunk","charCodeAt","column","_index","_bufferIndex","createTokenizer","initialize","from","columnStart","resolveAllConstructs","accountForPotentialSkip","fields","pop","constructFactory","construct","info","addResult","onsuccessfulcheck","sliceSerialize","expandTabs","result","atTab","value","String","fromCharCode","join","serializeChunks","main","state","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","shift","sliceChunks","chunkIndex","go","_","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","Array","isArray","handleListOfConstructs","map","def","all","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","partial","name","create","resolve","resolveTo","blockQuote","definition","codeIndented","headingAtx","thematicBreak","setextUnderline","htmlFlow","codeFenced","characterReference","characterEscape","lineEnding","labelStartImage","attention","autolink","htmlText","labelStartLink","hardBreakEscape","labelEnd","codeText","insideSpan","resolveText","parse","options","defined","combineExtensions","defaultConstructs","extensions","search","preprocess","atCarriageReturn","buffer","encoding","match","startPosition","endPosition","toString","lastIndex","exec","Math","ceil","postprocess","subtokenize"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9]}