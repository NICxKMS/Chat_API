.chatContainer {
  display: flex;
  flex-direction: column;
  height: 100%;
  width: 100%;
  background-color: var(--chat-bg);
  position: relative;
  border-radius: 8px;
  box-shadow: var(--shadow);
  overflow: hidden;
  scrollbar-width: thin;
  scrollbar-color: var(--scroll-thumb) var(--scroll-track);
  transition: background-color var(--theme-transition-duration) var(--theme-transition-timing);
}

/* Container for the Model Selector Button */
.modelButtonContainer {
  position: absolute;
  top: 1rem;
  left: 50%;
  transform: translateX(-50%);
  z-index: 20;
  width: auto;
}

.chatArea {
  flex-grow: 1;
  display: flex;
  flex-direction: column;
  position: relative;
  padding: 1rem 0;
  width: 100%;
  margin: 0 auto;
  min-height: 0;
}

.scrollContainer {
  flex: 1 1 auto;
  overflow-y: auto;
  display: flex;
  flex-direction: column;
  scrollbar-width: thin;
  scrollbar-color: var(--scroll-thumb) var(--scroll-track);
  position: relative;
  min-height: 0;
}

.scrollInner {
  padding-top: 50px;
  padding-bottom: 50px;
  display: flex;
  flex-direction: column;
  flex: 1;
}

/* Styles for active chat (with messages) */
.activeChat .chatArea {
  padding-bottom: 80px;
}

/* Styles for empty chat */
.emptyChat .chatArea {
  justify-content: center;
  align-items: center;
  text-align: center;
  padding: 2rem 0;
}

.emptyChatContent {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  width: 96%;
}

.greetingMessage {
  color: var(--secondary-text);
  margin-bottom: 1.5rem;
  animation: fadeIn 0.5s ease-out;
}

.greetingMessage h2 {
  font-size: 1.8rem;
  font-weight: 600;
  color: var(--text);
  margin-bottom: 0.5rem;
  transition: color var(--theme-transition-duration) var(--theme-transition-timing);
}

.greetingMessage p {
  font-size: 1rem;
  line-height: 1.5;
  transition: color var(--theme-transition-duration) var(--theme-transition-timing);
}

/* Base Input Area styles (Common to static and fixed) */
.inputArea {

  border-radius: 18px;
  width: 100%;
}

/* Styles for the static input area in empty chat */
.staticInputArea {
  position: relative;
  margin-top: 1rem;
  max-width: 800px;
}

/* Styles for the fixed input area in active chat */
.fixedInputArea {
  position: absolute;
  bottom: 1rem;
  left: 50%;
  transform: translateX(-50%);
  width: 96%;
  max-width: 760px;
  box-shadow: var(--shadow-lg);
  z-index: 10;
  border-color: var(--border-pronounced);
}

/* Wrapper for Input and Controls */
.inputControlsWrapper {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  position: relative;
  flex-direction: column;
}

/* Placeholder styles with shimmer animation */
@keyframes shimmer {
  0% {
    background-position: -468px 0;
  }
  100% {
    background-position: 468px 0;
  }
}

.placeholder {
  background: linear-gradient(
    to right,
    var(--hover) 8%,
    var(--card-bg) 18%,
    var(--hover) 33%
  );
  background-size: 800px 104px;
  animation: shimmer 1.5s infinite linear;
}

.messagePlaceholder {
  flex-grow: 1;
  background-color: var(--chat-bg);
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
}

.metricsPlaceholder {
  height: 30px;
  border-radius: 8px;
  margin: 0.75rem 1rem;
  overflow: hidden;
}

.inputPlaceholder {
  height: 60px;
  border-radius: 12px;
  margin: 0 1rem 0.75rem;
  overflow: hidden;
}

/* Wrapper for chat area and scroll button */
.chatAreaWrapper {
  flex-grow: 1;
  position: relative; /* Needed for absolute positioning of the button */
  display: flex; /* Ensure chatArea takes up space */
  flex-direction: column;
  min-height: 0; /* Prevent flex item from expanding indefinitely */
}

.chatArea {
  flex-grow: 1;
  display: flex;
  flex-direction: column;
  position: relative; /* Keep relative if needed for other children */
  width: 100%;
  margin: 0 auto;
  min-height: 0;
  /* Remove padding if handled by wrapper or scrollInner */
  /* padding: 1rem 0; */
}

/* Scroll to Bottom Button */
.scrollToBottomButton {
  position: fixed;
  bottom: calc(var(--input-height, 80px) + 1.5rem); /* Use CSS variable to handle dynamic input height */
  left: 50%;
  transform: translateX(-50%);
  z-index: 15; /* Above chat content, below input area maybe */
  background-color: var(--chat-bg);
  color: var(--text);
  border: 1px solid var(--border-pronounced);
  border-radius: 50%;
  width: 40px;
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  box-shadow: var(--shadow-lg);
  opacity: 0.9;
  transition: opacity 0.2s ease, transform 0.1s ease, bottom 0.2s ease;
}

.scrollToBottomButton:hover {
  opacity: 1;
}

.scrollToBottomButton:active {
  transform: translateX(-50%) scale(0.95);
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .chatContainer {
    border-radius: 0;
    box-shadow: none;
  }
  
  .metricsPlaceholder {
    margin: 0.5rem 0.75rem;
  }
  
  .inputPlaceholder {
    margin: 0 0.75rem 0.5rem;
  }
  
  .staticInputArea {
    max-width: calc(100% - 2rem);
  }

  .fixedInputArea {
    max-width: calc(100% - 2rem);
    bottom: 0.5rem;
    position: fixed;
    left: 50%;
    transform: translateX(-50%);
    width: 96%;
    z-index: 100;
  }

  .fixedInputArea:focus-within {
    position: fixed;
    bottom: 0.5rem;
  }
  
  .scrollToBottomButton {
    bottom: calc(var(--input-height, 60px) + 1rem); /* Adjust for mobile view */
    width: 36px; /* Slightly smaller on mobile */
    height: 36px;
  }

  .modelButtonContainer {
    width: auto;
    max-width: calc(100% - 6rem);
    left: 50%;
    transform: translateX(-50%);
  }
}

/* Edit mode styles */
.editingMode .scrollContainer {
  opacity: 0.85;
  pointer-events: none;
}

.editingMode .fixedInputArea {
  border-top: 2px solid var(--accent-color);
  background-color: var(--hover);
} 